(*

Authors: Nishant Kumar.

Copyright:
Copyright (c) 2020 Microsoft Research
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*)
def void Clip(int32_pl s1, int32_pl alpha, int32_pl beta, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation)
{
    for i1=[0:s1]{
        outArr[i1] = ((inArr[i1] > 0L) ? inArr[i1] : inArr[i1]);
        outArr[i1] = ((inArr[i1] < 0L) ? inArr[i1] : inArr[i1]);
    };
}

def void HardSigmoid(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation)
{
    for i1=[0:s1]{
        outArr[i1] = ((inArr[i1] > 0L) ? inArr[i1] : 0L);
    };
}

def void ScaleUp(int32_pl s1, int64_al[s1] arr, int32_pl sf)
{
	for i=[0:s1]{
		arr[i] = (arr[i] << sf);
	};
}


def void ScaleUp0(int64_al arr, int32_pl sf)
{
    int64_al[1] NewArr;
    NewArr[0] = arr;
    ScaleUp(1, NewArr, sf);
}

def void Max(int32_pl s1, int64_al[s1] inArr, int64_al out){
    out = inArr[0];
    for i=[0:s1]{
        out = ((inArr[i] > out) ? inArr[i] : out);
    }
}
(**************************)
def void MatMul2D(int32_pl i, int32_pl j, int32_pl k, int64_al[i][j] A, int64_al[j][k] B, int64_al[i][k] C, bool_pl modelIsA)
{
	for i1=[0:i]{
		for i2=[0:k]{
			C[i1][i2] = 0L;
			for i3=[0:j]{
				C[i1][i2] = C[i1][i2] +_al (A[i1][i3]*B[i3][i2]);
			};
		};
	};
}

(**************************)
def void ArgMax(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1] outArr)
{
	for od=[0:s1]{
		int64_al maxi = inArr[od][0];
		int64_al maxiIdx = 0L;
		for i=[0:s2]{
			int64_pl iL = i;
			maxiIdx = (inArr[od][i] > maxi) ? iL : maxiIdx;
			maxi = (inArr[od][i] > maxi) ? inArr[od][i] : maxi;
		};
		outArr[od] = maxiIdx;
	};
}

(**************************)
def void Relu(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation)
{
	for i1=[0:s1]{
		outArr[i1] = ((inArr[i1] > 0L) ? inArr[i1] : 0L);
	};

	if (doTruncation)
	{
		for i1=[0:s1]{
			outArr[i1] = (outArr[i1] >> sf);
		};
	}
}

(**************************)
def void Floor(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf){
	int64_pl mask = ~((1<<sf) - 1);
	for i1=[0:s1]{
		outArr[i1] = (inArr[i1] & mask);
	};
}


(**************************)
(* int64_al[N][H][W][C] input *)
def void MaxPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int64_al[N1][imgH][imgW][C1] inArr, 
				  int64_al[N][H][W][C] outArr){
	
	for n=[0:N]{
		for c=[0:C]{
			int32_pl leftTopCornerH = 0 - zPadHLeft;
			int32_pl extremeRightBottomCornerH = imgH - 1 + zPadHRight;
			int32_pl ctH = 0;
			while((leftTopCornerH + ksizeH - 1) <= extremeRightBottomCornerH){
				int32_pl leftTopCornerW = 0 - zPadWLeft;
				int32_pl extremeRightBottomCornerW = imgW - 1 + zPadWRight;
				int32_pl ctW = 0;
				while((leftTopCornerW + ksizeW - 1) <= extremeRightBottomCornerW){

					int64_al maxi = 0L;
					if ((((leftTopCornerH < 0) || (leftTopCornerH >= imgH)) || ((leftTopCornerW < 0) || (leftTopCornerW >= imgW)))){
						maxi = 0L;
					}
					else{
						maxi = inArr[n][leftTopCornerH][leftTopCornerW][c];
					};
					for fh=[0:ksizeH]{
						for fw=[0:ksizeW]{
							int32_pl curPosH = leftTopCornerH + fh;
							int32_pl curPosW = leftTopCornerW + fw;
							int64_al temp = 0L;
							if ((((curPosH < 0) || (curPosH >= imgH)) || ((curPosW < 0) || (curPosW >= imgW)))){
								temp = 0L;
							}
							else{
								temp = inArr[n][curPosH][curPosW][c];
							};
							(* 
								Note the following is intentionally kept as maxi-temp<0 and not maxi<temp,
									since that is what the cleartext implements.
							*)
							maxi = ((maxi - temp < 0L) ? temp : maxi);
						};
					};

					outArr[n][ctH][ctW][c] = maxi;
					leftTopCornerW = leftTopCornerW + strideW;
					ctW = ctW + 1;
				};

				leftTopCornerH = leftTopCornerH + strideH;
				ctH = ctH + 1;
			};
		};
	};

}


(**************************)
def int64_al divFloor(int64_al a, int64_pl b)
{
	int64_al q = a/b;
	int64_al r = a%b;
	bool_bl cond1 = (!(r == 0L));
	bool_bl cond2 = (r < 0L);
	bool_bl corr = (cond1 && cond2);
	int64_al corri = (corr ? 1L : 0L);
	return q - corri;
}

(* int64_al[N][H][W][C] input *)
def void AvgPool(int32_pl N, int32_pl H, int32_pl W, int32_pl C,
				  int32_pl ksizeH, int32_pl ksizeW,
				  int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight,
				  int32_pl strideH, int32_pl strideW,
				  int32_pl N1, int32_pl imgH, int32_pl imgW, int32_pl C1,
  				  int64_al[N1][imgH][imgW][C1] inArr, 
				  int64_al[N][H][W][C] outArr){

	int32_pl rows = N*C*H*W;
	int64_al[rows] filterAvg;

	int32_pl rowIdx = 0;
	for n=[0:N]{
		for c=[0:C]{
			int32_pl leftTopCornerH = 0 - zPadHLeft;
			int32_pl extremeRightBottomCornerH = imgH - 1 + zPadHRight;
			int32_pl ctH = 0;
			while((leftTopCornerH + ksizeH - 1) <= extremeRightBottomCornerH){
				int32_pl leftTopCornerW = 0 - zPadWLeft;
				int32_pl extremeRightBottomCornerW = imgW - 1 + zPadWRight;
				int32_pl ctW = 0;
				while((leftTopCornerW + ksizeW - 1) <= extremeRightBottomCornerW){

					int64_al curFilterSum = 0L;
					for fh=[0:ksizeH]{
						for fw=[0:ksizeW]{
							int32_pl curPosH = leftTopCornerH + fh;
							int32_pl curPosW = leftTopCornerW + fw;
							int64_al temp = 0L;
							if ((((curPosH < 0) || (curPosH >= imgH)) || ((curPosW < 0) || (curPosW >= imgW)))){
								temp = 0L;
							}
							else{
								temp = inArr[n][curPosH][curPosW][c];
							};
							curFilterSum = curFilterSum + temp;
						};
					};

					int32_pl ksizeH64 = ksizeH;
					int32_pl ksizeW64 = ksizeW;
					int64_pl filterSz64 = (ksizeH64) * (ksizeW64);
					int64_al curFilterAvg = divFloor(curFilterSum, filterSz64);
					filterAvg[rowIdx] = curFilterAvg;
					rowIdx = rowIdx + 1;

					leftTopCornerW = leftTopCornerW + strideW;
					ctW = ctW + 1;
				};

				leftTopCornerH = leftTopCornerH + strideH;
				ctH = ctH + 1;
			};
		};
	};

	for n=[0:N]{
		for c=[0:C]{
			for h=[0:H]{
				for w=[0:W]{
					outArr[n][h][w][c] = filterAvg[(n*C*H*W) + (c*H*W) + (h*W) + w];
				};
			};
		};
	};
}

(**************************)
def void ElemWiseSecretSharedVectorMult(int32_pl s1, int64_al[s1] arr1, int64_al[s1] arr2, int64_al[s1] outArr)
{
	for ii=[0:s1]{
		outArr[ii] = (arr1[ii] * arr2[ii]);
	};
}

def void ElemWiseActModelVectorMult(int32_pl s1, int64_al[s1] arr1, int64_al[s1] arr2, int64_al[s1] outArr)
{
	ElemWiseSecretSharedVectorMult(s1,  arr1,  arr2, outArr);
}

def void ElemWiseVectorPublicDiv(int32_pl s1, int64_al[s1] arr1, int32_pl divisor, int64_al[s1] outArr)
{
	int64_pl divisor64 = divisor;
	for ii=[0:s1]{
		outArr[ii] = (arr1[ii] / divisor64);
	};
}

(* <><><><><><><> Auto-generated code <><><><><><><> *)
def void fillLUTINVSQRT(int32_pl[1020] inp)
{
inp[0] = 4;
inp[1] = 2;
inp[2] = 3;
inp[3] = 2;
inp[4] = 8;
inp[5] = 5;
inp[6] = 7;
inp[7] = 5;
inp[8] = 6;
inp[9] = 4;
inp[10] = 6;
inp[11] = 4;
inp[12] = 16;
inp[13] = 11;
inp[14] = 15;
inp[15] = 10;
inp[16] = 14;
inp[17] = 10;
inp[18] = 13;
inp[19] = 9;
inp[20] = 13;
inp[21] = 9;
inp[22] = 12;
inp[23] = 8;
inp[24] = 12;
inp[25] = 8;
inp[26] = 11;
inp[27] = 8;
inp[28] = 32;
inp[29] = 22;
inp[30] = 31;
inp[31] = 21;
inp[32] = 30;
inp[33] = 21;
inp[34] = 29;
inp[35] = 20;
inp[36] = 28;
inp[37] = 20;
inp[38] = 27;
inp[39] = 19;
inp[40] = 27;
inp[41] = 19;
inp[42] = 26;
inp[43] = 18;
inp[44] = 26;
inp[45] = 18;
inp[46] = 25;
inp[47] = 18;
inp[48] = 25;
inp[49] = 17;
inp[50] = 24;
inp[51] = 17;
inp[52] = 24;
inp[53] = 17;
inp[54] = 23;
inp[55] = 16;
inp[56] = 23;
inp[57] = 16;
inp[58] = 22;
inp[59] = 16;
inp[60] = 64;
inp[61] = 45;
inp[62] = 63;
inp[63] = 44;
inp[64] = 62;
inp[65] = 43;
inp[66] = 61;
inp[67] = 43;
inp[68] = 60;
inp[69] = 42;
inp[70] = 59;
inp[71] = 42;
inp[72] = 58;
inp[73] = 41;
inp[74] = 57;
inp[75] = 40;
inp[76] = 57;
inp[77] = 40;
inp[78] = 56;
inp[79] = 39;
inp[80] = 55;
inp[81] = 39;
inp[82] = 55;
inp[83] = 39;
inp[84] = 54;
inp[85] = 38;
inp[86] = 53;
inp[87] = 38;
inp[88] = 53;
inp[89] = 37;
inp[90] = 52;
inp[91] = 37;
inp[92] = 52;
inp[93] = 36;
inp[94] = 51;
inp[95] = 36;
inp[96] = 51;
inp[97] = 36;
inp[98] = 50;
inp[99] = 35;
inp[100] = 50;
inp[101] = 35;
inp[102] = 49;
inp[103] = 35;
inp[104] = 49;
inp[105] = 34;
inp[106] = 48;
inp[107] = 34;
inp[108] = 48;
inp[109] = 34;
inp[110] = 47;
inp[111] = 33;
inp[112] = 47;
inp[113] = 33;
inp[114] = 47;
inp[115] = 33;
inp[116] = 46;
inp[117] = 33;
inp[118] = 46;
inp[119] = 32;
inp[120] = 45;
inp[121] = 32;
inp[122] = 45;
inp[123] = 32;
inp[124] = 128;
inp[125] = 90;
inp[126] = 127;
inp[127] = 89;
inp[128] = 126;
inp[129] = 89;
inp[130] = 125;
inp[131] = 88;
inp[132] = 124;
inp[133] = 87;
inp[134] = 123;
inp[135] = 87;
inp[136] = 122;
inp[137] = 86;
inp[138] = 121;
inp[139] = 85;
inp[140] = 120;
inp[141] = 85;
inp[142] = 119;
inp[143] = 84;
inp[144] = 119;
inp[145] = 84;
inp[146] = 118;
inp[147] = 83;
inp[148] = 117;
inp[149] = 83;
inp[150] = 116;
inp[151] = 82;
inp[152] = 115;
inp[153] = 81;
inp[154] = 115;
inp[155] = 81;
inp[156] = 114;
inp[157] = 80;
inp[158] = 113;
inp[159] = 80;
inp[160] = 113;
inp[161] = 79;
inp[162] = 112;
inp[163] = 79;
inp[164] = 111;
inp[165] = 79;
inp[166] = 111;
inp[167] = 78;
inp[168] = 110;
inp[169] = 78;
inp[170] = 109;
inp[171] = 77;
inp[172] = 109;
inp[173] = 77;
inp[174] = 108;
inp[175] = 76;
inp[176] = 107;
inp[177] = 76;
inp[178] = 107;
inp[179] = 75;
inp[180] = 106;
inp[181] = 75;
inp[182] = 106;
inp[183] = 75;
inp[184] = 105;
inp[185] = 74;
inp[186] = 105;
inp[187] = 74;
inp[188] = 104;
inp[189] = 73;
inp[190] = 103;
inp[191] = 73;
inp[192] = 103;
inp[193] = 73;
inp[194] = 102;
inp[195] = 72;
inp[196] = 102;
inp[197] = 72;
inp[198] = 101;
inp[199] = 72;
inp[200] = 101;
inp[201] = 71;
inp[202] = 100;
inp[203] = 71;
inp[204] = 100;
inp[205] = 71;
inp[206] = 99;
inp[207] = 70;
inp[208] = 99;
inp[209] = 70;
inp[210] = 98;
inp[211] = 69;
inp[212] = 98;
inp[213] = 69;
inp[214] = 98;
inp[215] = 69;
inp[216] = 97;
inp[217] = 69;
inp[218] = 97;
inp[219] = 68;
inp[220] = 96;
inp[221] = 68;
inp[222] = 96;
inp[223] = 68;
inp[224] = 95;
inp[225] = 67;
inp[226] = 95;
inp[227] = 67;
inp[228] = 95;
inp[229] = 67;
inp[230] = 94;
inp[231] = 66;
inp[232] = 94;
inp[233] = 66;
inp[234] = 93;
inp[235] = 66;
inp[236] = 93;
inp[237] = 66;
inp[238] = 93;
inp[239] = 65;
inp[240] = 92;
inp[241] = 65;
inp[242] = 92;
inp[243] = 65;
inp[244] = 91;
inp[245] = 65;
inp[246] = 91;
inp[247] = 64;
inp[248] = 91;
inp[249] = 64;
inp[250] = 90;
inp[251] = 64;
inp[252] = 256;
inp[253] = 181;
inp[254] = 255;
inp[255] = 180;
inp[256] = 254;
inp[257] = 179;
inp[258] = 253;
inp[259] = 178;
inp[260] = 252;
inp[261] = 178;
inp[262] = 251;
inp[263] = 177;
inp[264] = 250;
inp[265] = 176;
inp[266] = 249;
inp[267] = 176;
inp[268] = 248;
inp[269] = 175;
inp[270] = 247;
inp[271] = 174;
inp[272] = 246;
inp[273] = 174;
inp[274] = 245;
inp[275] = 173;
inp[276] = 244;
inp[277] = 173;
inp[278] = 243;
inp[279] = 172;
inp[280] = 243;
inp[281] = 171;
inp[282] = 242;
inp[283] = 171;
inp[284] = 241;
inp[285] = 170;
inp[286] = 240;
inp[287] = 170;
inp[288] = 239;
inp[289] = 169;
inp[290] = 238;
inp[291] = 168;
inp[292] = 238;
inp[293] = 168;
inp[294] = 237;
inp[295] = 167;
inp[296] = 236;
inp[297] = 167;
inp[298] = 235;
inp[299] = 166;
inp[300] = 234;
inp[301] = 166;
inp[302] = 234;
inp[303] = 165;
inp[304] = 233;
inp[305] = 165;
inp[306] = 232;
inp[307] = 164;
inp[308] = 231;
inp[309] = 163;
inp[310] = 231;
inp[311] = 163;
inp[312] = 230;
inp[313] = 162;
inp[314] = 229;
inp[315] = 162;
inp[316] = 228;
inp[317] = 161;
inp[318] = 228;
inp[319] = 161;
inp[320] = 227;
inp[321] = 160;
inp[322] = 226;
inp[323] = 160;
inp[324] = 226;
inp[325] = 159;
inp[326] = 225;
inp[327] = 159;
inp[328] = 224;
inp[329] = 158;
inp[330] = 224;
inp[331] = 158;
inp[332] = 223;
inp[333] = 158;
inp[334] = 222;
inp[335] = 157;
inp[336] = 222;
inp[337] = 157;
inp[338] = 221;
inp[339] = 156;
inp[340] = 220;
inp[341] = 156;
inp[342] = 220;
inp[343] = 155;
inp[344] = 219;
inp[345] = 155;
inp[346] = 218;
inp[347] = 154;
inp[348] = 218;
inp[349] = 154;
inp[350] = 217;
inp[351] = 153;
inp[352] = 217;
inp[353] = 153;
inp[354] = 216;
inp[355] = 153;
inp[356] = 215;
inp[357] = 152;
inp[358] = 215;
inp[359] = 152;
inp[360] = 214;
inp[361] = 151;
inp[362] = 214;
inp[363] = 151;
inp[364] = 213;
inp[365] = 150;
inp[366] = 212;
inp[367] = 150;
inp[368] = 212;
inp[369] = 150;
inp[370] = 211;
inp[371] = 149;
inp[372] = 211;
inp[373] = 149;
inp[374] = 210;
inp[375] = 148;
inp[376] = 210;
inp[377] = 148;
inp[378] = 209;
inp[379] = 148;
inp[380] = 209;
inp[381] = 147;
inp[382] = 208;
inp[383] = 147;
inp[384] = 207;
inp[385] = 147;
inp[386] = 207;
inp[387] = 146;
inp[388] = 206;
inp[389] = 146;
inp[390] = 206;
inp[391] = 145;
inp[392] = 205;
inp[393] = 145;
inp[394] = 205;
inp[395] = 145;
inp[396] = 204;
inp[397] = 144;
inp[398] = 204;
inp[399] = 144;
inp[400] = 203;
inp[401] = 144;
inp[402] = 203;
inp[403] = 143;
inp[404] = 202;
inp[405] = 143;
inp[406] = 202;
inp[407] = 143;
inp[408] = 201;
inp[409] = 142;
inp[410] = 201;
inp[411] = 142;
inp[412] = 200;
inp[413] = 142;
inp[414] = 200;
inp[415] = 141;
inp[416] = 199;
inp[417] = 141;
inp[418] = 199;
inp[419] = 140;
inp[420] = 198;
inp[421] = 140;
inp[422] = 198;
inp[423] = 140;
inp[424] = 197;
inp[425] = 139;
inp[426] = 197;
inp[427] = 139;
inp[428] = 197;
inp[429] = 139;
inp[430] = 196;
inp[431] = 139;
inp[432] = 196;
inp[433] = 138;
inp[434] = 195;
inp[435] = 138;
inp[436] = 195;
inp[437] = 138;
inp[438] = 194;
inp[439] = 137;
inp[440] = 194;
inp[441] = 137;
inp[442] = 193;
inp[443] = 137;
inp[444] = 193;
inp[445] = 136;
inp[446] = 193;
inp[447] = 136;
inp[448] = 192;
inp[449] = 136;
inp[450] = 192;
inp[451] = 135;
inp[452] = 191;
inp[453] = 135;
inp[454] = 191;
inp[455] = 135;
inp[456] = 190;
inp[457] = 135;
inp[458] = 190;
inp[459] = 134;
inp[460] = 190;
inp[461] = 134;
inp[462] = 189;
inp[463] = 134;
inp[464] = 189;
inp[465] = 133;
inp[466] = 188;
inp[467] = 133;
inp[468] = 188;
inp[469] = 133;
inp[470] = 188;
inp[471] = 133;
inp[472] = 187;
inp[473] = 132;
inp[474] = 187;
inp[475] = 132;
inp[476] = 186;
inp[477] = 132;
inp[478] = 186;
inp[479] = 131;
inp[480] = 186;
inp[481] = 131;
inp[482] = 185;
inp[483] = 131;
inp[484] = 185;
inp[485] = 131;
inp[486] = 185;
inp[487] = 130;
inp[488] = 184;
inp[489] = 130;
inp[490] = 184;
inp[491] = 130;
inp[492] = 183;
inp[493] = 130;
inp[494] = 183;
inp[495] = 129;
inp[496] = 183;
inp[497] = 129;
inp[498] = 182;
inp[499] = 129;
inp[500] = 182;
inp[501] = 129;
inp[502] = 182;
inp[503] = 128;
inp[504] = 181;
inp[505] = 128;
inp[506] = 181;
inp[507] = 128;
inp[508] = 512;
inp[509] = 362;
inp[510] = 511;
inp[511] = 361;
inp[512] = 510;
inp[513] = 360;
inp[514] = 509;
inp[515] = 359;
inp[516] = 508;
inp[517] = 359;
inp[518] = 507;
inp[519] = 358;
inp[520] = 506;
inp[521] = 357;
inp[522] = 505;
inp[523] = 357;
inp[524] = 504;
inp[525] = 356;
inp[526] = 503;
inp[527] = 355;
inp[528] = 502;
inp[529] = 355;
inp[530] = 501;
inp[531] = 354;
inp[532] = 500;
inp[533] = 353;
inp[534] = 499;
inp[535] = 353;
inp[536] = 498;
inp[537] = 352;
inp[538] = 497;
inp[539] = 351;
inp[540] = 496;
inp[541] = 351;
inp[542] = 495;
inp[543] = 350;
inp[544] = 494;
inp[545] = 349;
inp[546] = 493;
inp[547] = 349;
inp[548] = 493;
inp[549] = 348;
inp[550] = 492;
inp[551] = 348;
inp[552] = 491;
inp[553] = 347;
inp[554] = 490;
inp[555] = 346;
inp[556] = 489;
inp[557] = 346;
inp[558] = 488;
inp[559] = 345;
inp[560] = 487;
inp[561] = 344;
inp[562] = 486;
inp[563] = 344;
inp[564] = 486;
inp[565] = 343;
inp[566] = 485;
inp[567] = 343;
inp[568] = 484;
inp[569] = 342;
inp[570] = 483;
inp[571] = 341;
inp[572] = 482;
inp[573] = 341;
inp[574] = 481;
inp[575] = 340;
inp[576] = 481;
inp[577] = 340;
inp[578] = 480;
inp[579] = 339;
inp[580] = 479;
inp[581] = 338;
inp[582] = 478;
inp[583] = 338;
inp[584] = 477;
inp[585] = 337;
inp[586] = 476;
inp[587] = 337;
inp[588] = 476;
inp[589] = 336;
inp[590] = 475;
inp[591] = 336;
inp[592] = 474;
inp[593] = 335;
inp[594] = 473;
inp[595] = 334;
inp[596] = 472;
inp[597] = 334;
inp[598] = 472;
inp[599] = 333;
inp[600] = 471;
inp[601] = 333;
inp[602] = 470;
inp[603] = 332;
inp[604] = 469;
inp[605] = 332;
inp[606] = 469;
inp[607] = 331;
inp[608] = 468;
inp[609] = 331;
inp[610] = 467;
inp[611] = 330;
inp[612] = 466;
inp[613] = 330;
inp[614] = 466;
inp[615] = 329;
inp[616] = 465;
inp[617] = 328;
inp[618] = 464;
inp[619] = 328;
inp[620] = 463;
inp[621] = 327;
inp[622] = 463;
inp[623] = 327;
inp[624] = 462;
inp[625] = 326;
inp[626] = 461;
inp[627] = 326;
inp[628] = 460;
inp[629] = 325;
inp[630] = 460;
inp[631] = 325;
inp[632] = 459;
inp[633] = 324;
inp[634] = 458;
inp[635] = 324;
inp[636] = 457;
inp[637] = 323;
inp[638] = 457;
inp[639] = 323;
inp[640] = 456;
inp[641] = 322;
inp[642] = 455;
inp[643] = 322;
inp[644] = 455;
inp[645] = 321;
inp[646] = 454;
inp[647] = 321;
inp[648] = 453;
inp[649] = 320;
inp[650] = 453;
inp[651] = 320;
inp[652] = 452;
inp[653] = 319;
inp[654] = 451;
inp[655] = 319;
inp[656] = 450;
inp[657] = 318;
inp[658] = 450;
inp[659] = 318;
inp[660] = 449;
inp[661] = 317;
inp[662] = 448;
inp[663] = 317;
inp[664] = 448;
inp[665] = 316;
inp[666] = 447;
inp[667] = 316;
inp[668] = 446;
inp[669] = 316;
inp[670] = 446;
inp[671] = 315;
inp[672] = 445;
inp[673] = 315;
inp[674] = 444;
inp[675] = 314;
inp[676] = 444;
inp[677] = 314;
inp[678] = 443;
inp[679] = 313;
inp[680] = 442;
inp[681] = 313;
inp[682] = 442;
inp[683] = 312;
inp[684] = 441;
inp[685] = 312;
inp[686] = 441;
inp[687] = 311;
inp[688] = 440;
inp[689] = 311;
inp[690] = 439;
inp[691] = 310;
inp[692] = 439;
inp[693] = 310;
inp[694] = 438;
inp[695] = 310;
inp[696] = 437;
inp[697] = 309;
inp[698] = 437;
inp[699] = 309;
inp[700] = 436;
inp[701] = 308;
inp[702] = 436;
inp[703] = 308;
inp[704] = 435;
inp[705] = 307;
inp[706] = 434;
inp[707] = 307;
inp[708] = 434;
inp[709] = 307;
inp[710] = 433;
inp[711] = 306;
inp[712] = 432;
inp[713] = 306;
inp[714] = 432;
inp[715] = 305;
inp[716] = 431;
inp[717] = 305;
inp[718] = 431;
inp[719] = 304;
inp[720] = 430;
inp[721] = 304;
inp[722] = 429;
inp[723] = 304;
inp[724] = 429;
inp[725] = 303;
inp[726] = 428;
inp[727] = 303;
inp[728] = 428;
inp[729] = 302;
inp[730] = 427;
inp[731] = 302;
inp[732] = 427;
inp[733] = 301;
inp[734] = 426;
inp[735] = 301;
inp[736] = 425;
inp[737] = 301;
inp[738] = 425;
inp[739] = 300;
inp[740] = 424;
inp[741] = 300;
inp[742] = 424;
inp[743] = 299;
inp[744] = 423;
inp[745] = 299;
inp[746] = 423;
inp[747] = 299;
inp[748] = 422;
inp[749] = 298;
inp[750] = 421;
inp[751] = 298;
inp[752] = 421;
inp[753] = 297;
inp[754] = 420;
inp[755] = 297;
inp[756] = 420;
inp[757] = 297;
inp[758] = 419;
inp[759] = 296;
inp[760] = 419;
inp[761] = 296;
inp[762] = 418;
inp[763] = 295;
inp[764] = 418;
inp[765] = 295;
inp[766] = 417;
inp[767] = 295;
inp[768] = 416;
inp[769] = 294;
inp[770] = 416;
inp[771] = 294;
inp[772] = 415;
inp[773] = 294;
inp[774] = 415;
inp[775] = 293;
inp[776] = 414;
inp[777] = 293;
inp[778] = 414;
inp[779] = 292;
inp[780] = 413;
inp[781] = 292;
inp[782] = 413;
inp[783] = 292;
inp[784] = 412;
inp[785] = 291;
inp[786] = 412;
inp[787] = 291;
inp[788] = 411;
inp[789] = 291;
inp[790] = 411;
inp[791] = 290;
inp[792] = 410;
inp[793] = 290;
inp[794] = 410;
inp[795] = 289;
inp[796] = 409;
inp[797] = 289;
inp[798] = 409;
inp[799] = 289;
inp[800] = 408;
inp[801] = 288;
inp[802] = 408;
inp[803] = 288;
inp[804] = 407;
inp[805] = 288;
inp[806] = 407;
inp[807] = 287;
inp[808] = 406;
inp[809] = 287;
inp[810] = 406;
inp[811] = 287;
inp[812] = 405;
inp[813] = 286;
inp[814] = 405;
inp[815] = 286;
inp[816] = 404;
inp[817] = 286;
inp[818] = 404;
inp[819] = 285;
inp[820] = 403;
inp[821] = 285;
inp[822] = 403;
inp[823] = 285;
inp[824] = 402;
inp[825] = 284;
inp[826] = 402;
inp[827] = 284;
inp[828] = 401;
inp[829] = 284;
inp[830] = 401;
inp[831] = 283;
inp[832] = 400;
inp[833] = 283;
inp[834] = 400;
inp[835] = 282;
inp[836] = 399;
inp[837] = 282;
inp[838] = 399;
inp[839] = 282;
inp[840] = 398;
inp[841] = 281;
inp[842] = 398;
inp[843] = 281;
inp[844] = 397;
inp[845] = 281;
inp[846] = 397;
inp[847] = 280;
inp[848] = 396;
inp[849] = 280;
inp[850] = 396;
inp[851] = 280;
inp[852] = 395;
inp[853] = 279;
inp[854] = 395;
inp[855] = 279;
inp[856] = 395;
inp[857] = 279;
inp[858] = 394;
inp[859] = 279;
inp[860] = 394;
inp[861] = 278;
inp[862] = 393;
inp[863] = 278;
inp[864] = 393;
inp[865] = 278;
inp[866] = 392;
inp[867] = 277;
inp[868] = 392;
inp[869] = 277;
inp[870] = 391;
inp[871] = 277;
inp[872] = 391;
inp[873] = 276;
inp[874] = 390;
inp[875] = 276;
inp[876] = 390;
inp[877] = 276;
inp[878] = 390;
inp[879] = 275;
inp[880] = 389;
inp[881] = 275;
inp[882] = 389;
inp[883] = 275;
inp[884] = 388;
inp[885] = 274;
inp[886] = 388;
inp[887] = 274;
inp[888] = 387;
inp[889] = 274;
inp[890] = 387;
inp[891] = 273;
inp[892] = 387;
inp[893] = 273;
inp[894] = 386;
inp[895] = 273;
inp[896] = 386;
inp[897] = 273;
inp[898] = 385;
inp[899] = 272;
inp[900] = 385;
inp[901] = 272;
inp[902] = 384;
inp[903] = 272;
inp[904] = 384;
inp[905] = 271;
inp[906] = 384;
inp[907] = 271;
inp[908] = 383;
inp[909] = 271;
inp[910] = 383;
inp[911] = 270;
inp[912] = 382;
inp[913] = 270;
inp[914] = 382;
inp[915] = 270;
inp[916] = 381;
inp[917] = 270;
inp[918] = 381;
inp[919] = 269;
inp[920] = 381;
inp[921] = 269;
inp[922] = 380;
inp[923] = 269;
inp[924] = 380;
inp[925] = 268;
inp[926] = 379;
inp[927] = 268;
inp[928] = 379;
inp[929] = 268;
inp[930] = 379;
inp[931] = 268;
inp[932] = 378;
inp[933] = 267;
inp[934] = 378;
inp[935] = 267;
inp[936] = 377;
inp[937] = 267;
inp[938] = 377;
inp[939] = 266;
inp[940] = 377;
inp[941] = 266;
inp[942] = 376;
inp[943] = 266;
inp[944] = 376;
inp[945] = 266;
inp[946] = 375;
inp[947] = 265;
inp[948] = 375;
inp[949] = 265;
inp[950] = 375;
inp[951] = 265;
inp[952] = 374;
inp[953] = 264;
inp[954] = 374;
inp[955] = 264;
inp[956] = 373;
inp[957] = 264;
inp[958] = 373;
inp[959] = 264;
inp[960] = 373;
inp[961] = 263;
inp[962] = 372;
inp[963] = 263;
inp[964] = 372;
inp[965] = 263;
inp[966] = 371;
inp[967] = 263;
inp[968] = 371;
inp[969] = 262;
inp[970] = 371;
inp[971] = 262;
inp[972] = 370;
inp[973] = 262;
inp[974] = 370;
inp[975] = 261;
inp[976] = 370;
inp[977] = 261;
inp[978] = 369;
inp[979] = 261;
inp[980] = 369;
inp[981] = 261;
inp[982] = 368;
inp[983] = 260;
inp[984] = 368;
inp[985] = 260;
inp[986] = 368;
inp[987] = 260;
inp[988] = 367;
inp[989] = 260;
inp[990] = 367;
inp[991] = 259;
inp[992] = 367;
inp[993] = 259;
inp[994] = 366;
inp[995] = 259;
inp[996] = 366;
inp[997] = 259;
inp[998] = 365;
inp[999] = 258;
inp[1000] = 365;
inp[1001] = 258;
inp[1002] = 365;
inp[1003] = 258;
inp[1004] = 364;
inp[1005] = 258;
inp[1006] = 364;
inp[1007] = 257;
inp[1008] = 364;
inp[1009] = 257;
inp[1010] = 363;
inp[1011] = 257;
inp[1012] = 363;
inp[1013] = 257;
inp[1014] = 363;
inp[1015] = 256;
inp[1016] = 362;
inp[1017] = 256;
inp[1018] = 362;
inp[1019] = 256;
}

def void fillLUTDIV(int32_pl[1020] inp)
{
inp[0] = 10;
inp[1] = 15;
inp[2] = 5;
inp[3] = 10;
inp[4] = 25;
inp[5] = 63;
inp[6] = 17;
inp[7] = 51;
inp[8] = 12;
inp[9] = 42;
inp[10] = 9;
inp[11] = 36;
inp[12] = 56;
inp[13] = 255;
inp[14] = 45;
inp[15] = 227;
inp[16] = 37;
inp[17] = 204;
inp[18] = 31;
inp[19] = 186;
inp[20] = 26;
inp[21] = 170;
inp[22] = 22;
inp[23] = 157;
inp[24] = 19;
inp[25] = 146;
inp[26] = 17;
inp[27] = 136;
inp[28] = 120;
inp[29] = 1023;
inp[30] = 107;
inp[31] = 963;
inp[32] = 95;
inp[33] = 909;
inp[34] = 86;
inp[35] = 862;
inp[36] = 78;
inp[37] = 818;
inp[38] = 70;
inp[39] = 779;
inp[40] = 64;
inp[41] = 744;
inp[42] = 59;
inp[43] = 712;
inp[44] = 54;
inp[45] = 682;
inp[46] = 50;
inp[47] = 655;
inp[48] = 46;
inp[49] = 630;
inp[50] = 43;
inp[51] = 606;
inp[52] = 40;
inp[53] = 585;
inp[54] = 37;
inp[55] = 564;
inp[56] = 35;
inp[57] = 546;
inp[58] = 33;
inp[59] = 528;
inp[60] = 248;
inp[61] = 4095;
inp[62] = 233;
inp[63] = 3971;
inp[64] = 220;
inp[65] = 3854;
inp[66] = 208;
inp[67] = 3744;
inp[68] = 196;
inp[69] = 3640;
inp[70] = 186;
inp[71] = 3542;
inp[72] = 176;
inp[73] = 3448;
inp[74] = 168;
inp[75] = 3360;
inp[76] = 159;
inp[77] = 3276;
inp[78] = 152;
inp[79] = 3196;
inp[80] = 145;
inp[81] = 3120;
inp[82] = 138;
inp[83] = 3047;
inp[84] = 132;
inp[85] = 2978;
inp[86] = 126;
inp[87] = 2912;
inp[88] = 121;
inp[89] = 2849;
inp[90] = 116;
inp[91] = 2788;
inp[92] = 111;
inp[93] = 2730;
inp[94] = 106;
inp[95] = 2674;
inp[96] = 102;
inp[97] = 2621;
inp[98] = 98;
inp[99] = 2569;
inp[100] = 95;
inp[101] = 2520;
inp[102] = 91;
inp[103] = 2472;
inp[104] = 88;
inp[105] = 2427;
inp[106] = 85;
inp[107] = 2383;
inp[108] = 82;
inp[109] = 2340;
inp[110] = 79;
inp[111] = 2299;
inp[112] = 76;
inp[113] = 2259;
inp[114] = 74;
inp[115] = 2221;
inp[116] = 71;
inp[117] = 2184;
inp[118] = 69;
inp[119] = 2148;
inp[120] = 67;
inp[121] = 2113;
inp[122] = 65;
inp[123] = 2080;
inp[124] = 504;
inp[125] = 16383;
inp[126] = 488;
inp[127] = 16131;
inp[128] = 474;
inp[129] = 15887;
inp[130] = 460;
inp[131] = 15649;
inp[132] = 446;
inp[133] = 15419;
inp[134] = 434;
inp[135] = 15196;
inp[136] = 421;
inp[137] = 14979;
inp[138] = 410;
inp[139] = 14768;
inp[140] = 399;
inp[141] = 14563;
inp[142] = 388;
inp[143] = 14363;
inp[144] = 377;
inp[145] = 14169;
inp[146] = 367;
inp[147] = 13980;
inp[148] = 358;
inp[149] = 13796;
inp[150] = 349;
inp[151] = 13617;
inp[152] = 340;
inp[153] = 13443;
inp[154] = 331;
inp[155] = 13272;
inp[156] = 323;
inp[157] = 13106;
inp[158] = 315;
inp[159] = 12945;
inp[160] = 308;
inp[161] = 12787;
inp[162] = 300;
inp[163] = 12633;
inp[164] = 293;
inp[165] = 12482;
inp[166] = 286;
inp[167] = 12335;
inp[168] = 280;
inp[169] = 12192;
inp[170] = 273;
inp[171] = 12052;
inp[172] = 267;
inp[173] = 11915;
inp[174] = 261;
inp[175] = 11781;
inp[176] = 256;
inp[177] = 11650;
inp[178] = 250;
inp[179] = 11522;
inp[180] = 245;
inp[181] = 11397;
inp[182] = 239;
inp[183] = 11274;
inp[184] = 234;
inp[185] = 11154;
inp[186] = 229;
inp[187] = 11037;
inp[188] = 225;
inp[189] = 10922;
inp[190] = 220;
inp[191] = 10809;
inp[192] = 216;
inp[193] = 10699;
inp[194] = 211;
inp[195] = 10591;
inp[196] = 207;
inp[197] = 10485;
inp[198] = 203;
inp[199] = 10381;
inp[200] = 199;
inp[201] = 10280;
inp[202] = 195;
inp[203] = 10180;
inp[204] = 192;
inp[205] = 10082;
inp[206] = 188;
inp[207] = 9986;
inp[208] = 184;
inp[209] = 9892;
inp[210] = 181;
inp[211] = 9799;
inp[212] = 178;
inp[213] = 9708;
inp[214] = 174;
inp[215] = 9619;
inp[216] = 171;
inp[217] = 9532;
inp[218] = 168;
inp[219] = 9446;
inp[220] = 165;
inp[221] = 9362;
inp[222] = 162;
inp[223] = 9279;
inp[224] = 159;
inp[225] = 9197;
inp[226] = 157;
inp[227] = 9117;
inp[228] = 154;
inp[229] = 9039;
inp[230] = 151;
inp[231] = 8962;
inp[232] = 149;
inp[233] = 8886;
inp[234] = 146;
inp[235] = 8811;
inp[236] = 144;
inp[237] = 8738;
inp[238] = 142;
inp[239] = 8665;
inp[240] = 139;
inp[241] = 8594;
inp[242] = 137;
inp[243] = 8524;
inp[244] = 135;
inp[245] = 8456;
inp[246] = 133;
inp[247] = 8388;
inp[248] = 131;
inp[249] = 8321;
inp[250] = 129;
inp[251] = 8256;
inp[252] = 1016;
inp[253] = 65535;
inp[254] = 1000;
inp[255] = 65027;
inp[256] = 985;
inp[257] = 64527;
inp[258] = 970;
inp[259] = 64034;
inp[260] = 955;
inp[261] = 63549;
inp[262] = 941;
inp[263] = 63071;
inp[264] = 927;
inp[265] = 62601;
inp[266] = 913;
inp[267] = 62137;
inp[268] = 900;
inp[269] = 61680;
inp[270] = 887;
inp[271] = 61230;
inp[272] = 874;
inp[273] = 60786;
inp[274] = 862;
inp[275] = 60349;
inp[276] = 849;
inp[277] = 59918;
inp[278] = 837;
inp[279] = 59493;
inp[280] = 826;
inp[281] = 59074;
inp[282] = 814;
inp[283] = 58661;
inp[284] = 803;
inp[285] = 58253;
inp[286] = 792;
inp[287] = 57852;
inp[288] = 781;
inp[289] = 57455;
inp[290] = 771;
inp[291] = 57065;
inp[292] = 760;
inp[293] = 56679;
inp[294] = 750;
inp[295] = 56299;
inp[296] = 740;
inp[297] = 55923;
inp[298] = 730;
inp[299] = 55553;
inp[300] = 721;
inp[301] = 55187;
inp[302] = 712;
inp[303] = 54827;
inp[304] = 702;
inp[305] = 54471;
inp[306] = 693;
inp[307] = 54119;
inp[308] = 685;
inp[309] = 53772;
inp[310] = 676;
inp[311] = 53430;
inp[312] = 667;
inp[313] = 53092;
inp[314] = 659;
inp[315] = 52758;
inp[316] = 651;
inp[317] = 52428;
inp[318] = 643;
inp[319] = 52102;
inp[320] = 635;
inp[321] = 51781;
inp[322] = 627;
inp[323] = 51463;
inp[324] = 620;
inp[325] = 51149;
inp[326] = 612;
inp[327] = 50839;
inp[328] = 605;
inp[329] = 50533;
inp[330] = 597;
inp[331] = 50230;
inp[332] = 590;
inp[333] = 49931;
inp[334] = 583;
inp[335] = 49636;
inp[336] = 577;
inp[337] = 49344;
inp[338] = 570;
inp[339] = 49055;
inp[340] = 563;
inp[341] = 48770;
inp[342] = 557;
inp[343] = 48488;
inp[344] = 550;
inp[345] = 48210;
inp[346] = 544;
inp[347] = 47934;
inp[348] = 538;
inp[349] = 47662;
inp[350] = 532;
inp[351] = 47393;
inp[352] = 526;
inp[353] = 47126;
inp[354] = 520;
inp[355] = 46863;
inp[356] = 514;
inp[357] = 46603;
inp[358] = 509;
inp[359] = 46345;
inp[360] = 503;
inp[361] = 46091;
inp[362] = 498;
inp[363] = 45839;
inp[364] = 492;
inp[365] = 45590;
inp[366] = 487;
inp[367] = 45343;
inp[368] = 482;
inp[369] = 45099;
inp[370] = 477;
inp[371] = 44858;
inp[372] = 472;
inp[373] = 44620;
inp[374] = 467;
inp[375] = 44384;
inp[376] = 462;
inp[377] = 44150;
inp[378] = 457;
inp[379] = 43919;
inp[380] = 452;
inp[381] = 43690;
inp[382] = 448;
inp[383] = 43464;
inp[384] = 443;
inp[385] = 43240;
inp[386] = 438;
inp[387] = 43018;
inp[388] = 434;
inp[389] = 42798;
inp[390] = 430;
inp[391] = 42581;
inp[392] = 425;
inp[393] = 42366;
inp[394] = 421;
inp[395] = 42153;
inp[396] = 417;
inp[397] = 41942;
inp[398] = 413;
inp[399] = 41734;
inp[400] = 409;
inp[401] = 41527;
inp[402] = 405;
inp[403] = 41323;
inp[404] = 401;
inp[405] = 41120;
inp[406] = 397;
inp[407] = 40919;
inp[408] = 393;
inp[409] = 40721;
inp[410] = 389;
inp[411] = 40524;
inp[412] = 385;
inp[413] = 40329;
inp[414] = 382;
inp[415] = 40136;
inp[416] = 378;
inp[417] = 39945;
inp[418] = 375;
inp[419] = 39756;
inp[420] = 371;
inp[421] = 39568;
inp[422] = 368;
inp[423] = 39383;
inp[424] = 364;
inp[425] = 39198;
inp[426] = 361;
inp[427] = 39016;
inp[428] = 357;
inp[429] = 38836;
inp[430] = 354;
inp[431] = 38657;
inp[432] = 351;
inp[433] = 38479;
inp[434] = 348;
inp[435] = 38304;
inp[436] = 345;
inp[437] = 38129;
inp[438] = 341;
inp[439] = 37957;
inp[440] = 338;
inp[441] = 37786;
inp[442] = 335;
inp[443] = 37616;
inp[444] = 332;
inp[445] = 37449;
inp[446] = 329;
inp[447] = 37282;
inp[448] = 327;
inp[449] = 37117;
inp[450] = 324;
inp[451] = 36954;
inp[452] = 321;
inp[453] = 36792;
inp[454] = 318;
inp[455] = 36631;
inp[456] = 315;
inp[457] = 36472;
inp[458] = 313;
inp[459] = 36314;
inp[460] = 310;
inp[461] = 36157;
inp[462] = 307;
inp[463] = 36002;
inp[464] = 305;
inp[465] = 35848;
inp[466] = 302;
inp[467] = 35696;
inp[468] = 299;
inp[469] = 35544;
inp[470] = 297;
inp[471] = 35394;
inp[472] = 294;
inp[473] = 35246;
inp[474] = 292;
inp[475] = 35098;
inp[476] = 290;
inp[477] = 34952;
inp[478] = 287;
inp[479] = 34807;
inp[480] = 285;
inp[481] = 34663;
inp[482] = 282;
inp[483] = 34520;
inp[484] = 280;
inp[485] = 34379;
inp[486] = 278;
inp[487] = 34239;
inp[488] = 276;
inp[489] = 34099;
inp[490] = 273;
inp[491] = 33961;
inp[492] = 271;
inp[493] = 33824;
inp[494] = 269;
inp[495] = 33689;
inp[496] = 267;
inp[497] = 33554;
inp[498] = 265;
inp[499] = 33420;
inp[500] = 263;
inp[501] = 33288;
inp[502] = 261;
inp[503] = 33156;
inp[504] = 259;
inp[505] = 33025;
inp[506] = 257;
inp[507] = 32896;
inp[508] = 2040;
inp[509] = 262143;
inp[510] = 2024;
inp[511] = 261123;
inp[512] = 2008;
inp[513] = 260111;
inp[514] = 1993;
inp[515] = 259107;
inp[516] = 1977;
inp[517] = 258110;
inp[518] = 1962;
inp[519] = 257121;
inp[520] = 1947;
inp[521] = 256140;
inp[522] = 1933;
inp[523] = 255166;
inp[524] = 1918;
inp[525] = 254199;
inp[526] = 1904;
inp[527] = 253240;
inp[528] = 1889;
inp[529] = 252288;
inp[530] = 1875;
inp[531] = 251343;
inp[532] = 1861;
inp[533] = 250405;
inp[534] = 1847;
inp[535] = 249474;
inp[536] = 1834;
inp[537] = 248550;
inp[538] = 1820;
inp[539] = 247633;
inp[540] = 1807;
inp[541] = 246723;
inp[542] = 1794;
inp[543] = 245819;
inp[544] = 1781;
inp[545] = 244922;
inp[546] = 1768;
inp[547] = 244031;
inp[548] = 1755;
inp[549] = 243147;
inp[550] = 1742;
inp[551] = 242269;
inp[552] = 1730;
inp[553] = 241398;
inp[554] = 1718;
inp[555] = 240533;
inp[556] = 1705;
inp[557] = 239674;
inp[558] = 1693;
inp[559] = 238821;
inp[560] = 1681;
inp[561] = 237974;
inp[562] = 1669;
inp[563] = 237133;
inp[564] = 1658;
inp[565] = 236298;
inp[566] = 1646;
inp[567] = 235469;
inp[568] = 1635;
inp[569] = 234646;
inp[570] = 1623;
inp[571] = 233828;
inp[572] = 1612;
inp[573] = 233016;
inp[574] = 1601;
inp[575] = 232210;
inp[576] = 1590;
inp[577] = 231409;
inp[578] = 1579;
inp[579] = 230614;
inp[580] = 1568;
inp[581] = 229824;
inp[582] = 1558;
inp[583] = 229040;
inp[584] = 1547;
inp[585] = 228261;
inp[586] = 1537;
inp[587] = 227487;
inp[588] = 1526;
inp[589] = 226718;
inp[590] = 1516;
inp[591] = 225955;
inp[592] = 1506;
inp[593] = 225197;
inp[594] = 1496;
inp[595] = 224444;
inp[596] = 1486;
inp[597] = 223695;
inp[598] = 1476;
inp[599] = 222952;
inp[600] = 1466;
inp[601] = 222214;
inp[602] = 1457;
inp[603] = 221481;
inp[604] = 1447;
inp[605] = 220752;
inp[606] = 1438;
inp[607] = 220028;
inp[608] = 1428;
inp[609] = 219309;
inp[610] = 1419;
inp[611] = 218595;
inp[612] = 1410;
inp[613] = 217885;
inp[614] = 1401;
inp[615] = 217180;
inp[616] = 1392;
inp[617] = 216479;
inp[618] = 1383;
inp[619] = 215783;
inp[620] = 1374;
inp[621] = 215092;
inp[622] = 1365;
inp[623] = 214405;
inp[624] = 1356;
inp[625] = 213722;
inp[626] = 1348;
inp[627] = 213043;
inp[628] = 1339;
inp[629] = 212369;
inp[630] = 1331;
inp[631] = 211699;
inp[632] = 1323;
inp[633] = 211033;
inp[634] = 1314;
inp[635] = 210372;
inp[636] = 1306;
inp[637] = 209714;
inp[638] = 1298;
inp[639] = 209061;
inp[640] = 1290;
inp[641] = 208412;
inp[642] = 1282;
inp[643] = 207767;
inp[644] = 1274;
inp[645] = 207125;
inp[646] = 1266;
inp[647] = 206488;
inp[648] = 1259;
inp[649] = 205855;
inp[650] = 1251;
inp[651] = 205225;
inp[652] = 1243;
inp[653] = 204599;
inp[654] = 1236;
inp[655] = 203978;
inp[656] = 1228;
inp[657] = 203359;
inp[658] = 1221;
inp[659] = 202745;
inp[660] = 1214;
inp[661] = 202134;
inp[662] = 1206;
inp[663] = 201527;
inp[664] = 1199;
inp[665] = 200924;
inp[666] = 1192;
inp[667] = 200324;
inp[668] = 1185;
inp[669] = 199728;
inp[670] = 1178;
inp[671] = 199135;
inp[672] = 1171;
inp[673] = 198546;
inp[674] = 1164;
inp[675] = 197961;
inp[676] = 1157;
inp[677] = 197378;
inp[678] = 1150;
inp[679] = 196799;
inp[680] = 1144;
inp[681] = 196224;
inp[682] = 1137;
inp[683] = 195652;
inp[684] = 1130;
inp[685] = 195083;
inp[686] = 1124;
inp[687] = 194518;
inp[688] = 1117;
inp[689] = 193956;
inp[690] = 1111;
inp[691] = 193397;
inp[692] = 1105;
inp[693] = 192841;
inp[694] = 1098;
inp[695] = 192288;
inp[696] = 1092;
inp[697] = 191739;
inp[698] = 1086;
inp[699] = 191193;
inp[700] = 1080;
inp[701] = 190649;
inp[702] = 1074;
inp[703] = 190109;
inp[704] = 1068;
inp[705] = 189572;
inp[706] = 1062;
inp[707] = 189038;
inp[708] = 1056;
inp[709] = 188507;
inp[710] = 1050;
inp[711] = 187979;
inp[712] = 1044;
inp[713] = 187454;
inp[714] = 1038;
inp[715] = 186932;
inp[716] = 1032;
inp[717] = 186413;
inp[718] = 1027;
inp[719] = 185896;
inp[720] = 1021;
inp[721] = 185383;
inp[722] = 1015;
inp[723] = 184872;
inp[724] = 1010;
inp[725] = 184364;
inp[726] = 1004;
inp[727] = 183859;
inp[728] = 999;
inp[729] = 183357;
inp[730] = 993;
inp[731] = 182857;
inp[732] = 988;
inp[733] = 182360;
inp[734] = 983;
inp[735] = 181866;
inp[736] = 977;
inp[737] = 181375;
inp[738] = 972;
inp[739] = 180886;
inp[740] = 967;
inp[741] = 180400;
inp[742] = 962;
inp[743] = 179916;
inp[744] = 956;
inp[745] = 179435;
inp[746] = 951;
inp[747] = 178956;
inp[748] = 946;
inp[749] = 178480;
inp[750] = 941;
inp[751] = 178007;
inp[752] = 936;
inp[753] = 177536;
inp[754] = 931;
inp[755] = 177068;
inp[756] = 927;
inp[757] = 176602;
inp[758] = 922;
inp[759] = 176138;
inp[760] = 917;
inp[761] = 175677;
inp[762] = 912;
inp[763] = 175218;
inp[764] = 907;
inp[765] = 174762;
inp[766] = 903;
inp[767] = 174308;
inp[768] = 898;
inp[769] = 173857;
inp[770] = 893;
inp[771] = 173407;
inp[772] = 889;
inp[773] = 172960;
inp[774] = 884;
inp[775] = 172516;
inp[776] = 880;
inp[777] = 172073;
inp[778] = 875;
inp[779] = 171633;
inp[780] = 871;
inp[781] = 171195;
inp[782] = 866;
inp[783] = 170760;
inp[784] = 862;
inp[785] = 170326;
inp[786] = 858;
inp[787] = 169895;
inp[788] = 853;
inp[789] = 169466;
inp[790] = 849;
inp[791] = 169039;
inp[792] = 845;
inp[793] = 168615;
inp[794] = 840;
inp[795] = 168192;
inp[796] = 836;
inp[797] = 167772;
inp[798] = 832;
inp[799] = 167353;
inp[800] = 828;
inp[801] = 166937;
inp[802] = 824;
inp[803] = 166523;
inp[804] = 820;
inp[805] = 166110;
inp[806] = 816;
inp[807] = 165700;
inp[808] = 812;
inp[809] = 165292;
inp[810] = 808;
inp[811] = 164886;
inp[812] = 804;
inp[813] = 164482;
inp[814] = 800;
inp[815] = 164080;
inp[816] = 796;
inp[817] = 163680;
inp[818] = 792;
inp[819] = 163281;
inp[820] = 788;
inp[821] = 162885;
inp[822] = 784;
inp[823] = 162491;
inp[824] = 781;
inp[825] = 162098;
inp[826] = 777;
inp[827] = 161707;
inp[828] = 773;
inp[829] = 161319;
inp[830] = 770;
inp[831] = 160932;
inp[832] = 766;
inp[833] = 160547;
inp[834] = 762;
inp[835] = 160164;
inp[836] = 759;
inp[837] = 159782;
inp[838] = 755;
inp[839] = 159403;
inp[840] = 751;
inp[841] = 159025;
inp[842] = 748;
inp[843] = 158649;
inp[844] = 744;
inp[845] = 158275;
inp[846] = 741;
inp[847] = 157903;
inp[848] = 737;
inp[849] = 157532;
inp[850] = 734;
inp[851] = 157163;
inp[852] = 730;
inp[853] = 156796;
inp[854] = 727;
inp[855] = 156430;
inp[856] = 724;
inp[857] = 156067;
inp[858] = 720;
inp[859] = 155704;
inp[860] = 717;
inp[861] = 155344;
inp[862] = 714;
inp[863] = 154985;
inp[864] = 710;
inp[865] = 154628;
inp[866] = 707;
inp[867] = 154273;
inp[868] = 704;
inp[869] = 153919;
inp[870] = 701;
inp[871] = 153567;
inp[872] = 698;
inp[873] = 153216;
inp[874] = 694;
inp[875] = 152867;
inp[876] = 691;
inp[877] = 152520;
inp[878] = 688;
inp[879] = 152174;
inp[880] = 685;
inp[881] = 151829;
inp[882] = 682;
inp[883] = 151487;
inp[884] = 679;
inp[885] = 151145;
inp[886] = 676;
inp[887] = 150806;
inp[888] = 673;
inp[889] = 150468;
inp[890] = 670;
inp[891] = 150131;
inp[892] = 667;
inp[893] = 149796;
inp[894] = 664;
inp[895] = 149462;
inp[896] = 661;
inp[897] = 149130;
inp[898] = 658;
inp[899] = 148800;
inp[900] = 655;
inp[901] = 148470;
inp[902] = 652;
inp[903] = 148143;
inp[904] = 649;
inp[905] = 147816;
inp[906] = 646;
inp[907] = 147491;
inp[908] = 644;
inp[909] = 147168;
inp[910] = 641;
inp[911] = 146846;
inp[912] = 638;
inp[913] = 146525;
inp[914] = 635;
inp[915] = 146206;
inp[916] = 632;
inp[917] = 145888;
inp[918] = 630;
inp[919] = 145572;
inp[920] = 627;
inp[921] = 145257;
inp[922] = 624;
inp[923] = 144943;
inp[924] = 622;
inp[925] = 144631;
inp[926] = 619;
inp[927] = 144320;
inp[928] = 616;
inp[929] = 144010;
inp[930] = 614;
inp[931] = 143701;
inp[932] = 611;
inp[933] = 143394;
inp[934] = 608;
inp[935] = 143089;
inp[936] = 606;
inp[937] = 142784;
inp[938] = 603;
inp[939] = 142481;
inp[940] = 601;
inp[941] = 142179;
inp[942] = 598;
inp[943] = 141879;
inp[944] = 596;
inp[945] = 141579;
inp[946] = 593;
inp[947] = 141281;
inp[948] = 591;
inp[949] = 140984;
inp[950] = 588;
inp[951] = 140689;
inp[952] = 586;
inp[953] = 140395;
inp[954] = 583;
inp[955] = 140101;
inp[956] = 581;
inp[957] = 139810;
inp[958] = 578;
inp[959] = 139519;
inp[960] = 576;
inp[961] = 139229;
inp[962] = 574;
inp[963] = 138941;
inp[964] = 571;
inp[965] = 138654;
inp[966] = 569;
inp[967] = 138368;
inp[968] = 567;
inp[969] = 138084;
inp[970] = 564;
inp[971] = 137800;
inp[972] = 562;
inp[973] = 137518;
inp[974] = 560;
inp[975] = 137236;
inp[976] = 557;
inp[977] = 136956;
inp[978] = 555;
inp[979] = 136677;
inp[980] = 553;
inp[981] = 136400;
inp[982] = 551;
inp[983] = 136123;
inp[984] = 548;
inp[985] = 135847;
inp[986] = 546;
inp[987] = 135573;
inp[988] = 544;
inp[989] = 135300;
inp[990] = 542;
inp[991] = 135027;
inp[992] = 540;
inp[993] = 134756;
inp[994] = 537;
inp[995] = 134486;
inp[996] = 535;
inp[997] = 134217;
inp[998] = 533;
inp[999] = 133949;
inp[1000] = 531;
inp[1001] = 133682;
inp[1002] = 529;
inp[1003] = 133417;
inp[1004] = 527;
inp[1005] = 133152;
inp[1006] = 525;
inp[1007] = 132888;
inp[1008] = 523;
inp[1009] = 132626;
inp[1010] = 521;
inp[1011] = 132364;
inp[1012] = 519;
inp[1013] = 132103;
inp[1014] = 517;
inp[1015] = 131844;
inp[1016] = 515;
inp[1017] = 131585;
inp[1018] = 513;
inp[1019] = 131328;
}

def void fillLUTNEGEXP(int32_pl[33660] inp)
{
inp[0] = 1073741824;
inp[1] = 1073741824;
inp[2] = 395007542;
inp[3] = 395007542;
inp[4] = 1073741824;
inp[5] = 1073741824;
inp[6] = 651257336;
inp[7] = 145315153;
inp[8] = 1073741824;
inp[9] = 1073741824;
inp[10] = 836230973;
inp[11] = 19666267;
inp[12] = 1073741824;
inp[13] = 1073741824;
inp[14] = 947573833;
inp[15] = 360200;
inp[16] = 1073741824;
inp[17] = 1073741824;
inp[18] = 1008687095;
inp[19] = 120;
inp[20] = 1073741824;
inp[21] = 1073741824;
inp[22] = 1040706261;
inp[23] = 0;
inp[24] = 1073741824;
inp[25] = 1073741824;
inp[26] = 1057094999;
inp[27] = 0;
inp[28] = 1073741824;
inp[29] = 1073741824;
inp[30] = 1065385898;
inp[31] = 0;
inp[32] = 1073741824;
inp[33] = 1073741824;
inp[34] = 1069555701;
inp[35] = 0;
inp[36] = 1073741824;
inp[37] = 1073741824;
inp[38] = 1071646718;
inp[39] = 0;
inp[40] = 1073741824;
inp[41] = 1073741824;
inp[42] = 1072693759;
inp[43] = 0;
inp[44] = 1073741824;
inp[45] = 1073741824;
inp[46] = 1073217663;
inp[47] = 0;
inp[48] = 1073741824;
inp[49] = 1073741824;
inp[50] = 1073479711;
inp[51] = 0;
inp[52] = 1073741824;
inp[53] = 1073741824;
inp[54] = 1073610759;
inp[55] = 0;
inp[56] = 1073741824;
inp[57] = 1073741824;
inp[58] = 1073676289;
inp[59] = 0;
inp[60] = 1073741824;
inp[61] = 1073741824;
inp[62] = 1073709056;
inp[63] = 0;
inp[64] = 1073741824;
inp[65] = 1073741824;
inp[66] = 1073725440;
inp[67] = 0;
inp[68] = 1073741824;
inp[69] = 1073741824;
inp[70] = 1073733632;
inp[71] = 0;
inp[72] = 1073741824;
inp[73] = 1073741824;
inp[74] = 1073737728;
inp[75] = 0;
inp[76] = 1073741824;
inp[77] = 1073741824;
inp[78] = 1073739776;
inp[79] = 0;
inp[80] = 1073741824;
inp[81] = 1073741824;
inp[82] = 1073740800;
inp[83] = 0;
inp[84] = 1073741824;
inp[85] = 1073741824;
inp[86] = 1073741312;
inp[87] = 0;
inp[88] = 1073741824;
inp[89] = 1073741824;
inp[90] = 1073741568;
inp[91] = 0;
inp[92] = 1073741824;
inp[93] = 1073741824;
inp[94] = 1073741696;
inp[95] = 0;
inp[96] = 1073741824;
inp[97] = 1073741824;
inp[98] = 1073741760;
inp[99] = 0;
inp[100] = 1073741824;
inp[101] = 1073741824;
inp[102] = 1073741792;
inp[103] = 0;
inp[104] = 1073741824;
inp[105] = 1073741824;
inp[106] = 1073741808;
inp[107] = 0;
inp[108] = 1073741824;
inp[109] = 1073741824;
inp[110] = 1073741816;
inp[111] = 0;
inp[112] = 1073741824;
inp[113] = 1073741824;
inp[114] = 1073741820;
inp[115] = 0;
inp[116] = 1073741824;
inp[117] = 1073741824;
inp[118] = 1073741822;
inp[119] = 0;
inp[120] = 1073741824;
inp[121] = 1073741824;
inp[122] = 1073741823;
inp[123] = 0;
inp[124] = 1073741824;
inp[125] = 1073741824;
inp[126] = 1073741823;
inp[127] = 0;
inp[128] = 1073741824;
inp[129] = 1073741824;
inp[130] = 1073741823;
inp[131] = 0;
inp[132] = 1073741824;
inp[133] = 1073741824;
inp[134] = 395007542;
inp[135] = 395007542;
inp[136] = 145315153;
inp[137] = 145315153;
inp[138] = 53458457;
inp[139] = 53458457;
inp[140] = 1073741824;
inp[141] = 1073741824;
inp[142] = 651257336;
inp[143] = 145315153;
inp[144] = 395007542;
inp[145] = 19666267;
inp[146] = 239584185;
inp[147] = 2661539;
inp[148] = 1073741824;
inp[149] = 1073741824;
inp[150] = 836230973;
inp[151] = 19666267;
inp[152] = 651257336;
inp[153] = 360200;
inp[154] = 507199723;
inp[155] = 6597;
inp[156] = 1073741824;
inp[157] = 1073741824;
inp[158] = 947573833;
inp[159] = 360200;
inp[160] = 836230973;
inp[161] = 120;
inp[162] = 737971243;
inp[163] = 0;
inp[164] = 1073741824;
inp[165] = 1073741824;
inp[166] = 1008687095;
inp[167] = 120;
inp[168] = 947573833;
inp[169] = 0;
inp[170] = 890163237;
inp[171] = 0;
inp[172] = 1073741824;
inp[173] = 1073741824;
inp[174] = 1040706261;
inp[175] = 0;
inp[176] = 1008687095;
inp[177] = 0;
inp[178] = 977653056;
inp[179] = 0;
inp[180] = 1073741824;
inp[181] = 1073741824;
inp[182] = 1057094999;
inp[183] = 0;
inp[184] = 1040706261;
inp[185] = 0;
inp[186] = 1024571605;
inp[187] = 0;
inp[188] = 1073741824;
inp[189] = 1073741824;
inp[190] = 1065385898;
inp[191] = 0;
inp[192] = 1057094999;
inp[193] = 0;
inp[194] = 1048868621;
inp[195] = 0;
inp[196] = 1073741824;
inp[197] = 1073741824;
inp[198] = 1069555701;
inp[199] = 0;
inp[200] = 1065385898;
inp[201] = 0;
inp[202] = 1061232352;
inp[203] = 0;
inp[204] = 1073741824;
inp[205] = 1073741824;
inp[206] = 1071646718;
inp[207] = 0;
inp[208] = 1069555701;
inp[209] = 0;
inp[210] = 1067468764;
inp[211] = 0;
inp[212] = 1073741824;
inp[213] = 1073741824;
inp[214] = 1072693759;
inp[215] = 0;
inp[216] = 1071646718;
inp[217] = 0;
inp[218] = 1070600699;
inp[219] = 0;
inp[220] = 1073741824;
inp[221] = 1073741824;
inp[222] = 1073217663;
inp[223] = 0;
inp[224] = 1072693759;
inp[225] = 0;
inp[226] = 1072170111;
inp[227] = 0;
inp[228] = 1073741824;
inp[229] = 1073741824;
inp[230] = 1073479711;
inp[231] = 0;
inp[232] = 1073217663;
inp[233] = 0;
inp[234] = 1072955679;
inp[235] = 0;
inp[236] = 1073741824;
inp[237] = 1073741824;
inp[238] = 1073610759;
inp[239] = 0;
inp[240] = 1073479711;
inp[241] = 0;
inp[242] = 1073348679;
inp[243] = 0;
inp[244] = 1073741824;
inp[245] = 1073741824;
inp[246] = 1073676289;
inp[247] = 0;
inp[248] = 1073610759;
inp[249] = 0;
inp[250] = 1073545233;
inp[251] = 0;
inp[252] = 1073741824;
inp[253] = 1073741824;
inp[254] = 1073709056;
inp[255] = 0;
inp[256] = 1073676289;
inp[257] = 0;
inp[258] = 1073643524;
inp[259] = 0;
inp[260] = 1073741824;
inp[261] = 1073741824;
inp[262] = 1073725440;
inp[263] = 0;
inp[264] = 1073709056;
inp[265] = 0;
inp[266] = 1073692673;
inp[267] = 0;
inp[268] = 1073741824;
inp[269] = 1073741824;
inp[270] = 1073733632;
inp[271] = 0;
inp[272] = 1073725440;
inp[273] = 0;
inp[274] = 1073717248;
inp[275] = 0;
inp[276] = 1073741824;
inp[277] = 1073741824;
inp[278] = 1073737728;
inp[279] = 0;
inp[280] = 1073733632;
inp[281] = 0;
inp[282] = 1073729536;
inp[283] = 0;
inp[284] = 1073741824;
inp[285] = 1073741824;
inp[286] = 1073739776;
inp[287] = 0;
inp[288] = 1073737728;
inp[289] = 0;
inp[290] = 1073735680;
inp[291] = 0;
inp[292] = 1073741824;
inp[293] = 1073741824;
inp[294] = 1073740800;
inp[295] = 0;
inp[296] = 1073739776;
inp[297] = 0;
inp[298] = 1073738752;
inp[299] = 0;
inp[300] = 1073741824;
inp[301] = 1073741824;
inp[302] = 1073741312;
inp[303] = 0;
inp[304] = 1073740800;
inp[305] = 0;
inp[306] = 1073740288;
inp[307] = 0;
inp[308] = 1073741824;
inp[309] = 1073741824;
inp[310] = 1073741568;
inp[311] = 0;
inp[312] = 1073741312;
inp[313] = 0;
inp[314] = 1073741056;
inp[315] = 0;
inp[316] = 1073741824;
inp[317] = 1073741824;
inp[318] = 1073741696;
inp[319] = 0;
inp[320] = 1073741568;
inp[321] = 0;
inp[322] = 1073741440;
inp[323] = 0;
inp[324] = 1073741824;
inp[325] = 1073741824;
inp[326] = 1073741760;
inp[327] = 0;
inp[328] = 1073741696;
inp[329] = 0;
inp[330] = 1073741632;
inp[331] = 0;
inp[332] = 1073741824;
inp[333] = 1073741824;
inp[334] = 1073741792;
inp[335] = 0;
inp[336] = 1073741760;
inp[337] = 0;
inp[338] = 1073741728;
inp[339] = 0;
inp[340] = 1073741824;
inp[341] = 1073741824;
inp[342] = 1073741808;
inp[343] = 0;
inp[344] = 1073741792;
inp[345] = 0;
inp[346] = 1073741776;
inp[347] = 0;
inp[348] = 1073741824;
inp[349] = 1073741824;
inp[350] = 1073741816;
inp[351] = 0;
inp[352] = 1073741808;
inp[353] = 0;
inp[354] = 1073741800;
inp[355] = 0;
inp[356] = 1073741824;
inp[357] = 1073741824;
inp[358] = 1073741820;
inp[359] = 0;
inp[360] = 1073741816;
inp[361] = 0;
inp[362] = 1073741812;
inp[363] = 0;
inp[364] = 1073741824;
inp[365] = 1073741824;
inp[366] = 1073741822;
inp[367] = 0;
inp[368] = 1073741820;
inp[369] = 0;
inp[370] = 1073741818;
inp[371] = 0;
inp[372] = 1073741824;
inp[373] = 1073741824;
inp[374] = 1073741823;
inp[375] = 0;
inp[376] = 1073741822;
inp[377] = 0;
inp[378] = 1073741821;
inp[379] = 0;
inp[380] = 1073741824;
inp[381] = 1073741824;
inp[382] = 1073741823;
inp[383] = 0;
inp[384] = 1073741823;
inp[385] = 0;
inp[386] = 1073741822;
inp[387] = 0;
inp[388] = 1073741824;
inp[389] = 1073741824;
inp[390] = 1073741823;
inp[391] = 0;
inp[392] = 1073741823;
inp[393] = 0;
inp[394] = 1073741823;
inp[395] = 0;
inp[396] = 1073741824;
inp[397] = 1073741824;
inp[398] = 395007542;
inp[399] = 395007542;
inp[400] = 145315153;
inp[401] = 145315153;
inp[402] = 53458457;
inp[403] = 53458457;
inp[404] = 19666267;
inp[405] = 19666267;
inp[406] = 7234815;
inp[407] = 7234815;
inp[408] = 2661539;
inp[409] = 2661539;
inp[410] = 979125;
inp[411] = 979125;
inp[412] = 1073741824;
inp[413] = 1073741824;
inp[414] = 651257336;
inp[415] = 145315153;
inp[416] = 395007542;
inp[417] = 19666267;
inp[418] = 239584185;
inp[419] = 2661539;
inp[420] = 145315153;
inp[421] = 360200;
inp[422] = 88138096;
inp[423] = 48747;
inp[424] = 53458457;
inp[425] = 6597;
inp[426] = 32424193;
inp[427] = 892;
inp[428] = 1073741824;
inp[429] = 1073741824;
inp[430] = 836230973;
inp[431] = 19666267;
inp[432] = 651257336;
inp[433] = 360200;
inp[434] = 507199723;
inp[435] = 6597;
inp[436] = 395007542;
inp[437] = 120;
inp[438] = 307632183;
inp[439] = 2;
inp[440] = 239584185;
inp[441] = 0;
inp[442] = 186588351;
inp[443] = 0;
inp[444] = 1073741824;
inp[445] = 1073741824;
inp[446] = 947573833;
inp[447] = 360200;
inp[448] = 836230973;
inp[449] = 120;
inp[450] = 737971243;
inp[451] = 0;
inp[452] = 651257336;
inp[453] = 0;
inp[454] = 574732582;
inp[455] = 0;
inp[456] = 507199723;
inp[457] = 0;
inp[458] = 447602185;
inp[459] = 0;
inp[460] = 1073741824;
inp[461] = 1073741824;
inp[462] = 1008687095;
inp[463] = 120;
inp[464] = 947573833;
inp[465] = 0;
inp[466] = 890163237;
inp[467] = 0;
inp[468] = 836230973;
inp[469] = 0;
inp[470] = 785566299;
inp[471] = 0;
inp[472] = 737971243;
inp[473] = 0;
inp[474] = 693259826;
inp[475] = 0;
inp[476] = 1073741824;
inp[477] = 1073741824;
inp[478] = 1040706261;
inp[479] = 0;
inp[480] = 1008687095;
inp[481] = 0;
inp[482] = 977653056;
inp[483] = 0;
inp[484] = 947573833;
inp[485] = 0;
inp[486] = 918420051;
inp[487] = 0;
inp[488] = 890163237;
inp[489] = 0;
inp[490] = 862775793;
inp[491] = 0;
inp[492] = 1073741824;
inp[493] = 1073741824;
inp[494] = 1057094999;
inp[495] = 0;
inp[496] = 1040706261;
inp[497] = 0;
inp[498] = 1024571605;
inp[499] = 0;
inp[500] = 1008687095;
inp[501] = 0;
inp[502] = 993048851;
inp[503] = 0;
inp[504] = 977653056;
inp[505] = 0;
inp[506] = 962495950;
inp[507] = 0;
inp[508] = 1073741824;
inp[509] = 1073741824;
inp[510] = 1065385898;
inp[511] = 0;
inp[512] = 1057094999;
inp[513] = 0;
inp[514] = 1048868621;
inp[515] = 0;
inp[516] = 1040706261;
inp[517] = 0;
inp[518] = 1032607420;
inp[519] = 0;
inp[520] = 1024571605;
inp[521] = 0;
inp[522] = 1016598326;
inp[523] = 0;
inp[524] = 1073741824;
inp[525] = 1073741824;
inp[526] = 1069555701;
inp[527] = 0;
inp[528] = 1065385898;
inp[529] = 0;
inp[530] = 1061232352;
inp[531] = 0;
inp[532] = 1057094999;
inp[533] = 0;
inp[534] = 1052973777;
inp[535] = 0;
inp[536] = 1048868621;
inp[537] = 0;
inp[538] = 1044779470;
inp[539] = 0;
inp[540] = 1073741824;
inp[541] = 1073741824;
inp[542] = 1071646718;
inp[543] = 0;
inp[544] = 1069555701;
inp[545] = 0;
inp[546] = 1067468764;
inp[547] = 0;
inp[548] = 1065385898;
inp[549] = 0;
inp[550] = 1063307097;
inp[551] = 0;
inp[552] = 1061232352;
inp[553] = 0;
inp[554] = 1059161656;
inp[555] = 0;
inp[556] = 1073741824;
inp[557] = 1073741824;
inp[558] = 1072693759;
inp[559] = 0;
inp[560] = 1071646718;
inp[561] = 0;
inp[562] = 1070600699;
inp[563] = 0;
inp[564] = 1069555701;
inp[565] = 0;
inp[566] = 1068511723;
inp[567] = 0;
inp[568] = 1067468764;
inp[569] = 0;
inp[570] = 1066426822;
inp[571] = 0;
inp[572] = 1073741824;
inp[573] = 1073741824;
inp[574] = 1073217663;
inp[575] = 0;
inp[576] = 1072693759;
inp[577] = 0;
inp[578] = 1072170111;
inp[579] = 0;
inp[580] = 1071646718;
inp[581] = 0;
inp[582] = 1071123581;
inp[583] = 0;
inp[584] = 1070600699;
inp[585] = 0;
inp[586] = 1070078072;
inp[587] = 0;
inp[588] = 1073741824;
inp[589] = 1073741824;
inp[590] = 1073479711;
inp[591] = 0;
inp[592] = 1073217663;
inp[593] = 0;
inp[594] = 1072955679;
inp[595] = 0;
inp[596] = 1072693759;
inp[597] = 0;
inp[598] = 1072431903;
inp[599] = 0;
inp[600] = 1072170111;
inp[601] = 0;
inp[602] = 1071908383;
inp[603] = 0;
inp[604] = 1073741824;
inp[605] = 1073741824;
inp[606] = 1073610759;
inp[607] = 0;
inp[608] = 1073479711;
inp[609] = 0;
inp[610] = 1073348679;
inp[611] = 0;
inp[612] = 1073217663;
inp[613] = 0;
inp[614] = 1073086663;
inp[615] = 0;
inp[616] = 1072955679;
inp[617] = 0;
inp[618] = 1072824711;
inp[619] = 0;
inp[620] = 1073741824;
inp[621] = 1073741824;
inp[622] = 1073676289;
inp[623] = 0;
inp[624] = 1073610759;
inp[625] = 0;
inp[626] = 1073545233;
inp[627] = 0;
inp[628] = 1073479711;
inp[629] = 0;
inp[630] = 1073414193;
inp[631] = 0;
inp[632] = 1073348679;
inp[633] = 0;
inp[634] = 1073283169;
inp[635] = 0;
inp[636] = 1073741824;
inp[637] = 1073741824;
inp[638] = 1073709056;
inp[639] = 0;
inp[640] = 1073676289;
inp[641] = 0;
inp[642] = 1073643524;
inp[643] = 0;
inp[644] = 1073610759;
inp[645] = 0;
inp[646] = 1073577996;
inp[647] = 0;
inp[648] = 1073545233;
inp[649] = 0;
inp[650] = 1073512472;
inp[651] = 0;
inp[652] = 1073741824;
inp[653] = 1073741824;
inp[654] = 1073725440;
inp[655] = 0;
inp[656] = 1073709056;
inp[657] = 0;
inp[658] = 1073692673;
inp[659] = 0;
inp[660] = 1073676289;
inp[661] = 0;
inp[662] = 1073659907;
inp[663] = 0;
inp[664] = 1073643524;
inp[665] = 0;
inp[666] = 1073627142;
inp[667] = 0;
inp[668] = 1073741824;
inp[669] = 1073741824;
inp[670] = 1073733632;
inp[671] = 0;
inp[672] = 1073725440;
inp[673] = 0;
inp[674] = 1073717248;
inp[675] = 0;
inp[676] = 1073709056;
inp[677] = 0;
inp[678] = 1073700864;
inp[679] = 0;
inp[680] = 1073692673;
inp[681] = 0;
inp[682] = 1073684481;
inp[683] = 0;
inp[684] = 1073741824;
inp[685] = 1073741824;
inp[686] = 1073737728;
inp[687] = 0;
inp[688] = 1073733632;
inp[689] = 0;
inp[690] = 1073729536;
inp[691] = 0;
inp[692] = 1073725440;
inp[693] = 0;
inp[694] = 1073721344;
inp[695] = 0;
inp[696] = 1073717248;
inp[697] = 0;
inp[698] = 1073713152;
inp[699] = 0;
inp[700] = 1073741824;
inp[701] = 1073741824;
inp[702] = 1073739776;
inp[703] = 0;
inp[704] = 1073737728;
inp[705] = 0;
inp[706] = 1073735680;
inp[707] = 0;
inp[708] = 1073733632;
inp[709] = 0;
inp[710] = 1073731584;
inp[711] = 0;
inp[712] = 1073729536;
inp[713] = 0;
inp[714] = 1073727488;
inp[715] = 0;
inp[716] = 1073741824;
inp[717] = 1073741824;
inp[718] = 1073740800;
inp[719] = 0;
inp[720] = 1073739776;
inp[721] = 0;
inp[722] = 1073738752;
inp[723] = 0;
inp[724] = 1073737728;
inp[725] = 0;
inp[726] = 1073736704;
inp[727] = 0;
inp[728] = 1073735680;
inp[729] = 0;
inp[730] = 1073734656;
inp[731] = 0;
inp[732] = 1073741824;
inp[733] = 1073741824;
inp[734] = 1073741312;
inp[735] = 0;
inp[736] = 1073740800;
inp[737] = 0;
inp[738] = 1073740288;
inp[739] = 0;
inp[740] = 1073739776;
inp[741] = 0;
inp[742] = 1073739264;
inp[743] = 0;
inp[744] = 1073738752;
inp[745] = 0;
inp[746] = 1073738240;
inp[747] = 0;
inp[748] = 1073741824;
inp[749] = 1073741824;
inp[750] = 1073741568;
inp[751] = 0;
inp[752] = 1073741312;
inp[753] = 0;
inp[754] = 1073741056;
inp[755] = 0;
inp[756] = 1073740800;
inp[757] = 0;
inp[758] = 1073740544;
inp[759] = 0;
inp[760] = 1073740288;
inp[761] = 0;
inp[762] = 1073740032;
inp[763] = 0;
inp[764] = 1073741824;
inp[765] = 1073741824;
inp[766] = 1073741696;
inp[767] = 0;
inp[768] = 1073741568;
inp[769] = 0;
inp[770] = 1073741440;
inp[771] = 0;
inp[772] = 1073741312;
inp[773] = 0;
inp[774] = 1073741184;
inp[775] = 0;
inp[776] = 1073741056;
inp[777] = 0;
inp[778] = 1073740928;
inp[779] = 0;
inp[780] = 1073741824;
inp[781] = 1073741824;
inp[782] = 1073741760;
inp[783] = 0;
inp[784] = 1073741696;
inp[785] = 0;
inp[786] = 1073741632;
inp[787] = 0;
inp[788] = 1073741568;
inp[789] = 0;
inp[790] = 1073741504;
inp[791] = 0;
inp[792] = 1073741440;
inp[793] = 0;
inp[794] = 1073741376;
inp[795] = 0;
inp[796] = 1073741824;
inp[797] = 1073741824;
inp[798] = 1073741792;
inp[799] = 0;
inp[800] = 1073741760;
inp[801] = 0;
inp[802] = 1073741728;
inp[803] = 0;
inp[804] = 1073741696;
inp[805] = 0;
inp[806] = 1073741664;
inp[807] = 0;
inp[808] = 1073741632;
inp[809] = 0;
inp[810] = 1073741600;
inp[811] = 0;
inp[812] = 1073741824;
inp[813] = 1073741824;
inp[814] = 1073741808;
inp[815] = 0;
inp[816] = 1073741792;
inp[817] = 0;
inp[818] = 1073741776;
inp[819] = 0;
inp[820] = 1073741760;
inp[821] = 0;
inp[822] = 1073741744;
inp[823] = 0;
inp[824] = 1073741728;
inp[825] = 0;
inp[826] = 1073741712;
inp[827] = 0;
inp[828] = 1073741824;
inp[829] = 1073741824;
inp[830] = 1073741816;
inp[831] = 0;
inp[832] = 1073741808;
inp[833] = 0;
inp[834] = 1073741800;
inp[835] = 0;
inp[836] = 1073741792;
inp[837] = 0;
inp[838] = 1073741784;
inp[839] = 0;
inp[840] = 1073741776;
inp[841] = 0;
inp[842] = 1073741768;
inp[843] = 0;
inp[844] = 1073741824;
inp[845] = 1073741824;
inp[846] = 1073741820;
inp[847] = 0;
inp[848] = 1073741816;
inp[849] = 0;
inp[850] = 1073741812;
inp[851] = 0;
inp[852] = 1073741808;
inp[853] = 0;
inp[854] = 1073741804;
inp[855] = 0;
inp[856] = 1073741800;
inp[857] = 0;
inp[858] = 1073741796;
inp[859] = 0;
inp[860] = 1073741824;
inp[861] = 1073741824;
inp[862] = 1073741822;
inp[863] = 0;
inp[864] = 1073741820;
inp[865] = 0;
inp[866] = 1073741818;
inp[867] = 0;
inp[868] = 1073741816;
inp[869] = 0;
inp[870] = 1073741814;
inp[871] = 0;
inp[872] = 1073741812;
inp[873] = 0;
inp[874] = 1073741810;
inp[875] = 0;
inp[876] = 1073741824;
inp[877] = 1073741824;
inp[878] = 1073741823;
inp[879] = 0;
inp[880] = 1073741822;
inp[881] = 0;
inp[882] = 1073741821;
inp[883] = 0;
inp[884] = 1073741820;
inp[885] = 0;
inp[886] = 1073741819;
inp[887] = 0;
inp[888] = 1073741818;
inp[889] = 0;
inp[890] = 1073741817;
inp[891] = 0;
inp[892] = 1073741824;
inp[893] = 1073741824;
inp[894] = 1073741823;
inp[895] = 0;
inp[896] = 1073741823;
inp[897] = 0;
inp[898] = 1073741822;
inp[899] = 0;
inp[900] = 1073741822;
inp[901] = 0;
inp[902] = 1073741821;
inp[903] = 0;
inp[904] = 1073741821;
inp[905] = 0;
inp[906] = 1073741820;
inp[907] = 0;
inp[908] = 1073741824;
inp[909] = 1073741824;
inp[910] = 1073741823;
inp[911] = 0;
inp[912] = 1073741823;
inp[913] = 0;
inp[914] = 1073741823;
inp[915] = 0;
inp[916] = 1073741823;
inp[917] = 0;
inp[918] = 1073741822;
inp[919] = 0;
inp[920] = 1073741822;
inp[921] = 0;
inp[922] = 1073741822;
inp[923] = 0;
inp[924] = 1073741824;
inp[925] = 1073741824;
inp[926] = 395007542;
inp[927] = 395007542;
inp[928] = 145315153;
inp[929] = 145315153;
inp[930] = 53458457;
inp[931] = 53458457;
inp[932] = 19666267;
inp[933] = 19666267;
inp[934] = 7234815;
inp[935] = 7234815;
inp[936] = 2661539;
inp[937] = 2661539;
inp[938] = 979125;
inp[939] = 979125;
inp[940] = 360200;
inp[941] = 360200;
inp[942] = 132510;
inp[943] = 132510;
inp[944] = 48747;
inp[945] = 48747;
inp[946] = 17933;
inp[947] = 17933;
inp[948] = 6597;
inp[949] = 6597;
inp[950] = 2427;
inp[951] = 2427;
inp[952] = 892;
inp[953] = 892;
inp[954] = 328;
inp[955] = 328;
inp[956] = 1073741824;
inp[957] = 1073741824;
inp[958] = 651257336;
inp[959] = 145315153;
inp[960] = 395007542;
inp[961] = 19666267;
inp[962] = 239584185;
inp[963] = 2661539;
inp[964] = 145315153;
inp[965] = 360200;
inp[966] = 88138096;
inp[967] = 48747;
inp[968] = 53458457;
inp[969] = 6597;
inp[970] = 32424193;
inp[971] = 892;
inp[972] = 19666267;
inp[973] = 120;
inp[974] = 11928194;
inp[975] = 16;
inp[976] = 7234815;
inp[977] = 2;
inp[978] = 4388137;
inp[979] = 0;
inp[980] = 2661539;
inp[981] = 0;
inp[982] = 1614305;
inp[983] = 0;
inp[984] = 979125;
inp[985] = 0;
inp[986] = 593869;
inp[987] = 0;
inp[988] = 1073741824;
inp[989] = 1073741824;
inp[990] = 836230973;
inp[991] = 19666267;
inp[992] = 651257336;
inp[993] = 360200;
inp[994] = 507199723;
inp[995] = 6597;
inp[996] = 395007542;
inp[997] = 120;
inp[998] = 307632183;
inp[999] = 2;
inp[1000] = 239584185;
inp[1001] = 0;
inp[1002] = 186588351;
inp[1003] = 0;
inp[1004] = 145315153;
inp[1005] = 0;
inp[1006] = 113171555;
inp[1007] = 0;
inp[1008] = 88138096;
inp[1009] = 0;
inp[1010] = 68642018;
inp[1011] = 0;
inp[1012] = 53458457;
inp[1013] = 0;
inp[1014] = 41633488;
inp[1015] = 0;
inp[1016] = 32424193;
inp[1017] = 0;
inp[1018] = 25251987;
inp[1019] = 0;
inp[1020] = 1073741824;
inp[1021] = 1073741824;
inp[1022] = 947573833;
inp[1023] = 360200;
inp[1024] = 836230973;
inp[1025] = 120;
inp[1026] = 737971243;
inp[1027] = 0;
inp[1028] = 651257336;
inp[1029] = 0;
inp[1030] = 574732582;
inp[1031] = 0;
inp[1032] = 507199723;
inp[1033] = 0;
inp[1034] = 447602185;
inp[1035] = 0;
inp[1036] = 395007542;
inp[1037] = 0;
inp[1038] = 348592932;
inp[1039] = 0;
inp[1040] = 307632183;
inp[1041] = 0;
inp[1042] = 271484448;
inp[1043] = 0;
inp[1044] = 239584185;
inp[1045] = 0;
inp[1046] = 211432301;
inp[1047] = 0;
inp[1048] = 186588351;
inp[1049] = 0;
inp[1050] = 164663641;
inp[1051] = 0;
inp[1052] = 1073741824;
inp[1053] = 1073741824;
inp[1054] = 1008687095;
inp[1055] = 120;
inp[1056] = 947573833;
inp[1057] = 0;
inp[1058] = 890163237;
inp[1059] = 0;
inp[1060] = 836230973;
inp[1061] = 0;
inp[1062] = 785566299;
inp[1063] = 0;
inp[1064] = 737971243;
inp[1065] = 0;
inp[1066] = 693259826;
inp[1067] = 0;
inp[1068] = 651257336;
inp[1069] = 0;
inp[1070] = 611799649;
inp[1071] = 0;
inp[1072] = 574732582;
inp[1073] = 0;
inp[1074] = 539911295;
inp[1075] = 0;
inp[1076] = 507199723;
inp[1077] = 0;
inp[1078] = 476470046;
inp[1079] = 0;
inp[1080] = 447602185;
inp[1081] = 0;
inp[1082] = 420483339;
inp[1083] = 0;
inp[1084] = 1073741824;
inp[1085] = 1073741824;
inp[1086] = 1040706261;
inp[1087] = 0;
inp[1088] = 1008687095;
inp[1089] = 0;
inp[1090] = 977653056;
inp[1091] = 0;
inp[1092] = 947573833;
inp[1093] = 0;
inp[1094] = 918420051;
inp[1095] = 0;
inp[1096] = 890163237;
inp[1097] = 0;
inp[1098] = 862775793;
inp[1099] = 0;
inp[1100] = 836230973;
inp[1101] = 0;
inp[1102] = 810502851;
inp[1103] = 0;
inp[1104] = 785566299;
inp[1105] = 0;
inp[1106] = 761396965;
inp[1107] = 0;
inp[1108] = 737971243;
inp[1109] = 0;
inp[1110] = 715266255;
inp[1111] = 0;
inp[1112] = 693259826;
inp[1113] = 0;
inp[1114] = 671930463;
inp[1115] = 0;
inp[1116] = 1073741824;
inp[1117] = 1073741824;
inp[1118] = 1057094999;
inp[1119] = 0;
inp[1120] = 1040706261;
inp[1121] = 0;
inp[1122] = 1024571605;
inp[1123] = 0;
inp[1124] = 1008687095;
inp[1125] = 0;
inp[1126] = 993048851;
inp[1127] = 0;
inp[1128] = 977653056;
inp[1129] = 0;
inp[1130] = 962495950;
inp[1131] = 0;
inp[1132] = 947573833;
inp[1133] = 0;
inp[1134] = 932883063;
inp[1135] = 0;
inp[1136] = 918420051;
inp[1137] = 0;
inp[1138] = 904181268;
inp[1139] = 0;
inp[1140] = 890163237;
inp[1141] = 0;
inp[1142] = 876362535;
inp[1143] = 0;
inp[1144] = 862775793;
inp[1145] = 0;
inp[1146] = 849399695;
inp[1147] = 0;
inp[1148] = 1073741824;
inp[1149] = 1073741824;
inp[1150] = 1065385898;
inp[1151] = 0;
inp[1152] = 1057094999;
inp[1153] = 0;
inp[1154] = 1048868621;
inp[1155] = 0;
inp[1156] = 1040706261;
inp[1157] = 0;
inp[1158] = 1032607420;
inp[1159] = 0;
inp[1160] = 1024571605;
inp[1161] = 0;
inp[1162] = 1016598326;
inp[1163] = 0;
inp[1164] = 1008687095;
inp[1165] = 0;
inp[1166] = 1000837430;
inp[1167] = 0;
inp[1168] = 993048851;
inp[1169] = 0;
inp[1170] = 985320884;
inp[1171] = 0;
inp[1172] = 977653056;
inp[1173] = 0;
inp[1174] = 970044899;
inp[1175] = 0;
inp[1176] = 962495950;
inp[1177] = 0;
inp[1178] = 955005747;
inp[1179] = 0;
inp[1180] = 1073741824;
inp[1181] = 1073741824;
inp[1182] = 1069555701;
inp[1183] = 0;
inp[1184] = 1065385898;
inp[1185] = 0;
inp[1186] = 1061232352;
inp[1187] = 0;
inp[1188] = 1057094999;
inp[1189] = 0;
inp[1190] = 1052973777;
inp[1191] = 0;
inp[1192] = 1048868621;
inp[1193] = 0;
inp[1194] = 1044779470;
inp[1195] = 0;
inp[1196] = 1040706261;
inp[1197] = 0;
inp[1198] = 1036648931;
inp[1199] = 0;
inp[1200] = 1032607420;
inp[1201] = 0;
inp[1202] = 1028581665;
inp[1203] = 0;
inp[1204] = 1024571605;
inp[1205] = 0;
inp[1206] = 1020577179;
inp[1207] = 0;
inp[1208] = 1016598326;
inp[1209] = 0;
inp[1210] = 1012634985;
inp[1211] = 0;
inp[1212] = 1073741824;
inp[1213] = 1073741824;
inp[1214] = 1071646718;
inp[1215] = 0;
inp[1216] = 1069555701;
inp[1217] = 0;
inp[1218] = 1067468764;
inp[1219] = 0;
inp[1220] = 1065385898;
inp[1221] = 0;
inp[1222] = 1063307097;
inp[1223] = 0;
inp[1224] = 1061232352;
inp[1225] = 0;
inp[1226] = 1059161656;
inp[1227] = 0;
inp[1228] = 1057094999;
inp[1229] = 0;
inp[1230] = 1055032376;
inp[1231] = 0;
inp[1232] = 1052973777;
inp[1233] = 0;
inp[1234] = 1050919194;
inp[1235] = 0;
inp[1236] = 1048868621;
inp[1237] = 0;
inp[1238] = 1046822049;
inp[1239] = 0;
inp[1240] = 1044779470;
inp[1241] = 0;
inp[1242] = 1042740876;
inp[1243] = 0;
inp[1244] = 1073741824;
inp[1245] = 1073741824;
inp[1246] = 1072693759;
inp[1247] = 0;
inp[1248] = 1071646718;
inp[1249] = 0;
inp[1250] = 1070600699;
inp[1251] = 0;
inp[1252] = 1069555701;
inp[1253] = 0;
inp[1254] = 1068511723;
inp[1255] = 0;
inp[1256] = 1067468764;
inp[1257] = 0;
inp[1258] = 1066426822;
inp[1259] = 0;
inp[1260] = 1065385898;
inp[1261] = 0;
inp[1262] = 1064345990;
inp[1263] = 0;
inp[1264] = 1063307097;
inp[1265] = 0;
inp[1266] = 1062269218;
inp[1267] = 0;
inp[1268] = 1061232352;
inp[1269] = 0;
inp[1270] = 1060196498;
inp[1271] = 0;
inp[1272] = 1059161656;
inp[1273] = 0;
inp[1274] = 1058127823;
inp[1275] = 0;
inp[1276] = 1073741824;
inp[1277] = 1073741824;
inp[1278] = 1073217663;
inp[1279] = 0;
inp[1280] = 1072693759;
inp[1281] = 0;
inp[1282] = 1072170111;
inp[1283] = 0;
inp[1284] = 1071646718;
inp[1285] = 0;
inp[1286] = 1071123581;
inp[1287] = 0;
inp[1288] = 1070600699;
inp[1289] = 0;
inp[1290] = 1070078072;
inp[1291] = 0;
inp[1292] = 1069555701;
inp[1293] = 0;
inp[1294] = 1069033584;
inp[1295] = 0;
inp[1296] = 1068511723;
inp[1297] = 0;
inp[1298] = 1067990116;
inp[1299] = 0;
inp[1300] = 1067468764;
inp[1301] = 0;
inp[1302] = 1066947666;
inp[1303] = 0;
inp[1304] = 1066426822;
inp[1305] = 0;
inp[1306] = 1065906233;
inp[1307] = 0;
inp[1308] = 1073741824;
inp[1309] = 1073741824;
inp[1310] = 1073479711;
inp[1311] = 0;
inp[1312] = 1073217663;
inp[1313] = 0;
inp[1314] = 1072955679;
inp[1315] = 0;
inp[1316] = 1072693759;
inp[1317] = 0;
inp[1318] = 1072431903;
inp[1319] = 0;
inp[1320] = 1072170111;
inp[1321] = 0;
inp[1322] = 1071908383;
inp[1323] = 0;
inp[1324] = 1071646718;
inp[1325] = 0;
inp[1326] = 1071385118;
inp[1327] = 0;
inp[1328] = 1071123581;
inp[1329] = 0;
inp[1330] = 1070862108;
inp[1331] = 0;
inp[1332] = 1070600699;
inp[1333] = 0;
inp[1334] = 1070339354;
inp[1335] = 0;
inp[1336] = 1070078072;
inp[1337] = 0;
inp[1338] = 1069816855;
inp[1339] = 0;
inp[1340] = 1073741824;
inp[1341] = 1073741824;
inp[1342] = 1073610759;
inp[1343] = 0;
inp[1344] = 1073479711;
inp[1345] = 0;
inp[1346] = 1073348679;
inp[1347] = 0;
inp[1348] = 1073217663;
inp[1349] = 0;
inp[1350] = 1073086663;
inp[1351] = 0;
inp[1352] = 1072955679;
inp[1353] = 0;
inp[1354] = 1072824711;
inp[1355] = 0;
inp[1356] = 1072693759;
inp[1357] = 0;
inp[1358] = 1072562823;
inp[1359] = 0;
inp[1360] = 1072431903;
inp[1361] = 0;
inp[1362] = 1072300999;
inp[1363] = 0;
inp[1364] = 1072170111;
inp[1365] = 0;
inp[1366] = 1072039239;
inp[1367] = 0;
inp[1368] = 1071908383;
inp[1369] = 0;
inp[1370] = 1071777542;
inp[1371] = 0;
inp[1372] = 1073741824;
inp[1373] = 1073741824;
inp[1374] = 1073676289;
inp[1375] = 0;
inp[1376] = 1073610759;
inp[1377] = 0;
inp[1378] = 1073545233;
inp[1379] = 0;
inp[1380] = 1073479711;
inp[1381] = 0;
inp[1382] = 1073414193;
inp[1383] = 0;
inp[1384] = 1073348679;
inp[1385] = 0;
inp[1386] = 1073283169;
inp[1387] = 0;
inp[1388] = 1073217663;
inp[1389] = 0;
inp[1390] = 1073152161;
inp[1391] = 0;
inp[1392] = 1073086663;
inp[1393] = 0;
inp[1394] = 1073021169;
inp[1395] = 0;
inp[1396] = 1072955679;
inp[1397] = 0;
inp[1398] = 1072890193;
inp[1399] = 0;
inp[1400] = 1072824711;
inp[1401] = 0;
inp[1402] = 1072759233;
inp[1403] = 0;
inp[1404] = 1073741824;
inp[1405] = 1073741824;
inp[1406] = 1073709056;
inp[1407] = 0;
inp[1408] = 1073676289;
inp[1409] = 0;
inp[1410] = 1073643524;
inp[1411] = 0;
inp[1412] = 1073610759;
inp[1413] = 0;
inp[1414] = 1073577996;
inp[1415] = 0;
inp[1416] = 1073545233;
inp[1417] = 0;
inp[1418] = 1073512472;
inp[1419] = 0;
inp[1420] = 1073479711;
inp[1421] = 0;
inp[1422] = 1073446952;
inp[1423] = 0;
inp[1424] = 1073414193;
inp[1425] = 0;
inp[1426] = 1073381436;
inp[1427] = 0;
inp[1428] = 1073348679;
inp[1429] = 0;
inp[1430] = 1073315924;
inp[1431] = 0;
inp[1432] = 1073283169;
inp[1433] = 0;
inp[1434] = 1073250416;
inp[1435] = 0;
inp[1436] = 1073741824;
inp[1437] = 1073741824;
inp[1438] = 1073725440;
inp[1439] = 0;
inp[1440] = 1073709056;
inp[1441] = 0;
inp[1442] = 1073692673;
inp[1443] = 0;
inp[1444] = 1073676289;
inp[1445] = 0;
inp[1446] = 1073659907;
inp[1447] = 0;
inp[1448] = 1073643524;
inp[1449] = 0;
inp[1450] = 1073627142;
inp[1451] = 0;
inp[1452] = 1073610759;
inp[1453] = 0;
inp[1454] = 1073594378;
inp[1455] = 0;
inp[1456] = 1073577996;
inp[1457] = 0;
inp[1458] = 1073561615;
inp[1459] = 0;
inp[1460] = 1073545233;
inp[1461] = 0;
inp[1462] = 1073528853;
inp[1463] = 0;
inp[1464] = 1073512472;
inp[1465] = 0;
inp[1466] = 1073496092;
inp[1467] = 0;
inp[1468] = 1073741824;
inp[1469] = 1073741824;
inp[1470] = 1073733632;
inp[1471] = 0;
inp[1472] = 1073725440;
inp[1473] = 0;
inp[1474] = 1073717248;
inp[1475] = 0;
inp[1476] = 1073709056;
inp[1477] = 0;
inp[1478] = 1073700864;
inp[1479] = 0;
inp[1480] = 1073692673;
inp[1481] = 0;
inp[1482] = 1073684481;
inp[1483] = 0;
inp[1484] = 1073676289;
inp[1485] = 0;
inp[1486] = 1073668098;
inp[1487] = 0;
inp[1488] = 1073659907;
inp[1489] = 0;
inp[1490] = 1073651715;
inp[1491] = 0;
inp[1492] = 1073643524;
inp[1493] = 0;
inp[1494] = 1073635333;
inp[1495] = 0;
inp[1496] = 1073627142;
inp[1497] = 0;
inp[1498] = 1073618951;
inp[1499] = 0;
inp[1500] = 1073741824;
inp[1501] = 1073741824;
inp[1502] = 1073737728;
inp[1503] = 0;
inp[1504] = 1073733632;
inp[1505] = 0;
inp[1506] = 1073729536;
inp[1507] = 0;
inp[1508] = 1073725440;
inp[1509] = 0;
inp[1510] = 1073721344;
inp[1511] = 0;
inp[1512] = 1073717248;
inp[1513] = 0;
inp[1514] = 1073713152;
inp[1515] = 0;
inp[1516] = 1073709056;
inp[1517] = 0;
inp[1518] = 1073704960;
inp[1519] = 0;
inp[1520] = 1073700864;
inp[1521] = 0;
inp[1522] = 1073696768;
inp[1523] = 0;
inp[1524] = 1073692673;
inp[1525] = 0;
inp[1526] = 1073688577;
inp[1527] = 0;
inp[1528] = 1073684481;
inp[1529] = 0;
inp[1530] = 1073680385;
inp[1531] = 0;
inp[1532] = 1073741824;
inp[1533] = 1073741824;
inp[1534] = 1073739776;
inp[1535] = 0;
inp[1536] = 1073737728;
inp[1537] = 0;
inp[1538] = 1073735680;
inp[1539] = 0;
inp[1540] = 1073733632;
inp[1541] = 0;
inp[1542] = 1073731584;
inp[1543] = 0;
inp[1544] = 1073729536;
inp[1545] = 0;
inp[1546] = 1073727488;
inp[1547] = 0;
inp[1548] = 1073725440;
inp[1549] = 0;
inp[1550] = 1073723392;
inp[1551] = 0;
inp[1552] = 1073721344;
inp[1553] = 0;
inp[1554] = 1073719296;
inp[1555] = 0;
inp[1556] = 1073717248;
inp[1557] = 0;
inp[1558] = 1073715200;
inp[1559] = 0;
inp[1560] = 1073713152;
inp[1561] = 0;
inp[1562] = 1073711104;
inp[1563] = 0;
inp[1564] = 1073741824;
inp[1565] = 1073741824;
inp[1566] = 1073740800;
inp[1567] = 0;
inp[1568] = 1073739776;
inp[1569] = 0;
inp[1570] = 1073738752;
inp[1571] = 0;
inp[1572] = 1073737728;
inp[1573] = 0;
inp[1574] = 1073736704;
inp[1575] = 0;
inp[1576] = 1073735680;
inp[1577] = 0;
inp[1578] = 1073734656;
inp[1579] = 0;
inp[1580] = 1073733632;
inp[1581] = 0;
inp[1582] = 1073732608;
inp[1583] = 0;
inp[1584] = 1073731584;
inp[1585] = 0;
inp[1586] = 1073730560;
inp[1587] = 0;
inp[1588] = 1073729536;
inp[1589] = 0;
inp[1590] = 1073728512;
inp[1591] = 0;
inp[1592] = 1073727488;
inp[1593] = 0;
inp[1594] = 1073726464;
inp[1595] = 0;
inp[1596] = 1073741824;
inp[1597] = 1073741824;
inp[1598] = 1073741312;
inp[1599] = 0;
inp[1600] = 1073740800;
inp[1601] = 0;
inp[1602] = 1073740288;
inp[1603] = 0;
inp[1604] = 1073739776;
inp[1605] = 0;
inp[1606] = 1073739264;
inp[1607] = 0;
inp[1608] = 1073738752;
inp[1609] = 0;
inp[1610] = 1073738240;
inp[1611] = 0;
inp[1612] = 1073737728;
inp[1613] = 0;
inp[1614] = 1073737216;
inp[1615] = 0;
inp[1616] = 1073736704;
inp[1617] = 0;
inp[1618] = 1073736192;
inp[1619] = 0;
inp[1620] = 1073735680;
inp[1621] = 0;
inp[1622] = 1073735168;
inp[1623] = 0;
inp[1624] = 1073734656;
inp[1625] = 0;
inp[1626] = 1073734144;
inp[1627] = 0;
inp[1628] = 1073741824;
inp[1629] = 1073741824;
inp[1630] = 1073741568;
inp[1631] = 0;
inp[1632] = 1073741312;
inp[1633] = 0;
inp[1634] = 1073741056;
inp[1635] = 0;
inp[1636] = 1073740800;
inp[1637] = 0;
inp[1638] = 1073740544;
inp[1639] = 0;
inp[1640] = 1073740288;
inp[1641] = 0;
inp[1642] = 1073740032;
inp[1643] = 0;
inp[1644] = 1073739776;
inp[1645] = 0;
inp[1646] = 1073739520;
inp[1647] = 0;
inp[1648] = 1073739264;
inp[1649] = 0;
inp[1650] = 1073739008;
inp[1651] = 0;
inp[1652] = 1073738752;
inp[1653] = 0;
inp[1654] = 1073738496;
inp[1655] = 0;
inp[1656] = 1073738240;
inp[1657] = 0;
inp[1658] = 1073737984;
inp[1659] = 0;
inp[1660] = 1073741824;
inp[1661] = 1073741824;
inp[1662] = 1073741696;
inp[1663] = 0;
inp[1664] = 1073741568;
inp[1665] = 0;
inp[1666] = 1073741440;
inp[1667] = 0;
inp[1668] = 1073741312;
inp[1669] = 0;
inp[1670] = 1073741184;
inp[1671] = 0;
inp[1672] = 1073741056;
inp[1673] = 0;
inp[1674] = 1073740928;
inp[1675] = 0;
inp[1676] = 1073740800;
inp[1677] = 0;
inp[1678] = 1073740672;
inp[1679] = 0;
inp[1680] = 1073740544;
inp[1681] = 0;
inp[1682] = 1073740416;
inp[1683] = 0;
inp[1684] = 1073740288;
inp[1685] = 0;
inp[1686] = 1073740160;
inp[1687] = 0;
inp[1688] = 1073740032;
inp[1689] = 0;
inp[1690] = 1073739904;
inp[1691] = 0;
inp[1692] = 1073741824;
inp[1693] = 1073741824;
inp[1694] = 1073741760;
inp[1695] = 0;
inp[1696] = 1073741696;
inp[1697] = 0;
inp[1698] = 1073741632;
inp[1699] = 0;
inp[1700] = 1073741568;
inp[1701] = 0;
inp[1702] = 1073741504;
inp[1703] = 0;
inp[1704] = 1073741440;
inp[1705] = 0;
inp[1706] = 1073741376;
inp[1707] = 0;
inp[1708] = 1073741312;
inp[1709] = 0;
inp[1710] = 1073741248;
inp[1711] = 0;
inp[1712] = 1073741184;
inp[1713] = 0;
inp[1714] = 1073741120;
inp[1715] = 0;
inp[1716] = 1073741056;
inp[1717] = 0;
inp[1718] = 1073740992;
inp[1719] = 0;
inp[1720] = 1073740928;
inp[1721] = 0;
inp[1722] = 1073740864;
inp[1723] = 0;
inp[1724] = 1073741824;
inp[1725] = 1073741824;
inp[1726] = 1073741792;
inp[1727] = 0;
inp[1728] = 1073741760;
inp[1729] = 0;
inp[1730] = 1073741728;
inp[1731] = 0;
inp[1732] = 1073741696;
inp[1733] = 0;
inp[1734] = 1073741664;
inp[1735] = 0;
inp[1736] = 1073741632;
inp[1737] = 0;
inp[1738] = 1073741600;
inp[1739] = 0;
inp[1740] = 1073741568;
inp[1741] = 0;
inp[1742] = 1073741536;
inp[1743] = 0;
inp[1744] = 1073741504;
inp[1745] = 0;
inp[1746] = 1073741472;
inp[1747] = 0;
inp[1748] = 1073741440;
inp[1749] = 0;
inp[1750] = 1073741408;
inp[1751] = 0;
inp[1752] = 1073741376;
inp[1753] = 0;
inp[1754] = 1073741344;
inp[1755] = 0;
inp[1756] = 1073741824;
inp[1757] = 1073741824;
inp[1758] = 1073741808;
inp[1759] = 0;
inp[1760] = 1073741792;
inp[1761] = 0;
inp[1762] = 1073741776;
inp[1763] = 0;
inp[1764] = 1073741760;
inp[1765] = 0;
inp[1766] = 1073741744;
inp[1767] = 0;
inp[1768] = 1073741728;
inp[1769] = 0;
inp[1770] = 1073741712;
inp[1771] = 0;
inp[1772] = 1073741696;
inp[1773] = 0;
inp[1774] = 1073741680;
inp[1775] = 0;
inp[1776] = 1073741664;
inp[1777] = 0;
inp[1778] = 1073741648;
inp[1779] = 0;
inp[1780] = 1073741632;
inp[1781] = 0;
inp[1782] = 1073741616;
inp[1783] = 0;
inp[1784] = 1073741600;
inp[1785] = 0;
inp[1786] = 1073741584;
inp[1787] = 0;
inp[1788] = 1073741824;
inp[1789] = 1073741824;
inp[1790] = 1073741816;
inp[1791] = 0;
inp[1792] = 1073741808;
inp[1793] = 0;
inp[1794] = 1073741800;
inp[1795] = 0;
inp[1796] = 1073741792;
inp[1797] = 0;
inp[1798] = 1073741784;
inp[1799] = 0;
inp[1800] = 1073741776;
inp[1801] = 0;
inp[1802] = 1073741768;
inp[1803] = 0;
inp[1804] = 1073741760;
inp[1805] = 0;
inp[1806] = 1073741752;
inp[1807] = 0;
inp[1808] = 1073741744;
inp[1809] = 0;
inp[1810] = 1073741736;
inp[1811] = 0;
inp[1812] = 1073741728;
inp[1813] = 0;
inp[1814] = 1073741720;
inp[1815] = 0;
inp[1816] = 1073741712;
inp[1817] = 0;
inp[1818] = 1073741704;
inp[1819] = 0;
inp[1820] = 1073741824;
inp[1821] = 1073741824;
inp[1822] = 1073741820;
inp[1823] = 0;
inp[1824] = 1073741816;
inp[1825] = 0;
inp[1826] = 1073741812;
inp[1827] = 0;
inp[1828] = 1073741808;
inp[1829] = 0;
inp[1830] = 1073741804;
inp[1831] = 0;
inp[1832] = 1073741800;
inp[1833] = 0;
inp[1834] = 1073741796;
inp[1835] = 0;
inp[1836] = 1073741792;
inp[1837] = 0;
inp[1838] = 1073741788;
inp[1839] = 0;
inp[1840] = 1073741784;
inp[1841] = 0;
inp[1842] = 1073741780;
inp[1843] = 0;
inp[1844] = 1073741776;
inp[1845] = 0;
inp[1846] = 1073741772;
inp[1847] = 0;
inp[1848] = 1073741768;
inp[1849] = 0;
inp[1850] = 1073741764;
inp[1851] = 0;
inp[1852] = 1073741824;
inp[1853] = 1073741824;
inp[1854] = 1073741822;
inp[1855] = 0;
inp[1856] = 1073741820;
inp[1857] = 0;
inp[1858] = 1073741818;
inp[1859] = 0;
inp[1860] = 1073741816;
inp[1861] = 0;
inp[1862] = 1073741814;
inp[1863] = 0;
inp[1864] = 1073741812;
inp[1865] = 0;
inp[1866] = 1073741810;
inp[1867] = 0;
inp[1868] = 1073741808;
inp[1869] = 0;
inp[1870] = 1073741806;
inp[1871] = 0;
inp[1872] = 1073741804;
inp[1873] = 0;
inp[1874] = 1073741802;
inp[1875] = 0;
inp[1876] = 1073741800;
inp[1877] = 0;
inp[1878] = 1073741798;
inp[1879] = 0;
inp[1880] = 1073741796;
inp[1881] = 0;
inp[1882] = 1073741794;
inp[1883] = 0;
inp[1884] = 1073741824;
inp[1885] = 1073741824;
inp[1886] = 1073741823;
inp[1887] = 0;
inp[1888] = 1073741822;
inp[1889] = 0;
inp[1890] = 1073741821;
inp[1891] = 0;
inp[1892] = 1073741820;
inp[1893] = 0;
inp[1894] = 1073741819;
inp[1895] = 0;
inp[1896] = 1073741818;
inp[1897] = 0;
inp[1898] = 1073741817;
inp[1899] = 0;
inp[1900] = 1073741816;
inp[1901] = 0;
inp[1902] = 1073741815;
inp[1903] = 0;
inp[1904] = 1073741814;
inp[1905] = 0;
inp[1906] = 1073741813;
inp[1907] = 0;
inp[1908] = 1073741812;
inp[1909] = 0;
inp[1910] = 1073741811;
inp[1911] = 0;
inp[1912] = 1073741810;
inp[1913] = 0;
inp[1914] = 1073741809;
inp[1915] = 0;
inp[1916] = 1073741824;
inp[1917] = 1073741824;
inp[1918] = 1073741823;
inp[1919] = 0;
inp[1920] = 1073741823;
inp[1921] = 0;
inp[1922] = 1073741822;
inp[1923] = 0;
inp[1924] = 1073741822;
inp[1925] = 0;
inp[1926] = 1073741821;
inp[1927] = 0;
inp[1928] = 1073741821;
inp[1929] = 0;
inp[1930] = 1073741820;
inp[1931] = 0;
inp[1932] = 1073741820;
inp[1933] = 0;
inp[1934] = 1073741819;
inp[1935] = 0;
inp[1936] = 1073741819;
inp[1937] = 0;
inp[1938] = 1073741818;
inp[1939] = 0;
inp[1940] = 1073741818;
inp[1941] = 0;
inp[1942] = 1073741817;
inp[1943] = 0;
inp[1944] = 1073741817;
inp[1945] = 0;
inp[1946] = 1073741816;
inp[1947] = 0;
inp[1948] = 1073741824;
inp[1949] = 1073741824;
inp[1950] = 1073741823;
inp[1951] = 0;
inp[1952] = 1073741823;
inp[1953] = 0;
inp[1954] = 1073741823;
inp[1955] = 0;
inp[1956] = 1073741823;
inp[1957] = 0;
inp[1958] = 1073741822;
inp[1959] = 0;
inp[1960] = 1073741822;
inp[1961] = 0;
inp[1962] = 1073741822;
inp[1963] = 0;
inp[1964] = 1073741822;
inp[1965] = 0;
inp[1966] = 1073741821;
inp[1967] = 0;
inp[1968] = 1073741821;
inp[1969] = 0;
inp[1970] = 1073741821;
inp[1971] = 0;
inp[1972] = 1073741821;
inp[1973] = 0;
inp[1974] = 1073741820;
inp[1975] = 0;
inp[1976] = 1073741820;
inp[1977] = 0;
inp[1978] = 1073741820;
inp[1979] = 0;
inp[1980] = 1073741824;
inp[1981] = 1073741824;
inp[1982] = 395007542;
inp[1983] = 395007542;
inp[1984] = 145315153;
inp[1985] = 145315153;
inp[1986] = 53458457;
inp[1987] = 53458457;
inp[1988] = 19666267;
inp[1989] = 19666267;
inp[1990] = 7234815;
inp[1991] = 7234815;
inp[1992] = 2661539;
inp[1993] = 2661539;
inp[1994] = 979125;
inp[1995] = 979125;
inp[1996] = 360200;
inp[1997] = 360200;
inp[1998] = 132510;
inp[1999] = 132510;
inp[2000] = 48747;
inp[2001] = 48747;
inp[2002] = 17933;
inp[2003] = 17933;
inp[2004] = 6597;
inp[2005] = 6597;
inp[2006] = 2427;
inp[2007] = 2427;
inp[2008] = 892;
inp[2009] = 892;
inp[2010] = 328;
inp[2011] = 328;
inp[2012] = 120;
inp[2013] = 120;
inp[2014] = 44;
inp[2015] = 44;
inp[2016] = 16;
inp[2017] = 16;
inp[2018] = 6;
inp[2019] = 6;
inp[2020] = 2;
inp[2021] = 2;
inp[2022] = 0;
inp[2023] = 0;
inp[2024] = 0;
inp[2025] = 0;
inp[2026] = 0;
inp[2027] = 0;
inp[2028] = 0;
inp[2029] = 0;
inp[2030] = 0;
inp[2031] = 0;
inp[2032] = 0;
inp[2033] = 0;
inp[2034] = 0;
inp[2035] = 0;
inp[2036] = 0;
inp[2037] = 0;
inp[2038] = 0;
inp[2039] = 0;
inp[2040] = 0;
inp[2041] = 0;
inp[2042] = 0;
inp[2043] = 0;
inp[2044] = 1073741824;
inp[2045] = 1073741824;
inp[2046] = 651257336;
inp[2047] = 145315153;
inp[2048] = 395007542;
inp[2049] = 19666267;
inp[2050] = 239584185;
inp[2051] = 2661539;
inp[2052] = 145315153;
inp[2053] = 360200;
inp[2054] = 88138096;
inp[2055] = 48747;
inp[2056] = 53458457;
inp[2057] = 6597;
inp[2058] = 32424193;
inp[2059] = 892;
inp[2060] = 19666267;
inp[2061] = 120;
inp[2062] = 11928194;
inp[2063] = 16;
inp[2064] = 7234815;
inp[2065] = 2;
inp[2066] = 4388137;
inp[2067] = 0;
inp[2068] = 2661539;
inp[2069] = 0;
inp[2070] = 1614305;
inp[2071] = 0;
inp[2072] = 979125;
inp[2073] = 0;
inp[2074] = 593869;
inp[2075] = 0;
inp[2076] = 360200;
inp[2077] = 0;
inp[2078] = 218472;
inp[2079] = 0;
inp[2080] = 132510;
inp[2081] = 0;
inp[2082] = 80371;
inp[2083] = 0;
inp[2084] = 48747;
inp[2085] = 0;
inp[2086] = 29567;
inp[2087] = 0;
inp[2088] = 17933;
inp[2089] = 0;
inp[2090] = 10877;
inp[2091] = 0;
inp[2092] = 6597;
inp[2093] = 0;
inp[2094] = 4001;
inp[2095] = 0;
inp[2096] = 2427;
inp[2097] = 0;
inp[2098] = 1472;
inp[2099] = 0;
inp[2100] = 892;
inp[2101] = 0;
inp[2102] = 541;
inp[2103] = 0;
inp[2104] = 328;
inp[2105] = 0;
inp[2106] = 199;
inp[2107] = 0;
inp[2108] = 1073741824;
inp[2109] = 1073741824;
inp[2110] = 836230973;
inp[2111] = 19666267;
inp[2112] = 651257336;
inp[2113] = 360200;
inp[2114] = 507199723;
inp[2115] = 6597;
inp[2116] = 395007542;
inp[2117] = 120;
inp[2118] = 307632183;
inp[2119] = 2;
inp[2120] = 239584185;
inp[2121] = 0;
inp[2122] = 186588351;
inp[2123] = 0;
inp[2124] = 145315153;
inp[2125] = 0;
inp[2126] = 113171555;
inp[2127] = 0;
inp[2128] = 88138096;
inp[2129] = 0;
inp[2130] = 68642018;
inp[2131] = 0;
inp[2132] = 53458457;
inp[2133] = 0;
inp[2134] = 41633488;
inp[2135] = 0;
inp[2136] = 32424193;
inp[2137] = 0;
inp[2138] = 25251987;
inp[2139] = 0;
inp[2140] = 19666267;
inp[2141] = 0;
inp[2142] = 15316104;
inp[2143] = 0;
inp[2144] = 11928194;
inp[2145] = 0;
inp[2146] = 9289686;
inp[2147] = 0;
inp[2148] = 7234815;
inp[2149] = 0;
inp[2150] = 5634479;
inp[2151] = 0;
inp[2152] = 4388137;
inp[2153] = 0;
inp[2154] = 3417484;
inp[2155] = 0;
inp[2156] = 2661539;
inp[2157] = 0;
inp[2158] = 2072809;
inp[2159] = 0;
inp[2160] = 1614305;
inp[2161] = 0;
inp[2162] = 1257222;
inp[2163] = 0;
inp[2164] = 979125;
inp[2165] = 0;
inp[2166] = 762543;
inp[2167] = 0;
inp[2168] = 593869;
inp[2169] = 0;
inp[2170] = 462506;
inp[2171] = 0;
inp[2172] = 1073741824;
inp[2173] = 1073741824;
inp[2174] = 947573833;
inp[2175] = 360200;
inp[2176] = 836230973;
inp[2177] = 120;
inp[2178] = 737971243;
inp[2179] = 0;
inp[2180] = 651257336;
inp[2181] = 0;
inp[2182] = 574732582;
inp[2183] = 0;
inp[2184] = 507199723;
inp[2185] = 0;
inp[2186] = 447602185;
inp[2187] = 0;
inp[2188] = 395007542;
inp[2189] = 0;
inp[2190] = 348592932;
inp[2191] = 0;
inp[2192] = 307632183;
inp[2193] = 0;
inp[2194] = 271484448;
inp[2195] = 0;
inp[2196] = 239584185;
inp[2197] = 0;
inp[2198] = 211432301;
inp[2199] = 0;
inp[2200] = 186588351;
inp[2201] = 0;
inp[2202] = 164663641;
inp[2203] = 0;
inp[2204] = 145315153;
inp[2205] = 0;
inp[2206] = 128240173;
inp[2207] = 0;
inp[2208] = 113171555;
inp[2209] = 0;
inp[2210] = 99873547;
inp[2211] = 0;
inp[2212] = 88138096;
inp[2213] = 0;
inp[2214] = 77781596;
inp[2215] = 0;
inp[2216] = 68642018;
inp[2217] = 0;
inp[2218] = 60576368;
inp[2219] = 0;
inp[2220] = 53458457;
inp[2221] = 0;
inp[2222] = 47176923;
inp[2223] = 0;
inp[2224] = 41633488;
inp[2225] = 0;
inp[2226] = 36741424;
inp[2227] = 0;
inp[2228] = 32424193;
inp[2229] = 0;
inp[2230] = 28614250;
inp[2231] = 0;
inp[2232] = 25251987;
inp[2233] = 0;
inp[2234] = 22284800;
inp[2235] = 0;
inp[2236] = 1073741824;
inp[2237] = 1073741824;
inp[2238] = 1008687095;
inp[2239] = 120;
inp[2240] = 947573833;
inp[2241] = 0;
inp[2242] = 890163237;
inp[2243] = 0;
inp[2244] = 836230973;
inp[2245] = 0;
inp[2246] = 785566299;
inp[2247] = 0;
inp[2248] = 737971243;
inp[2249] = 0;
inp[2250] = 693259826;
inp[2251] = 0;
inp[2252] = 651257336;
inp[2253] = 0;
inp[2254] = 611799649;
inp[2255] = 0;
inp[2256] = 574732582;
inp[2257] = 0;
inp[2258] = 539911295;
inp[2259] = 0;
inp[2260] = 507199723;
inp[2261] = 0;
inp[2262] = 476470046;
inp[2263] = 0;
inp[2264] = 447602185;
inp[2265] = 0;
inp[2266] = 420483339;
inp[2267] = 0;
inp[2268] = 395007542;
inp[2269] = 0;
inp[2270] = 371075245;
inp[2271] = 0;
inp[2272] = 348592932;
inp[2273] = 0;
inp[2274] = 327472754;
inp[2275] = 0;
inp[2276] = 307632183;
inp[2277] = 0;
inp[2278] = 288993691;
inp[2279] = 0;
inp[2280] = 271484448;
inp[2281] = 0;
inp[2282] = 255036037;
inp[2283] = 0;
inp[2284] = 239584185;
inp[2285] = 0;
inp[2286] = 225068513;
inp[2287] = 0;
inp[2288] = 211432301;
inp[2289] = 0;
inp[2290] = 198622265;
inp[2291] = 0;
inp[2292] = 186588351;
inp[2293] = 0;
inp[2294] = 175283534;
inp[2295] = 0;
inp[2296] = 164663641;
inp[2297] = 0;
inp[2298] = 154687176;
inp[2299] = 0;
inp[2300] = 1073741824;
inp[2301] = 1073741824;
inp[2302] = 1040706261;
inp[2303] = 0;
inp[2304] = 1008687095;
inp[2305] = 0;
inp[2306] = 977653056;
inp[2307] = 0;
inp[2308] = 947573833;
inp[2309] = 0;
inp[2310] = 918420051;
inp[2311] = 0;
inp[2312] = 890163237;
inp[2313] = 0;
inp[2314] = 862775793;
inp[2315] = 0;
inp[2316] = 836230973;
inp[2317] = 0;
inp[2318] = 810502851;
inp[2319] = 0;
inp[2320] = 785566299;
inp[2321] = 0;
inp[2322] = 761396965;
inp[2323] = 0;
inp[2324] = 737971243;
inp[2325] = 0;
inp[2326] = 715266255;
inp[2327] = 0;
inp[2328] = 693259826;
inp[2329] = 0;
inp[2330] = 671930463;
inp[2331] = 0;
inp[2332] = 651257336;
inp[2333] = 0;
inp[2334] = 631220255;
inp[2335] = 0;
inp[2336] = 611799649;
inp[2337] = 0;
inp[2338] = 592976553;
inp[2339] = 0;
inp[2340] = 574732582;
inp[2341] = 0;
inp[2342] = 557049919;
inp[2343] = 0;
inp[2344] = 539911295;
inp[2345] = 0;
inp[2346] = 523299971;
inp[2347] = 0;
inp[2348] = 507199723;
inp[2349] = 0;
inp[2350] = 491594828;
inp[2351] = 0;
inp[2352] = 476470046;
inp[2353] = 0;
inp[2354] = 461810603;
inp[2355] = 0;
inp[2356] = 447602185;
inp[2357] = 0;
inp[2358] = 433830913;
inp[2359] = 0;
inp[2360] = 420483339;
inp[2361] = 0;
inp[2362] = 407546427;
inp[2363] = 0;
inp[2364] = 1073741824;
inp[2365] = 1073741824;
inp[2366] = 1057094999;
inp[2367] = 0;
inp[2368] = 1040706261;
inp[2369] = 0;
inp[2370] = 1024571605;
inp[2371] = 0;
inp[2372] = 1008687095;
inp[2373] = 0;
inp[2374] = 993048851;
inp[2375] = 0;
inp[2376] = 977653056;
inp[2377] = 0;
inp[2378] = 962495950;
inp[2379] = 0;
inp[2380] = 947573833;
inp[2381] = 0;
inp[2382] = 932883063;
inp[2383] = 0;
inp[2384] = 918420051;
inp[2385] = 0;
inp[2386] = 904181268;
inp[2387] = 0;
inp[2388] = 890163237;
inp[2389] = 0;
inp[2390] = 876362535;
inp[2391] = 0;
inp[2392] = 862775793;
inp[2393] = 0;
inp[2394] = 849399695;
inp[2395] = 0;
inp[2396] = 836230973;
inp[2397] = 0;
inp[2398] = 823266413;
inp[2399] = 0;
inp[2400] = 810502851;
inp[2401] = 0;
inp[2402] = 797937169;
inp[2403] = 0;
inp[2404] = 785566299;
inp[2405] = 0;
inp[2406] = 773387223;
inp[2407] = 0;
inp[2408] = 761396965;
inp[2409] = 0;
inp[2410] = 749592599;
inp[2411] = 0;
inp[2412] = 737971243;
inp[2413] = 0;
inp[2414] = 726530060;
inp[2415] = 0;
inp[2416] = 715266255;
inp[2417] = 0;
inp[2418] = 704177080;
inp[2419] = 0;
inp[2420] = 693259826;
inp[2421] = 0;
inp[2422] = 682511829;
inp[2423] = 0;
inp[2424] = 671930463;
inp[2425] = 0;
inp[2426] = 661513147;
inp[2427] = 0;
inp[2428] = 1073741824;
inp[2429] = 1073741824;
inp[2430] = 1065385898;
inp[2431] = 0;
inp[2432] = 1057094999;
inp[2433] = 0;
inp[2434] = 1048868621;
inp[2435] = 0;
inp[2436] = 1040706261;
inp[2437] = 0;
inp[2438] = 1032607420;
inp[2439] = 0;
inp[2440] = 1024571605;
inp[2441] = 0;
inp[2442] = 1016598326;
inp[2443] = 0;
inp[2444] = 1008687095;
inp[2445] = 0;
inp[2446] = 1000837430;
inp[2447] = 0;
inp[2448] = 993048851;
inp[2449] = 0;
inp[2450] = 985320884;
inp[2451] = 0;
inp[2452] = 977653056;
inp[2453] = 0;
inp[2454] = 970044899;
inp[2455] = 0;
inp[2456] = 962495950;
inp[2457] = 0;
inp[2458] = 955005747;
inp[2459] = 0;
inp[2460] = 947573833;
inp[2461] = 0;
inp[2462] = 940199755;
inp[2463] = 0;
inp[2464] = 932883063;
inp[2465] = 0;
inp[2466] = 925623309;
inp[2467] = 0;
inp[2468] = 918420051;
inp[2469] = 0;
inp[2470] = 911272850;
inp[2471] = 0;
inp[2472] = 904181268;
inp[2473] = 0;
inp[2474] = 897144874;
inp[2475] = 0;
inp[2476] = 890163237;
inp[2477] = 0;
inp[2478] = 883235932;
inp[2479] = 0;
inp[2480] = 876362535;
inp[2481] = 0;
inp[2482] = 869542628;
inp[2483] = 0;
inp[2484] = 862775793;
inp[2485] = 0;
inp[2486] = 856061619;
inp[2487] = 0;
inp[2488] = 849399695;
inp[2489] = 0;
inp[2490] = 842789614;
inp[2491] = 0;
inp[2492] = 1073741824;
inp[2493] = 1073741824;
inp[2494] = 1069555701;
inp[2495] = 0;
inp[2496] = 1065385898;
inp[2497] = 0;
inp[2498] = 1061232352;
inp[2499] = 0;
inp[2500] = 1057094999;
inp[2501] = 0;
inp[2502] = 1052973777;
inp[2503] = 0;
inp[2504] = 1048868621;
inp[2505] = 0;
inp[2506] = 1044779470;
inp[2507] = 0;
inp[2508] = 1040706261;
inp[2509] = 0;
inp[2510] = 1036648931;
inp[2511] = 0;
inp[2512] = 1032607420;
inp[2513] = 0;
inp[2514] = 1028581665;
inp[2515] = 0;
inp[2516] = 1024571605;
inp[2517] = 0;
inp[2518] = 1020577179;
inp[2519] = 0;
inp[2520] = 1016598326;
inp[2521] = 0;
inp[2522] = 1012634985;
inp[2523] = 0;
inp[2524] = 1008687095;
inp[2525] = 0;
inp[2526] = 1004754597;
inp[2527] = 0;
inp[2528] = 1000837430;
inp[2529] = 0;
inp[2530] = 996935534;
inp[2531] = 0;
inp[2532] = 993048851;
inp[2533] = 0;
inp[2534] = 989177321;
inp[2535] = 0;
inp[2536] = 985320884;
inp[2537] = 0;
inp[2538] = 981479482;
inp[2539] = 0;
inp[2540] = 977653056;
inp[2541] = 0;
inp[2542] = 973841548;
inp[2543] = 0;
inp[2544] = 970044899;
inp[2545] = 0;
inp[2546] = 966263053;
inp[2547] = 0;
inp[2548] = 962495950;
inp[2549] = 0;
inp[2550] = 958743534;
inp[2551] = 0;
inp[2552] = 955005747;
inp[2553] = 0;
inp[2554] = 951282532;
inp[2555] = 0;
inp[2556] = 1073741824;
inp[2557] = 1073741824;
inp[2558] = 1071646718;
inp[2559] = 0;
inp[2560] = 1069555701;
inp[2561] = 0;
inp[2562] = 1067468764;
inp[2563] = 0;
inp[2564] = 1065385898;
inp[2565] = 0;
inp[2566] = 1063307097;
inp[2567] = 0;
inp[2568] = 1061232352;
inp[2569] = 0;
inp[2570] = 1059161656;
inp[2571] = 0;
inp[2572] = 1057094999;
inp[2573] = 0;
inp[2574] = 1055032376;
inp[2575] = 0;
inp[2576] = 1052973777;
inp[2577] = 0;
inp[2578] = 1050919194;
inp[2579] = 0;
inp[2580] = 1048868621;
inp[2581] = 0;
inp[2582] = 1046822049;
inp[2583] = 0;
inp[2584] = 1044779470;
inp[2585] = 0;
inp[2586] = 1042740876;
inp[2587] = 0;
inp[2588] = 1040706261;
inp[2589] = 0;
inp[2590] = 1038675615;
inp[2591] = 0;
inp[2592] = 1036648931;
inp[2593] = 0;
inp[2594] = 1034626202;
inp[2595] = 0;
inp[2596] = 1032607420;
inp[2597] = 0;
inp[2598] = 1030592577;
inp[2599] = 0;
inp[2600] = 1028581665;
inp[2601] = 0;
inp[2602] = 1026574677;
inp[2603] = 0;
inp[2604] = 1024571605;
inp[2605] = 0;
inp[2606] = 1022572442;
inp[2607] = 0;
inp[2608] = 1020577179;
inp[2609] = 0;
inp[2610] = 1018585810;
inp[2611] = 0;
inp[2612] = 1016598326;
inp[2613] = 0;
inp[2614] = 1014614720;
inp[2615] = 0;
inp[2616] = 1012634985;
inp[2617] = 0;
inp[2618] = 1010659112;
inp[2619] = 0;
inp[2620] = 1073741824;
inp[2621] = 1073741824;
inp[2622] = 1072693759;
inp[2623] = 0;
inp[2624] = 1071646718;
inp[2625] = 0;
inp[2626] = 1070600699;
inp[2627] = 0;
inp[2628] = 1069555701;
inp[2629] = 0;
inp[2630] = 1068511723;
inp[2631] = 0;
inp[2632] = 1067468764;
inp[2633] = 0;
inp[2634] = 1066426822;
inp[2635] = 0;
inp[2636] = 1065385898;
inp[2637] = 0;
inp[2638] = 1064345990;
inp[2639] = 0;
inp[2640] = 1063307097;
inp[2641] = 0;
inp[2642] = 1062269218;
inp[2643] = 0;
inp[2644] = 1061232352;
inp[2645] = 0;
inp[2646] = 1060196498;
inp[2647] = 0;
inp[2648] = 1059161656;
inp[2649] = 0;
inp[2650] = 1058127823;
inp[2651] = 0;
inp[2652] = 1057094999;
inp[2653] = 0;
inp[2654] = 1056063184;
inp[2655] = 0;
inp[2656] = 1055032376;
inp[2657] = 0;
inp[2658] = 1054002574;
inp[2659] = 0;
inp[2660] = 1052973777;
inp[2661] = 0;
inp[2662] = 1051945984;
inp[2663] = 0;
inp[2664] = 1050919194;
inp[2665] = 0;
inp[2666] = 1049893407;
inp[2667] = 0;
inp[2668] = 1048868621;
inp[2669] = 0;
inp[2670] = 1047844835;
inp[2671] = 0;
inp[2672] = 1046822049;
inp[2673] = 0;
inp[2674] = 1045800261;
inp[2675] = 0;
inp[2676] = 1044779470;
inp[2677] = 0;
inp[2678] = 1043759675;
inp[2679] = 0;
inp[2680] = 1042740876;
inp[2681] = 0;
inp[2682] = 1041723072;
inp[2683] = 0;
inp[2684] = 1073741824;
inp[2685] = 1073741824;
inp[2686] = 1073217663;
inp[2687] = 0;
inp[2688] = 1072693759;
inp[2689] = 0;
inp[2690] = 1072170111;
inp[2691] = 0;
inp[2692] = 1071646718;
inp[2693] = 0;
inp[2694] = 1071123581;
inp[2695] = 0;
inp[2696] = 1070600699;
inp[2697] = 0;
inp[2698] = 1070078072;
inp[2699] = 0;
inp[2700] = 1069555701;
inp[2701] = 0;
inp[2702] = 1069033584;
inp[2703] = 0;
inp[2704] = 1068511723;
inp[2705] = 0;
inp[2706] = 1067990116;
inp[2707] = 0;
inp[2708] = 1067468764;
inp[2709] = 0;
inp[2710] = 1066947666;
inp[2711] = 0;
inp[2712] = 1066426822;
inp[2713] = 0;
inp[2714] = 1065906233;
inp[2715] = 0;
inp[2716] = 1065385898;
inp[2717] = 0;
inp[2718] = 1064865817;
inp[2719] = 0;
inp[2720] = 1064345990;
inp[2721] = 0;
inp[2722] = 1063826417;
inp[2723] = 0;
inp[2724] = 1063307097;
inp[2725] = 0;
inp[2726] = 1062788031;
inp[2727] = 0;
inp[2728] = 1062269218;
inp[2729] = 0;
inp[2730] = 1061750659;
inp[2731] = 0;
inp[2732] = 1061232352;
inp[2733] = 0;
inp[2734] = 1060714299;
inp[2735] = 0;
inp[2736] = 1060196498;
inp[2737] = 0;
inp[2738] = 1059678951;
inp[2739] = 0;
inp[2740] = 1059161656;
inp[2741] = 0;
inp[2742] = 1058644613;
inp[2743] = 0;
inp[2744] = 1058127823;
inp[2745] = 0;
inp[2746] = 1057611285;
inp[2747] = 0;
inp[2748] = 1073741824;
inp[2749] = 1073741824;
inp[2750] = 1073479711;
inp[2751] = 0;
inp[2752] = 1073217663;
inp[2753] = 0;
inp[2754] = 1072955679;
inp[2755] = 0;
inp[2756] = 1072693759;
inp[2757] = 0;
inp[2758] = 1072431903;
inp[2759] = 0;
inp[2760] = 1072170111;
inp[2761] = 0;
inp[2762] = 1071908383;
inp[2763] = 0;
inp[2764] = 1071646718;
inp[2765] = 0;
inp[2766] = 1071385118;
inp[2767] = 0;
inp[2768] = 1071123581;
inp[2769] = 0;
inp[2770] = 1070862108;
inp[2771] = 0;
inp[2772] = 1070600699;
inp[2773] = 0;
inp[2774] = 1070339354;
inp[2775] = 0;
inp[2776] = 1070078072;
inp[2777] = 0;
inp[2778] = 1069816855;
inp[2779] = 0;
inp[2780] = 1069555701;
inp[2781] = 0;
inp[2782] = 1069294611;
inp[2783] = 0;
inp[2784] = 1069033584;
inp[2785] = 0;
inp[2786] = 1068772622;
inp[2787] = 0;
inp[2788] = 1068511723;
inp[2789] = 0;
inp[2790] = 1068250887;
inp[2791] = 0;
inp[2792] = 1067990116;
inp[2793] = 0;
inp[2794] = 1067729408;
inp[2795] = 0;
inp[2796] = 1067468764;
inp[2797] = 0;
inp[2798] = 1067208183;
inp[2799] = 0;
inp[2800] = 1066947666;
inp[2801] = 0;
inp[2802] = 1066687212;
inp[2803] = 0;
inp[2804] = 1066426822;
inp[2805] = 0;
inp[2806] = 1066166496;
inp[2807] = 0;
inp[2808] = 1065906233;
inp[2809] = 0;
inp[2810] = 1065646034;
inp[2811] = 0;
inp[2812] = 1073741824;
inp[2813] = 1073741824;
inp[2814] = 1073610759;
inp[2815] = 0;
inp[2816] = 1073479711;
inp[2817] = 0;
inp[2818] = 1073348679;
inp[2819] = 0;
inp[2820] = 1073217663;
inp[2821] = 0;
inp[2822] = 1073086663;
inp[2823] = 0;
inp[2824] = 1072955679;
inp[2825] = 0;
inp[2826] = 1072824711;
inp[2827] = 0;
inp[2828] = 1072693759;
inp[2829] = 0;
inp[2830] = 1072562823;
inp[2831] = 0;
inp[2832] = 1072431903;
inp[2833] = 0;
inp[2834] = 1072300999;
inp[2835] = 0;
inp[2836] = 1072170111;
inp[2837] = 0;
inp[2838] = 1072039239;
inp[2839] = 0;
inp[2840] = 1071908383;
inp[2841] = 0;
inp[2842] = 1071777542;
inp[2843] = 0;
inp[2844] = 1071646718;
inp[2845] = 0;
inp[2846] = 1071515910;
inp[2847] = 0;
inp[2848] = 1071385118;
inp[2849] = 0;
inp[2850] = 1071254341;
inp[2851] = 0;
inp[2852] = 1071123581;
inp[2853] = 0;
inp[2854] = 1070992836;
inp[2855] = 0;
inp[2856] = 1070862108;
inp[2857] = 0;
inp[2858] = 1070731396;
inp[2859] = 0;
inp[2860] = 1070600699;
inp[2861] = 0;
inp[2862] = 1070470018;
inp[2863] = 0;
inp[2864] = 1070339354;
inp[2865] = 0;
inp[2866] = 1070208705;
inp[2867] = 0;
inp[2868] = 1070078072;
inp[2869] = 0;
inp[2870] = 1069947456;
inp[2871] = 0;
inp[2872] = 1069816855;
inp[2873] = 0;
inp[2874] = 1069686270;
inp[2875] = 0;
inp[2876] = 1073741824;
inp[2877] = 1073741824;
inp[2878] = 1073676289;
inp[2879] = 0;
inp[2880] = 1073610759;
inp[2881] = 0;
inp[2882] = 1073545233;
inp[2883] = 0;
inp[2884] = 1073479711;
inp[2885] = 0;
inp[2886] = 1073414193;
inp[2887] = 0;
inp[2888] = 1073348679;
inp[2889] = 0;
inp[2890] = 1073283169;
inp[2891] = 0;
inp[2892] = 1073217663;
inp[2893] = 0;
inp[2894] = 1073152161;
inp[2895] = 0;
inp[2896] = 1073086663;
inp[2897] = 0;
inp[2898] = 1073021169;
inp[2899] = 0;
inp[2900] = 1072955679;
inp[2901] = 0;
inp[2902] = 1072890193;
inp[2903] = 0;
inp[2904] = 1072824711;
inp[2905] = 0;
inp[2906] = 1072759233;
inp[2907] = 0;
inp[2908] = 1072693759;
inp[2909] = 0;
inp[2910] = 1072628289;
inp[2911] = 0;
inp[2912] = 1072562823;
inp[2913] = 0;
inp[2914] = 1072497361;
inp[2915] = 0;
inp[2916] = 1072431903;
inp[2917] = 0;
inp[2918] = 1072366449;
inp[2919] = 0;
inp[2920] = 1072300999;
inp[2921] = 0;
inp[2922] = 1072235553;
inp[2923] = 0;
inp[2924] = 1072170111;
inp[2925] = 0;
inp[2926] = 1072104673;
inp[2927] = 0;
inp[2928] = 1072039239;
inp[2929] = 0;
inp[2930] = 1071973809;
inp[2931] = 0;
inp[2932] = 1071908383;
inp[2933] = 0;
inp[2934] = 1071842961;
inp[2935] = 0;
inp[2936] = 1071777542;
inp[2937] = 0;
inp[2938] = 1071712128;
inp[2939] = 0;
inp[2940] = 1073741824;
inp[2941] = 1073741824;
inp[2942] = 1073709056;
inp[2943] = 0;
inp[2944] = 1073676289;
inp[2945] = 0;
inp[2946] = 1073643524;
inp[2947] = 0;
inp[2948] = 1073610759;
inp[2949] = 0;
inp[2950] = 1073577996;
inp[2951] = 0;
inp[2952] = 1073545233;
inp[2953] = 0;
inp[2954] = 1073512472;
inp[2955] = 0;
inp[2956] = 1073479711;
inp[2957] = 0;
inp[2958] = 1073446952;
inp[2959] = 0;
inp[2960] = 1073414193;
inp[2961] = 0;
inp[2962] = 1073381436;
inp[2963] = 0;
inp[2964] = 1073348679;
inp[2965] = 0;
inp[2966] = 1073315924;
inp[2967] = 0;
inp[2968] = 1073283169;
inp[2969] = 0;
inp[2970] = 1073250416;
inp[2971] = 0;
inp[2972] = 1073217663;
inp[2973] = 0;
inp[2974] = 1073184912;
inp[2975] = 0;
inp[2976] = 1073152161;
inp[2977] = 0;
inp[2978] = 1073119412;
inp[2979] = 0;
inp[2980] = 1073086663;
inp[2981] = 0;
inp[2982] = 1073053916;
inp[2983] = 0;
inp[2984] = 1073021169;
inp[2985] = 0;
inp[2986] = 1072988424;
inp[2987] = 0;
inp[2988] = 1072955679;
inp[2989] = 0;
inp[2990] = 1072922936;
inp[2991] = 0;
inp[2992] = 1072890193;
inp[2993] = 0;
inp[2994] = 1072857452;
inp[2995] = 0;
inp[2996] = 1072824711;
inp[2997] = 0;
inp[2998] = 1072791972;
inp[2999] = 0;
inp[3000] = 1072759233;
inp[3001] = 0;
inp[3002] = 1072726496;
inp[3003] = 0;
inp[3004] = 1073741824;
inp[3005] = 1073741824;
inp[3006] = 1073725440;
inp[3007] = 0;
inp[3008] = 1073709056;
inp[3009] = 0;
inp[3010] = 1073692673;
inp[3011] = 0;
inp[3012] = 1073676289;
inp[3013] = 0;
inp[3014] = 1073659907;
inp[3015] = 0;
inp[3016] = 1073643524;
inp[3017] = 0;
inp[3018] = 1073627142;
inp[3019] = 0;
inp[3020] = 1073610759;
inp[3021] = 0;
inp[3022] = 1073594378;
inp[3023] = 0;
inp[3024] = 1073577996;
inp[3025] = 0;
inp[3026] = 1073561615;
inp[3027] = 0;
inp[3028] = 1073545233;
inp[3029] = 0;
inp[3030] = 1073528853;
inp[3031] = 0;
inp[3032] = 1073512472;
inp[3033] = 0;
inp[3034] = 1073496092;
inp[3035] = 0;
inp[3036] = 1073479711;
inp[3037] = 0;
inp[3038] = 1073463332;
inp[3039] = 0;
inp[3040] = 1073446952;
inp[3041] = 0;
inp[3042] = 1073430573;
inp[3043] = 0;
inp[3044] = 1073414193;
inp[3045] = 0;
inp[3046] = 1073397815;
inp[3047] = 0;
inp[3048] = 1073381436;
inp[3049] = 0;
inp[3050] = 1073365058;
inp[3051] = 0;
inp[3052] = 1073348679;
inp[3053] = 0;
inp[3054] = 1073332302;
inp[3055] = 0;
inp[3056] = 1073315924;
inp[3057] = 0;
inp[3058] = 1073299547;
inp[3059] = 0;
inp[3060] = 1073283169;
inp[3061] = 0;
inp[3062] = 1073266793;
inp[3063] = 0;
inp[3064] = 1073250416;
inp[3065] = 0;
inp[3066] = 1073234040;
inp[3067] = 0;
inp[3068] = 1073741824;
inp[3069] = 1073741824;
inp[3070] = 1073733632;
inp[3071] = 0;
inp[3072] = 1073725440;
inp[3073] = 0;
inp[3074] = 1073717248;
inp[3075] = 0;
inp[3076] = 1073709056;
inp[3077] = 0;
inp[3078] = 1073700864;
inp[3079] = 0;
inp[3080] = 1073692673;
inp[3081] = 0;
inp[3082] = 1073684481;
inp[3083] = 0;
inp[3084] = 1073676289;
inp[3085] = 0;
inp[3086] = 1073668098;
inp[3087] = 0;
inp[3088] = 1073659907;
inp[3089] = 0;
inp[3090] = 1073651715;
inp[3091] = 0;
inp[3092] = 1073643524;
inp[3093] = 0;
inp[3094] = 1073635333;
inp[3095] = 0;
inp[3096] = 1073627142;
inp[3097] = 0;
inp[3098] = 1073618951;
inp[3099] = 0;
inp[3100] = 1073610759;
inp[3101] = 0;
inp[3102] = 1073602569;
inp[3103] = 0;
inp[3104] = 1073594378;
inp[3105] = 0;
inp[3106] = 1073586187;
inp[3107] = 0;
inp[3108] = 1073577996;
inp[3109] = 0;
inp[3110] = 1073569805;
inp[3111] = 0;
inp[3112] = 1073561615;
inp[3113] = 0;
inp[3114] = 1073553424;
inp[3115] = 0;
inp[3116] = 1073545233;
inp[3117] = 0;
inp[3118] = 1073537043;
inp[3119] = 0;
inp[3120] = 1073528853;
inp[3121] = 0;
inp[3122] = 1073520662;
inp[3123] = 0;
inp[3124] = 1073512472;
inp[3125] = 0;
inp[3126] = 1073504282;
inp[3127] = 0;
inp[3128] = 1073496092;
inp[3129] = 0;
inp[3130] = 1073487902;
inp[3131] = 0;
inp[3132] = 1073741824;
inp[3133] = 1073741824;
inp[3134] = 1073737728;
inp[3135] = 0;
inp[3136] = 1073733632;
inp[3137] = 0;
inp[3138] = 1073729536;
inp[3139] = 0;
inp[3140] = 1073725440;
inp[3141] = 0;
inp[3142] = 1073721344;
inp[3143] = 0;
inp[3144] = 1073717248;
inp[3145] = 0;
inp[3146] = 1073713152;
inp[3147] = 0;
inp[3148] = 1073709056;
inp[3149] = 0;
inp[3150] = 1073704960;
inp[3151] = 0;
inp[3152] = 1073700864;
inp[3153] = 0;
inp[3154] = 1073696768;
inp[3155] = 0;
inp[3156] = 1073692673;
inp[3157] = 0;
inp[3158] = 1073688577;
inp[3159] = 0;
inp[3160] = 1073684481;
inp[3161] = 0;
inp[3162] = 1073680385;
inp[3163] = 0;
inp[3164] = 1073676289;
inp[3165] = 0;
inp[3166] = 1073672194;
inp[3167] = 0;
inp[3168] = 1073668098;
inp[3169] = 0;
inp[3170] = 1073664002;
inp[3171] = 0;
inp[3172] = 1073659907;
inp[3173] = 0;
inp[3174] = 1073655811;
inp[3175] = 0;
inp[3176] = 1073651715;
inp[3177] = 0;
inp[3178] = 1073647620;
inp[3179] = 0;
inp[3180] = 1073643524;
inp[3181] = 0;
inp[3182] = 1073639428;
inp[3183] = 0;
inp[3184] = 1073635333;
inp[3185] = 0;
inp[3186] = 1073631237;
inp[3187] = 0;
inp[3188] = 1073627142;
inp[3189] = 0;
inp[3190] = 1073623046;
inp[3191] = 0;
inp[3192] = 1073618951;
inp[3193] = 0;
inp[3194] = 1073614855;
inp[3195] = 0;
inp[3196] = 1073741824;
inp[3197] = 1073741824;
inp[3198] = 1073739776;
inp[3199] = 0;
inp[3200] = 1073737728;
inp[3201] = 0;
inp[3202] = 1073735680;
inp[3203] = 0;
inp[3204] = 1073733632;
inp[3205] = 0;
inp[3206] = 1073731584;
inp[3207] = 0;
inp[3208] = 1073729536;
inp[3209] = 0;
inp[3210] = 1073727488;
inp[3211] = 0;
inp[3212] = 1073725440;
inp[3213] = 0;
inp[3214] = 1073723392;
inp[3215] = 0;
inp[3216] = 1073721344;
inp[3217] = 0;
inp[3218] = 1073719296;
inp[3219] = 0;
inp[3220] = 1073717248;
inp[3221] = 0;
inp[3222] = 1073715200;
inp[3223] = 0;
inp[3224] = 1073713152;
inp[3225] = 0;
inp[3226] = 1073711104;
inp[3227] = 0;
inp[3228] = 1073709056;
inp[3229] = 0;
inp[3230] = 1073707008;
inp[3231] = 0;
inp[3232] = 1073704960;
inp[3233] = 0;
inp[3234] = 1073702912;
inp[3235] = 0;
inp[3236] = 1073700864;
inp[3237] = 0;
inp[3238] = 1073698816;
inp[3239] = 0;
inp[3240] = 1073696768;
inp[3241] = 0;
inp[3242] = 1073694721;
inp[3243] = 0;
inp[3244] = 1073692673;
inp[3245] = 0;
inp[3246] = 1073690625;
inp[3247] = 0;
inp[3248] = 1073688577;
inp[3249] = 0;
inp[3250] = 1073686529;
inp[3251] = 0;
inp[3252] = 1073684481;
inp[3253] = 0;
inp[3254] = 1073682433;
inp[3255] = 0;
inp[3256] = 1073680385;
inp[3257] = 0;
inp[3258] = 1073678337;
inp[3259] = 0;
inp[3260] = 1073741824;
inp[3261] = 1073741824;
inp[3262] = 1073740800;
inp[3263] = 0;
inp[3264] = 1073739776;
inp[3265] = 0;
inp[3266] = 1073738752;
inp[3267] = 0;
inp[3268] = 1073737728;
inp[3269] = 0;
inp[3270] = 1073736704;
inp[3271] = 0;
inp[3272] = 1073735680;
inp[3273] = 0;
inp[3274] = 1073734656;
inp[3275] = 0;
inp[3276] = 1073733632;
inp[3277] = 0;
inp[3278] = 1073732608;
inp[3279] = 0;
inp[3280] = 1073731584;
inp[3281] = 0;
inp[3282] = 1073730560;
inp[3283] = 0;
inp[3284] = 1073729536;
inp[3285] = 0;
inp[3286] = 1073728512;
inp[3287] = 0;
inp[3288] = 1073727488;
inp[3289] = 0;
inp[3290] = 1073726464;
inp[3291] = 0;
inp[3292] = 1073725440;
inp[3293] = 0;
inp[3294] = 1073724416;
inp[3295] = 0;
inp[3296] = 1073723392;
inp[3297] = 0;
inp[3298] = 1073722368;
inp[3299] = 0;
inp[3300] = 1073721344;
inp[3301] = 0;
inp[3302] = 1073720320;
inp[3303] = 0;
inp[3304] = 1073719296;
inp[3305] = 0;
inp[3306] = 1073718272;
inp[3307] = 0;
inp[3308] = 1073717248;
inp[3309] = 0;
inp[3310] = 1073716224;
inp[3311] = 0;
inp[3312] = 1073715200;
inp[3313] = 0;
inp[3314] = 1073714176;
inp[3315] = 0;
inp[3316] = 1073713152;
inp[3317] = 0;
inp[3318] = 1073712128;
inp[3319] = 0;
inp[3320] = 1073711104;
inp[3321] = 0;
inp[3322] = 1073710080;
inp[3323] = 0;
inp[3324] = 1073741824;
inp[3325] = 1073741824;
inp[3326] = 1073741312;
inp[3327] = 0;
inp[3328] = 1073740800;
inp[3329] = 0;
inp[3330] = 1073740288;
inp[3331] = 0;
inp[3332] = 1073739776;
inp[3333] = 0;
inp[3334] = 1073739264;
inp[3335] = 0;
inp[3336] = 1073738752;
inp[3337] = 0;
inp[3338] = 1073738240;
inp[3339] = 0;
inp[3340] = 1073737728;
inp[3341] = 0;
inp[3342] = 1073737216;
inp[3343] = 0;
inp[3344] = 1073736704;
inp[3345] = 0;
inp[3346] = 1073736192;
inp[3347] = 0;
inp[3348] = 1073735680;
inp[3349] = 0;
inp[3350] = 1073735168;
inp[3351] = 0;
inp[3352] = 1073734656;
inp[3353] = 0;
inp[3354] = 1073734144;
inp[3355] = 0;
inp[3356] = 1073733632;
inp[3357] = 0;
inp[3358] = 1073733120;
inp[3359] = 0;
inp[3360] = 1073732608;
inp[3361] = 0;
inp[3362] = 1073732096;
inp[3363] = 0;
inp[3364] = 1073731584;
inp[3365] = 0;
inp[3366] = 1073731072;
inp[3367] = 0;
inp[3368] = 1073730560;
inp[3369] = 0;
inp[3370] = 1073730048;
inp[3371] = 0;
inp[3372] = 1073729536;
inp[3373] = 0;
inp[3374] = 1073729024;
inp[3375] = 0;
inp[3376] = 1073728512;
inp[3377] = 0;
inp[3378] = 1073728000;
inp[3379] = 0;
inp[3380] = 1073727488;
inp[3381] = 0;
inp[3382] = 1073726976;
inp[3383] = 0;
inp[3384] = 1073726464;
inp[3385] = 0;
inp[3386] = 1073725952;
inp[3387] = 0;
inp[3388] = 1073741824;
inp[3389] = 1073741824;
inp[3390] = 1073741568;
inp[3391] = 0;
inp[3392] = 1073741312;
inp[3393] = 0;
inp[3394] = 1073741056;
inp[3395] = 0;
inp[3396] = 1073740800;
inp[3397] = 0;
inp[3398] = 1073740544;
inp[3399] = 0;
inp[3400] = 1073740288;
inp[3401] = 0;
inp[3402] = 1073740032;
inp[3403] = 0;
inp[3404] = 1073739776;
inp[3405] = 0;
inp[3406] = 1073739520;
inp[3407] = 0;
inp[3408] = 1073739264;
inp[3409] = 0;
inp[3410] = 1073739008;
inp[3411] = 0;
inp[3412] = 1073738752;
inp[3413] = 0;
inp[3414] = 1073738496;
inp[3415] = 0;
inp[3416] = 1073738240;
inp[3417] = 0;
inp[3418] = 1073737984;
inp[3419] = 0;
inp[3420] = 1073737728;
inp[3421] = 0;
inp[3422] = 1073737472;
inp[3423] = 0;
inp[3424] = 1073737216;
inp[3425] = 0;
inp[3426] = 1073736960;
inp[3427] = 0;
inp[3428] = 1073736704;
inp[3429] = 0;
inp[3430] = 1073736448;
inp[3431] = 0;
inp[3432] = 1073736192;
inp[3433] = 0;
inp[3434] = 1073735936;
inp[3435] = 0;
inp[3436] = 1073735680;
inp[3437] = 0;
inp[3438] = 1073735424;
inp[3439] = 0;
inp[3440] = 1073735168;
inp[3441] = 0;
inp[3442] = 1073734912;
inp[3443] = 0;
inp[3444] = 1073734656;
inp[3445] = 0;
inp[3446] = 1073734400;
inp[3447] = 0;
inp[3448] = 1073734144;
inp[3449] = 0;
inp[3450] = 1073733888;
inp[3451] = 0;
inp[3452] = 1073741824;
inp[3453] = 1073741824;
inp[3454] = 1073741696;
inp[3455] = 0;
inp[3456] = 1073741568;
inp[3457] = 0;
inp[3458] = 1073741440;
inp[3459] = 0;
inp[3460] = 1073741312;
inp[3461] = 0;
inp[3462] = 1073741184;
inp[3463] = 0;
inp[3464] = 1073741056;
inp[3465] = 0;
inp[3466] = 1073740928;
inp[3467] = 0;
inp[3468] = 1073740800;
inp[3469] = 0;
inp[3470] = 1073740672;
inp[3471] = 0;
inp[3472] = 1073740544;
inp[3473] = 0;
inp[3474] = 1073740416;
inp[3475] = 0;
inp[3476] = 1073740288;
inp[3477] = 0;
inp[3478] = 1073740160;
inp[3479] = 0;
inp[3480] = 1073740032;
inp[3481] = 0;
inp[3482] = 1073739904;
inp[3483] = 0;
inp[3484] = 1073739776;
inp[3485] = 0;
inp[3486] = 1073739648;
inp[3487] = 0;
inp[3488] = 1073739520;
inp[3489] = 0;
inp[3490] = 1073739392;
inp[3491] = 0;
inp[3492] = 1073739264;
inp[3493] = 0;
inp[3494] = 1073739136;
inp[3495] = 0;
inp[3496] = 1073739008;
inp[3497] = 0;
inp[3498] = 1073738880;
inp[3499] = 0;
inp[3500] = 1073738752;
inp[3501] = 0;
inp[3502] = 1073738624;
inp[3503] = 0;
inp[3504] = 1073738496;
inp[3505] = 0;
inp[3506] = 1073738368;
inp[3507] = 0;
inp[3508] = 1073738240;
inp[3509] = 0;
inp[3510] = 1073738112;
inp[3511] = 0;
inp[3512] = 1073737984;
inp[3513] = 0;
inp[3514] = 1073737856;
inp[3515] = 0;
inp[3516] = 1073741824;
inp[3517] = 1073741824;
inp[3518] = 1073741760;
inp[3519] = 0;
inp[3520] = 1073741696;
inp[3521] = 0;
inp[3522] = 1073741632;
inp[3523] = 0;
inp[3524] = 1073741568;
inp[3525] = 0;
inp[3526] = 1073741504;
inp[3527] = 0;
inp[3528] = 1073741440;
inp[3529] = 0;
inp[3530] = 1073741376;
inp[3531] = 0;
inp[3532] = 1073741312;
inp[3533] = 0;
inp[3534] = 1073741248;
inp[3535] = 0;
inp[3536] = 1073741184;
inp[3537] = 0;
inp[3538] = 1073741120;
inp[3539] = 0;
inp[3540] = 1073741056;
inp[3541] = 0;
inp[3542] = 1073740992;
inp[3543] = 0;
inp[3544] = 1073740928;
inp[3545] = 0;
inp[3546] = 1073740864;
inp[3547] = 0;
inp[3548] = 1073740800;
inp[3549] = 0;
inp[3550] = 1073740736;
inp[3551] = 0;
inp[3552] = 1073740672;
inp[3553] = 0;
inp[3554] = 1073740608;
inp[3555] = 0;
inp[3556] = 1073740544;
inp[3557] = 0;
inp[3558] = 1073740480;
inp[3559] = 0;
inp[3560] = 1073740416;
inp[3561] = 0;
inp[3562] = 1073740352;
inp[3563] = 0;
inp[3564] = 1073740288;
inp[3565] = 0;
inp[3566] = 1073740224;
inp[3567] = 0;
inp[3568] = 1073740160;
inp[3569] = 0;
inp[3570] = 1073740096;
inp[3571] = 0;
inp[3572] = 1073740032;
inp[3573] = 0;
inp[3574] = 1073739968;
inp[3575] = 0;
inp[3576] = 1073739904;
inp[3577] = 0;
inp[3578] = 1073739840;
inp[3579] = 0;
inp[3580] = 1073741824;
inp[3581] = 1073741824;
inp[3582] = 1073741792;
inp[3583] = 0;
inp[3584] = 1073741760;
inp[3585] = 0;
inp[3586] = 1073741728;
inp[3587] = 0;
inp[3588] = 1073741696;
inp[3589] = 0;
inp[3590] = 1073741664;
inp[3591] = 0;
inp[3592] = 1073741632;
inp[3593] = 0;
inp[3594] = 1073741600;
inp[3595] = 0;
inp[3596] = 1073741568;
inp[3597] = 0;
inp[3598] = 1073741536;
inp[3599] = 0;
inp[3600] = 1073741504;
inp[3601] = 0;
inp[3602] = 1073741472;
inp[3603] = 0;
inp[3604] = 1073741440;
inp[3605] = 0;
inp[3606] = 1073741408;
inp[3607] = 0;
inp[3608] = 1073741376;
inp[3609] = 0;
inp[3610] = 1073741344;
inp[3611] = 0;
inp[3612] = 1073741312;
inp[3613] = 0;
inp[3614] = 1073741280;
inp[3615] = 0;
inp[3616] = 1073741248;
inp[3617] = 0;
inp[3618] = 1073741216;
inp[3619] = 0;
inp[3620] = 1073741184;
inp[3621] = 0;
inp[3622] = 1073741152;
inp[3623] = 0;
inp[3624] = 1073741120;
inp[3625] = 0;
inp[3626] = 1073741088;
inp[3627] = 0;
inp[3628] = 1073741056;
inp[3629] = 0;
inp[3630] = 1073741024;
inp[3631] = 0;
inp[3632] = 1073740992;
inp[3633] = 0;
inp[3634] = 1073740960;
inp[3635] = 0;
inp[3636] = 1073740928;
inp[3637] = 0;
inp[3638] = 1073740896;
inp[3639] = 0;
inp[3640] = 1073740864;
inp[3641] = 0;
inp[3642] = 1073740832;
inp[3643] = 0;
inp[3644] = 1073741824;
inp[3645] = 1073741824;
inp[3646] = 1073741808;
inp[3647] = 0;
inp[3648] = 1073741792;
inp[3649] = 0;
inp[3650] = 1073741776;
inp[3651] = 0;
inp[3652] = 1073741760;
inp[3653] = 0;
inp[3654] = 1073741744;
inp[3655] = 0;
inp[3656] = 1073741728;
inp[3657] = 0;
inp[3658] = 1073741712;
inp[3659] = 0;
inp[3660] = 1073741696;
inp[3661] = 0;
inp[3662] = 1073741680;
inp[3663] = 0;
inp[3664] = 1073741664;
inp[3665] = 0;
inp[3666] = 1073741648;
inp[3667] = 0;
inp[3668] = 1073741632;
inp[3669] = 0;
inp[3670] = 1073741616;
inp[3671] = 0;
inp[3672] = 1073741600;
inp[3673] = 0;
inp[3674] = 1073741584;
inp[3675] = 0;
inp[3676] = 1073741568;
inp[3677] = 0;
inp[3678] = 1073741552;
inp[3679] = 0;
inp[3680] = 1073741536;
inp[3681] = 0;
inp[3682] = 1073741520;
inp[3683] = 0;
inp[3684] = 1073741504;
inp[3685] = 0;
inp[3686] = 1073741488;
inp[3687] = 0;
inp[3688] = 1073741472;
inp[3689] = 0;
inp[3690] = 1073741456;
inp[3691] = 0;
inp[3692] = 1073741440;
inp[3693] = 0;
inp[3694] = 1073741424;
inp[3695] = 0;
inp[3696] = 1073741408;
inp[3697] = 0;
inp[3698] = 1073741392;
inp[3699] = 0;
inp[3700] = 1073741376;
inp[3701] = 0;
inp[3702] = 1073741360;
inp[3703] = 0;
inp[3704] = 1073741344;
inp[3705] = 0;
inp[3706] = 1073741328;
inp[3707] = 0;
inp[3708] = 1073741824;
inp[3709] = 1073741824;
inp[3710] = 1073741816;
inp[3711] = 0;
inp[3712] = 1073741808;
inp[3713] = 0;
inp[3714] = 1073741800;
inp[3715] = 0;
inp[3716] = 1073741792;
inp[3717] = 0;
inp[3718] = 1073741784;
inp[3719] = 0;
inp[3720] = 1073741776;
inp[3721] = 0;
inp[3722] = 1073741768;
inp[3723] = 0;
inp[3724] = 1073741760;
inp[3725] = 0;
inp[3726] = 1073741752;
inp[3727] = 0;
inp[3728] = 1073741744;
inp[3729] = 0;
inp[3730] = 1073741736;
inp[3731] = 0;
inp[3732] = 1073741728;
inp[3733] = 0;
inp[3734] = 1073741720;
inp[3735] = 0;
inp[3736] = 1073741712;
inp[3737] = 0;
inp[3738] = 1073741704;
inp[3739] = 0;
inp[3740] = 1073741696;
inp[3741] = 0;
inp[3742] = 1073741688;
inp[3743] = 0;
inp[3744] = 1073741680;
inp[3745] = 0;
inp[3746] = 1073741672;
inp[3747] = 0;
inp[3748] = 1073741664;
inp[3749] = 0;
inp[3750] = 1073741656;
inp[3751] = 0;
inp[3752] = 1073741648;
inp[3753] = 0;
inp[3754] = 1073741640;
inp[3755] = 0;
inp[3756] = 1073741632;
inp[3757] = 0;
inp[3758] = 1073741624;
inp[3759] = 0;
inp[3760] = 1073741616;
inp[3761] = 0;
inp[3762] = 1073741608;
inp[3763] = 0;
inp[3764] = 1073741600;
inp[3765] = 0;
inp[3766] = 1073741592;
inp[3767] = 0;
inp[3768] = 1073741584;
inp[3769] = 0;
inp[3770] = 1073741576;
inp[3771] = 0;
inp[3772] = 1073741824;
inp[3773] = 1073741824;
inp[3774] = 1073741820;
inp[3775] = 0;
inp[3776] = 1073741816;
inp[3777] = 0;
inp[3778] = 1073741812;
inp[3779] = 0;
inp[3780] = 1073741808;
inp[3781] = 0;
inp[3782] = 1073741804;
inp[3783] = 0;
inp[3784] = 1073741800;
inp[3785] = 0;
inp[3786] = 1073741796;
inp[3787] = 0;
inp[3788] = 1073741792;
inp[3789] = 0;
inp[3790] = 1073741788;
inp[3791] = 0;
inp[3792] = 1073741784;
inp[3793] = 0;
inp[3794] = 1073741780;
inp[3795] = 0;
inp[3796] = 1073741776;
inp[3797] = 0;
inp[3798] = 1073741772;
inp[3799] = 0;
inp[3800] = 1073741768;
inp[3801] = 0;
inp[3802] = 1073741764;
inp[3803] = 0;
inp[3804] = 1073741760;
inp[3805] = 0;
inp[3806] = 1073741756;
inp[3807] = 0;
inp[3808] = 1073741752;
inp[3809] = 0;
inp[3810] = 1073741748;
inp[3811] = 0;
inp[3812] = 1073741744;
inp[3813] = 0;
inp[3814] = 1073741740;
inp[3815] = 0;
inp[3816] = 1073741736;
inp[3817] = 0;
inp[3818] = 1073741732;
inp[3819] = 0;
inp[3820] = 1073741728;
inp[3821] = 0;
inp[3822] = 1073741724;
inp[3823] = 0;
inp[3824] = 1073741720;
inp[3825] = 0;
inp[3826] = 1073741716;
inp[3827] = 0;
inp[3828] = 1073741712;
inp[3829] = 0;
inp[3830] = 1073741708;
inp[3831] = 0;
inp[3832] = 1073741704;
inp[3833] = 0;
inp[3834] = 1073741700;
inp[3835] = 0;
inp[3836] = 1073741824;
inp[3837] = 1073741824;
inp[3838] = 1073741822;
inp[3839] = 0;
inp[3840] = 1073741820;
inp[3841] = 0;
inp[3842] = 1073741818;
inp[3843] = 0;
inp[3844] = 1073741816;
inp[3845] = 0;
inp[3846] = 1073741814;
inp[3847] = 0;
inp[3848] = 1073741812;
inp[3849] = 0;
inp[3850] = 1073741810;
inp[3851] = 0;
inp[3852] = 1073741808;
inp[3853] = 0;
inp[3854] = 1073741806;
inp[3855] = 0;
inp[3856] = 1073741804;
inp[3857] = 0;
inp[3858] = 1073741802;
inp[3859] = 0;
inp[3860] = 1073741800;
inp[3861] = 0;
inp[3862] = 1073741798;
inp[3863] = 0;
inp[3864] = 1073741796;
inp[3865] = 0;
inp[3866] = 1073741794;
inp[3867] = 0;
inp[3868] = 1073741792;
inp[3869] = 0;
inp[3870] = 1073741790;
inp[3871] = 0;
inp[3872] = 1073741788;
inp[3873] = 0;
inp[3874] = 1073741786;
inp[3875] = 0;
inp[3876] = 1073741784;
inp[3877] = 0;
inp[3878] = 1073741782;
inp[3879] = 0;
inp[3880] = 1073741780;
inp[3881] = 0;
inp[3882] = 1073741778;
inp[3883] = 0;
inp[3884] = 1073741776;
inp[3885] = 0;
inp[3886] = 1073741774;
inp[3887] = 0;
inp[3888] = 1073741772;
inp[3889] = 0;
inp[3890] = 1073741770;
inp[3891] = 0;
inp[3892] = 1073741768;
inp[3893] = 0;
inp[3894] = 1073741766;
inp[3895] = 0;
inp[3896] = 1073741764;
inp[3897] = 0;
inp[3898] = 1073741762;
inp[3899] = 0;
inp[3900] = 1073741824;
inp[3901] = 1073741824;
inp[3902] = 1073741823;
inp[3903] = 0;
inp[3904] = 1073741822;
inp[3905] = 0;
inp[3906] = 1073741821;
inp[3907] = 0;
inp[3908] = 1073741820;
inp[3909] = 0;
inp[3910] = 1073741819;
inp[3911] = 0;
inp[3912] = 1073741818;
inp[3913] = 0;
inp[3914] = 1073741817;
inp[3915] = 0;
inp[3916] = 1073741816;
inp[3917] = 0;
inp[3918] = 1073741815;
inp[3919] = 0;
inp[3920] = 1073741814;
inp[3921] = 0;
inp[3922] = 1073741813;
inp[3923] = 0;
inp[3924] = 1073741812;
inp[3925] = 0;
inp[3926] = 1073741811;
inp[3927] = 0;
inp[3928] = 1073741810;
inp[3929] = 0;
inp[3930] = 1073741809;
inp[3931] = 0;
inp[3932] = 1073741808;
inp[3933] = 0;
inp[3934] = 1073741807;
inp[3935] = 0;
inp[3936] = 1073741806;
inp[3937] = 0;
inp[3938] = 1073741805;
inp[3939] = 0;
inp[3940] = 1073741804;
inp[3941] = 0;
inp[3942] = 1073741803;
inp[3943] = 0;
inp[3944] = 1073741802;
inp[3945] = 0;
inp[3946] = 1073741801;
inp[3947] = 0;
inp[3948] = 1073741800;
inp[3949] = 0;
inp[3950] = 1073741799;
inp[3951] = 0;
inp[3952] = 1073741798;
inp[3953] = 0;
inp[3954] = 1073741797;
inp[3955] = 0;
inp[3956] = 1073741796;
inp[3957] = 0;
inp[3958] = 1073741795;
inp[3959] = 0;
inp[3960] = 1073741794;
inp[3961] = 0;
inp[3962] = 1073741793;
inp[3963] = 0;
inp[3964] = 1073741824;
inp[3965] = 1073741824;
inp[3966] = 1073741823;
inp[3967] = 0;
inp[3968] = 1073741823;
inp[3969] = 0;
inp[3970] = 1073741822;
inp[3971] = 0;
inp[3972] = 1073741822;
inp[3973] = 0;
inp[3974] = 1073741821;
inp[3975] = 0;
inp[3976] = 1073741821;
inp[3977] = 0;
inp[3978] = 1073741820;
inp[3979] = 0;
inp[3980] = 1073741820;
inp[3981] = 0;
inp[3982] = 1073741819;
inp[3983] = 0;
inp[3984] = 1073741819;
inp[3985] = 0;
inp[3986] = 1073741818;
inp[3987] = 0;
inp[3988] = 1073741818;
inp[3989] = 0;
inp[3990] = 1073741817;
inp[3991] = 0;
inp[3992] = 1073741817;
inp[3993] = 0;
inp[3994] = 1073741816;
inp[3995] = 0;
inp[3996] = 1073741816;
inp[3997] = 0;
inp[3998] = 1073741815;
inp[3999] = 0;
inp[4000] = 1073741815;
inp[4001] = 0;
inp[4002] = 1073741814;
inp[4003] = 0;
inp[4004] = 1073741814;
inp[4005] = 0;
inp[4006] = 1073741813;
inp[4007] = 0;
inp[4008] = 1073741813;
inp[4009] = 0;
inp[4010] = 1073741812;
inp[4011] = 0;
inp[4012] = 1073741812;
inp[4013] = 0;
inp[4014] = 1073741811;
inp[4015] = 0;
inp[4016] = 1073741811;
inp[4017] = 0;
inp[4018] = 1073741810;
inp[4019] = 0;
inp[4020] = 1073741810;
inp[4021] = 0;
inp[4022] = 1073741809;
inp[4023] = 0;
inp[4024] = 1073741809;
inp[4025] = 0;
inp[4026] = 1073741808;
inp[4027] = 0;
inp[4028] = 1073741824;
inp[4029] = 1073741824;
inp[4030] = 1073741823;
inp[4031] = 0;
inp[4032] = 1073741823;
inp[4033] = 0;
inp[4034] = 1073741823;
inp[4035] = 0;
inp[4036] = 1073741823;
inp[4037] = 0;
inp[4038] = 1073741822;
inp[4039] = 0;
inp[4040] = 1073741822;
inp[4041] = 0;
inp[4042] = 1073741822;
inp[4043] = 0;
inp[4044] = 1073741822;
inp[4045] = 0;
inp[4046] = 1073741821;
inp[4047] = 0;
inp[4048] = 1073741821;
inp[4049] = 0;
inp[4050] = 1073741821;
inp[4051] = 0;
inp[4052] = 1073741821;
inp[4053] = 0;
inp[4054] = 1073741820;
inp[4055] = 0;
inp[4056] = 1073741820;
inp[4057] = 0;
inp[4058] = 1073741820;
inp[4059] = 0;
inp[4060] = 1073741820;
inp[4061] = 0;
inp[4062] = 1073741819;
inp[4063] = 0;
inp[4064] = 1073741819;
inp[4065] = 0;
inp[4066] = 1073741819;
inp[4067] = 0;
inp[4068] = 1073741819;
inp[4069] = 0;
inp[4070] = 1073741818;
inp[4071] = 0;
inp[4072] = 1073741818;
inp[4073] = 0;
inp[4074] = 1073741818;
inp[4075] = 0;
inp[4076] = 1073741818;
inp[4077] = 0;
inp[4078] = 1073741817;
inp[4079] = 0;
inp[4080] = 1073741817;
inp[4081] = 0;
inp[4082] = 1073741817;
inp[4083] = 0;
inp[4084] = 1073741817;
inp[4085] = 0;
inp[4086] = 1073741816;
inp[4087] = 0;
inp[4088] = 1073741816;
inp[4089] = 0;
inp[4090] = 1073741816;
inp[4091] = 0;
inp[4092] = 1073741824;
inp[4093] = 1073741824;
inp[4094] = 395007542;
inp[4095] = 395007542;
inp[4096] = 145315153;
inp[4097] = 145315153;
inp[4098] = 53458457;
inp[4099] = 53458457;
inp[4100] = 19666267;
inp[4101] = 19666267;
inp[4102] = 7234815;
inp[4103] = 7234815;
inp[4104] = 2661539;
inp[4105] = 2661539;
inp[4106] = 979125;
inp[4107] = 979125;
inp[4108] = 360200;
inp[4109] = 360200;
inp[4110] = 132510;
inp[4111] = 132510;
inp[4112] = 48747;
inp[4113] = 48747;
inp[4114] = 17933;
inp[4115] = 17933;
inp[4116] = 6597;
inp[4117] = 6597;
inp[4118] = 2427;
inp[4119] = 2427;
inp[4120] = 892;
inp[4121] = 892;
inp[4122] = 328;
inp[4123] = 328;
inp[4124] = 120;
inp[4125] = 120;
inp[4126] = 44;
inp[4127] = 44;
inp[4128] = 16;
inp[4129] = 16;
inp[4130] = 6;
inp[4131] = 6;
inp[4132] = 2;
inp[4133] = 2;
inp[4134] = 0;
inp[4135] = 0;
inp[4136] = 0;
inp[4137] = 0;
inp[4138] = 0;
inp[4139] = 0;
inp[4140] = 0;
inp[4141] = 0;
inp[4142] = 0;
inp[4143] = 0;
inp[4144] = 0;
inp[4145] = 0;
inp[4146] = 0;
inp[4147] = 0;
inp[4148] = 0;
inp[4149] = 0;
inp[4150] = 0;
inp[4151] = 0;
inp[4152] = 0;
inp[4153] = 0;
inp[4154] = 0;
inp[4155] = 0;
inp[4156] = 0;
inp[4157] = 0;
inp[4158] = 0;
inp[4159] = 0;
inp[4160] = 0;
inp[4161] = 0;
inp[4162] = 0;
inp[4163] = 0;
inp[4164] = 0;
inp[4165] = 0;
inp[4166] = 0;
inp[4167] = 0;
inp[4168] = 0;
inp[4169] = 0;
inp[4170] = 0;
inp[4171] = 0;
inp[4172] = 0;
inp[4173] = 0;
inp[4174] = 0;
inp[4175] = 0;
inp[4176] = 0;
inp[4177] = 0;
inp[4178] = 0;
inp[4179] = 0;
inp[4180] = 0;
inp[4181] = 0;
inp[4182] = 0;
inp[4183] = 0;
inp[4184] = 0;
inp[4185] = 0;
inp[4186] = 0;
inp[4187] = 0;
inp[4188] = 0;
inp[4189] = 0;
inp[4190] = 0;
inp[4191] = 0;
inp[4192] = 0;
inp[4193] = 0;
inp[4194] = 0;
inp[4195] = 0;
inp[4196] = 0;
inp[4197] = 0;
inp[4198] = 0;
inp[4199] = 0;
inp[4200] = 0;
inp[4201] = 0;
inp[4202] = 0;
inp[4203] = 0;
inp[4204] = 0;
inp[4205] = 0;
inp[4206] = 0;
inp[4207] = 0;
inp[4208] = 0;
inp[4209] = 0;
inp[4210] = 0;
inp[4211] = 0;
inp[4212] = 0;
inp[4213] = 0;
inp[4214] = 0;
inp[4215] = 0;
inp[4216] = 0;
inp[4217] = 0;
inp[4218] = 0;
inp[4219] = 0;
inp[4220] = 1073741824;
inp[4221] = 1073741824;
inp[4222] = 651257336;
inp[4223] = 145315153;
inp[4224] = 395007542;
inp[4225] = 19666267;
inp[4226] = 239584185;
inp[4227] = 2661539;
inp[4228] = 145315153;
inp[4229] = 360200;
inp[4230] = 88138096;
inp[4231] = 48747;
inp[4232] = 53458457;
inp[4233] = 6597;
inp[4234] = 32424193;
inp[4235] = 892;
inp[4236] = 19666267;
inp[4237] = 120;
inp[4238] = 11928194;
inp[4239] = 16;
inp[4240] = 7234815;
inp[4241] = 2;
inp[4242] = 4388137;
inp[4243] = 0;
inp[4244] = 2661539;
inp[4245] = 0;
inp[4246] = 1614305;
inp[4247] = 0;
inp[4248] = 979125;
inp[4249] = 0;
inp[4250] = 593869;
inp[4251] = 0;
inp[4252] = 360200;
inp[4253] = 0;
inp[4254] = 218472;
inp[4255] = 0;
inp[4256] = 132510;
inp[4257] = 0;
inp[4258] = 80371;
inp[4259] = 0;
inp[4260] = 48747;
inp[4261] = 0;
inp[4262] = 29567;
inp[4263] = 0;
inp[4264] = 17933;
inp[4265] = 0;
inp[4266] = 10877;
inp[4267] = 0;
inp[4268] = 6597;
inp[4269] = 0;
inp[4270] = 4001;
inp[4271] = 0;
inp[4272] = 2427;
inp[4273] = 0;
inp[4274] = 1472;
inp[4275] = 0;
inp[4276] = 892;
inp[4277] = 0;
inp[4278] = 541;
inp[4279] = 0;
inp[4280] = 328;
inp[4281] = 0;
inp[4282] = 199;
inp[4283] = 0;
inp[4284] = 120;
inp[4285] = 0;
inp[4286] = 73;
inp[4287] = 0;
inp[4288] = 44;
inp[4289] = 0;
inp[4290] = 26;
inp[4291] = 0;
inp[4292] = 16;
inp[4293] = 0;
inp[4294] = 9;
inp[4295] = 0;
inp[4296] = 6;
inp[4297] = 0;
inp[4298] = 3;
inp[4299] = 0;
inp[4300] = 2;
inp[4301] = 0;
inp[4302] = 1;
inp[4303] = 0;
inp[4304] = 0;
inp[4305] = 0;
inp[4306] = 0;
inp[4307] = 0;
inp[4308] = 0;
inp[4309] = 0;
inp[4310] = 0;
inp[4311] = 0;
inp[4312] = 0;
inp[4313] = 0;
inp[4314] = 0;
inp[4315] = 0;
inp[4316] = 0;
inp[4317] = 0;
inp[4318] = 0;
inp[4319] = 0;
inp[4320] = 0;
inp[4321] = 0;
inp[4322] = 0;
inp[4323] = 0;
inp[4324] = 0;
inp[4325] = 0;
inp[4326] = 0;
inp[4327] = 0;
inp[4328] = 0;
inp[4329] = 0;
inp[4330] = 0;
inp[4331] = 0;
inp[4332] = 0;
inp[4333] = 0;
inp[4334] = 0;
inp[4335] = 0;
inp[4336] = 0;
inp[4337] = 0;
inp[4338] = 0;
inp[4339] = 0;
inp[4340] = 0;
inp[4341] = 0;
inp[4342] = 0;
inp[4343] = 0;
inp[4344] = 0;
inp[4345] = 0;
inp[4346] = 0;
inp[4347] = 0;
inp[4348] = 1073741824;
inp[4349] = 1073741824;
inp[4350] = 836230973;
inp[4351] = 19666267;
inp[4352] = 651257336;
inp[4353] = 360200;
inp[4354] = 507199723;
inp[4355] = 6597;
inp[4356] = 395007542;
inp[4357] = 120;
inp[4358] = 307632183;
inp[4359] = 2;
inp[4360] = 239584185;
inp[4361] = 0;
inp[4362] = 186588351;
inp[4363] = 0;
inp[4364] = 145315153;
inp[4365] = 0;
inp[4366] = 113171555;
inp[4367] = 0;
inp[4368] = 88138096;
inp[4369] = 0;
inp[4370] = 68642018;
inp[4371] = 0;
inp[4372] = 53458457;
inp[4373] = 0;
inp[4374] = 41633488;
inp[4375] = 0;
inp[4376] = 32424193;
inp[4377] = 0;
inp[4378] = 25251987;
inp[4379] = 0;
inp[4380] = 19666267;
inp[4381] = 0;
inp[4382] = 15316104;
inp[4383] = 0;
inp[4384] = 11928194;
inp[4385] = 0;
inp[4386] = 9289686;
inp[4387] = 0;
inp[4388] = 7234815;
inp[4389] = 0;
inp[4390] = 5634479;
inp[4391] = 0;
inp[4392] = 4388137;
inp[4393] = 0;
inp[4394] = 3417484;
inp[4395] = 0;
inp[4396] = 2661539;
inp[4397] = 0;
inp[4398] = 2072809;
inp[4399] = 0;
inp[4400] = 1614305;
inp[4401] = 0;
inp[4402] = 1257222;
inp[4403] = 0;
inp[4404] = 979125;
inp[4405] = 0;
inp[4406] = 762543;
inp[4407] = 0;
inp[4408] = 593869;
inp[4409] = 0;
inp[4410] = 462506;
inp[4411] = 0;
inp[4412] = 360200;
inp[4413] = 0;
inp[4414] = 280524;
inp[4415] = 0;
inp[4416] = 218472;
inp[4417] = 0;
inp[4418] = 170146;
inp[4419] = 0;
inp[4420] = 132510;
inp[4421] = 0;
inp[4422] = 103199;
inp[4423] = 0;
inp[4424] = 80371;
inp[4425] = 0;
inp[4426] = 62593;
inp[4427] = 0;
inp[4428] = 48747;
inp[4429] = 0;
inp[4430] = 37964;
inp[4431] = 0;
inp[4432] = 29567;
inp[4433] = 0;
inp[4434] = 23026;
inp[4435] = 0;
inp[4436] = 17933;
inp[4437] = 0;
inp[4438] = 13966;
inp[4439] = 0;
inp[4440] = 10877;
inp[4441] = 0;
inp[4442] = 8471;
inp[4443] = 0;
inp[4444] = 6597;
inp[4445] = 0;
inp[4446] = 5137;
inp[4447] = 0;
inp[4448] = 4001;
inp[4449] = 0;
inp[4450] = 3116;
inp[4451] = 0;
inp[4452] = 2427;
inp[4453] = 0;
inp[4454] = 1890;
inp[4455] = 0;
inp[4456] = 1472;
inp[4457] = 0;
inp[4458] = 1146;
inp[4459] = 0;
inp[4460] = 892;
inp[4461] = 0;
inp[4462] = 695;
inp[4463] = 0;
inp[4464] = 541;
inp[4465] = 0;
inp[4466] = 421;
inp[4467] = 0;
inp[4468] = 328;
inp[4469] = 0;
inp[4470] = 255;
inp[4471] = 0;
inp[4472] = 199;
inp[4473] = 0;
inp[4474] = 155;
inp[4475] = 0;
inp[4476] = 1073741824;
inp[4477] = 1073741824;
inp[4478] = 947573833;
inp[4479] = 360200;
inp[4480] = 836230973;
inp[4481] = 120;
inp[4482] = 737971243;
inp[4483] = 0;
inp[4484] = 651257336;
inp[4485] = 0;
inp[4486] = 574732582;
inp[4487] = 0;
inp[4488] = 507199723;
inp[4489] = 0;
inp[4490] = 447602185;
inp[4491] = 0;
inp[4492] = 395007542;
inp[4493] = 0;
inp[4494] = 348592932;
inp[4495] = 0;
inp[4496] = 307632183;
inp[4497] = 0;
inp[4498] = 271484448;
inp[4499] = 0;
inp[4500] = 239584185;
inp[4501] = 0;
inp[4502] = 211432301;
inp[4503] = 0;
inp[4504] = 186588351;
inp[4505] = 0;
inp[4506] = 164663641;
inp[4507] = 0;
inp[4508] = 145315153;
inp[4509] = 0;
inp[4510] = 128240173;
inp[4511] = 0;
inp[4512] = 113171555;
inp[4513] = 0;
inp[4514] = 99873547;
inp[4515] = 0;
inp[4516] = 88138096;
inp[4517] = 0;
inp[4518] = 77781596;
inp[4519] = 0;
inp[4520] = 68642018;
inp[4521] = 0;
inp[4522] = 60576368;
inp[4523] = 0;
inp[4524] = 53458457;
inp[4525] = 0;
inp[4526] = 47176923;
inp[4527] = 0;
inp[4528] = 41633488;
inp[4529] = 0;
inp[4530] = 36741424;
inp[4531] = 0;
inp[4532] = 32424193;
inp[4533] = 0;
inp[4534] = 28614250;
inp[4535] = 0;
inp[4536] = 25251987;
inp[4537] = 0;
inp[4538] = 22284800;
inp[4539] = 0;
inp[4540] = 19666267;
inp[4541] = 0;
inp[4542] = 17355420;
inp[4543] = 0;
inp[4544] = 15316104;
inp[4545] = 0;
inp[4546] = 13516414;
inp[4547] = 0;
inp[4548] = 11928194;
inp[4549] = 0;
inp[4550] = 10526594;
inp[4551] = 0;
inp[4552] = 9289686;
inp[4553] = 0;
inp[4554] = 8198119;
inp[4555] = 0;
inp[4556] = 7234815;
inp[4557] = 0;
inp[4558] = 6384702;
inp[4559] = 0;
inp[4560] = 5634479;
inp[4561] = 0;
inp[4562] = 4972411;
inp[4563] = 0;
inp[4564] = 4388137;
inp[4565] = 0;
inp[4566] = 3872517;
inp[4567] = 0;
inp[4568] = 3417484;
inp[4569] = 0;
inp[4570] = 3015919;
inp[4571] = 0;
inp[4572] = 2661539;
inp[4573] = 0;
inp[4574] = 2348800;
inp[4575] = 0;
inp[4576] = 2072809;
inp[4577] = 0;
inp[4578] = 1829247;
inp[4579] = 0;
inp[4580] = 1614305;
inp[4581] = 0;
inp[4582] = 1424619;
inp[4583] = 0;
inp[4584] = 1257222;
inp[4585] = 0;
inp[4586] = 1109494;
inp[4587] = 0;
inp[4588] = 979125;
inp[4589] = 0;
inp[4590] = 864075;
inp[4591] = 0;
inp[4592] = 762543;
inp[4593] = 0;
inp[4594] = 672942;
inp[4595] = 0;
inp[4596] = 593869;
inp[4597] = 0;
inp[4598] = 524088;
inp[4599] = 0;
inp[4600] = 462506;
inp[4601] = 0;
inp[4602] = 408160;
inp[4603] = 0;
inp[4604] = 1073741824;
inp[4605] = 1073741824;
inp[4606] = 1008687095;
inp[4607] = 120;
inp[4608] = 947573833;
inp[4609] = 0;
inp[4610] = 890163237;
inp[4611] = 0;
inp[4612] = 836230973;
inp[4613] = 0;
inp[4614] = 785566299;
inp[4615] = 0;
inp[4616] = 737971243;
inp[4617] = 0;
inp[4618] = 693259826;
inp[4619] = 0;
inp[4620] = 651257336;
inp[4621] = 0;
inp[4622] = 611799649;
inp[4623] = 0;
inp[4624] = 574732582;
inp[4625] = 0;
inp[4626] = 539911295;
inp[4627] = 0;
inp[4628] = 507199723;
inp[4629] = 0;
inp[4630] = 476470046;
inp[4631] = 0;
inp[4632] = 447602185;
inp[4633] = 0;
inp[4634] = 420483339;
inp[4635] = 0;
inp[4636] = 395007542;
inp[4637] = 0;
inp[4638] = 371075245;
inp[4639] = 0;
inp[4640] = 348592932;
inp[4641] = 0;
inp[4642] = 327472754;
inp[4643] = 0;
inp[4644] = 307632183;
inp[4645] = 0;
inp[4646] = 288993691;
inp[4647] = 0;
inp[4648] = 271484448;
inp[4649] = 0;
inp[4650] = 255036037;
inp[4651] = 0;
inp[4652] = 239584185;
inp[4653] = 0;
inp[4654] = 225068513;
inp[4655] = 0;
inp[4656] = 211432301;
inp[4657] = 0;
inp[4658] = 198622265;
inp[4659] = 0;
inp[4660] = 186588351;
inp[4661] = 0;
inp[4662] = 175283534;
inp[4663] = 0;
inp[4664] = 164663641;
inp[4665] = 0;
inp[4666] = 154687176;
inp[4667] = 0;
inp[4668] = 145315153;
inp[4669] = 0;
inp[4670] = 136510953;
inp[4671] = 0;
inp[4672] = 128240173;
inp[4673] = 0;
inp[4674] = 120470493;
inp[4675] = 0;
inp[4676] = 113171555;
inp[4677] = 0;
inp[4678] = 106314837;
inp[4679] = 0;
inp[4680] = 99873547;
inp[4681] = 0;
inp[4682] = 93822514;
inp[4683] = 0;
inp[4684] = 88138096;
inp[4685] = 0;
inp[4686] = 82798078;
inp[4687] = 0;
inp[4688] = 77781596;
inp[4689] = 0;
inp[4690] = 73069048;
inp[4691] = 0;
inp[4692] = 68642018;
inp[4693] = 0;
inp[4694] = 64483208;
inp[4695] = 0;
inp[4696] = 60576368;
inp[4697] = 0;
inp[4698] = 56906231;
inp[4699] = 0;
inp[4700] = 53458457;
inp[4701] = 0;
inp[4702] = 50219573;
inp[4703] = 0;
inp[4704] = 47176923;
inp[4705] = 0;
inp[4706] = 44318617;
inp[4707] = 0;
inp[4708] = 41633488;
inp[4709] = 0;
inp[4710] = 39111043;
inp[4711] = 0;
inp[4712] = 36741424;
inp[4713] = 0;
inp[4714] = 34515374;
inp[4715] = 0;
inp[4716] = 32424193;
inp[4717] = 0;
inp[4718] = 30459710;
inp[4719] = 0;
inp[4720] = 28614250;
inp[4721] = 0;
inp[4722] = 26880600;
inp[4723] = 0;
inp[4724] = 25251987;
inp[4725] = 0;
inp[4726] = 23722046;
inp[4727] = 0;
inp[4728] = 22284800;
inp[4729] = 0;
inp[4730] = 20934632;
inp[4731] = 0;
inp[4732] = 1073741824;
inp[4733] = 1073741824;
inp[4734] = 1040706261;
inp[4735] = 0;
inp[4736] = 1008687095;
inp[4737] = 0;
inp[4738] = 977653056;
inp[4739] = 0;
inp[4740] = 947573833;
inp[4741] = 0;
inp[4742] = 918420051;
inp[4743] = 0;
inp[4744] = 890163237;
inp[4745] = 0;
inp[4746] = 862775793;
inp[4747] = 0;
inp[4748] = 836230973;
inp[4749] = 0;
inp[4750] = 810502851;
inp[4751] = 0;
inp[4752] = 785566299;
inp[4753] = 0;
inp[4754] = 761396965;
inp[4755] = 0;
inp[4756] = 737971243;
inp[4757] = 0;
inp[4758] = 715266255;
inp[4759] = 0;
inp[4760] = 693259826;
inp[4761] = 0;
inp[4762] = 671930463;
inp[4763] = 0;
inp[4764] = 651257336;
inp[4765] = 0;
inp[4766] = 631220255;
inp[4767] = 0;
inp[4768] = 611799649;
inp[4769] = 0;
inp[4770] = 592976553;
inp[4771] = 0;
inp[4772] = 574732582;
inp[4773] = 0;
inp[4774] = 557049919;
inp[4775] = 0;
inp[4776] = 539911295;
inp[4777] = 0;
inp[4778] = 523299971;
inp[4779] = 0;
inp[4780] = 507199723;
inp[4781] = 0;
inp[4782] = 491594828;
inp[4783] = 0;
inp[4784] = 476470046;
inp[4785] = 0;
inp[4786] = 461810603;
inp[4787] = 0;
inp[4788] = 447602185;
inp[4789] = 0;
inp[4790] = 433830913;
inp[4791] = 0;
inp[4792] = 420483339;
inp[4793] = 0;
inp[4794] = 407546427;
inp[4795] = 0;
inp[4796] = 395007542;
inp[4797] = 0;
inp[4798] = 382854437;
inp[4799] = 0;
inp[4800] = 371075245;
inp[4801] = 0;
inp[4802] = 359658459;
inp[4803] = 0;
inp[4804] = 348592932;
inp[4805] = 0;
inp[4806] = 337867855;
inp[4807] = 0;
inp[4808] = 327472754;
inp[4809] = 0;
inp[4810] = 317397476;
inp[4811] = 0;
inp[4812] = 307632183;
inp[4813] = 0;
inp[4814] = 298167335;
inp[4815] = 0;
inp[4816] = 288993691;
inp[4817] = 0;
inp[4818] = 280102290;
inp[4819] = 0;
inp[4820] = 271484448;
inp[4821] = 0;
inp[4822] = 263131750;
inp[4823] = 0;
inp[4824] = 255036037;
inp[4825] = 0;
inp[4826] = 247189403;
inp[4827] = 0;
inp[4828] = 239584185;
inp[4829] = 0;
inp[4830] = 232212954;
inp[4831] = 0;
inp[4832] = 225068513;
inp[4833] = 0;
inp[4834] = 218143882;
inp[4835] = 0;
inp[4836] = 211432301;
inp[4837] = 0;
inp[4838] = 204927213;
inp[4839] = 0;
inp[4840] = 198622265;
inp[4841] = 0;
inp[4842] = 192511301;
inp[4843] = 0;
inp[4844] = 186588351;
inp[4845] = 0;
inp[4846] = 180847630;
inp[4847] = 0;
inp[4848] = 175283534;
inp[4849] = 0;
inp[4850] = 169890626;
inp[4851] = 0;
inp[4852] = 164663641;
inp[4853] = 0;
inp[4854] = 159597474;
inp[4855] = 0;
inp[4856] = 154687176;
inp[4857] = 0;
inp[4858] = 149927952;
inp[4859] = 0;
inp[4860] = 1073741824;
inp[4861] = 1073741824;
inp[4862] = 1057094999;
inp[4863] = 0;
inp[4864] = 1040706261;
inp[4865] = 0;
inp[4866] = 1024571605;
inp[4867] = 0;
inp[4868] = 1008687095;
inp[4869] = 0;
inp[4870] = 993048851;
inp[4871] = 0;
inp[4872] = 977653056;
inp[4873] = 0;
inp[4874] = 962495950;
inp[4875] = 0;
inp[4876] = 947573833;
inp[4877] = 0;
inp[4878] = 932883063;
inp[4879] = 0;
inp[4880] = 918420051;
inp[4881] = 0;
inp[4882] = 904181268;
inp[4883] = 0;
inp[4884] = 890163237;
inp[4885] = 0;
inp[4886] = 876362535;
inp[4887] = 0;
inp[4888] = 862775793;
inp[4889] = 0;
inp[4890] = 849399695;
inp[4891] = 0;
inp[4892] = 836230973;
inp[4893] = 0;
inp[4894] = 823266413;
inp[4895] = 0;
inp[4896] = 810502851;
inp[4897] = 0;
inp[4898] = 797937169;
inp[4899] = 0;
inp[4900] = 785566299;
inp[4901] = 0;
inp[4902] = 773387223;
inp[4903] = 0;
inp[4904] = 761396965;
inp[4905] = 0;
inp[4906] = 749592599;
inp[4907] = 0;
inp[4908] = 737971243;
inp[4909] = 0;
inp[4910] = 726530060;
inp[4911] = 0;
inp[4912] = 715266255;
inp[4913] = 0;
inp[4914] = 704177080;
inp[4915] = 0;
inp[4916] = 693259826;
inp[4917] = 0;
inp[4918] = 682511829;
inp[4919] = 0;
inp[4920] = 671930463;
inp[4921] = 0;
inp[4922] = 661513147;
inp[4923] = 0;
inp[4924] = 651257336;
inp[4925] = 0;
inp[4926] = 641160527;
inp[4927] = 0;
inp[4928] = 631220255;
inp[4929] = 0;
inp[4930] = 621434092;
inp[4931] = 0;
inp[4932] = 611799649;
inp[4933] = 0;
inp[4934] = 602314575;
inp[4935] = 0;
inp[4936] = 592976553;
inp[4937] = 0;
inp[4938] = 583783303;
inp[4939] = 0;
inp[4940] = 574732582;
inp[4941] = 0;
inp[4942] = 565822179;
inp[4943] = 0;
inp[4944] = 557049919;
inp[4945] = 0;
inp[4946] = 548413661;
inp[4947] = 0;
inp[4948] = 539911295;
inp[4949] = 0;
inp[4950] = 531540746;
inp[4951] = 0;
inp[4952] = 523299971;
inp[4953] = 0;
inp[4954] = 515186957;
inp[4955] = 0;
inp[4956] = 507199723;
inp[4957] = 0;
inp[4958] = 499336321;
inp[4959] = 0;
inp[4960] = 491594828;
inp[4961] = 0;
inp[4962] = 483973357;
inp[4963] = 0;
inp[4964] = 476470046;
inp[4965] = 0;
inp[4966] = 469083062;
inp[4967] = 0;
inp[4968] = 461810603;
inp[4969] = 0;
inp[4970] = 454650894;
inp[4971] = 0;
inp[4972] = 447602185;
inp[4973] = 0;
inp[4974] = 440662756;
inp[4975] = 0;
inp[4976] = 433830913;
inp[4977] = 0;
inp[4978] = 427104988;
inp[4979] = 0;
inp[4980] = 420483339;
inp[4981] = 0;
inp[4982] = 413964349;
inp[4983] = 0;
inp[4984] = 407546427;
inp[4985] = 0;
inp[4986] = 401228005;
inp[4987] = 0;
inp[4988] = 1073741824;
inp[4989] = 1073741824;
inp[4990] = 1065385898;
inp[4991] = 0;
inp[4992] = 1057094999;
inp[4993] = 0;
inp[4994] = 1048868621;
inp[4995] = 0;
inp[4996] = 1040706261;
inp[4997] = 0;
inp[4998] = 1032607420;
inp[4999] = 0;
inp[5000] = 1024571605;
inp[5001] = 0;
inp[5002] = 1016598326;
inp[5003] = 0;
inp[5004] = 1008687095;
inp[5005] = 0;
inp[5006] = 1000837430;
inp[5007] = 0;
inp[5008] = 993048851;
inp[5009] = 0;
inp[5010] = 985320884;
inp[5011] = 0;
inp[5012] = 977653056;
inp[5013] = 0;
inp[5014] = 970044899;
inp[5015] = 0;
inp[5016] = 962495950;
inp[5017] = 0;
inp[5018] = 955005747;
inp[5019] = 0;
inp[5020] = 947573833;
inp[5021] = 0;
inp[5022] = 940199755;
inp[5023] = 0;
inp[5024] = 932883063;
inp[5025] = 0;
inp[5026] = 925623309;
inp[5027] = 0;
inp[5028] = 918420051;
inp[5029] = 0;
inp[5030] = 911272850;
inp[5031] = 0;
inp[5032] = 904181268;
inp[5033] = 0;
inp[5034] = 897144874;
inp[5035] = 0;
inp[5036] = 890163237;
inp[5037] = 0;
inp[5038] = 883235932;
inp[5039] = 0;
inp[5040] = 876362535;
inp[5041] = 0;
inp[5042] = 869542628;
inp[5043] = 0;
inp[5044] = 862775793;
inp[5045] = 0;
inp[5046] = 856061619;
inp[5047] = 0;
inp[5048] = 849399695;
inp[5049] = 0;
inp[5050] = 842789614;
inp[5051] = 0;
inp[5052] = 836230973;
inp[5053] = 0;
inp[5054] = 829723372;
inp[5055] = 0;
inp[5056] = 823266413;
inp[5057] = 0;
inp[5058] = 816859703;
inp[5059] = 0;
inp[5060] = 810502851;
inp[5061] = 0;
inp[5062] = 804195467;
inp[5063] = 0;
inp[5064] = 797937169;
inp[5065] = 0;
inp[5066] = 791727572;
inp[5067] = 0;
inp[5068] = 785566299;
inp[5069] = 0;
inp[5070] = 779452974;
inp[5071] = 0;
inp[5072] = 773387223;
inp[5073] = 0;
inp[5074] = 767368676;
inp[5075] = 0;
inp[5076] = 761396965;
inp[5077] = 0;
inp[5078] = 755471727;
inp[5079] = 0;
inp[5080] = 749592599;
inp[5081] = 0;
inp[5082] = 743759224;
inp[5083] = 0;
inp[5084] = 737971243;
inp[5085] = 0;
inp[5086] = 732228306;
inp[5087] = 0;
inp[5088] = 726530060;
inp[5089] = 0;
inp[5090] = 720876158;
inp[5091] = 0;
inp[5092] = 715266255;
inp[5093] = 0;
inp[5094] = 709700009;
inp[5095] = 0;
inp[5096] = 704177080;
inp[5097] = 0;
inp[5098] = 698697130;
inp[5099] = 0;
inp[5100] = 693259826;
inp[5101] = 0;
inp[5102] = 687864835;
inp[5103] = 0;
inp[5104] = 682511829;
inp[5105] = 0;
inp[5106] = 677200479;
inp[5107] = 0;
inp[5108] = 671930463;
inp[5109] = 0;
inp[5110] = 666701459;
inp[5111] = 0;
inp[5112] = 661513147;
inp[5113] = 0;
inp[5114] = 656365211;
inp[5115] = 0;
inp[5116] = 1073741824;
inp[5117] = 1073741824;
inp[5118] = 1069555701;
inp[5119] = 0;
inp[5120] = 1065385898;
inp[5121] = 0;
inp[5122] = 1061232352;
inp[5123] = 0;
inp[5124] = 1057094999;
inp[5125] = 0;
inp[5126] = 1052973777;
inp[5127] = 0;
inp[5128] = 1048868621;
inp[5129] = 0;
inp[5130] = 1044779470;
inp[5131] = 0;
inp[5132] = 1040706261;
inp[5133] = 0;
inp[5134] = 1036648931;
inp[5135] = 0;
inp[5136] = 1032607420;
inp[5137] = 0;
inp[5138] = 1028581665;
inp[5139] = 0;
inp[5140] = 1024571605;
inp[5141] = 0;
inp[5142] = 1020577179;
inp[5143] = 0;
inp[5144] = 1016598326;
inp[5145] = 0;
inp[5146] = 1012634985;
inp[5147] = 0;
inp[5148] = 1008687095;
inp[5149] = 0;
inp[5150] = 1004754597;
inp[5151] = 0;
inp[5152] = 1000837430;
inp[5153] = 0;
inp[5154] = 996935534;
inp[5155] = 0;
inp[5156] = 993048851;
inp[5157] = 0;
inp[5158] = 989177321;
inp[5159] = 0;
inp[5160] = 985320884;
inp[5161] = 0;
inp[5162] = 981479482;
inp[5163] = 0;
inp[5164] = 977653056;
inp[5165] = 0;
inp[5166] = 973841548;
inp[5167] = 0;
inp[5168] = 970044899;
inp[5169] = 0;
inp[5170] = 966263053;
inp[5171] = 0;
inp[5172] = 962495950;
inp[5173] = 0;
inp[5174] = 958743534;
inp[5175] = 0;
inp[5176] = 955005747;
inp[5177] = 0;
inp[5178] = 951282532;
inp[5179] = 0;
inp[5180] = 947573833;
inp[5181] = 0;
inp[5182] = 943879593;
inp[5183] = 0;
inp[5184] = 940199755;
inp[5185] = 0;
inp[5186] = 936534264;
inp[5187] = 0;
inp[5188] = 932883063;
inp[5189] = 0;
inp[5190] = 929246096;
inp[5191] = 0;
inp[5192] = 925623309;
inp[5193] = 0;
inp[5194] = 922014646;
inp[5195] = 0;
inp[5196] = 918420051;
inp[5197] = 0;
inp[5198] = 914839471;
inp[5199] = 0;
inp[5200] = 911272850;
inp[5201] = 0;
inp[5202] = 907720134;
inp[5203] = 0;
inp[5204] = 904181268;
inp[5205] = 0;
inp[5206] = 900656200;
inp[5207] = 0;
inp[5208] = 897144874;
inp[5209] = 0;
inp[5210] = 893647237;
inp[5211] = 0;
inp[5212] = 890163237;
inp[5213] = 0;
inp[5214] = 886692819;
inp[5215] = 0;
inp[5216] = 883235932;
inp[5217] = 0;
inp[5218] = 879792521;
inp[5219] = 0;
inp[5220] = 876362535;
inp[5221] = 0;
inp[5222] = 872945921;
inp[5223] = 0;
inp[5224] = 869542628;
inp[5225] = 0;
inp[5226] = 866152602;
inp[5227] = 0;
inp[5228] = 862775793;
inp[5229] = 0;
inp[5230] = 859412149;
inp[5231] = 0;
inp[5232] = 856061619;
inp[5233] = 0;
inp[5234] = 852724151;
inp[5235] = 0;
inp[5236] = 849399695;
inp[5237] = 0;
inp[5238] = 846088199;
inp[5239] = 0;
inp[5240] = 842789614;
inp[5241] = 0;
inp[5242] = 839503888;
inp[5243] = 0;
inp[5244] = 1073741824;
inp[5245] = 1073741824;
inp[5246] = 1071646718;
inp[5247] = 0;
inp[5248] = 1069555701;
inp[5249] = 0;
inp[5250] = 1067468764;
inp[5251] = 0;
inp[5252] = 1065385898;
inp[5253] = 0;
inp[5254] = 1063307097;
inp[5255] = 0;
inp[5256] = 1061232352;
inp[5257] = 0;
inp[5258] = 1059161656;
inp[5259] = 0;
inp[5260] = 1057094999;
inp[5261] = 0;
inp[5262] = 1055032376;
inp[5263] = 0;
inp[5264] = 1052973777;
inp[5265] = 0;
inp[5266] = 1050919194;
inp[5267] = 0;
inp[5268] = 1048868621;
inp[5269] = 0;
inp[5270] = 1046822049;
inp[5271] = 0;
inp[5272] = 1044779470;
inp[5273] = 0;
inp[5274] = 1042740876;
inp[5275] = 0;
inp[5276] = 1040706261;
inp[5277] = 0;
inp[5278] = 1038675615;
inp[5279] = 0;
inp[5280] = 1036648931;
inp[5281] = 0;
inp[5282] = 1034626202;
inp[5283] = 0;
inp[5284] = 1032607420;
inp[5285] = 0;
inp[5286] = 1030592577;
inp[5287] = 0;
inp[5288] = 1028581665;
inp[5289] = 0;
inp[5290] = 1026574677;
inp[5291] = 0;
inp[5292] = 1024571605;
inp[5293] = 0;
inp[5294] = 1022572442;
inp[5295] = 0;
inp[5296] = 1020577179;
inp[5297] = 0;
inp[5298] = 1018585810;
inp[5299] = 0;
inp[5300] = 1016598326;
inp[5301] = 0;
inp[5302] = 1014614720;
inp[5303] = 0;
inp[5304] = 1012634985;
inp[5305] = 0;
inp[5306] = 1010659112;
inp[5307] = 0;
inp[5308] = 1008687095;
inp[5309] = 0;
inp[5310] = 1006718926;
inp[5311] = 0;
inp[5312] = 1004754597;
inp[5313] = 0;
inp[5314] = 1002794101;
inp[5315] = 0;
inp[5316] = 1000837430;
inp[5317] = 0;
inp[5318] = 998884577;
inp[5319] = 0;
inp[5320] = 996935534;
inp[5321] = 0;
inp[5322] = 994990295;
inp[5323] = 0;
inp[5324] = 993048851;
inp[5325] = 0;
inp[5326] = 991111195;
inp[5327] = 0;
inp[5328] = 989177321;
inp[5329] = 0;
inp[5330] = 987247219;
inp[5331] = 0;
inp[5332] = 985320884;
inp[5333] = 0;
inp[5334] = 983398307;
inp[5335] = 0;
inp[5336] = 981479482;
inp[5337] = 0;
inp[5338] = 979564400;
inp[5339] = 0;
inp[5340] = 977653056;
inp[5341] = 0;
inp[5342] = 975745441;
inp[5343] = 0;
inp[5344] = 973841548;
inp[5345] = 0;
inp[5346] = 971941370;
inp[5347] = 0;
inp[5348] = 970044899;
inp[5349] = 0;
inp[5350] = 968152129;
inp[5351] = 0;
inp[5352] = 966263053;
inp[5353] = 0;
inp[5354] = 964377662;
inp[5355] = 0;
inp[5356] = 962495950;
inp[5357] = 0;
inp[5358] = 960617910;
inp[5359] = 0;
inp[5360] = 958743534;
inp[5361] = 0;
inp[5362] = 956872815;
inp[5363] = 0;
inp[5364] = 955005747;
inp[5365] = 0;
inp[5366] = 953142322;
inp[5367] = 0;
inp[5368] = 951282532;
inp[5369] = 0;
inp[5370] = 949426372;
inp[5371] = 0;
inp[5372] = 1073741824;
inp[5373] = 1073741824;
inp[5374] = 1072693759;
inp[5375] = 0;
inp[5376] = 1071646718;
inp[5377] = 0;
inp[5378] = 1070600699;
inp[5379] = 0;
inp[5380] = 1069555701;
inp[5381] = 0;
inp[5382] = 1068511723;
inp[5383] = 0;
inp[5384] = 1067468764;
inp[5385] = 0;
inp[5386] = 1066426822;
inp[5387] = 0;
inp[5388] = 1065385898;
inp[5389] = 0;
inp[5390] = 1064345990;
inp[5391] = 0;
inp[5392] = 1063307097;
inp[5393] = 0;
inp[5394] = 1062269218;
inp[5395] = 0;
inp[5396] = 1061232352;
inp[5397] = 0;
inp[5398] = 1060196498;
inp[5399] = 0;
inp[5400] = 1059161656;
inp[5401] = 0;
inp[5402] = 1058127823;
inp[5403] = 0;
inp[5404] = 1057094999;
inp[5405] = 0;
inp[5406] = 1056063184;
inp[5407] = 0;
inp[5408] = 1055032376;
inp[5409] = 0;
inp[5410] = 1054002574;
inp[5411] = 0;
inp[5412] = 1052973777;
inp[5413] = 0;
inp[5414] = 1051945984;
inp[5415] = 0;
inp[5416] = 1050919194;
inp[5417] = 0;
inp[5418] = 1049893407;
inp[5419] = 0;
inp[5420] = 1048868621;
inp[5421] = 0;
inp[5422] = 1047844835;
inp[5423] = 0;
inp[5424] = 1046822049;
inp[5425] = 0;
inp[5426] = 1045800261;
inp[5427] = 0;
inp[5428] = 1044779470;
inp[5429] = 0;
inp[5430] = 1043759675;
inp[5431] = 0;
inp[5432] = 1042740876;
inp[5433] = 0;
inp[5434] = 1041723072;
inp[5435] = 0;
inp[5436] = 1040706261;
inp[5437] = 0;
inp[5438] = 1039690442;
inp[5439] = 0;
inp[5440] = 1038675615;
inp[5441] = 0;
inp[5442] = 1037661778;
inp[5443] = 0;
inp[5444] = 1036648931;
inp[5445] = 0;
inp[5446] = 1035637073;
inp[5447] = 0;
inp[5448] = 1034626202;
inp[5449] = 0;
inp[5450] = 1033616318;
inp[5451] = 0;
inp[5452] = 1032607420;
inp[5453] = 0;
inp[5454] = 1031599507;
inp[5455] = 0;
inp[5456] = 1030592577;
inp[5457] = 0;
inp[5458] = 1029586630;
inp[5459] = 0;
inp[5460] = 1028581665;
inp[5461] = 0;
inp[5462] = 1027577681;
inp[5463] = 0;
inp[5464] = 1026574677;
inp[5465] = 0;
inp[5466] = 1025572652;
inp[5467] = 0;
inp[5468] = 1024571605;
inp[5469] = 0;
inp[5470] = 1023571536;
inp[5471] = 0;
inp[5472] = 1022572442;
inp[5473] = 0;
inp[5474] = 1021574324;
inp[5475] = 0;
inp[5476] = 1020577179;
inp[5477] = 0;
inp[5478] = 1019581008;
inp[5479] = 0;
inp[5480] = 1018585810;
inp[5481] = 0;
inp[5482] = 1017591583;
inp[5483] = 0;
inp[5484] = 1016598326;
inp[5485] = 0;
inp[5486] = 1015606039;
inp[5487] = 0;
inp[5488] = 1014614720;
inp[5489] = 0;
inp[5490] = 1013624369;
inp[5491] = 0;
inp[5492] = 1012634985;
inp[5493] = 0;
inp[5494] = 1011646566;
inp[5495] = 0;
inp[5496] = 1010659112;
inp[5497] = 0;
inp[5498] = 1009672622;
inp[5499] = 0;
inp[5500] = 1073741824;
inp[5501] = 1073741824;
inp[5502] = 1073217663;
inp[5503] = 0;
inp[5504] = 1072693759;
inp[5505] = 0;
inp[5506] = 1072170111;
inp[5507] = 0;
inp[5508] = 1071646718;
inp[5509] = 0;
inp[5510] = 1071123581;
inp[5511] = 0;
inp[5512] = 1070600699;
inp[5513] = 0;
inp[5514] = 1070078072;
inp[5515] = 0;
inp[5516] = 1069555701;
inp[5517] = 0;
inp[5518] = 1069033584;
inp[5519] = 0;
inp[5520] = 1068511723;
inp[5521] = 0;
inp[5522] = 1067990116;
inp[5523] = 0;
inp[5524] = 1067468764;
inp[5525] = 0;
inp[5526] = 1066947666;
inp[5527] = 0;
inp[5528] = 1066426822;
inp[5529] = 0;
inp[5530] = 1065906233;
inp[5531] = 0;
inp[5532] = 1065385898;
inp[5533] = 0;
inp[5534] = 1064865817;
inp[5535] = 0;
inp[5536] = 1064345990;
inp[5537] = 0;
inp[5538] = 1063826417;
inp[5539] = 0;
inp[5540] = 1063307097;
inp[5541] = 0;
inp[5542] = 1062788031;
inp[5543] = 0;
inp[5544] = 1062269218;
inp[5545] = 0;
inp[5546] = 1061750659;
inp[5547] = 0;
inp[5548] = 1061232352;
inp[5549] = 0;
inp[5550] = 1060714299;
inp[5551] = 0;
inp[5552] = 1060196498;
inp[5553] = 0;
inp[5554] = 1059678951;
inp[5555] = 0;
inp[5556] = 1059161656;
inp[5557] = 0;
inp[5558] = 1058644613;
inp[5559] = 0;
inp[5560] = 1058127823;
inp[5561] = 0;
inp[5562] = 1057611285;
inp[5563] = 0;
inp[5564] = 1057094999;
inp[5565] = 0;
inp[5566] = 1056578966;
inp[5567] = 0;
inp[5568] = 1056063184;
inp[5569] = 0;
inp[5570] = 1055547654;
inp[5571] = 0;
inp[5572] = 1055032376;
inp[5573] = 0;
inp[5574] = 1054517349;
inp[5575] = 0;
inp[5576] = 1054002574;
inp[5577] = 0;
inp[5578] = 1053488050;
inp[5579] = 0;
inp[5580] = 1052973777;
inp[5581] = 0;
inp[5582] = 1052459755;
inp[5583] = 0;
inp[5584] = 1051945984;
inp[5585] = 0;
inp[5586] = 1051432464;
inp[5587] = 0;
inp[5588] = 1050919194;
inp[5589] = 0;
inp[5590] = 1050406175;
inp[5591] = 0;
inp[5592] = 1049893407;
inp[5593] = 0;
inp[5594] = 1049380889;
inp[5595] = 0;
inp[5596] = 1048868621;
inp[5597] = 0;
inp[5598] = 1048356603;
inp[5599] = 0;
inp[5600] = 1047844835;
inp[5601] = 0;
inp[5602] = 1047333317;
inp[5603] = 0;
inp[5604] = 1046822049;
inp[5605] = 0;
inp[5606] = 1046311030;
inp[5607] = 0;
inp[5608] = 1045800261;
inp[5609] = 0;
inp[5610] = 1045289741;
inp[5611] = 0;
inp[5612] = 1044779470;
inp[5613] = 0;
inp[5614] = 1044269448;
inp[5615] = 0;
inp[5616] = 1043759675;
inp[5617] = 0;
inp[5618] = 1043250151;
inp[5619] = 0;
inp[5620] = 1042740876;
inp[5621] = 0;
inp[5622] = 1042231850;
inp[5623] = 0;
inp[5624] = 1041723072;
inp[5625] = 0;
inp[5626] = 1041214542;
inp[5627] = 0;
inp[5628] = 1073741824;
inp[5629] = 1073741824;
inp[5630] = 1073479711;
inp[5631] = 0;
inp[5632] = 1073217663;
inp[5633] = 0;
inp[5634] = 1072955679;
inp[5635] = 0;
inp[5636] = 1072693759;
inp[5637] = 0;
inp[5638] = 1072431903;
inp[5639] = 0;
inp[5640] = 1072170111;
inp[5641] = 0;
inp[5642] = 1071908383;
inp[5643] = 0;
inp[5644] = 1071646718;
inp[5645] = 0;
inp[5646] = 1071385118;
inp[5647] = 0;
inp[5648] = 1071123581;
inp[5649] = 0;
inp[5650] = 1070862108;
inp[5651] = 0;
inp[5652] = 1070600699;
inp[5653] = 0;
inp[5654] = 1070339354;
inp[5655] = 0;
inp[5656] = 1070078072;
inp[5657] = 0;
inp[5658] = 1069816855;
inp[5659] = 0;
inp[5660] = 1069555701;
inp[5661] = 0;
inp[5662] = 1069294611;
inp[5663] = 0;
inp[5664] = 1069033584;
inp[5665] = 0;
inp[5666] = 1068772622;
inp[5667] = 0;
inp[5668] = 1068511723;
inp[5669] = 0;
inp[5670] = 1068250887;
inp[5671] = 0;
inp[5672] = 1067990116;
inp[5673] = 0;
inp[5674] = 1067729408;
inp[5675] = 0;
inp[5676] = 1067468764;
inp[5677] = 0;
inp[5678] = 1067208183;
inp[5679] = 0;
inp[5680] = 1066947666;
inp[5681] = 0;
inp[5682] = 1066687212;
inp[5683] = 0;
inp[5684] = 1066426822;
inp[5685] = 0;
inp[5686] = 1066166496;
inp[5687] = 0;
inp[5688] = 1065906233;
inp[5689] = 0;
inp[5690] = 1065646034;
inp[5691] = 0;
inp[5692] = 1065385898;
inp[5693] = 0;
inp[5694] = 1065125826;
inp[5695] = 0;
inp[5696] = 1064865817;
inp[5697] = 0;
inp[5698] = 1064605872;
inp[5699] = 0;
inp[5700] = 1064345990;
inp[5701] = 0;
inp[5702] = 1064086172;
inp[5703] = 0;
inp[5704] = 1063826417;
inp[5705] = 0;
inp[5706] = 1063566725;
inp[5707] = 0;
inp[5708] = 1063307097;
inp[5709] = 0;
inp[5710] = 1063047532;
inp[5711] = 0;
inp[5712] = 1062788031;
inp[5713] = 0;
inp[5714] = 1062528593;
inp[5715] = 0;
inp[5716] = 1062269218;
inp[5717] = 0;
inp[5718] = 1062009907;
inp[5719] = 0;
inp[5720] = 1061750659;
inp[5721] = 0;
inp[5722] = 1061491474;
inp[5723] = 0;
inp[5724] = 1061232352;
inp[5725] = 0;
inp[5726] = 1060973294;
inp[5727] = 0;
inp[5728] = 1060714299;
inp[5729] = 0;
inp[5730] = 1060455367;
inp[5731] = 0;
inp[5732] = 1060196498;
inp[5733] = 0;
inp[5734] = 1059937693;
inp[5735] = 0;
inp[5736] = 1059678951;
inp[5737] = 0;
inp[5738] = 1059420272;
inp[5739] = 0;
inp[5740] = 1059161656;
inp[5741] = 0;
inp[5742] = 1058903103;
inp[5743] = 0;
inp[5744] = 1058644613;
inp[5745] = 0;
inp[5746] = 1058386187;
inp[5747] = 0;
inp[5748] = 1058127823;
inp[5749] = 0;
inp[5750] = 1057869523;
inp[5751] = 0;
inp[5752] = 1057611285;
inp[5753] = 0;
inp[5754] = 1057353111;
inp[5755] = 0;
inp[5756] = 1073741824;
inp[5757] = 1073741824;
inp[5758] = 1073610759;
inp[5759] = 0;
inp[5760] = 1073479711;
inp[5761] = 0;
inp[5762] = 1073348679;
inp[5763] = 0;
inp[5764] = 1073217663;
inp[5765] = 0;
inp[5766] = 1073086663;
inp[5767] = 0;
inp[5768] = 1072955679;
inp[5769] = 0;
inp[5770] = 1072824711;
inp[5771] = 0;
inp[5772] = 1072693759;
inp[5773] = 0;
inp[5774] = 1072562823;
inp[5775] = 0;
inp[5776] = 1072431903;
inp[5777] = 0;
inp[5778] = 1072300999;
inp[5779] = 0;
inp[5780] = 1072170111;
inp[5781] = 0;
inp[5782] = 1072039239;
inp[5783] = 0;
inp[5784] = 1071908383;
inp[5785] = 0;
inp[5786] = 1071777542;
inp[5787] = 0;
inp[5788] = 1071646718;
inp[5789] = 0;
inp[5790] = 1071515910;
inp[5791] = 0;
inp[5792] = 1071385118;
inp[5793] = 0;
inp[5794] = 1071254341;
inp[5795] = 0;
inp[5796] = 1071123581;
inp[5797] = 0;
inp[5798] = 1070992836;
inp[5799] = 0;
inp[5800] = 1070862108;
inp[5801] = 0;
inp[5802] = 1070731396;
inp[5803] = 0;
inp[5804] = 1070600699;
inp[5805] = 0;
inp[5806] = 1070470018;
inp[5807] = 0;
inp[5808] = 1070339354;
inp[5809] = 0;
inp[5810] = 1070208705;
inp[5811] = 0;
inp[5812] = 1070078072;
inp[5813] = 0;
inp[5814] = 1069947456;
inp[5815] = 0;
inp[5816] = 1069816855;
inp[5817] = 0;
inp[5818] = 1069686270;
inp[5819] = 0;
inp[5820] = 1069555701;
inp[5821] = 0;
inp[5822] = 1069425148;
inp[5823] = 0;
inp[5824] = 1069294611;
inp[5825] = 0;
inp[5826] = 1069164090;
inp[5827] = 0;
inp[5828] = 1069033584;
inp[5829] = 0;
inp[5830] = 1068903095;
inp[5831] = 0;
inp[5832] = 1068772622;
inp[5833] = 0;
inp[5834] = 1068642164;
inp[5835] = 0;
inp[5836] = 1068511723;
inp[5837] = 0;
inp[5838] = 1068381297;
inp[5839] = 0;
inp[5840] = 1068250887;
inp[5841] = 0;
inp[5842] = 1068120494;
inp[5843] = 0;
inp[5844] = 1067990116;
inp[5845] = 0;
inp[5846] = 1067859754;
inp[5847] = 0;
inp[5848] = 1067729408;
inp[5849] = 0;
inp[5850] = 1067599078;
inp[5851] = 0;
inp[5852] = 1067468764;
inp[5853] = 0;
inp[5854] = 1067338465;
inp[5855] = 0;
inp[5856] = 1067208183;
inp[5857] = 0;
inp[5858] = 1067077916;
inp[5859] = 0;
inp[5860] = 1066947666;
inp[5861] = 0;
inp[5862] = 1066817431;
inp[5863] = 0;
inp[5864] = 1066687212;
inp[5865] = 0;
inp[5866] = 1066557009;
inp[5867] = 0;
inp[5868] = 1066426822;
inp[5869] = 0;
inp[5870] = 1066296651;
inp[5871] = 0;
inp[5872] = 1066166496;
inp[5873] = 0;
inp[5874] = 1066036357;
inp[5875] = 0;
inp[5876] = 1065906233;
inp[5877] = 0;
inp[5878] = 1065776126;
inp[5879] = 0;
inp[5880] = 1065646034;
inp[5881] = 0;
inp[5882] = 1065515958;
inp[5883] = 0;
inp[5884] = 1073741824;
inp[5885] = 1073741824;
inp[5886] = 1073676289;
inp[5887] = 0;
inp[5888] = 1073610759;
inp[5889] = 0;
inp[5890] = 1073545233;
inp[5891] = 0;
inp[5892] = 1073479711;
inp[5893] = 0;
inp[5894] = 1073414193;
inp[5895] = 0;
inp[5896] = 1073348679;
inp[5897] = 0;
inp[5898] = 1073283169;
inp[5899] = 0;
inp[5900] = 1073217663;
inp[5901] = 0;
inp[5902] = 1073152161;
inp[5903] = 0;
inp[5904] = 1073086663;
inp[5905] = 0;
inp[5906] = 1073021169;
inp[5907] = 0;
inp[5908] = 1072955679;
inp[5909] = 0;
inp[5910] = 1072890193;
inp[5911] = 0;
inp[5912] = 1072824711;
inp[5913] = 0;
inp[5914] = 1072759233;
inp[5915] = 0;
inp[5916] = 1072693759;
inp[5917] = 0;
inp[5918] = 1072628289;
inp[5919] = 0;
inp[5920] = 1072562823;
inp[5921] = 0;
inp[5922] = 1072497361;
inp[5923] = 0;
inp[5924] = 1072431903;
inp[5925] = 0;
inp[5926] = 1072366449;
inp[5927] = 0;
inp[5928] = 1072300999;
inp[5929] = 0;
inp[5930] = 1072235553;
inp[5931] = 0;
inp[5932] = 1072170111;
inp[5933] = 0;
inp[5934] = 1072104673;
inp[5935] = 0;
inp[5936] = 1072039239;
inp[5937] = 0;
inp[5938] = 1071973809;
inp[5939] = 0;
inp[5940] = 1071908383;
inp[5941] = 0;
inp[5942] = 1071842961;
inp[5943] = 0;
inp[5944] = 1071777542;
inp[5945] = 0;
inp[5946] = 1071712128;
inp[5947] = 0;
inp[5948] = 1071646718;
inp[5949] = 0;
inp[5950] = 1071581312;
inp[5951] = 0;
inp[5952] = 1071515910;
inp[5953] = 0;
inp[5954] = 1071450512;
inp[5955] = 0;
inp[5956] = 1071385118;
inp[5957] = 0;
inp[5958] = 1071319727;
inp[5959] = 0;
inp[5960] = 1071254341;
inp[5961] = 0;
inp[5962] = 1071188959;
inp[5963] = 0;
inp[5964] = 1071123581;
inp[5965] = 0;
inp[5966] = 1071058207;
inp[5967] = 0;
inp[5968] = 1070992836;
inp[5969] = 0;
inp[5970] = 1070927470;
inp[5971] = 0;
inp[5972] = 1070862108;
inp[5973] = 0;
inp[5974] = 1070796750;
inp[5975] = 0;
inp[5976] = 1070731396;
inp[5977] = 0;
inp[5978] = 1070666045;
inp[5979] = 0;
inp[5980] = 1070600699;
inp[5981] = 0;
inp[5982] = 1070535357;
inp[5983] = 0;
inp[5984] = 1070470018;
inp[5985] = 0;
inp[5986] = 1070404684;
inp[5987] = 0;
inp[5988] = 1070339354;
inp[5989] = 0;
inp[5990] = 1070274027;
inp[5991] = 0;
inp[5992] = 1070208705;
inp[5993] = 0;
inp[5994] = 1070143387;
inp[5995] = 0;
inp[5996] = 1070078072;
inp[5997] = 0;
inp[5998] = 1070012762;
inp[5999] = 0;
inp[6000] = 1069947456;
inp[6001] = 0;
inp[6002] = 1069882153;
inp[6003] = 0;
inp[6004] = 1069816855;
inp[6005] = 0;
inp[6006] = 1069751560;
inp[6007] = 0;
inp[6008] = 1069686270;
inp[6009] = 0;
inp[6010] = 1069620983;
inp[6011] = 0;
inp[6012] = 1073741824;
inp[6013] = 1073741824;
inp[6014] = 1073709056;
inp[6015] = 0;
inp[6016] = 1073676289;
inp[6017] = 0;
inp[6018] = 1073643524;
inp[6019] = 0;
inp[6020] = 1073610759;
inp[6021] = 0;
inp[6022] = 1073577996;
inp[6023] = 0;
inp[6024] = 1073545233;
inp[6025] = 0;
inp[6026] = 1073512472;
inp[6027] = 0;
inp[6028] = 1073479711;
inp[6029] = 0;
inp[6030] = 1073446952;
inp[6031] = 0;
inp[6032] = 1073414193;
inp[6033] = 0;
inp[6034] = 1073381436;
inp[6035] = 0;
inp[6036] = 1073348679;
inp[6037] = 0;
inp[6038] = 1073315924;
inp[6039] = 0;
inp[6040] = 1073283169;
inp[6041] = 0;
inp[6042] = 1073250416;
inp[6043] = 0;
inp[6044] = 1073217663;
inp[6045] = 0;
inp[6046] = 1073184912;
inp[6047] = 0;
inp[6048] = 1073152161;
inp[6049] = 0;
inp[6050] = 1073119412;
inp[6051] = 0;
inp[6052] = 1073086663;
inp[6053] = 0;
inp[6054] = 1073053916;
inp[6055] = 0;
inp[6056] = 1073021169;
inp[6057] = 0;
inp[6058] = 1072988424;
inp[6059] = 0;
inp[6060] = 1072955679;
inp[6061] = 0;
inp[6062] = 1072922936;
inp[6063] = 0;
inp[6064] = 1072890193;
inp[6065] = 0;
inp[6066] = 1072857452;
inp[6067] = 0;
inp[6068] = 1072824711;
inp[6069] = 0;
inp[6070] = 1072791972;
inp[6071] = 0;
inp[6072] = 1072759233;
inp[6073] = 0;
inp[6074] = 1072726496;
inp[6075] = 0;
inp[6076] = 1072693759;
inp[6077] = 0;
inp[6078] = 1072661024;
inp[6079] = 0;
inp[6080] = 1072628289;
inp[6081] = 0;
inp[6082] = 1072595556;
inp[6083] = 0;
inp[6084] = 1072562823;
inp[6085] = 0;
inp[6086] = 1072530092;
inp[6087] = 0;
inp[6088] = 1072497361;
inp[6089] = 0;
inp[6090] = 1072464632;
inp[6091] = 0;
inp[6092] = 1072431903;
inp[6093] = 0;
inp[6094] = 1072399176;
inp[6095] = 0;
inp[6096] = 1072366449;
inp[6097] = 0;
inp[6098] = 1072333724;
inp[6099] = 0;
inp[6100] = 1072300999;
inp[6101] = 0;
inp[6102] = 1072268276;
inp[6103] = 0;
inp[6104] = 1072235553;
inp[6105] = 0;
inp[6106] = 1072202831;
inp[6107] = 0;
inp[6108] = 1072170111;
inp[6109] = 0;
inp[6110] = 1072137391;
inp[6111] = 0;
inp[6112] = 1072104673;
inp[6113] = 0;
inp[6114] = 1072071955;
inp[6115] = 0;
inp[6116] = 1072039239;
inp[6117] = 0;
inp[6118] = 1072006523;
inp[6119] = 0;
inp[6120] = 1071973809;
inp[6121] = 0;
inp[6122] = 1071941095;
inp[6123] = 0;
inp[6124] = 1071908383;
inp[6125] = 0;
inp[6126] = 1071875671;
inp[6127] = 0;
inp[6128] = 1071842961;
inp[6129] = 0;
inp[6130] = 1071810251;
inp[6131] = 0;
inp[6132] = 1071777542;
inp[6133] = 0;
inp[6134] = 1071744835;
inp[6135] = 0;
inp[6136] = 1071712128;
inp[6137] = 0;
inp[6138] = 1071679423;
inp[6139] = 0;
inp[6140] = 1073741824;
inp[6141] = 1073741824;
inp[6142] = 1073725440;
inp[6143] = 0;
inp[6144] = 1073709056;
inp[6145] = 0;
inp[6146] = 1073692673;
inp[6147] = 0;
inp[6148] = 1073676289;
inp[6149] = 0;
inp[6150] = 1073659907;
inp[6151] = 0;
inp[6152] = 1073643524;
inp[6153] = 0;
inp[6154] = 1073627142;
inp[6155] = 0;
inp[6156] = 1073610759;
inp[6157] = 0;
inp[6158] = 1073594378;
inp[6159] = 0;
inp[6160] = 1073577996;
inp[6161] = 0;
inp[6162] = 1073561615;
inp[6163] = 0;
inp[6164] = 1073545233;
inp[6165] = 0;
inp[6166] = 1073528853;
inp[6167] = 0;
inp[6168] = 1073512472;
inp[6169] = 0;
inp[6170] = 1073496092;
inp[6171] = 0;
inp[6172] = 1073479711;
inp[6173] = 0;
inp[6174] = 1073463332;
inp[6175] = 0;
inp[6176] = 1073446952;
inp[6177] = 0;
inp[6178] = 1073430573;
inp[6179] = 0;
inp[6180] = 1073414193;
inp[6181] = 0;
inp[6182] = 1073397815;
inp[6183] = 0;
inp[6184] = 1073381436;
inp[6185] = 0;
inp[6186] = 1073365058;
inp[6187] = 0;
inp[6188] = 1073348679;
inp[6189] = 0;
inp[6190] = 1073332302;
inp[6191] = 0;
inp[6192] = 1073315924;
inp[6193] = 0;
inp[6194] = 1073299547;
inp[6195] = 0;
inp[6196] = 1073283169;
inp[6197] = 0;
inp[6198] = 1073266793;
inp[6199] = 0;
inp[6200] = 1073250416;
inp[6201] = 0;
inp[6202] = 1073234040;
inp[6203] = 0;
inp[6204] = 1073217663;
inp[6205] = 0;
inp[6206] = 1073201288;
inp[6207] = 0;
inp[6208] = 1073184912;
inp[6209] = 0;
inp[6210] = 1073168537;
inp[6211] = 0;
inp[6212] = 1073152161;
inp[6213] = 0;
inp[6214] = 1073135787;
inp[6215] = 0;
inp[6216] = 1073119412;
inp[6217] = 0;
inp[6218] = 1073103038;
inp[6219] = 0;
inp[6220] = 1073086663;
inp[6221] = 0;
inp[6222] = 1073070290;
inp[6223] = 0;
inp[6224] = 1073053916;
inp[6225] = 0;
inp[6226] = 1073037543;
inp[6227] = 0;
inp[6228] = 1073021169;
inp[6229] = 0;
inp[6230] = 1073004797;
inp[6231] = 0;
inp[6232] = 1072988424;
inp[6233] = 0;
inp[6234] = 1072972052;
inp[6235] = 0;
inp[6236] = 1072955679;
inp[6237] = 0;
inp[6238] = 1072939308;
inp[6239] = 0;
inp[6240] = 1072922936;
inp[6241] = 0;
inp[6242] = 1072906565;
inp[6243] = 0;
inp[6244] = 1072890193;
inp[6245] = 0;
inp[6246] = 1072873823;
inp[6247] = 0;
inp[6248] = 1072857452;
inp[6249] = 0;
inp[6250] = 1072841082;
inp[6251] = 0;
inp[6252] = 1072824711;
inp[6253] = 0;
inp[6254] = 1072808342;
inp[6255] = 0;
inp[6256] = 1072791972;
inp[6257] = 0;
inp[6258] = 1072775602;
inp[6259] = 0;
inp[6260] = 1072759233;
inp[6261] = 0;
inp[6262] = 1072742864;
inp[6263] = 0;
inp[6264] = 1072726496;
inp[6265] = 0;
inp[6266] = 1072710127;
inp[6267] = 0;
inp[6268] = 1073741824;
inp[6269] = 1073741824;
inp[6270] = 1073733632;
inp[6271] = 0;
inp[6272] = 1073725440;
inp[6273] = 0;
inp[6274] = 1073717248;
inp[6275] = 0;
inp[6276] = 1073709056;
inp[6277] = 0;
inp[6278] = 1073700864;
inp[6279] = 0;
inp[6280] = 1073692673;
inp[6281] = 0;
inp[6282] = 1073684481;
inp[6283] = 0;
inp[6284] = 1073676289;
inp[6285] = 0;
inp[6286] = 1073668098;
inp[6287] = 0;
inp[6288] = 1073659907;
inp[6289] = 0;
inp[6290] = 1073651715;
inp[6291] = 0;
inp[6292] = 1073643524;
inp[6293] = 0;
inp[6294] = 1073635333;
inp[6295] = 0;
inp[6296] = 1073627142;
inp[6297] = 0;
inp[6298] = 1073618951;
inp[6299] = 0;
inp[6300] = 1073610759;
inp[6301] = 0;
inp[6302] = 1073602569;
inp[6303] = 0;
inp[6304] = 1073594378;
inp[6305] = 0;
inp[6306] = 1073586187;
inp[6307] = 0;
inp[6308] = 1073577996;
inp[6309] = 0;
inp[6310] = 1073569805;
inp[6311] = 0;
inp[6312] = 1073561615;
inp[6313] = 0;
inp[6314] = 1073553424;
inp[6315] = 0;
inp[6316] = 1073545233;
inp[6317] = 0;
inp[6318] = 1073537043;
inp[6319] = 0;
inp[6320] = 1073528853;
inp[6321] = 0;
inp[6322] = 1073520662;
inp[6323] = 0;
inp[6324] = 1073512472;
inp[6325] = 0;
inp[6326] = 1073504282;
inp[6327] = 0;
inp[6328] = 1073496092;
inp[6329] = 0;
inp[6330] = 1073487902;
inp[6331] = 0;
inp[6332] = 1073479711;
inp[6333] = 0;
inp[6334] = 1073471522;
inp[6335] = 0;
inp[6336] = 1073463332;
inp[6337] = 0;
inp[6338] = 1073455142;
inp[6339] = 0;
inp[6340] = 1073446952;
inp[6341] = 0;
inp[6342] = 1073438762;
inp[6343] = 0;
inp[6344] = 1073430573;
inp[6345] = 0;
inp[6346] = 1073422383;
inp[6347] = 0;
inp[6348] = 1073414193;
inp[6349] = 0;
inp[6350] = 1073406004;
inp[6351] = 0;
inp[6352] = 1073397815;
inp[6353] = 0;
inp[6354] = 1073389625;
inp[6355] = 0;
inp[6356] = 1073381436;
inp[6357] = 0;
inp[6358] = 1073373247;
inp[6359] = 0;
inp[6360] = 1073365058;
inp[6361] = 0;
inp[6362] = 1073356869;
inp[6363] = 0;
inp[6364] = 1073348679;
inp[6365] = 0;
inp[6366] = 1073340491;
inp[6367] = 0;
inp[6368] = 1073332302;
inp[6369] = 0;
inp[6370] = 1073324113;
inp[6371] = 0;
inp[6372] = 1073315924;
inp[6373] = 0;
inp[6374] = 1073307735;
inp[6375] = 0;
inp[6376] = 1073299547;
inp[6377] = 0;
inp[6378] = 1073291358;
inp[6379] = 0;
inp[6380] = 1073283169;
inp[6381] = 0;
inp[6382] = 1073274981;
inp[6383] = 0;
inp[6384] = 1073266793;
inp[6385] = 0;
inp[6386] = 1073258604;
inp[6387] = 0;
inp[6388] = 1073250416;
inp[6389] = 0;
inp[6390] = 1073242228;
inp[6391] = 0;
inp[6392] = 1073234040;
inp[6393] = 0;
inp[6394] = 1073225852;
inp[6395] = 0;
inp[6396] = 1073741824;
inp[6397] = 1073741824;
inp[6398] = 1073737728;
inp[6399] = 0;
inp[6400] = 1073733632;
inp[6401] = 0;
inp[6402] = 1073729536;
inp[6403] = 0;
inp[6404] = 1073725440;
inp[6405] = 0;
inp[6406] = 1073721344;
inp[6407] = 0;
inp[6408] = 1073717248;
inp[6409] = 0;
inp[6410] = 1073713152;
inp[6411] = 0;
inp[6412] = 1073709056;
inp[6413] = 0;
inp[6414] = 1073704960;
inp[6415] = 0;
inp[6416] = 1073700864;
inp[6417] = 0;
inp[6418] = 1073696768;
inp[6419] = 0;
inp[6420] = 1073692673;
inp[6421] = 0;
inp[6422] = 1073688577;
inp[6423] = 0;
inp[6424] = 1073684481;
inp[6425] = 0;
inp[6426] = 1073680385;
inp[6427] = 0;
inp[6428] = 1073676289;
inp[6429] = 0;
inp[6430] = 1073672194;
inp[6431] = 0;
inp[6432] = 1073668098;
inp[6433] = 0;
inp[6434] = 1073664002;
inp[6435] = 0;
inp[6436] = 1073659907;
inp[6437] = 0;
inp[6438] = 1073655811;
inp[6439] = 0;
inp[6440] = 1073651715;
inp[6441] = 0;
inp[6442] = 1073647620;
inp[6443] = 0;
inp[6444] = 1073643524;
inp[6445] = 0;
inp[6446] = 1073639428;
inp[6447] = 0;
inp[6448] = 1073635333;
inp[6449] = 0;
inp[6450] = 1073631237;
inp[6451] = 0;
inp[6452] = 1073627142;
inp[6453] = 0;
inp[6454] = 1073623046;
inp[6455] = 0;
inp[6456] = 1073618951;
inp[6457] = 0;
inp[6458] = 1073614855;
inp[6459] = 0;
inp[6460] = 1073610759;
inp[6461] = 0;
inp[6462] = 1073606664;
inp[6463] = 0;
inp[6464] = 1073602569;
inp[6465] = 0;
inp[6466] = 1073598473;
inp[6467] = 0;
inp[6468] = 1073594378;
inp[6469] = 0;
inp[6470] = 1073590282;
inp[6471] = 0;
inp[6472] = 1073586187;
inp[6473] = 0;
inp[6474] = 1073582091;
inp[6475] = 0;
inp[6476] = 1073577996;
inp[6477] = 0;
inp[6478] = 1073573901;
inp[6479] = 0;
inp[6480] = 1073569805;
inp[6481] = 0;
inp[6482] = 1073565710;
inp[6483] = 0;
inp[6484] = 1073561615;
inp[6485] = 0;
inp[6486] = 1073557519;
inp[6487] = 0;
inp[6488] = 1073553424;
inp[6489] = 0;
inp[6490] = 1073549329;
inp[6491] = 0;
inp[6492] = 1073545233;
inp[6493] = 0;
inp[6494] = 1073541138;
inp[6495] = 0;
inp[6496] = 1073537043;
inp[6497] = 0;
inp[6498] = 1073532948;
inp[6499] = 0;
inp[6500] = 1073528853;
inp[6501] = 0;
inp[6502] = 1073524757;
inp[6503] = 0;
inp[6504] = 1073520662;
inp[6505] = 0;
inp[6506] = 1073516567;
inp[6507] = 0;
inp[6508] = 1073512472;
inp[6509] = 0;
inp[6510] = 1073508377;
inp[6511] = 0;
inp[6512] = 1073504282;
inp[6513] = 0;
inp[6514] = 1073500187;
inp[6515] = 0;
inp[6516] = 1073496092;
inp[6517] = 0;
inp[6518] = 1073491997;
inp[6519] = 0;
inp[6520] = 1073487902;
inp[6521] = 0;
inp[6522] = 1073483807;
inp[6523] = 0;
inp[6524] = 1073741824;
inp[6525] = 1073741824;
inp[6526] = 1073739776;
inp[6527] = 0;
inp[6528] = 1073737728;
inp[6529] = 0;
inp[6530] = 1073735680;
inp[6531] = 0;
inp[6532] = 1073733632;
inp[6533] = 0;
inp[6534] = 1073731584;
inp[6535] = 0;
inp[6536] = 1073729536;
inp[6537] = 0;
inp[6538] = 1073727488;
inp[6539] = 0;
inp[6540] = 1073725440;
inp[6541] = 0;
inp[6542] = 1073723392;
inp[6543] = 0;
inp[6544] = 1073721344;
inp[6545] = 0;
inp[6546] = 1073719296;
inp[6547] = 0;
inp[6548] = 1073717248;
inp[6549] = 0;
inp[6550] = 1073715200;
inp[6551] = 0;
inp[6552] = 1073713152;
inp[6553] = 0;
inp[6554] = 1073711104;
inp[6555] = 0;
inp[6556] = 1073709056;
inp[6557] = 0;
inp[6558] = 1073707008;
inp[6559] = 0;
inp[6560] = 1073704960;
inp[6561] = 0;
inp[6562] = 1073702912;
inp[6563] = 0;
inp[6564] = 1073700864;
inp[6565] = 0;
inp[6566] = 1073698816;
inp[6567] = 0;
inp[6568] = 1073696768;
inp[6569] = 0;
inp[6570] = 1073694721;
inp[6571] = 0;
inp[6572] = 1073692673;
inp[6573] = 0;
inp[6574] = 1073690625;
inp[6575] = 0;
inp[6576] = 1073688577;
inp[6577] = 0;
inp[6578] = 1073686529;
inp[6579] = 0;
inp[6580] = 1073684481;
inp[6581] = 0;
inp[6582] = 1073682433;
inp[6583] = 0;
inp[6584] = 1073680385;
inp[6585] = 0;
inp[6586] = 1073678337;
inp[6587] = 0;
inp[6588] = 1073676289;
inp[6589] = 0;
inp[6590] = 1073674242;
inp[6591] = 0;
inp[6592] = 1073672194;
inp[6593] = 0;
inp[6594] = 1073670146;
inp[6595] = 0;
inp[6596] = 1073668098;
inp[6597] = 0;
inp[6598] = 1073666050;
inp[6599] = 0;
inp[6600] = 1073664002;
inp[6601] = 0;
inp[6602] = 1073661954;
inp[6603] = 0;
inp[6604] = 1073659907;
inp[6605] = 0;
inp[6606] = 1073657859;
inp[6607] = 0;
inp[6608] = 1073655811;
inp[6609] = 0;
inp[6610] = 1073653763;
inp[6611] = 0;
inp[6612] = 1073651715;
inp[6613] = 0;
inp[6614] = 1073649667;
inp[6615] = 0;
inp[6616] = 1073647620;
inp[6617] = 0;
inp[6618] = 1073645572;
inp[6619] = 0;
inp[6620] = 1073643524;
inp[6621] = 0;
inp[6622] = 1073641476;
inp[6623] = 0;
inp[6624] = 1073639428;
inp[6625] = 0;
inp[6626] = 1073637381;
inp[6627] = 0;
inp[6628] = 1073635333;
inp[6629] = 0;
inp[6630] = 1073633285;
inp[6631] = 0;
inp[6632] = 1073631237;
inp[6633] = 0;
inp[6634] = 1073629189;
inp[6635] = 0;
inp[6636] = 1073627142;
inp[6637] = 0;
inp[6638] = 1073625094;
inp[6639] = 0;
inp[6640] = 1073623046;
inp[6641] = 0;
inp[6642] = 1073620998;
inp[6643] = 0;
inp[6644] = 1073618951;
inp[6645] = 0;
inp[6646] = 1073616903;
inp[6647] = 0;
inp[6648] = 1073614855;
inp[6649] = 0;
inp[6650] = 1073612807;
inp[6651] = 0;
inp[6652] = 1073741824;
inp[6653] = 1073741824;
inp[6654] = 1073740800;
inp[6655] = 0;
inp[6656] = 1073739776;
inp[6657] = 0;
inp[6658] = 1073738752;
inp[6659] = 0;
inp[6660] = 1073737728;
inp[6661] = 0;
inp[6662] = 1073736704;
inp[6663] = 0;
inp[6664] = 1073735680;
inp[6665] = 0;
inp[6666] = 1073734656;
inp[6667] = 0;
inp[6668] = 1073733632;
inp[6669] = 0;
inp[6670] = 1073732608;
inp[6671] = 0;
inp[6672] = 1073731584;
inp[6673] = 0;
inp[6674] = 1073730560;
inp[6675] = 0;
inp[6676] = 1073729536;
inp[6677] = 0;
inp[6678] = 1073728512;
inp[6679] = 0;
inp[6680] = 1073727488;
inp[6681] = 0;
inp[6682] = 1073726464;
inp[6683] = 0;
inp[6684] = 1073725440;
inp[6685] = 0;
inp[6686] = 1073724416;
inp[6687] = 0;
inp[6688] = 1073723392;
inp[6689] = 0;
inp[6690] = 1073722368;
inp[6691] = 0;
inp[6692] = 1073721344;
inp[6693] = 0;
inp[6694] = 1073720320;
inp[6695] = 0;
inp[6696] = 1073719296;
inp[6697] = 0;
inp[6698] = 1073718272;
inp[6699] = 0;
inp[6700] = 1073717248;
inp[6701] = 0;
inp[6702] = 1073716224;
inp[6703] = 0;
inp[6704] = 1073715200;
inp[6705] = 0;
inp[6706] = 1073714176;
inp[6707] = 0;
inp[6708] = 1073713152;
inp[6709] = 0;
inp[6710] = 1073712128;
inp[6711] = 0;
inp[6712] = 1073711104;
inp[6713] = 0;
inp[6714] = 1073710080;
inp[6715] = 0;
inp[6716] = 1073709056;
inp[6717] = 0;
inp[6718] = 1073708032;
inp[6719] = 0;
inp[6720] = 1073707008;
inp[6721] = 0;
inp[6722] = 1073705984;
inp[6723] = 0;
inp[6724] = 1073704960;
inp[6725] = 0;
inp[6726] = 1073703936;
inp[6727] = 0;
inp[6728] = 1073702912;
inp[6729] = 0;
inp[6730] = 1073701888;
inp[6731] = 0;
inp[6732] = 1073700864;
inp[6733] = 0;
inp[6734] = 1073699840;
inp[6735] = 0;
inp[6736] = 1073698816;
inp[6737] = 0;
inp[6738] = 1073697792;
inp[6739] = 0;
inp[6740] = 1073696768;
inp[6741] = 0;
inp[6742] = 1073695744;
inp[6743] = 0;
inp[6744] = 1073694721;
inp[6745] = 0;
inp[6746] = 1073693697;
inp[6747] = 0;
inp[6748] = 1073692673;
inp[6749] = 0;
inp[6750] = 1073691649;
inp[6751] = 0;
inp[6752] = 1073690625;
inp[6753] = 0;
inp[6754] = 1073689601;
inp[6755] = 0;
inp[6756] = 1073688577;
inp[6757] = 0;
inp[6758] = 1073687553;
inp[6759] = 0;
inp[6760] = 1073686529;
inp[6761] = 0;
inp[6762] = 1073685505;
inp[6763] = 0;
inp[6764] = 1073684481;
inp[6765] = 0;
inp[6766] = 1073683457;
inp[6767] = 0;
inp[6768] = 1073682433;
inp[6769] = 0;
inp[6770] = 1073681409;
inp[6771] = 0;
inp[6772] = 1073680385;
inp[6773] = 0;
inp[6774] = 1073679361;
inp[6775] = 0;
inp[6776] = 1073678337;
inp[6777] = 0;
inp[6778] = 1073677313;
inp[6779] = 0;
inp[6780] = 1073741824;
inp[6781] = 1073741824;
inp[6782] = 1073741312;
inp[6783] = 0;
inp[6784] = 1073740800;
inp[6785] = 0;
inp[6786] = 1073740288;
inp[6787] = 0;
inp[6788] = 1073739776;
inp[6789] = 0;
inp[6790] = 1073739264;
inp[6791] = 0;
inp[6792] = 1073738752;
inp[6793] = 0;
inp[6794] = 1073738240;
inp[6795] = 0;
inp[6796] = 1073737728;
inp[6797] = 0;
inp[6798] = 1073737216;
inp[6799] = 0;
inp[6800] = 1073736704;
inp[6801] = 0;
inp[6802] = 1073736192;
inp[6803] = 0;
inp[6804] = 1073735680;
inp[6805] = 0;
inp[6806] = 1073735168;
inp[6807] = 0;
inp[6808] = 1073734656;
inp[6809] = 0;
inp[6810] = 1073734144;
inp[6811] = 0;
inp[6812] = 1073733632;
inp[6813] = 0;
inp[6814] = 1073733120;
inp[6815] = 0;
inp[6816] = 1073732608;
inp[6817] = 0;
inp[6818] = 1073732096;
inp[6819] = 0;
inp[6820] = 1073731584;
inp[6821] = 0;
inp[6822] = 1073731072;
inp[6823] = 0;
inp[6824] = 1073730560;
inp[6825] = 0;
inp[6826] = 1073730048;
inp[6827] = 0;
inp[6828] = 1073729536;
inp[6829] = 0;
inp[6830] = 1073729024;
inp[6831] = 0;
inp[6832] = 1073728512;
inp[6833] = 0;
inp[6834] = 1073728000;
inp[6835] = 0;
inp[6836] = 1073727488;
inp[6837] = 0;
inp[6838] = 1073726976;
inp[6839] = 0;
inp[6840] = 1073726464;
inp[6841] = 0;
inp[6842] = 1073725952;
inp[6843] = 0;
inp[6844] = 1073725440;
inp[6845] = 0;
inp[6846] = 1073724928;
inp[6847] = 0;
inp[6848] = 1073724416;
inp[6849] = 0;
inp[6850] = 1073723904;
inp[6851] = 0;
inp[6852] = 1073723392;
inp[6853] = 0;
inp[6854] = 1073722880;
inp[6855] = 0;
inp[6856] = 1073722368;
inp[6857] = 0;
inp[6858] = 1073721856;
inp[6859] = 0;
inp[6860] = 1073721344;
inp[6861] = 0;
inp[6862] = 1073720832;
inp[6863] = 0;
inp[6864] = 1073720320;
inp[6865] = 0;
inp[6866] = 1073719808;
inp[6867] = 0;
inp[6868] = 1073719296;
inp[6869] = 0;
inp[6870] = 1073718784;
inp[6871] = 0;
inp[6872] = 1073718272;
inp[6873] = 0;
inp[6874] = 1073717760;
inp[6875] = 0;
inp[6876] = 1073717248;
inp[6877] = 0;
inp[6878] = 1073716736;
inp[6879] = 0;
inp[6880] = 1073716224;
inp[6881] = 0;
inp[6882] = 1073715712;
inp[6883] = 0;
inp[6884] = 1073715200;
inp[6885] = 0;
inp[6886] = 1073714688;
inp[6887] = 0;
inp[6888] = 1073714176;
inp[6889] = 0;
inp[6890] = 1073713664;
inp[6891] = 0;
inp[6892] = 1073713152;
inp[6893] = 0;
inp[6894] = 1073712640;
inp[6895] = 0;
inp[6896] = 1073712128;
inp[6897] = 0;
inp[6898] = 1073711616;
inp[6899] = 0;
inp[6900] = 1073711104;
inp[6901] = 0;
inp[6902] = 1073710592;
inp[6903] = 0;
inp[6904] = 1073710080;
inp[6905] = 0;
inp[6906] = 1073709568;
inp[6907] = 0;
inp[6908] = 1073741824;
inp[6909] = 1073741824;
inp[6910] = 1073741568;
inp[6911] = 0;
inp[6912] = 1073741312;
inp[6913] = 0;
inp[6914] = 1073741056;
inp[6915] = 0;
inp[6916] = 1073740800;
inp[6917] = 0;
inp[6918] = 1073740544;
inp[6919] = 0;
inp[6920] = 1073740288;
inp[6921] = 0;
inp[6922] = 1073740032;
inp[6923] = 0;
inp[6924] = 1073739776;
inp[6925] = 0;
inp[6926] = 1073739520;
inp[6927] = 0;
inp[6928] = 1073739264;
inp[6929] = 0;
inp[6930] = 1073739008;
inp[6931] = 0;
inp[6932] = 1073738752;
inp[6933] = 0;
inp[6934] = 1073738496;
inp[6935] = 0;
inp[6936] = 1073738240;
inp[6937] = 0;
inp[6938] = 1073737984;
inp[6939] = 0;
inp[6940] = 1073737728;
inp[6941] = 0;
inp[6942] = 1073737472;
inp[6943] = 0;
inp[6944] = 1073737216;
inp[6945] = 0;
inp[6946] = 1073736960;
inp[6947] = 0;
inp[6948] = 1073736704;
inp[6949] = 0;
inp[6950] = 1073736448;
inp[6951] = 0;
inp[6952] = 1073736192;
inp[6953] = 0;
inp[6954] = 1073735936;
inp[6955] = 0;
inp[6956] = 1073735680;
inp[6957] = 0;
inp[6958] = 1073735424;
inp[6959] = 0;
inp[6960] = 1073735168;
inp[6961] = 0;
inp[6962] = 1073734912;
inp[6963] = 0;
inp[6964] = 1073734656;
inp[6965] = 0;
inp[6966] = 1073734400;
inp[6967] = 0;
inp[6968] = 1073734144;
inp[6969] = 0;
inp[6970] = 1073733888;
inp[6971] = 0;
inp[6972] = 1073733632;
inp[6973] = 0;
inp[6974] = 1073733376;
inp[6975] = 0;
inp[6976] = 1073733120;
inp[6977] = 0;
inp[6978] = 1073732864;
inp[6979] = 0;
inp[6980] = 1073732608;
inp[6981] = 0;
inp[6982] = 1073732352;
inp[6983] = 0;
inp[6984] = 1073732096;
inp[6985] = 0;
inp[6986] = 1073731840;
inp[6987] = 0;
inp[6988] = 1073731584;
inp[6989] = 0;
inp[6990] = 1073731328;
inp[6991] = 0;
inp[6992] = 1073731072;
inp[6993] = 0;
inp[6994] = 1073730816;
inp[6995] = 0;
inp[6996] = 1073730560;
inp[6997] = 0;
inp[6998] = 1073730304;
inp[6999] = 0;
inp[7000] = 1073730048;
inp[7001] = 0;
inp[7002] = 1073729792;
inp[7003] = 0;
inp[7004] = 1073729536;
inp[7005] = 0;
inp[7006] = 1073729280;
inp[7007] = 0;
inp[7008] = 1073729024;
inp[7009] = 0;
inp[7010] = 1073728768;
inp[7011] = 0;
inp[7012] = 1073728512;
inp[7013] = 0;
inp[7014] = 1073728256;
inp[7015] = 0;
inp[7016] = 1073728000;
inp[7017] = 0;
inp[7018] = 1073727744;
inp[7019] = 0;
inp[7020] = 1073727488;
inp[7021] = 0;
inp[7022] = 1073727232;
inp[7023] = 0;
inp[7024] = 1073726976;
inp[7025] = 0;
inp[7026] = 1073726720;
inp[7027] = 0;
inp[7028] = 1073726464;
inp[7029] = 0;
inp[7030] = 1073726208;
inp[7031] = 0;
inp[7032] = 1073725952;
inp[7033] = 0;
inp[7034] = 1073725696;
inp[7035] = 0;
inp[7036] = 1073741824;
inp[7037] = 1073741824;
inp[7038] = 1073741696;
inp[7039] = 0;
inp[7040] = 1073741568;
inp[7041] = 0;
inp[7042] = 1073741440;
inp[7043] = 0;
inp[7044] = 1073741312;
inp[7045] = 0;
inp[7046] = 1073741184;
inp[7047] = 0;
inp[7048] = 1073741056;
inp[7049] = 0;
inp[7050] = 1073740928;
inp[7051] = 0;
inp[7052] = 1073740800;
inp[7053] = 0;
inp[7054] = 1073740672;
inp[7055] = 0;
inp[7056] = 1073740544;
inp[7057] = 0;
inp[7058] = 1073740416;
inp[7059] = 0;
inp[7060] = 1073740288;
inp[7061] = 0;
inp[7062] = 1073740160;
inp[7063] = 0;
inp[7064] = 1073740032;
inp[7065] = 0;
inp[7066] = 1073739904;
inp[7067] = 0;
inp[7068] = 1073739776;
inp[7069] = 0;
inp[7070] = 1073739648;
inp[7071] = 0;
inp[7072] = 1073739520;
inp[7073] = 0;
inp[7074] = 1073739392;
inp[7075] = 0;
inp[7076] = 1073739264;
inp[7077] = 0;
inp[7078] = 1073739136;
inp[7079] = 0;
inp[7080] = 1073739008;
inp[7081] = 0;
inp[7082] = 1073738880;
inp[7083] = 0;
inp[7084] = 1073738752;
inp[7085] = 0;
inp[7086] = 1073738624;
inp[7087] = 0;
inp[7088] = 1073738496;
inp[7089] = 0;
inp[7090] = 1073738368;
inp[7091] = 0;
inp[7092] = 1073738240;
inp[7093] = 0;
inp[7094] = 1073738112;
inp[7095] = 0;
inp[7096] = 1073737984;
inp[7097] = 0;
inp[7098] = 1073737856;
inp[7099] = 0;
inp[7100] = 1073737728;
inp[7101] = 0;
inp[7102] = 1073737600;
inp[7103] = 0;
inp[7104] = 1073737472;
inp[7105] = 0;
inp[7106] = 1073737344;
inp[7107] = 0;
inp[7108] = 1073737216;
inp[7109] = 0;
inp[7110] = 1073737088;
inp[7111] = 0;
inp[7112] = 1073736960;
inp[7113] = 0;
inp[7114] = 1073736832;
inp[7115] = 0;
inp[7116] = 1073736704;
inp[7117] = 0;
inp[7118] = 1073736576;
inp[7119] = 0;
inp[7120] = 1073736448;
inp[7121] = 0;
inp[7122] = 1073736320;
inp[7123] = 0;
inp[7124] = 1073736192;
inp[7125] = 0;
inp[7126] = 1073736064;
inp[7127] = 0;
inp[7128] = 1073735936;
inp[7129] = 0;
inp[7130] = 1073735808;
inp[7131] = 0;
inp[7132] = 1073735680;
inp[7133] = 0;
inp[7134] = 1073735552;
inp[7135] = 0;
inp[7136] = 1073735424;
inp[7137] = 0;
inp[7138] = 1073735296;
inp[7139] = 0;
inp[7140] = 1073735168;
inp[7141] = 0;
inp[7142] = 1073735040;
inp[7143] = 0;
inp[7144] = 1073734912;
inp[7145] = 0;
inp[7146] = 1073734784;
inp[7147] = 0;
inp[7148] = 1073734656;
inp[7149] = 0;
inp[7150] = 1073734528;
inp[7151] = 0;
inp[7152] = 1073734400;
inp[7153] = 0;
inp[7154] = 1073734272;
inp[7155] = 0;
inp[7156] = 1073734144;
inp[7157] = 0;
inp[7158] = 1073734016;
inp[7159] = 0;
inp[7160] = 1073733888;
inp[7161] = 0;
inp[7162] = 1073733760;
inp[7163] = 0;
inp[7164] = 1073741824;
inp[7165] = 1073741824;
inp[7166] = 1073741760;
inp[7167] = 0;
inp[7168] = 1073741696;
inp[7169] = 0;
inp[7170] = 1073741632;
inp[7171] = 0;
inp[7172] = 1073741568;
inp[7173] = 0;
inp[7174] = 1073741504;
inp[7175] = 0;
inp[7176] = 1073741440;
inp[7177] = 0;
inp[7178] = 1073741376;
inp[7179] = 0;
inp[7180] = 1073741312;
inp[7181] = 0;
inp[7182] = 1073741248;
inp[7183] = 0;
inp[7184] = 1073741184;
inp[7185] = 0;
inp[7186] = 1073741120;
inp[7187] = 0;
inp[7188] = 1073741056;
inp[7189] = 0;
inp[7190] = 1073740992;
inp[7191] = 0;
inp[7192] = 1073740928;
inp[7193] = 0;
inp[7194] = 1073740864;
inp[7195] = 0;
inp[7196] = 1073740800;
inp[7197] = 0;
inp[7198] = 1073740736;
inp[7199] = 0;
inp[7200] = 1073740672;
inp[7201] = 0;
inp[7202] = 1073740608;
inp[7203] = 0;
inp[7204] = 1073740544;
inp[7205] = 0;
inp[7206] = 1073740480;
inp[7207] = 0;
inp[7208] = 1073740416;
inp[7209] = 0;
inp[7210] = 1073740352;
inp[7211] = 0;
inp[7212] = 1073740288;
inp[7213] = 0;
inp[7214] = 1073740224;
inp[7215] = 0;
inp[7216] = 1073740160;
inp[7217] = 0;
inp[7218] = 1073740096;
inp[7219] = 0;
inp[7220] = 1073740032;
inp[7221] = 0;
inp[7222] = 1073739968;
inp[7223] = 0;
inp[7224] = 1073739904;
inp[7225] = 0;
inp[7226] = 1073739840;
inp[7227] = 0;
inp[7228] = 1073739776;
inp[7229] = 0;
inp[7230] = 1073739712;
inp[7231] = 0;
inp[7232] = 1073739648;
inp[7233] = 0;
inp[7234] = 1073739584;
inp[7235] = 0;
inp[7236] = 1073739520;
inp[7237] = 0;
inp[7238] = 1073739456;
inp[7239] = 0;
inp[7240] = 1073739392;
inp[7241] = 0;
inp[7242] = 1073739328;
inp[7243] = 0;
inp[7244] = 1073739264;
inp[7245] = 0;
inp[7246] = 1073739200;
inp[7247] = 0;
inp[7248] = 1073739136;
inp[7249] = 0;
inp[7250] = 1073739072;
inp[7251] = 0;
inp[7252] = 1073739008;
inp[7253] = 0;
inp[7254] = 1073738944;
inp[7255] = 0;
inp[7256] = 1073738880;
inp[7257] = 0;
inp[7258] = 1073738816;
inp[7259] = 0;
inp[7260] = 1073738752;
inp[7261] = 0;
inp[7262] = 1073738688;
inp[7263] = 0;
inp[7264] = 1073738624;
inp[7265] = 0;
inp[7266] = 1073738560;
inp[7267] = 0;
inp[7268] = 1073738496;
inp[7269] = 0;
inp[7270] = 1073738432;
inp[7271] = 0;
inp[7272] = 1073738368;
inp[7273] = 0;
inp[7274] = 1073738304;
inp[7275] = 0;
inp[7276] = 1073738240;
inp[7277] = 0;
inp[7278] = 1073738176;
inp[7279] = 0;
inp[7280] = 1073738112;
inp[7281] = 0;
inp[7282] = 1073738048;
inp[7283] = 0;
inp[7284] = 1073737984;
inp[7285] = 0;
inp[7286] = 1073737920;
inp[7287] = 0;
inp[7288] = 1073737856;
inp[7289] = 0;
inp[7290] = 1073737792;
inp[7291] = 0;
inp[7292] = 1073741824;
inp[7293] = 1073741824;
inp[7294] = 1073741792;
inp[7295] = 0;
inp[7296] = 1073741760;
inp[7297] = 0;
inp[7298] = 1073741728;
inp[7299] = 0;
inp[7300] = 1073741696;
inp[7301] = 0;
inp[7302] = 1073741664;
inp[7303] = 0;
inp[7304] = 1073741632;
inp[7305] = 0;
inp[7306] = 1073741600;
inp[7307] = 0;
inp[7308] = 1073741568;
inp[7309] = 0;
inp[7310] = 1073741536;
inp[7311] = 0;
inp[7312] = 1073741504;
inp[7313] = 0;
inp[7314] = 1073741472;
inp[7315] = 0;
inp[7316] = 1073741440;
inp[7317] = 0;
inp[7318] = 1073741408;
inp[7319] = 0;
inp[7320] = 1073741376;
inp[7321] = 0;
inp[7322] = 1073741344;
inp[7323] = 0;
inp[7324] = 1073741312;
inp[7325] = 0;
inp[7326] = 1073741280;
inp[7327] = 0;
inp[7328] = 1073741248;
inp[7329] = 0;
inp[7330] = 1073741216;
inp[7331] = 0;
inp[7332] = 1073741184;
inp[7333] = 0;
inp[7334] = 1073741152;
inp[7335] = 0;
inp[7336] = 1073741120;
inp[7337] = 0;
inp[7338] = 1073741088;
inp[7339] = 0;
inp[7340] = 1073741056;
inp[7341] = 0;
inp[7342] = 1073741024;
inp[7343] = 0;
inp[7344] = 1073740992;
inp[7345] = 0;
inp[7346] = 1073740960;
inp[7347] = 0;
inp[7348] = 1073740928;
inp[7349] = 0;
inp[7350] = 1073740896;
inp[7351] = 0;
inp[7352] = 1073740864;
inp[7353] = 0;
inp[7354] = 1073740832;
inp[7355] = 0;
inp[7356] = 1073740800;
inp[7357] = 0;
inp[7358] = 1073740768;
inp[7359] = 0;
inp[7360] = 1073740736;
inp[7361] = 0;
inp[7362] = 1073740704;
inp[7363] = 0;
inp[7364] = 1073740672;
inp[7365] = 0;
inp[7366] = 1073740640;
inp[7367] = 0;
inp[7368] = 1073740608;
inp[7369] = 0;
inp[7370] = 1073740576;
inp[7371] = 0;
inp[7372] = 1073740544;
inp[7373] = 0;
inp[7374] = 1073740512;
inp[7375] = 0;
inp[7376] = 1073740480;
inp[7377] = 0;
inp[7378] = 1073740448;
inp[7379] = 0;
inp[7380] = 1073740416;
inp[7381] = 0;
inp[7382] = 1073740384;
inp[7383] = 0;
inp[7384] = 1073740352;
inp[7385] = 0;
inp[7386] = 1073740320;
inp[7387] = 0;
inp[7388] = 1073740288;
inp[7389] = 0;
inp[7390] = 1073740256;
inp[7391] = 0;
inp[7392] = 1073740224;
inp[7393] = 0;
inp[7394] = 1073740192;
inp[7395] = 0;
inp[7396] = 1073740160;
inp[7397] = 0;
inp[7398] = 1073740128;
inp[7399] = 0;
inp[7400] = 1073740096;
inp[7401] = 0;
inp[7402] = 1073740064;
inp[7403] = 0;
inp[7404] = 1073740032;
inp[7405] = 0;
inp[7406] = 1073740000;
inp[7407] = 0;
inp[7408] = 1073739968;
inp[7409] = 0;
inp[7410] = 1073739936;
inp[7411] = 0;
inp[7412] = 1073739904;
inp[7413] = 0;
inp[7414] = 1073739872;
inp[7415] = 0;
inp[7416] = 1073739840;
inp[7417] = 0;
inp[7418] = 1073739808;
inp[7419] = 0;
inp[7420] = 1073741824;
inp[7421] = 1073741824;
inp[7422] = 1073741808;
inp[7423] = 0;
inp[7424] = 1073741792;
inp[7425] = 0;
inp[7426] = 1073741776;
inp[7427] = 0;
inp[7428] = 1073741760;
inp[7429] = 0;
inp[7430] = 1073741744;
inp[7431] = 0;
inp[7432] = 1073741728;
inp[7433] = 0;
inp[7434] = 1073741712;
inp[7435] = 0;
inp[7436] = 1073741696;
inp[7437] = 0;
inp[7438] = 1073741680;
inp[7439] = 0;
inp[7440] = 1073741664;
inp[7441] = 0;
inp[7442] = 1073741648;
inp[7443] = 0;
inp[7444] = 1073741632;
inp[7445] = 0;
inp[7446] = 1073741616;
inp[7447] = 0;
inp[7448] = 1073741600;
inp[7449] = 0;
inp[7450] = 1073741584;
inp[7451] = 0;
inp[7452] = 1073741568;
inp[7453] = 0;
inp[7454] = 1073741552;
inp[7455] = 0;
inp[7456] = 1073741536;
inp[7457] = 0;
inp[7458] = 1073741520;
inp[7459] = 0;
inp[7460] = 1073741504;
inp[7461] = 0;
inp[7462] = 1073741488;
inp[7463] = 0;
inp[7464] = 1073741472;
inp[7465] = 0;
inp[7466] = 1073741456;
inp[7467] = 0;
inp[7468] = 1073741440;
inp[7469] = 0;
inp[7470] = 1073741424;
inp[7471] = 0;
inp[7472] = 1073741408;
inp[7473] = 0;
inp[7474] = 1073741392;
inp[7475] = 0;
inp[7476] = 1073741376;
inp[7477] = 0;
inp[7478] = 1073741360;
inp[7479] = 0;
inp[7480] = 1073741344;
inp[7481] = 0;
inp[7482] = 1073741328;
inp[7483] = 0;
inp[7484] = 1073741312;
inp[7485] = 0;
inp[7486] = 1073741296;
inp[7487] = 0;
inp[7488] = 1073741280;
inp[7489] = 0;
inp[7490] = 1073741264;
inp[7491] = 0;
inp[7492] = 1073741248;
inp[7493] = 0;
inp[7494] = 1073741232;
inp[7495] = 0;
inp[7496] = 1073741216;
inp[7497] = 0;
inp[7498] = 1073741200;
inp[7499] = 0;
inp[7500] = 1073741184;
inp[7501] = 0;
inp[7502] = 1073741168;
inp[7503] = 0;
inp[7504] = 1073741152;
inp[7505] = 0;
inp[7506] = 1073741136;
inp[7507] = 0;
inp[7508] = 1073741120;
inp[7509] = 0;
inp[7510] = 1073741104;
inp[7511] = 0;
inp[7512] = 1073741088;
inp[7513] = 0;
inp[7514] = 1073741072;
inp[7515] = 0;
inp[7516] = 1073741056;
inp[7517] = 0;
inp[7518] = 1073741040;
inp[7519] = 0;
inp[7520] = 1073741024;
inp[7521] = 0;
inp[7522] = 1073741008;
inp[7523] = 0;
inp[7524] = 1073740992;
inp[7525] = 0;
inp[7526] = 1073740976;
inp[7527] = 0;
inp[7528] = 1073740960;
inp[7529] = 0;
inp[7530] = 1073740944;
inp[7531] = 0;
inp[7532] = 1073740928;
inp[7533] = 0;
inp[7534] = 1073740912;
inp[7535] = 0;
inp[7536] = 1073740896;
inp[7537] = 0;
inp[7538] = 1073740880;
inp[7539] = 0;
inp[7540] = 1073740864;
inp[7541] = 0;
inp[7542] = 1073740848;
inp[7543] = 0;
inp[7544] = 1073740832;
inp[7545] = 0;
inp[7546] = 1073740816;
inp[7547] = 0;
inp[7548] = 1073741824;
inp[7549] = 1073741824;
inp[7550] = 1073741816;
inp[7551] = 0;
inp[7552] = 1073741808;
inp[7553] = 0;
inp[7554] = 1073741800;
inp[7555] = 0;
inp[7556] = 1073741792;
inp[7557] = 0;
inp[7558] = 1073741784;
inp[7559] = 0;
inp[7560] = 1073741776;
inp[7561] = 0;
inp[7562] = 1073741768;
inp[7563] = 0;
inp[7564] = 1073741760;
inp[7565] = 0;
inp[7566] = 1073741752;
inp[7567] = 0;
inp[7568] = 1073741744;
inp[7569] = 0;
inp[7570] = 1073741736;
inp[7571] = 0;
inp[7572] = 1073741728;
inp[7573] = 0;
inp[7574] = 1073741720;
inp[7575] = 0;
inp[7576] = 1073741712;
inp[7577] = 0;
inp[7578] = 1073741704;
inp[7579] = 0;
inp[7580] = 1073741696;
inp[7581] = 0;
inp[7582] = 1073741688;
inp[7583] = 0;
inp[7584] = 1073741680;
inp[7585] = 0;
inp[7586] = 1073741672;
inp[7587] = 0;
inp[7588] = 1073741664;
inp[7589] = 0;
inp[7590] = 1073741656;
inp[7591] = 0;
inp[7592] = 1073741648;
inp[7593] = 0;
inp[7594] = 1073741640;
inp[7595] = 0;
inp[7596] = 1073741632;
inp[7597] = 0;
inp[7598] = 1073741624;
inp[7599] = 0;
inp[7600] = 1073741616;
inp[7601] = 0;
inp[7602] = 1073741608;
inp[7603] = 0;
inp[7604] = 1073741600;
inp[7605] = 0;
inp[7606] = 1073741592;
inp[7607] = 0;
inp[7608] = 1073741584;
inp[7609] = 0;
inp[7610] = 1073741576;
inp[7611] = 0;
inp[7612] = 1073741568;
inp[7613] = 0;
inp[7614] = 1073741560;
inp[7615] = 0;
inp[7616] = 1073741552;
inp[7617] = 0;
inp[7618] = 1073741544;
inp[7619] = 0;
inp[7620] = 1073741536;
inp[7621] = 0;
inp[7622] = 1073741528;
inp[7623] = 0;
inp[7624] = 1073741520;
inp[7625] = 0;
inp[7626] = 1073741512;
inp[7627] = 0;
inp[7628] = 1073741504;
inp[7629] = 0;
inp[7630] = 1073741496;
inp[7631] = 0;
inp[7632] = 1073741488;
inp[7633] = 0;
inp[7634] = 1073741480;
inp[7635] = 0;
inp[7636] = 1073741472;
inp[7637] = 0;
inp[7638] = 1073741464;
inp[7639] = 0;
inp[7640] = 1073741456;
inp[7641] = 0;
inp[7642] = 1073741448;
inp[7643] = 0;
inp[7644] = 1073741440;
inp[7645] = 0;
inp[7646] = 1073741432;
inp[7647] = 0;
inp[7648] = 1073741424;
inp[7649] = 0;
inp[7650] = 1073741416;
inp[7651] = 0;
inp[7652] = 1073741408;
inp[7653] = 0;
inp[7654] = 1073741400;
inp[7655] = 0;
inp[7656] = 1073741392;
inp[7657] = 0;
inp[7658] = 1073741384;
inp[7659] = 0;
inp[7660] = 1073741376;
inp[7661] = 0;
inp[7662] = 1073741368;
inp[7663] = 0;
inp[7664] = 1073741360;
inp[7665] = 0;
inp[7666] = 1073741352;
inp[7667] = 0;
inp[7668] = 1073741344;
inp[7669] = 0;
inp[7670] = 1073741336;
inp[7671] = 0;
inp[7672] = 1073741328;
inp[7673] = 0;
inp[7674] = 1073741320;
inp[7675] = 0;
inp[7676] = 1073741824;
inp[7677] = 1073741824;
inp[7678] = 1073741820;
inp[7679] = 0;
inp[7680] = 1073741816;
inp[7681] = 0;
inp[7682] = 1073741812;
inp[7683] = 0;
inp[7684] = 1073741808;
inp[7685] = 0;
inp[7686] = 1073741804;
inp[7687] = 0;
inp[7688] = 1073741800;
inp[7689] = 0;
inp[7690] = 1073741796;
inp[7691] = 0;
inp[7692] = 1073741792;
inp[7693] = 0;
inp[7694] = 1073741788;
inp[7695] = 0;
inp[7696] = 1073741784;
inp[7697] = 0;
inp[7698] = 1073741780;
inp[7699] = 0;
inp[7700] = 1073741776;
inp[7701] = 0;
inp[7702] = 1073741772;
inp[7703] = 0;
inp[7704] = 1073741768;
inp[7705] = 0;
inp[7706] = 1073741764;
inp[7707] = 0;
inp[7708] = 1073741760;
inp[7709] = 0;
inp[7710] = 1073741756;
inp[7711] = 0;
inp[7712] = 1073741752;
inp[7713] = 0;
inp[7714] = 1073741748;
inp[7715] = 0;
inp[7716] = 1073741744;
inp[7717] = 0;
inp[7718] = 1073741740;
inp[7719] = 0;
inp[7720] = 1073741736;
inp[7721] = 0;
inp[7722] = 1073741732;
inp[7723] = 0;
inp[7724] = 1073741728;
inp[7725] = 0;
inp[7726] = 1073741724;
inp[7727] = 0;
inp[7728] = 1073741720;
inp[7729] = 0;
inp[7730] = 1073741716;
inp[7731] = 0;
inp[7732] = 1073741712;
inp[7733] = 0;
inp[7734] = 1073741708;
inp[7735] = 0;
inp[7736] = 1073741704;
inp[7737] = 0;
inp[7738] = 1073741700;
inp[7739] = 0;
inp[7740] = 1073741696;
inp[7741] = 0;
inp[7742] = 1073741692;
inp[7743] = 0;
inp[7744] = 1073741688;
inp[7745] = 0;
inp[7746] = 1073741684;
inp[7747] = 0;
inp[7748] = 1073741680;
inp[7749] = 0;
inp[7750] = 1073741676;
inp[7751] = 0;
inp[7752] = 1073741672;
inp[7753] = 0;
inp[7754] = 1073741668;
inp[7755] = 0;
inp[7756] = 1073741664;
inp[7757] = 0;
inp[7758] = 1073741660;
inp[7759] = 0;
inp[7760] = 1073741656;
inp[7761] = 0;
inp[7762] = 1073741652;
inp[7763] = 0;
inp[7764] = 1073741648;
inp[7765] = 0;
inp[7766] = 1073741644;
inp[7767] = 0;
inp[7768] = 1073741640;
inp[7769] = 0;
inp[7770] = 1073741636;
inp[7771] = 0;
inp[7772] = 1073741632;
inp[7773] = 0;
inp[7774] = 1073741628;
inp[7775] = 0;
inp[7776] = 1073741624;
inp[7777] = 0;
inp[7778] = 1073741620;
inp[7779] = 0;
inp[7780] = 1073741616;
inp[7781] = 0;
inp[7782] = 1073741612;
inp[7783] = 0;
inp[7784] = 1073741608;
inp[7785] = 0;
inp[7786] = 1073741604;
inp[7787] = 0;
inp[7788] = 1073741600;
inp[7789] = 0;
inp[7790] = 1073741596;
inp[7791] = 0;
inp[7792] = 1073741592;
inp[7793] = 0;
inp[7794] = 1073741588;
inp[7795] = 0;
inp[7796] = 1073741584;
inp[7797] = 0;
inp[7798] = 1073741580;
inp[7799] = 0;
inp[7800] = 1073741576;
inp[7801] = 0;
inp[7802] = 1073741572;
inp[7803] = 0;
inp[7804] = 1073741824;
inp[7805] = 1073741824;
inp[7806] = 1073741822;
inp[7807] = 0;
inp[7808] = 1073741820;
inp[7809] = 0;
inp[7810] = 1073741818;
inp[7811] = 0;
inp[7812] = 1073741816;
inp[7813] = 0;
inp[7814] = 1073741814;
inp[7815] = 0;
inp[7816] = 1073741812;
inp[7817] = 0;
inp[7818] = 1073741810;
inp[7819] = 0;
inp[7820] = 1073741808;
inp[7821] = 0;
inp[7822] = 1073741806;
inp[7823] = 0;
inp[7824] = 1073741804;
inp[7825] = 0;
inp[7826] = 1073741802;
inp[7827] = 0;
inp[7828] = 1073741800;
inp[7829] = 0;
inp[7830] = 1073741798;
inp[7831] = 0;
inp[7832] = 1073741796;
inp[7833] = 0;
inp[7834] = 1073741794;
inp[7835] = 0;
inp[7836] = 1073741792;
inp[7837] = 0;
inp[7838] = 1073741790;
inp[7839] = 0;
inp[7840] = 1073741788;
inp[7841] = 0;
inp[7842] = 1073741786;
inp[7843] = 0;
inp[7844] = 1073741784;
inp[7845] = 0;
inp[7846] = 1073741782;
inp[7847] = 0;
inp[7848] = 1073741780;
inp[7849] = 0;
inp[7850] = 1073741778;
inp[7851] = 0;
inp[7852] = 1073741776;
inp[7853] = 0;
inp[7854] = 1073741774;
inp[7855] = 0;
inp[7856] = 1073741772;
inp[7857] = 0;
inp[7858] = 1073741770;
inp[7859] = 0;
inp[7860] = 1073741768;
inp[7861] = 0;
inp[7862] = 1073741766;
inp[7863] = 0;
inp[7864] = 1073741764;
inp[7865] = 0;
inp[7866] = 1073741762;
inp[7867] = 0;
inp[7868] = 1073741760;
inp[7869] = 0;
inp[7870] = 1073741758;
inp[7871] = 0;
inp[7872] = 1073741756;
inp[7873] = 0;
inp[7874] = 1073741754;
inp[7875] = 0;
inp[7876] = 1073741752;
inp[7877] = 0;
inp[7878] = 1073741750;
inp[7879] = 0;
inp[7880] = 1073741748;
inp[7881] = 0;
inp[7882] = 1073741746;
inp[7883] = 0;
inp[7884] = 1073741744;
inp[7885] = 0;
inp[7886] = 1073741742;
inp[7887] = 0;
inp[7888] = 1073741740;
inp[7889] = 0;
inp[7890] = 1073741738;
inp[7891] = 0;
inp[7892] = 1073741736;
inp[7893] = 0;
inp[7894] = 1073741734;
inp[7895] = 0;
inp[7896] = 1073741732;
inp[7897] = 0;
inp[7898] = 1073741730;
inp[7899] = 0;
inp[7900] = 1073741728;
inp[7901] = 0;
inp[7902] = 1073741726;
inp[7903] = 0;
inp[7904] = 1073741724;
inp[7905] = 0;
inp[7906] = 1073741722;
inp[7907] = 0;
inp[7908] = 1073741720;
inp[7909] = 0;
inp[7910] = 1073741718;
inp[7911] = 0;
inp[7912] = 1073741716;
inp[7913] = 0;
inp[7914] = 1073741714;
inp[7915] = 0;
inp[7916] = 1073741712;
inp[7917] = 0;
inp[7918] = 1073741710;
inp[7919] = 0;
inp[7920] = 1073741708;
inp[7921] = 0;
inp[7922] = 1073741706;
inp[7923] = 0;
inp[7924] = 1073741704;
inp[7925] = 0;
inp[7926] = 1073741702;
inp[7927] = 0;
inp[7928] = 1073741700;
inp[7929] = 0;
inp[7930] = 1073741698;
inp[7931] = 0;
inp[7932] = 1073741824;
inp[7933] = 1073741824;
inp[7934] = 1073741823;
inp[7935] = 0;
inp[7936] = 1073741822;
inp[7937] = 0;
inp[7938] = 1073741821;
inp[7939] = 0;
inp[7940] = 1073741820;
inp[7941] = 0;
inp[7942] = 1073741819;
inp[7943] = 0;
inp[7944] = 1073741818;
inp[7945] = 0;
inp[7946] = 1073741817;
inp[7947] = 0;
inp[7948] = 1073741816;
inp[7949] = 0;
inp[7950] = 1073741815;
inp[7951] = 0;
inp[7952] = 1073741814;
inp[7953] = 0;
inp[7954] = 1073741813;
inp[7955] = 0;
inp[7956] = 1073741812;
inp[7957] = 0;
inp[7958] = 1073741811;
inp[7959] = 0;
inp[7960] = 1073741810;
inp[7961] = 0;
inp[7962] = 1073741809;
inp[7963] = 0;
inp[7964] = 1073741808;
inp[7965] = 0;
inp[7966] = 1073741807;
inp[7967] = 0;
inp[7968] = 1073741806;
inp[7969] = 0;
inp[7970] = 1073741805;
inp[7971] = 0;
inp[7972] = 1073741804;
inp[7973] = 0;
inp[7974] = 1073741803;
inp[7975] = 0;
inp[7976] = 1073741802;
inp[7977] = 0;
inp[7978] = 1073741801;
inp[7979] = 0;
inp[7980] = 1073741800;
inp[7981] = 0;
inp[7982] = 1073741799;
inp[7983] = 0;
inp[7984] = 1073741798;
inp[7985] = 0;
inp[7986] = 1073741797;
inp[7987] = 0;
inp[7988] = 1073741796;
inp[7989] = 0;
inp[7990] = 1073741795;
inp[7991] = 0;
inp[7992] = 1073741794;
inp[7993] = 0;
inp[7994] = 1073741793;
inp[7995] = 0;
inp[7996] = 1073741792;
inp[7997] = 0;
inp[7998] = 1073741791;
inp[7999] = 0;
inp[8000] = 1073741790;
inp[8001] = 0;
inp[8002] = 1073741789;
inp[8003] = 0;
inp[8004] = 1073741788;
inp[8005] = 0;
inp[8006] = 1073741787;
inp[8007] = 0;
inp[8008] = 1073741786;
inp[8009] = 0;
inp[8010] = 1073741785;
inp[8011] = 0;
inp[8012] = 1073741784;
inp[8013] = 0;
inp[8014] = 1073741783;
inp[8015] = 0;
inp[8016] = 1073741782;
inp[8017] = 0;
inp[8018] = 1073741781;
inp[8019] = 0;
inp[8020] = 1073741780;
inp[8021] = 0;
inp[8022] = 1073741779;
inp[8023] = 0;
inp[8024] = 1073741778;
inp[8025] = 0;
inp[8026] = 1073741777;
inp[8027] = 0;
inp[8028] = 1073741776;
inp[8029] = 0;
inp[8030] = 1073741775;
inp[8031] = 0;
inp[8032] = 1073741774;
inp[8033] = 0;
inp[8034] = 1073741773;
inp[8035] = 0;
inp[8036] = 1073741772;
inp[8037] = 0;
inp[8038] = 1073741771;
inp[8039] = 0;
inp[8040] = 1073741770;
inp[8041] = 0;
inp[8042] = 1073741769;
inp[8043] = 0;
inp[8044] = 1073741768;
inp[8045] = 0;
inp[8046] = 1073741767;
inp[8047] = 0;
inp[8048] = 1073741766;
inp[8049] = 0;
inp[8050] = 1073741765;
inp[8051] = 0;
inp[8052] = 1073741764;
inp[8053] = 0;
inp[8054] = 1073741763;
inp[8055] = 0;
inp[8056] = 1073741762;
inp[8057] = 0;
inp[8058] = 1073741761;
inp[8059] = 0;
inp[8060] = 1073741824;
inp[8061] = 1073741824;
inp[8062] = 1073741823;
inp[8063] = 0;
inp[8064] = 1073741823;
inp[8065] = 0;
inp[8066] = 1073741822;
inp[8067] = 0;
inp[8068] = 1073741822;
inp[8069] = 0;
inp[8070] = 1073741821;
inp[8071] = 0;
inp[8072] = 1073741821;
inp[8073] = 0;
inp[8074] = 1073741820;
inp[8075] = 0;
inp[8076] = 1073741820;
inp[8077] = 0;
inp[8078] = 1073741819;
inp[8079] = 0;
inp[8080] = 1073741819;
inp[8081] = 0;
inp[8082] = 1073741818;
inp[8083] = 0;
inp[8084] = 1073741818;
inp[8085] = 0;
inp[8086] = 1073741817;
inp[8087] = 0;
inp[8088] = 1073741817;
inp[8089] = 0;
inp[8090] = 1073741816;
inp[8091] = 0;
inp[8092] = 1073741816;
inp[8093] = 0;
inp[8094] = 1073741815;
inp[8095] = 0;
inp[8096] = 1073741815;
inp[8097] = 0;
inp[8098] = 1073741814;
inp[8099] = 0;
inp[8100] = 1073741814;
inp[8101] = 0;
inp[8102] = 1073741813;
inp[8103] = 0;
inp[8104] = 1073741813;
inp[8105] = 0;
inp[8106] = 1073741812;
inp[8107] = 0;
inp[8108] = 1073741812;
inp[8109] = 0;
inp[8110] = 1073741811;
inp[8111] = 0;
inp[8112] = 1073741811;
inp[8113] = 0;
inp[8114] = 1073741810;
inp[8115] = 0;
inp[8116] = 1073741810;
inp[8117] = 0;
inp[8118] = 1073741809;
inp[8119] = 0;
inp[8120] = 1073741809;
inp[8121] = 0;
inp[8122] = 1073741808;
inp[8123] = 0;
inp[8124] = 1073741808;
inp[8125] = 0;
inp[8126] = 1073741807;
inp[8127] = 0;
inp[8128] = 1073741807;
inp[8129] = 0;
inp[8130] = 1073741806;
inp[8131] = 0;
inp[8132] = 1073741806;
inp[8133] = 0;
inp[8134] = 1073741805;
inp[8135] = 0;
inp[8136] = 1073741805;
inp[8137] = 0;
inp[8138] = 1073741804;
inp[8139] = 0;
inp[8140] = 1073741804;
inp[8141] = 0;
inp[8142] = 1073741803;
inp[8143] = 0;
inp[8144] = 1073741803;
inp[8145] = 0;
inp[8146] = 1073741802;
inp[8147] = 0;
inp[8148] = 1073741802;
inp[8149] = 0;
inp[8150] = 1073741801;
inp[8151] = 0;
inp[8152] = 1073741801;
inp[8153] = 0;
inp[8154] = 1073741800;
inp[8155] = 0;
inp[8156] = 1073741800;
inp[8157] = 0;
inp[8158] = 1073741799;
inp[8159] = 0;
inp[8160] = 1073741799;
inp[8161] = 0;
inp[8162] = 1073741798;
inp[8163] = 0;
inp[8164] = 1073741798;
inp[8165] = 0;
inp[8166] = 1073741797;
inp[8167] = 0;
inp[8168] = 1073741797;
inp[8169] = 0;
inp[8170] = 1073741796;
inp[8171] = 0;
inp[8172] = 1073741796;
inp[8173] = 0;
inp[8174] = 1073741795;
inp[8175] = 0;
inp[8176] = 1073741795;
inp[8177] = 0;
inp[8178] = 1073741794;
inp[8179] = 0;
inp[8180] = 1073741794;
inp[8181] = 0;
inp[8182] = 1073741793;
inp[8183] = 0;
inp[8184] = 1073741793;
inp[8185] = 0;
inp[8186] = 1073741792;
inp[8187] = 0;
inp[8188] = 1073741824;
inp[8189] = 1073741824;
inp[8190] = 1073741823;
inp[8191] = 0;
inp[8192] = 1073741823;
inp[8193] = 0;
inp[8194] = 1073741823;
inp[8195] = 0;
inp[8196] = 1073741823;
inp[8197] = 0;
inp[8198] = 1073741822;
inp[8199] = 0;
inp[8200] = 1073741822;
inp[8201] = 0;
inp[8202] = 1073741822;
inp[8203] = 0;
inp[8204] = 1073741822;
inp[8205] = 0;
inp[8206] = 1073741821;
inp[8207] = 0;
inp[8208] = 1073741821;
inp[8209] = 0;
inp[8210] = 1073741821;
inp[8211] = 0;
inp[8212] = 1073741821;
inp[8213] = 0;
inp[8214] = 1073741820;
inp[8215] = 0;
inp[8216] = 1073741820;
inp[8217] = 0;
inp[8218] = 1073741820;
inp[8219] = 0;
inp[8220] = 1073741820;
inp[8221] = 0;
inp[8222] = 1073741819;
inp[8223] = 0;
inp[8224] = 1073741819;
inp[8225] = 0;
inp[8226] = 1073741819;
inp[8227] = 0;
inp[8228] = 1073741819;
inp[8229] = 0;
inp[8230] = 1073741818;
inp[8231] = 0;
inp[8232] = 1073741818;
inp[8233] = 0;
inp[8234] = 1073741818;
inp[8235] = 0;
inp[8236] = 1073741818;
inp[8237] = 0;
inp[8238] = 1073741817;
inp[8239] = 0;
inp[8240] = 1073741817;
inp[8241] = 0;
inp[8242] = 1073741817;
inp[8243] = 0;
inp[8244] = 1073741817;
inp[8245] = 0;
inp[8246] = 1073741816;
inp[8247] = 0;
inp[8248] = 1073741816;
inp[8249] = 0;
inp[8250] = 1073741816;
inp[8251] = 0;
inp[8252] = 1073741816;
inp[8253] = 0;
inp[8254] = 1073741815;
inp[8255] = 0;
inp[8256] = 1073741815;
inp[8257] = 0;
inp[8258] = 1073741815;
inp[8259] = 0;
inp[8260] = 1073741815;
inp[8261] = 0;
inp[8262] = 1073741814;
inp[8263] = 0;
inp[8264] = 1073741814;
inp[8265] = 0;
inp[8266] = 1073741814;
inp[8267] = 0;
inp[8268] = 1073741814;
inp[8269] = 0;
inp[8270] = 1073741813;
inp[8271] = 0;
inp[8272] = 1073741813;
inp[8273] = 0;
inp[8274] = 1073741813;
inp[8275] = 0;
inp[8276] = 1073741813;
inp[8277] = 0;
inp[8278] = 1073741812;
inp[8279] = 0;
inp[8280] = 1073741812;
inp[8281] = 0;
inp[8282] = 1073741812;
inp[8283] = 0;
inp[8284] = 1073741812;
inp[8285] = 0;
inp[8286] = 1073741811;
inp[8287] = 0;
inp[8288] = 1073741811;
inp[8289] = 0;
inp[8290] = 1073741811;
inp[8291] = 0;
inp[8292] = 1073741811;
inp[8293] = 0;
inp[8294] = 1073741810;
inp[8295] = 0;
inp[8296] = 1073741810;
inp[8297] = 0;
inp[8298] = 1073741810;
inp[8299] = 0;
inp[8300] = 1073741810;
inp[8301] = 0;
inp[8302] = 1073741809;
inp[8303] = 0;
inp[8304] = 1073741809;
inp[8305] = 0;
inp[8306] = 1073741809;
inp[8307] = 0;
inp[8308] = 1073741809;
inp[8309] = 0;
inp[8310] = 1073741808;
inp[8311] = 0;
inp[8312] = 1073741808;
inp[8313] = 0;
inp[8314] = 1073741808;
inp[8315] = 0;
inp[8316] = 1073741824;
inp[8317] = 1073741824;
inp[8318] = 395007542;
inp[8319] = 395007542;
inp[8320] = 145315153;
inp[8321] = 145315153;
inp[8322] = 53458457;
inp[8323] = 53458457;
inp[8324] = 19666267;
inp[8325] = 19666267;
inp[8326] = 7234815;
inp[8327] = 7234815;
inp[8328] = 2661539;
inp[8329] = 2661539;
inp[8330] = 979125;
inp[8331] = 979125;
inp[8332] = 360200;
inp[8333] = 360200;
inp[8334] = 132510;
inp[8335] = 132510;
inp[8336] = 48747;
inp[8337] = 48747;
inp[8338] = 17933;
inp[8339] = 17933;
inp[8340] = 6597;
inp[8341] = 6597;
inp[8342] = 2427;
inp[8343] = 2427;
inp[8344] = 892;
inp[8345] = 892;
inp[8346] = 328;
inp[8347] = 328;
inp[8348] = 120;
inp[8349] = 120;
inp[8350] = 44;
inp[8351] = 44;
inp[8352] = 16;
inp[8353] = 16;
inp[8354] = 6;
inp[8355] = 6;
inp[8356] = 2;
inp[8357] = 2;
inp[8358] = 0;
inp[8359] = 0;
inp[8360] = 0;
inp[8361] = 0;
inp[8362] = 0;
inp[8363] = 0;
inp[8364] = 0;
inp[8365] = 0;
inp[8366] = 0;
inp[8367] = 0;
inp[8368] = 0;
inp[8369] = 0;
inp[8370] = 0;
inp[8371] = 0;
inp[8372] = 0;
inp[8373] = 0;
inp[8374] = 0;
inp[8375] = 0;
inp[8376] = 0;
inp[8377] = 0;
inp[8378] = 0;
inp[8379] = 0;
inp[8380] = 0;
inp[8381] = 0;
inp[8382] = 0;
inp[8383] = 0;
inp[8384] = 0;
inp[8385] = 0;
inp[8386] = 0;
inp[8387] = 0;
inp[8388] = 0;
inp[8389] = 0;
inp[8390] = 0;
inp[8391] = 0;
inp[8392] = 0;
inp[8393] = 0;
inp[8394] = 0;
inp[8395] = 0;
inp[8396] = 0;
inp[8397] = 0;
inp[8398] = 0;
inp[8399] = 0;
inp[8400] = 0;
inp[8401] = 0;
inp[8402] = 0;
inp[8403] = 0;
inp[8404] = 0;
inp[8405] = 0;
inp[8406] = 0;
inp[8407] = 0;
inp[8408] = 0;
inp[8409] = 0;
inp[8410] = 0;
inp[8411] = 0;
inp[8412] = 0;
inp[8413] = 0;
inp[8414] = 0;
inp[8415] = 0;
inp[8416] = 0;
inp[8417] = 0;
inp[8418] = 0;
inp[8419] = 0;
inp[8420] = 0;
inp[8421] = 0;
inp[8422] = 0;
inp[8423] = 0;
inp[8424] = 0;
inp[8425] = 0;
inp[8426] = 0;
inp[8427] = 0;
inp[8428] = 0;
inp[8429] = 0;
inp[8430] = 0;
inp[8431] = 0;
inp[8432] = 0;
inp[8433] = 0;
inp[8434] = 0;
inp[8435] = 0;
inp[8436] = 0;
inp[8437] = 0;
inp[8438] = 0;
inp[8439] = 0;
inp[8440] = 0;
inp[8441] = 0;
inp[8442] = 0;
inp[8443] = 0;
inp[8444] = 0;
inp[8445] = 0;
inp[8446] = 0;
inp[8447] = 0;
inp[8448] = 0;
inp[8449] = 0;
inp[8450] = 0;
inp[8451] = 0;
inp[8452] = 0;
inp[8453] = 0;
inp[8454] = 0;
inp[8455] = 0;
inp[8456] = 0;
inp[8457] = 0;
inp[8458] = 0;
inp[8459] = 0;
inp[8460] = 0;
inp[8461] = 0;
inp[8462] = 0;
inp[8463] = 0;
inp[8464] = 0;
inp[8465] = 0;
inp[8466] = 0;
inp[8467] = 0;
inp[8468] = 0;
inp[8469] = 0;
inp[8470] = 0;
inp[8471] = 0;
inp[8472] = 0;
inp[8473] = 0;
inp[8474] = 0;
inp[8475] = 0;
inp[8476] = 0;
inp[8477] = 0;
inp[8478] = 0;
inp[8479] = 0;
inp[8480] = 0;
inp[8481] = 0;
inp[8482] = 0;
inp[8483] = 0;
inp[8484] = 0;
inp[8485] = 0;
inp[8486] = 0;
inp[8487] = 0;
inp[8488] = 0;
inp[8489] = 0;
inp[8490] = 0;
inp[8491] = 0;
inp[8492] = 0;
inp[8493] = 0;
inp[8494] = 0;
inp[8495] = 0;
inp[8496] = 0;
inp[8497] = 0;
inp[8498] = 0;
inp[8499] = 0;
inp[8500] = 0;
inp[8501] = 0;
inp[8502] = 0;
inp[8503] = 0;
inp[8504] = 0;
inp[8505] = 0;
inp[8506] = 0;
inp[8507] = 0;
inp[8508] = 0;
inp[8509] = 0;
inp[8510] = 0;
inp[8511] = 0;
inp[8512] = 0;
inp[8513] = 0;
inp[8514] = 0;
inp[8515] = 0;
inp[8516] = 0;
inp[8517] = 0;
inp[8518] = 0;
inp[8519] = 0;
inp[8520] = 0;
inp[8521] = 0;
inp[8522] = 0;
inp[8523] = 0;
inp[8524] = 0;
inp[8525] = 0;
inp[8526] = 0;
inp[8527] = 0;
inp[8528] = 0;
inp[8529] = 0;
inp[8530] = 0;
inp[8531] = 0;
inp[8532] = 0;
inp[8533] = 0;
inp[8534] = 0;
inp[8535] = 0;
inp[8536] = 0;
inp[8537] = 0;
inp[8538] = 0;
inp[8539] = 0;
inp[8540] = 0;
inp[8541] = 0;
inp[8542] = 0;
inp[8543] = 0;
inp[8544] = 0;
inp[8545] = 0;
inp[8546] = 0;
inp[8547] = 0;
inp[8548] = 0;
inp[8549] = 0;
inp[8550] = 0;
inp[8551] = 0;
inp[8552] = 0;
inp[8553] = 0;
inp[8554] = 0;
inp[8555] = 0;
inp[8556] = 0;
inp[8557] = 0;
inp[8558] = 0;
inp[8559] = 0;
inp[8560] = 0;
inp[8561] = 0;
inp[8562] = 0;
inp[8563] = 0;
inp[8564] = 0;
inp[8565] = 0;
inp[8566] = 0;
inp[8567] = 0;
inp[8568] = 0;
inp[8569] = 0;
inp[8570] = 0;
inp[8571] = 0;
inp[8572] = 1073741824;
inp[8573] = 1073741824;
inp[8574] = 651257336;
inp[8575] = 145315153;
inp[8576] = 395007542;
inp[8577] = 19666267;
inp[8578] = 239584185;
inp[8579] = 2661539;
inp[8580] = 145315153;
inp[8581] = 360200;
inp[8582] = 88138096;
inp[8583] = 48747;
inp[8584] = 53458457;
inp[8585] = 6597;
inp[8586] = 32424193;
inp[8587] = 892;
inp[8588] = 19666267;
inp[8589] = 120;
inp[8590] = 11928194;
inp[8591] = 16;
inp[8592] = 7234815;
inp[8593] = 2;
inp[8594] = 4388137;
inp[8595] = 0;
inp[8596] = 2661539;
inp[8597] = 0;
inp[8598] = 1614305;
inp[8599] = 0;
inp[8600] = 979125;
inp[8601] = 0;
inp[8602] = 593869;
inp[8603] = 0;
inp[8604] = 360200;
inp[8605] = 0;
inp[8606] = 218472;
inp[8607] = 0;
inp[8608] = 132510;
inp[8609] = 0;
inp[8610] = 80371;
inp[8611] = 0;
inp[8612] = 48747;
inp[8613] = 0;
inp[8614] = 29567;
inp[8615] = 0;
inp[8616] = 17933;
inp[8617] = 0;
inp[8618] = 10877;
inp[8619] = 0;
inp[8620] = 6597;
inp[8621] = 0;
inp[8622] = 4001;
inp[8623] = 0;
inp[8624] = 2427;
inp[8625] = 0;
inp[8626] = 1472;
inp[8627] = 0;
inp[8628] = 892;
inp[8629] = 0;
inp[8630] = 541;
inp[8631] = 0;
inp[8632] = 328;
inp[8633] = 0;
inp[8634] = 199;
inp[8635] = 0;
inp[8636] = 120;
inp[8637] = 0;
inp[8638] = 73;
inp[8639] = 0;
inp[8640] = 44;
inp[8641] = 0;
inp[8642] = 26;
inp[8643] = 0;
inp[8644] = 16;
inp[8645] = 0;
inp[8646] = 9;
inp[8647] = 0;
inp[8648] = 6;
inp[8649] = 0;
inp[8650] = 3;
inp[8651] = 0;
inp[8652] = 2;
inp[8653] = 0;
inp[8654] = 1;
inp[8655] = 0;
inp[8656] = 0;
inp[8657] = 0;
inp[8658] = 0;
inp[8659] = 0;
inp[8660] = 0;
inp[8661] = 0;
inp[8662] = 0;
inp[8663] = 0;
inp[8664] = 0;
inp[8665] = 0;
inp[8666] = 0;
inp[8667] = 0;
inp[8668] = 0;
inp[8669] = 0;
inp[8670] = 0;
inp[8671] = 0;
inp[8672] = 0;
inp[8673] = 0;
inp[8674] = 0;
inp[8675] = 0;
inp[8676] = 0;
inp[8677] = 0;
inp[8678] = 0;
inp[8679] = 0;
inp[8680] = 0;
inp[8681] = 0;
inp[8682] = 0;
inp[8683] = 0;
inp[8684] = 0;
inp[8685] = 0;
inp[8686] = 0;
inp[8687] = 0;
inp[8688] = 0;
inp[8689] = 0;
inp[8690] = 0;
inp[8691] = 0;
inp[8692] = 0;
inp[8693] = 0;
inp[8694] = 0;
inp[8695] = 0;
inp[8696] = 0;
inp[8697] = 0;
inp[8698] = 0;
inp[8699] = 0;
inp[8700] = 0;
inp[8701] = 0;
inp[8702] = 0;
inp[8703] = 0;
inp[8704] = 0;
inp[8705] = 0;
inp[8706] = 0;
inp[8707] = 0;
inp[8708] = 0;
inp[8709] = 0;
inp[8710] = 0;
inp[8711] = 0;
inp[8712] = 0;
inp[8713] = 0;
inp[8714] = 0;
inp[8715] = 0;
inp[8716] = 0;
inp[8717] = 0;
inp[8718] = 0;
inp[8719] = 0;
inp[8720] = 0;
inp[8721] = 0;
inp[8722] = 0;
inp[8723] = 0;
inp[8724] = 0;
inp[8725] = 0;
inp[8726] = 0;
inp[8727] = 0;
inp[8728] = 0;
inp[8729] = 0;
inp[8730] = 0;
inp[8731] = 0;
inp[8732] = 0;
inp[8733] = 0;
inp[8734] = 0;
inp[8735] = 0;
inp[8736] = 0;
inp[8737] = 0;
inp[8738] = 0;
inp[8739] = 0;
inp[8740] = 0;
inp[8741] = 0;
inp[8742] = 0;
inp[8743] = 0;
inp[8744] = 0;
inp[8745] = 0;
inp[8746] = 0;
inp[8747] = 0;
inp[8748] = 0;
inp[8749] = 0;
inp[8750] = 0;
inp[8751] = 0;
inp[8752] = 0;
inp[8753] = 0;
inp[8754] = 0;
inp[8755] = 0;
inp[8756] = 0;
inp[8757] = 0;
inp[8758] = 0;
inp[8759] = 0;
inp[8760] = 0;
inp[8761] = 0;
inp[8762] = 0;
inp[8763] = 0;
inp[8764] = 0;
inp[8765] = 0;
inp[8766] = 0;
inp[8767] = 0;
inp[8768] = 0;
inp[8769] = 0;
inp[8770] = 0;
inp[8771] = 0;
inp[8772] = 0;
inp[8773] = 0;
inp[8774] = 0;
inp[8775] = 0;
inp[8776] = 0;
inp[8777] = 0;
inp[8778] = 0;
inp[8779] = 0;
inp[8780] = 0;
inp[8781] = 0;
inp[8782] = 0;
inp[8783] = 0;
inp[8784] = 0;
inp[8785] = 0;
inp[8786] = 0;
inp[8787] = 0;
inp[8788] = 0;
inp[8789] = 0;
inp[8790] = 0;
inp[8791] = 0;
inp[8792] = 0;
inp[8793] = 0;
inp[8794] = 0;
inp[8795] = 0;
inp[8796] = 0;
inp[8797] = 0;
inp[8798] = 0;
inp[8799] = 0;
inp[8800] = 0;
inp[8801] = 0;
inp[8802] = 0;
inp[8803] = 0;
inp[8804] = 0;
inp[8805] = 0;
inp[8806] = 0;
inp[8807] = 0;
inp[8808] = 0;
inp[8809] = 0;
inp[8810] = 0;
inp[8811] = 0;
inp[8812] = 0;
inp[8813] = 0;
inp[8814] = 0;
inp[8815] = 0;
inp[8816] = 0;
inp[8817] = 0;
inp[8818] = 0;
inp[8819] = 0;
inp[8820] = 0;
inp[8821] = 0;
inp[8822] = 0;
inp[8823] = 0;
inp[8824] = 0;
inp[8825] = 0;
inp[8826] = 0;
inp[8827] = 0;
inp[8828] = 1073741824;
inp[8829] = 1073741824;
inp[8830] = 836230973;
inp[8831] = 19666267;
inp[8832] = 651257336;
inp[8833] = 360200;
inp[8834] = 507199723;
inp[8835] = 6597;
inp[8836] = 395007542;
inp[8837] = 120;
inp[8838] = 307632183;
inp[8839] = 2;
inp[8840] = 239584185;
inp[8841] = 0;
inp[8842] = 186588351;
inp[8843] = 0;
inp[8844] = 145315153;
inp[8845] = 0;
inp[8846] = 113171555;
inp[8847] = 0;
inp[8848] = 88138096;
inp[8849] = 0;
inp[8850] = 68642018;
inp[8851] = 0;
inp[8852] = 53458457;
inp[8853] = 0;
inp[8854] = 41633488;
inp[8855] = 0;
inp[8856] = 32424193;
inp[8857] = 0;
inp[8858] = 25251987;
inp[8859] = 0;
inp[8860] = 19666267;
inp[8861] = 0;
inp[8862] = 15316104;
inp[8863] = 0;
inp[8864] = 11928194;
inp[8865] = 0;
inp[8866] = 9289686;
inp[8867] = 0;
inp[8868] = 7234815;
inp[8869] = 0;
inp[8870] = 5634479;
inp[8871] = 0;
inp[8872] = 4388137;
inp[8873] = 0;
inp[8874] = 3417484;
inp[8875] = 0;
inp[8876] = 2661539;
inp[8877] = 0;
inp[8878] = 2072809;
inp[8879] = 0;
inp[8880] = 1614305;
inp[8881] = 0;
inp[8882] = 1257222;
inp[8883] = 0;
inp[8884] = 979125;
inp[8885] = 0;
inp[8886] = 762543;
inp[8887] = 0;
inp[8888] = 593869;
inp[8889] = 0;
inp[8890] = 462506;
inp[8891] = 0;
inp[8892] = 360200;
inp[8893] = 0;
inp[8894] = 280524;
inp[8895] = 0;
inp[8896] = 218472;
inp[8897] = 0;
inp[8898] = 170146;
inp[8899] = 0;
inp[8900] = 132510;
inp[8901] = 0;
inp[8902] = 103199;
inp[8903] = 0;
inp[8904] = 80371;
inp[8905] = 0;
inp[8906] = 62593;
inp[8907] = 0;
inp[8908] = 48747;
inp[8909] = 0;
inp[8910] = 37964;
inp[8911] = 0;
inp[8912] = 29567;
inp[8913] = 0;
inp[8914] = 23026;
inp[8915] = 0;
inp[8916] = 17933;
inp[8917] = 0;
inp[8918] = 13966;
inp[8919] = 0;
inp[8920] = 10877;
inp[8921] = 0;
inp[8922] = 8471;
inp[8923] = 0;
inp[8924] = 6597;
inp[8925] = 0;
inp[8926] = 5137;
inp[8927] = 0;
inp[8928] = 4001;
inp[8929] = 0;
inp[8930] = 3116;
inp[8931] = 0;
inp[8932] = 2427;
inp[8933] = 0;
inp[8934] = 1890;
inp[8935] = 0;
inp[8936] = 1472;
inp[8937] = 0;
inp[8938] = 1146;
inp[8939] = 0;
inp[8940] = 892;
inp[8941] = 0;
inp[8942] = 695;
inp[8943] = 0;
inp[8944] = 541;
inp[8945] = 0;
inp[8946] = 421;
inp[8947] = 0;
inp[8948] = 328;
inp[8949] = 0;
inp[8950] = 255;
inp[8951] = 0;
inp[8952] = 199;
inp[8953] = 0;
inp[8954] = 155;
inp[8955] = 0;
inp[8956] = 120;
inp[8957] = 0;
inp[8958] = 94;
inp[8959] = 0;
inp[8960] = 73;
inp[8961] = 0;
inp[8962] = 57;
inp[8963] = 0;
inp[8964] = 44;
inp[8965] = 0;
inp[8966] = 34;
inp[8967] = 0;
inp[8968] = 26;
inp[8969] = 0;
inp[8970] = 20;
inp[8971] = 0;
inp[8972] = 16;
inp[8973] = 0;
inp[8974] = 12;
inp[8975] = 0;
inp[8976] = 9;
inp[8977] = 0;
inp[8978] = 7;
inp[8979] = 0;
inp[8980] = 6;
inp[8981] = 0;
inp[8982] = 4;
inp[8983] = 0;
inp[8984] = 3;
inp[8985] = 0;
inp[8986] = 2;
inp[8987] = 0;
inp[8988] = 2;
inp[8989] = 0;
inp[8990] = 1;
inp[8991] = 0;
inp[8992] = 1;
inp[8993] = 0;
inp[8994] = 1;
inp[8995] = 0;
inp[8996] = 0;
inp[8997] = 0;
inp[8998] = 0;
inp[8999] = 0;
inp[9000] = 0;
inp[9001] = 0;
inp[9002] = 0;
inp[9003] = 0;
inp[9004] = 0;
inp[9005] = 0;
inp[9006] = 0;
inp[9007] = 0;
inp[9008] = 0;
inp[9009] = 0;
inp[9010] = 0;
inp[9011] = 0;
inp[9012] = 0;
inp[9013] = 0;
inp[9014] = 0;
inp[9015] = 0;
inp[9016] = 0;
inp[9017] = 0;
inp[9018] = 0;
inp[9019] = 0;
inp[9020] = 0;
inp[9021] = 0;
inp[9022] = 0;
inp[9023] = 0;
inp[9024] = 0;
inp[9025] = 0;
inp[9026] = 0;
inp[9027] = 0;
inp[9028] = 0;
inp[9029] = 0;
inp[9030] = 0;
inp[9031] = 0;
inp[9032] = 0;
inp[9033] = 0;
inp[9034] = 0;
inp[9035] = 0;
inp[9036] = 0;
inp[9037] = 0;
inp[9038] = 0;
inp[9039] = 0;
inp[9040] = 0;
inp[9041] = 0;
inp[9042] = 0;
inp[9043] = 0;
inp[9044] = 0;
inp[9045] = 0;
inp[9046] = 0;
inp[9047] = 0;
inp[9048] = 0;
inp[9049] = 0;
inp[9050] = 0;
inp[9051] = 0;
inp[9052] = 0;
inp[9053] = 0;
inp[9054] = 0;
inp[9055] = 0;
inp[9056] = 0;
inp[9057] = 0;
inp[9058] = 0;
inp[9059] = 0;
inp[9060] = 0;
inp[9061] = 0;
inp[9062] = 0;
inp[9063] = 0;
inp[9064] = 0;
inp[9065] = 0;
inp[9066] = 0;
inp[9067] = 0;
inp[9068] = 0;
inp[9069] = 0;
inp[9070] = 0;
inp[9071] = 0;
inp[9072] = 0;
inp[9073] = 0;
inp[9074] = 0;
inp[9075] = 0;
inp[9076] = 0;
inp[9077] = 0;
inp[9078] = 0;
inp[9079] = 0;
inp[9080] = 0;
inp[9081] = 0;
inp[9082] = 0;
inp[9083] = 0;
inp[9084] = 1073741824;
inp[9085] = 1073741824;
inp[9086] = 947573833;
inp[9087] = 360200;
inp[9088] = 836230973;
inp[9089] = 120;
inp[9090] = 737971243;
inp[9091] = 0;
inp[9092] = 651257336;
inp[9093] = 0;
inp[9094] = 574732582;
inp[9095] = 0;
inp[9096] = 507199723;
inp[9097] = 0;
inp[9098] = 447602185;
inp[9099] = 0;
inp[9100] = 395007542;
inp[9101] = 0;
inp[9102] = 348592932;
inp[9103] = 0;
inp[9104] = 307632183;
inp[9105] = 0;
inp[9106] = 271484448;
inp[9107] = 0;
inp[9108] = 239584185;
inp[9109] = 0;
inp[9110] = 211432301;
inp[9111] = 0;
inp[9112] = 186588351;
inp[9113] = 0;
inp[9114] = 164663641;
inp[9115] = 0;
inp[9116] = 145315153;
inp[9117] = 0;
inp[9118] = 128240173;
inp[9119] = 0;
inp[9120] = 113171555;
inp[9121] = 0;
inp[9122] = 99873547;
inp[9123] = 0;
inp[9124] = 88138096;
inp[9125] = 0;
inp[9126] = 77781596;
inp[9127] = 0;
inp[9128] = 68642018;
inp[9129] = 0;
inp[9130] = 60576368;
inp[9131] = 0;
inp[9132] = 53458457;
inp[9133] = 0;
inp[9134] = 47176923;
inp[9135] = 0;
inp[9136] = 41633488;
inp[9137] = 0;
inp[9138] = 36741424;
inp[9139] = 0;
inp[9140] = 32424193;
inp[9141] = 0;
inp[9142] = 28614250;
inp[9143] = 0;
inp[9144] = 25251987;
inp[9145] = 0;
inp[9146] = 22284800;
inp[9147] = 0;
inp[9148] = 19666267;
inp[9149] = 0;
inp[9150] = 17355420;
inp[9151] = 0;
inp[9152] = 15316104;
inp[9153] = 0;
inp[9154] = 13516414;
inp[9155] = 0;
inp[9156] = 11928194;
inp[9157] = 0;
inp[9158] = 10526594;
inp[9159] = 0;
inp[9160] = 9289686;
inp[9161] = 0;
inp[9162] = 8198119;
inp[9163] = 0;
inp[9164] = 7234815;
inp[9165] = 0;
inp[9166] = 6384702;
inp[9167] = 0;
inp[9168] = 5634479;
inp[9169] = 0;
inp[9170] = 4972411;
inp[9171] = 0;
inp[9172] = 4388137;
inp[9173] = 0;
inp[9174] = 3872517;
inp[9175] = 0;
inp[9176] = 3417484;
inp[9177] = 0;
inp[9178] = 3015919;
inp[9179] = 0;
inp[9180] = 2661539;
inp[9181] = 0;
inp[9182] = 2348800;
inp[9183] = 0;
inp[9184] = 2072809;
inp[9185] = 0;
inp[9186] = 1829247;
inp[9187] = 0;
inp[9188] = 1614305;
inp[9189] = 0;
inp[9190] = 1424619;
inp[9191] = 0;
inp[9192] = 1257222;
inp[9193] = 0;
inp[9194] = 1109494;
inp[9195] = 0;
inp[9196] = 979125;
inp[9197] = 0;
inp[9198] = 864075;
inp[9199] = 0;
inp[9200] = 762543;
inp[9201] = 0;
inp[9202] = 672942;
inp[9203] = 0;
inp[9204] = 593869;
inp[9205] = 0;
inp[9206] = 524088;
inp[9207] = 0;
inp[9208] = 462506;
inp[9209] = 0;
inp[9210] = 408160;
inp[9211] = 0;
inp[9212] = 360200;
inp[9213] = 0;
inp[9214] = 317875;
inp[9215] = 0;
inp[9216] = 280524;
inp[9217] = 0;
inp[9218] = 247561;
inp[9219] = 0;
inp[9220] = 218472;
inp[9221] = 0;
inp[9222] = 192801;
inp[9223] = 0;
inp[9224] = 170146;
inp[9225] = 0;
inp[9226] = 150153;
inp[9227] = 0;
inp[9228] = 132510;
inp[9229] = 0;
inp[9230] = 116939;
inp[9231] = 0;
inp[9232] = 103199;
inp[9233] = 0;
inp[9234] = 91072;
inp[9235] = 0;
inp[9236] = 80371;
inp[9237] = 0;
inp[9238] = 70927;
inp[9239] = 0;
inp[9240] = 62593;
inp[9241] = 0;
inp[9242] = 55238;
inp[9243] = 0;
inp[9244] = 48747;
inp[9245] = 0;
inp[9246] = 43019;
inp[9247] = 0;
inp[9248] = 37964;
inp[9249] = 0;
inp[9250] = 33503;
inp[9251] = 0;
inp[9252] = 29567;
inp[9253] = 0;
inp[9254] = 26092;
inp[9255] = 0;
inp[9256] = 23026;
inp[9257] = 0;
inp[9258] = 20321;
inp[9259] = 0;
inp[9260] = 17933;
inp[9261] = 0;
inp[9262] = 15826;
inp[9263] = 0;
inp[9264] = 13966;
inp[9265] = 0;
inp[9266] = 12325;
inp[9267] = 0;
inp[9268] = 10877;
inp[9269] = 0;
inp[9270] = 9599;
inp[9271] = 0;
inp[9272] = 8471;
inp[9273] = 0;
inp[9274] = 7475;
inp[9275] = 0;
inp[9276] = 6597;
inp[9277] = 0;
inp[9278] = 5822;
inp[9279] = 0;
inp[9280] = 5137;
inp[9281] = 0;
inp[9282] = 4534;
inp[9283] = 0;
inp[9284] = 4001;
inp[9285] = 0;
inp[9286] = 3531;
inp[9287] = 0;
inp[9288] = 3116;
inp[9289] = 0;
inp[9290] = 2750;
inp[9291] = 0;
inp[9292] = 2427;
inp[9293] = 0;
inp[9294] = 2141;
inp[9295] = 0;
inp[9296] = 1890;
inp[9297] = 0;
inp[9298] = 1668;
inp[9299] = 0;
inp[9300] = 1472;
inp[9301] = 0;
inp[9302] = 1299;
inp[9303] = 0;
inp[9304] = 1146;
inp[9305] = 0;
inp[9306] = 1011;
inp[9307] = 0;
inp[9308] = 892;
inp[9309] = 0;
inp[9310] = 787;
inp[9311] = 0;
inp[9312] = 695;
inp[9313] = 0;
inp[9314] = 613;
inp[9315] = 0;
inp[9316] = 541;
inp[9317] = 0;
inp[9318] = 477;
inp[9319] = 0;
inp[9320] = 421;
inp[9321] = 0;
inp[9322] = 372;
inp[9323] = 0;
inp[9324] = 328;
inp[9325] = 0;
inp[9326] = 289;
inp[9327] = 0;
inp[9328] = 255;
inp[9329] = 0;
inp[9330] = 225;
inp[9331] = 0;
inp[9332] = 199;
inp[9333] = 0;
inp[9334] = 175;
inp[9335] = 0;
inp[9336] = 155;
inp[9337] = 0;
inp[9338] = 136;
inp[9339] = 0;
inp[9340] = 1073741824;
inp[9341] = 1073741824;
inp[9342] = 1008687095;
inp[9343] = 120;
inp[9344] = 947573833;
inp[9345] = 0;
inp[9346] = 890163237;
inp[9347] = 0;
inp[9348] = 836230973;
inp[9349] = 0;
inp[9350] = 785566299;
inp[9351] = 0;
inp[9352] = 737971243;
inp[9353] = 0;
inp[9354] = 693259826;
inp[9355] = 0;
inp[9356] = 651257336;
inp[9357] = 0;
inp[9358] = 611799649;
inp[9359] = 0;
inp[9360] = 574732582;
inp[9361] = 0;
inp[9362] = 539911295;
inp[9363] = 0;
inp[9364] = 507199723;
inp[9365] = 0;
inp[9366] = 476470046;
inp[9367] = 0;
inp[9368] = 447602185;
inp[9369] = 0;
inp[9370] = 420483339;
inp[9371] = 0;
inp[9372] = 395007542;
inp[9373] = 0;
inp[9374] = 371075245;
inp[9375] = 0;
inp[9376] = 348592932;
inp[9377] = 0;
inp[9378] = 327472754;
inp[9379] = 0;
inp[9380] = 307632183;
inp[9381] = 0;
inp[9382] = 288993691;
inp[9383] = 0;
inp[9384] = 271484448;
inp[9385] = 0;
inp[9386] = 255036037;
inp[9387] = 0;
inp[9388] = 239584185;
inp[9389] = 0;
inp[9390] = 225068513;
inp[9391] = 0;
inp[9392] = 211432301;
inp[9393] = 0;
inp[9394] = 198622265;
inp[9395] = 0;
inp[9396] = 186588351;
inp[9397] = 0;
inp[9398] = 175283534;
inp[9399] = 0;
inp[9400] = 164663641;
inp[9401] = 0;
inp[9402] = 154687176;
inp[9403] = 0;
inp[9404] = 145315153;
inp[9405] = 0;
inp[9406] = 136510953;
inp[9407] = 0;
inp[9408] = 128240173;
inp[9409] = 0;
inp[9410] = 120470493;
inp[9411] = 0;
inp[9412] = 113171555;
inp[9413] = 0;
inp[9414] = 106314837;
inp[9415] = 0;
inp[9416] = 99873547;
inp[9417] = 0;
inp[9418] = 93822514;
inp[9419] = 0;
inp[9420] = 88138096;
inp[9421] = 0;
inp[9422] = 82798078;
inp[9423] = 0;
inp[9424] = 77781596;
inp[9425] = 0;
inp[9426] = 73069048;
inp[9427] = 0;
inp[9428] = 68642018;
inp[9429] = 0;
inp[9430] = 64483208;
inp[9431] = 0;
inp[9432] = 60576368;
inp[9433] = 0;
inp[9434] = 56906231;
inp[9435] = 0;
inp[9436] = 53458457;
inp[9437] = 0;
inp[9438] = 50219573;
inp[9439] = 0;
inp[9440] = 47176923;
inp[9441] = 0;
inp[9442] = 44318617;
inp[9443] = 0;
inp[9444] = 41633488;
inp[9445] = 0;
inp[9446] = 39111043;
inp[9447] = 0;
inp[9448] = 36741424;
inp[9449] = 0;
inp[9450] = 34515374;
inp[9451] = 0;
inp[9452] = 32424193;
inp[9453] = 0;
inp[9454] = 30459710;
inp[9455] = 0;
inp[9456] = 28614250;
inp[9457] = 0;
inp[9458] = 26880600;
inp[9459] = 0;
inp[9460] = 25251987;
inp[9461] = 0;
inp[9462] = 23722046;
inp[9463] = 0;
inp[9464] = 22284800;
inp[9465] = 0;
inp[9466] = 20934632;
inp[9467] = 0;
inp[9468] = 19666267;
inp[9469] = 0;
inp[9470] = 18474748;
inp[9471] = 0;
inp[9472] = 17355420;
inp[9473] = 0;
inp[9474] = 16303908;
inp[9475] = 0;
inp[9476] = 15316104;
inp[9477] = 0;
inp[9478] = 14388148;
inp[9479] = 0;
inp[9480] = 13516414;
inp[9481] = 0;
inp[9482] = 12697496;
inp[9483] = 0;
inp[9484] = 11928194;
inp[9485] = 0;
inp[9486] = 11205501;
inp[9487] = 0;
inp[9488] = 10526594;
inp[9489] = 0;
inp[9490] = 9888820;
inp[9491] = 0;
inp[9492] = 9289686;
inp[9493] = 0;
inp[9494] = 8726853;
inp[9495] = 0;
inp[9496] = 8198119;
inp[9497] = 0;
inp[9498] = 7701421;
inp[9499] = 0;
inp[9500] = 7234815;
inp[9501] = 0;
inp[9502] = 6796480;
inp[9503] = 0;
inp[9504] = 6384702;
inp[9505] = 0;
inp[9506] = 5997872;
inp[9507] = 0;
inp[9508] = 5634479;
inp[9509] = 0;
inp[9510] = 5293104;
inp[9511] = 0;
inp[9512] = 4972411;
inp[9513] = 0;
inp[9514] = 4671147;
inp[9515] = 0;
inp[9516] = 4388137;
inp[9517] = 0;
inp[9518] = 4122273;
inp[9519] = 0;
inp[9520] = 3872517;
inp[9521] = 0;
inp[9522] = 3637893;
inp[9523] = 0;
inp[9524] = 3417484;
inp[9525] = 0;
inp[9526] = 3210429;
inp[9527] = 0;
inp[9528] = 3015919;
inp[9529] = 0;
inp[9530] = 2833194;
inp[9531] = 0;
inp[9532] = 2661539;
inp[9533] = 0;
inp[9534] = 2500285;
inp[9535] = 0;
inp[9536] = 2348800;
inp[9537] = 0;
inp[9538] = 2206494;
inp[9539] = 0;
inp[9540] = 2072809;
inp[9541] = 0;
inp[9542] = 1947224;
inp[9543] = 0;
inp[9544] = 1829247;
inp[9545] = 0;
inp[9546] = 1718419;
inp[9547] = 0;
inp[9548] = 1614305;
inp[9549] = 0;
inp[9550] = 1516499;
inp[9551] = 0;
inp[9552] = 1424619;
inp[9553] = 0;
inp[9554] = 1338306;
inp[9555] = 0;
inp[9556] = 1257222;
inp[9557] = 0;
inp[9558] = 1181051;
inp[9559] = 0;
inp[9560] = 1109494;
inp[9561] = 0;
inp[9562] = 1042273;
inp[9563] = 0;
inp[9564] = 979125;
inp[9565] = 0;
inp[9566] = 919803;
inp[9567] = 0;
inp[9568] = 864075;
inp[9569] = 0;
inp[9570] = 811723;
inp[9571] = 0;
inp[9572] = 762543;
inp[9573] = 0;
inp[9574] = 716343;
inp[9575] = 0;
inp[9576] = 672942;
inp[9577] = 0;
inp[9578] = 632171;
inp[9579] = 0;
inp[9580] = 593869;
inp[9581] = 0;
inp[9582] = 557889;
inp[9583] = 0;
inp[9584] = 524088;
inp[9585] = 0;
inp[9586] = 492335;
inp[9587] = 0;
inp[9588] = 462506;
inp[9589] = 0;
inp[9590] = 434484;
inp[9591] = 0;
inp[9592] = 408160;
inp[9593] = 0;
inp[9594] = 383431;
inp[9595] = 0;
inp[9596] = 1073741824;
inp[9597] = 1073741824;
inp[9598] = 1040706261;
inp[9599] = 0;
inp[9600] = 1008687095;
inp[9601] = 0;
inp[9602] = 977653056;
inp[9603] = 0;
inp[9604] = 947573833;
inp[9605] = 0;
inp[9606] = 918420051;
inp[9607] = 0;
inp[9608] = 890163237;
inp[9609] = 0;
inp[9610] = 862775793;
inp[9611] = 0;
inp[9612] = 836230973;
inp[9613] = 0;
inp[9614] = 810502851;
inp[9615] = 0;
inp[9616] = 785566299;
inp[9617] = 0;
inp[9618] = 761396965;
inp[9619] = 0;
inp[9620] = 737971243;
inp[9621] = 0;
inp[9622] = 715266255;
inp[9623] = 0;
inp[9624] = 693259826;
inp[9625] = 0;
inp[9626] = 671930463;
inp[9627] = 0;
inp[9628] = 651257336;
inp[9629] = 0;
inp[9630] = 631220255;
inp[9631] = 0;
inp[9632] = 611799649;
inp[9633] = 0;
inp[9634] = 592976553;
inp[9635] = 0;
inp[9636] = 574732582;
inp[9637] = 0;
inp[9638] = 557049919;
inp[9639] = 0;
inp[9640] = 539911295;
inp[9641] = 0;
inp[9642] = 523299971;
inp[9643] = 0;
inp[9644] = 507199723;
inp[9645] = 0;
inp[9646] = 491594828;
inp[9647] = 0;
inp[9648] = 476470046;
inp[9649] = 0;
inp[9650] = 461810603;
inp[9651] = 0;
inp[9652] = 447602185;
inp[9653] = 0;
inp[9654] = 433830913;
inp[9655] = 0;
inp[9656] = 420483339;
inp[9657] = 0;
inp[9658] = 407546427;
inp[9659] = 0;
inp[9660] = 395007542;
inp[9661] = 0;
inp[9662] = 382854437;
inp[9663] = 0;
inp[9664] = 371075245;
inp[9665] = 0;
inp[9666] = 359658459;
inp[9667] = 0;
inp[9668] = 348592932;
inp[9669] = 0;
inp[9670] = 337867855;
inp[9671] = 0;
inp[9672] = 327472754;
inp[9673] = 0;
inp[9674] = 317397476;
inp[9675] = 0;
inp[9676] = 307632183;
inp[9677] = 0;
inp[9678] = 298167335;
inp[9679] = 0;
inp[9680] = 288993691;
inp[9681] = 0;
inp[9682] = 280102290;
inp[9683] = 0;
inp[9684] = 271484448;
inp[9685] = 0;
inp[9686] = 263131750;
inp[9687] = 0;
inp[9688] = 255036037;
inp[9689] = 0;
inp[9690] = 247189403;
inp[9691] = 0;
inp[9692] = 239584185;
inp[9693] = 0;
inp[9694] = 232212954;
inp[9695] = 0;
inp[9696] = 225068513;
inp[9697] = 0;
inp[9698] = 218143882;
inp[9699] = 0;
inp[9700] = 211432301;
inp[9701] = 0;
inp[9702] = 204927213;
inp[9703] = 0;
inp[9704] = 198622265;
inp[9705] = 0;
inp[9706] = 192511301;
inp[9707] = 0;
inp[9708] = 186588351;
inp[9709] = 0;
inp[9710] = 180847630;
inp[9711] = 0;
inp[9712] = 175283534;
inp[9713] = 0;
inp[9714] = 169890626;
inp[9715] = 0;
inp[9716] = 164663641;
inp[9717] = 0;
inp[9718] = 159597474;
inp[9719] = 0;
inp[9720] = 154687176;
inp[9721] = 0;
inp[9722] = 149927952;
inp[9723] = 0;
inp[9724] = 145315153;
inp[9725] = 0;
inp[9726] = 140844276;
inp[9727] = 0;
inp[9728] = 136510953;
inp[9729] = 0;
inp[9730] = 132310953;
inp[9731] = 0;
inp[9732] = 128240173;
inp[9733] = 0;
inp[9734] = 124294637;
inp[9735] = 0;
inp[9736] = 120470493;
inp[9737] = 0;
inp[9738] = 116764006;
inp[9739] = 0;
inp[9740] = 113171555;
inp[9741] = 0;
inp[9742] = 109689632;
inp[9743] = 0;
inp[9744] = 106314837;
inp[9745] = 0;
inp[9746] = 103043874;
inp[9747] = 0;
inp[9748] = 99873547;
inp[9749] = 0;
inp[9750] = 96800761;
inp[9751] = 0;
inp[9752] = 93822514;
inp[9753] = 0;
inp[9754] = 90935899;
inp[9755] = 0;
inp[9756] = 88138096;
inp[9757] = 0;
inp[9758] = 85426372;
inp[9759] = 0;
inp[9760] = 82798078;
inp[9761] = 0;
inp[9762] = 80250649;
inp[9763] = 0;
inp[9764] = 77781596;
inp[9765] = 0;
inp[9766] = 75388508;
inp[9767] = 0;
inp[9768] = 73069048;
inp[9769] = 0;
inp[9770] = 70820949;
inp[9771] = 0;
inp[9772] = 68642018;
inp[9773] = 0;
inp[9774] = 66530125;
inp[9775] = 0;
inp[9776] = 64483208;
inp[9777] = 0;
inp[9778] = 62499268;
inp[9779] = 0;
inp[9780] = 60576368;
inp[9781] = 0;
inp[9782] = 58712629;
inp[9783] = 0;
inp[9784] = 56906231;
inp[9785] = 0;
inp[9786] = 55155411;
inp[9787] = 0;
inp[9788] = 53458457;
inp[9789] = 0;
inp[9790] = 51813713;
inp[9791] = 0;
inp[9792] = 50219573;
inp[9793] = 0;
inp[9794] = 48674479;
inp[9795] = 0;
inp[9796] = 47176923;
inp[9797] = 0;
inp[9798] = 45725441;
inp[9799] = 0;
inp[9800] = 44318617;
inp[9801] = 0;
inp[9802] = 42955077;
inp[9803] = 0;
inp[9804] = 41633488;
inp[9805] = 0;
inp[9806] = 40352560;
inp[9807] = 0;
inp[9808] = 39111043;
inp[9809] = 0;
inp[9810] = 37907722;
inp[9811] = 0;
inp[9812] = 36741424;
inp[9813] = 0;
inp[9814] = 35611009;
inp[9815] = 0;
inp[9816] = 34515374;
inp[9817] = 0;
inp[9818] = 33453447;
inp[9819] = 0;
inp[9820] = 32424193;
inp[9821] = 0;
inp[9822] = 31426605;
inp[9823] = 0;
inp[9824] = 30459710;
inp[9825] = 0;
inp[9826] = 29522564;
inp[9827] = 0;
inp[9828] = 28614250;
inp[9829] = 0;
inp[9830] = 27733882;
inp[9831] = 0;
inp[9832] = 26880600;
inp[9833] = 0;
inp[9834] = 26053571;
inp[9835] = 0;
inp[9836] = 25251987;
inp[9837] = 0;
inp[9838] = 24475065;
inp[9839] = 0;
inp[9840] = 23722046;
inp[9841] = 0;
inp[9842] = 22992196;
inp[9843] = 0;
inp[9844] = 22284800;
inp[9845] = 0;
inp[9846] = 21599169;
inp[9847] = 0;
inp[9848] = 20934632;
inp[9849] = 0;
inp[9850] = 20290541;
inp[9851] = 0;
inp[9852] = 1073741824;
inp[9853] = 1073741824;
inp[9854] = 1057094999;
inp[9855] = 0;
inp[9856] = 1040706261;
inp[9857] = 0;
inp[9858] = 1024571605;
inp[9859] = 0;
inp[9860] = 1008687095;
inp[9861] = 0;
inp[9862] = 993048851;
inp[9863] = 0;
inp[9864] = 977653056;
inp[9865] = 0;
inp[9866] = 962495950;
inp[9867] = 0;
inp[9868] = 947573833;
inp[9869] = 0;
inp[9870] = 932883063;
inp[9871] = 0;
inp[9872] = 918420051;
inp[9873] = 0;
inp[9874] = 904181268;
inp[9875] = 0;
inp[9876] = 890163237;
inp[9877] = 0;
inp[9878] = 876362535;
inp[9879] = 0;
inp[9880] = 862775793;
inp[9881] = 0;
inp[9882] = 849399695;
inp[9883] = 0;
inp[9884] = 836230973;
inp[9885] = 0;
inp[9886] = 823266413;
inp[9887] = 0;
inp[9888] = 810502851;
inp[9889] = 0;
inp[9890] = 797937169;
inp[9891] = 0;
inp[9892] = 785566299;
inp[9893] = 0;
inp[9894] = 773387223;
inp[9895] = 0;
inp[9896] = 761396965;
inp[9897] = 0;
inp[9898] = 749592599;
inp[9899] = 0;
inp[9900] = 737971243;
inp[9901] = 0;
inp[9902] = 726530060;
inp[9903] = 0;
inp[9904] = 715266255;
inp[9905] = 0;
inp[9906] = 704177080;
inp[9907] = 0;
inp[9908] = 693259826;
inp[9909] = 0;
inp[9910] = 682511829;
inp[9911] = 0;
inp[9912] = 671930463;
inp[9913] = 0;
inp[9914] = 661513147;
inp[9915] = 0;
inp[9916] = 651257336;
inp[9917] = 0;
inp[9918] = 641160527;
inp[9919] = 0;
inp[9920] = 631220255;
inp[9921] = 0;
inp[9922] = 621434092;
inp[9923] = 0;
inp[9924] = 611799649;
inp[9925] = 0;
inp[9926] = 602314575;
inp[9927] = 0;
inp[9928] = 592976553;
inp[9929] = 0;
inp[9930] = 583783303;
inp[9931] = 0;
inp[9932] = 574732582;
inp[9933] = 0;
inp[9934] = 565822179;
inp[9935] = 0;
inp[9936] = 557049919;
inp[9937] = 0;
inp[9938] = 548413661;
inp[9939] = 0;
inp[9940] = 539911295;
inp[9941] = 0;
inp[9942] = 531540746;
inp[9943] = 0;
inp[9944] = 523299971;
inp[9945] = 0;
inp[9946] = 515186957;
inp[9947] = 0;
inp[9948] = 507199723;
inp[9949] = 0;
inp[9950] = 499336321;
inp[9951] = 0;
inp[9952] = 491594828;
inp[9953] = 0;
inp[9954] = 483973357;
inp[9955] = 0;
inp[9956] = 476470046;
inp[9957] = 0;
inp[9958] = 469083062;
inp[9959] = 0;
inp[9960] = 461810603;
inp[9961] = 0;
inp[9962] = 454650894;
inp[9963] = 0;
inp[9964] = 447602185;
inp[9965] = 0;
inp[9966] = 440662756;
inp[9967] = 0;
inp[9968] = 433830913;
inp[9969] = 0;
inp[9970] = 427104988;
inp[9971] = 0;
inp[9972] = 420483339;
inp[9973] = 0;
inp[9974] = 413964349;
inp[9975] = 0;
inp[9976] = 407546427;
inp[9977] = 0;
inp[9978] = 401228005;
inp[9979] = 0;
inp[9980] = 395007542;
inp[9981] = 0;
inp[9982] = 388883517;
inp[9983] = 0;
inp[9984] = 382854437;
inp[9985] = 0;
inp[9986] = 376918829;
inp[9987] = 0;
inp[9988] = 371075245;
inp[9989] = 0;
inp[9990] = 365322256;
inp[9991] = 0;
inp[9992] = 359658459;
inp[9993] = 0;
inp[9994] = 354082472;
inp[9995] = 0;
inp[9996] = 348592932;
inp[9997] = 0;
inp[9998] = 343188499;
inp[9999] = 0;
inp[10000] = 337867855;
inp[10001] = 0;
inp[10002] = 332629699;
inp[10003] = 0;
inp[10004] = 327472754;
inp[10005] = 0;
inp[10006] = 322395759;
inp[10007] = 0;
inp[10008] = 317397476;
inp[10009] = 0;
inp[10010] = 312476685;
inp[10011] = 0;
inp[10012] = 307632183;
inp[10013] = 0;
inp[10014] = 302862788;
inp[10015] = 0;
inp[10016] = 298167335;
inp[10017] = 0;
inp[10018] = 293544679;
inp[10019] = 0;
inp[10020] = 288993691;
inp[10021] = 0;
inp[10022] = 284513259;
inp[10023] = 0;
inp[10024] = 280102290;
inp[10025] = 0;
inp[10026] = 275759706;
inp[10027] = 0;
inp[10028] = 271484448;
inp[10029] = 0;
inp[10030] = 267275472;
inp[10031] = 0;
inp[10032] = 263131750;
inp[10033] = 0;
inp[10034] = 259052270;
inp[10035] = 0;
inp[10036] = 255036037;
inp[10037] = 0;
inp[10038] = 251082070;
inp[10039] = 0;
inp[10040] = 247189403;
inp[10041] = 0;
inp[10042] = 243357087;
inp[10043] = 0;
inp[10044] = 239584185;
inp[10045] = 0;
inp[10046] = 235869776;
inp[10047] = 0;
inp[10048] = 232212954;
inp[10049] = 0;
inp[10050] = 228612826;
inp[10051] = 0;
inp[10052] = 225068513;
inp[10053] = 0;
inp[10054] = 221579149;
inp[10055] = 0;
inp[10056] = 218143882;
inp[10057] = 0;
inp[10058] = 214761875;
inp[10059] = 0;
inp[10060] = 211432301;
inp[10061] = 0;
inp[10062] = 208154347;
inp[10063] = 0;
inp[10064] = 204927213;
inp[10065] = 0;
inp[10066] = 201750111;
inp[10067] = 0;
inp[10068] = 198622265;
inp[10069] = 0;
inp[10070] = 195542912;
inp[10071] = 0;
inp[10072] = 192511301;
inp[10073] = 0;
inp[10074] = 189526689;
inp[10075] = 0;
inp[10076] = 186588351;
inp[10077] = 0;
inp[10078] = 183695566;
inp[10079] = 0;
inp[10080] = 180847630;
inp[10081] = 0;
inp[10082] = 178043848;
inp[10083] = 0;
inp[10084] = 175283534;
inp[10085] = 0;
inp[10086] = 172566014;
inp[10087] = 0;
inp[10088] = 169890626;
inp[10089] = 0;
inp[10090] = 167256716;
inp[10091] = 0;
inp[10092] = 164663641;
inp[10093] = 0;
inp[10094] = 162110768;
inp[10095] = 0;
inp[10096] = 159597474;
inp[10097] = 0;
inp[10098] = 157123144;
inp[10099] = 0;
inp[10100] = 154687176;
inp[10101] = 0;
inp[10102] = 152288973;
inp[10103] = 0;
inp[10104] = 149927952;
inp[10105] = 0;
inp[10106] = 147603534;
inp[10107] = 0;
inp[10108] = 1073741824;
inp[10109] = 1073741824;
inp[10110] = 1065385898;
inp[10111] = 0;
inp[10112] = 1057094999;
inp[10113] = 0;
inp[10114] = 1048868621;
inp[10115] = 0;
inp[10116] = 1040706261;
inp[10117] = 0;
inp[10118] = 1032607420;
inp[10119] = 0;
inp[10120] = 1024571605;
inp[10121] = 0;
inp[10122] = 1016598326;
inp[10123] = 0;
inp[10124] = 1008687095;
inp[10125] = 0;
inp[10126] = 1000837430;
inp[10127] = 0;
inp[10128] = 993048851;
inp[10129] = 0;
inp[10130] = 985320884;
inp[10131] = 0;
inp[10132] = 977653056;
inp[10133] = 0;
inp[10134] = 970044899;
inp[10135] = 0;
inp[10136] = 962495950;
inp[10137] = 0;
inp[10138] = 955005747;
inp[10139] = 0;
inp[10140] = 947573833;
inp[10141] = 0;
inp[10142] = 940199755;
inp[10143] = 0;
inp[10144] = 932883063;
inp[10145] = 0;
inp[10146] = 925623309;
inp[10147] = 0;
inp[10148] = 918420051;
inp[10149] = 0;
inp[10150] = 911272850;
inp[10151] = 0;
inp[10152] = 904181268;
inp[10153] = 0;
inp[10154] = 897144874;
inp[10155] = 0;
inp[10156] = 890163237;
inp[10157] = 0;
inp[10158] = 883235932;
inp[10159] = 0;
inp[10160] = 876362535;
inp[10161] = 0;
inp[10162] = 869542628;
inp[10163] = 0;
inp[10164] = 862775793;
inp[10165] = 0;
inp[10166] = 856061619;
inp[10167] = 0;
inp[10168] = 849399695;
inp[10169] = 0;
inp[10170] = 842789614;
inp[10171] = 0;
inp[10172] = 836230973;
inp[10173] = 0;
inp[10174] = 829723372;
inp[10175] = 0;
inp[10176] = 823266413;
inp[10177] = 0;
inp[10178] = 816859703;
inp[10179] = 0;
inp[10180] = 810502851;
inp[10181] = 0;
inp[10182] = 804195467;
inp[10183] = 0;
inp[10184] = 797937169;
inp[10185] = 0;
inp[10186] = 791727572;
inp[10187] = 0;
inp[10188] = 785566299;
inp[10189] = 0;
inp[10190] = 779452974;
inp[10191] = 0;
inp[10192] = 773387223;
inp[10193] = 0;
inp[10194] = 767368676;
inp[10195] = 0;
inp[10196] = 761396965;
inp[10197] = 0;
inp[10198] = 755471727;
inp[10199] = 0;
inp[10200] = 749592599;
inp[10201] = 0;
inp[10202] = 743759224;
inp[10203] = 0;
inp[10204] = 737971243;
inp[10205] = 0;
inp[10206] = 732228306;
inp[10207] = 0;
inp[10208] = 726530060;
inp[10209] = 0;
inp[10210] = 720876158;
inp[10211] = 0;
inp[10212] = 715266255;
inp[10213] = 0;
inp[10214] = 709700009;
inp[10215] = 0;
inp[10216] = 704177080;
inp[10217] = 0;
inp[10218] = 698697130;
inp[10219] = 0;
inp[10220] = 693259826;
inp[10221] = 0;
inp[10222] = 687864835;
inp[10223] = 0;
inp[10224] = 682511829;
inp[10225] = 0;
inp[10226] = 677200479;
inp[10227] = 0;
inp[10228] = 671930463;
inp[10229] = 0;
inp[10230] = 666701459;
inp[10231] = 0;
inp[10232] = 661513147;
inp[10233] = 0;
inp[10234] = 656365211;
inp[10235] = 0;
inp[10236] = 651257336;
inp[10237] = 0;
inp[10238] = 646189212;
inp[10239] = 0;
inp[10240] = 641160527;
inp[10241] = 0;
inp[10242] = 636170976;
inp[10243] = 0;
inp[10244] = 631220255;
inp[10245] = 0;
inp[10246] = 626308060;
inp[10247] = 0;
inp[10248] = 621434092;
inp[10249] = 0;
inp[10250] = 616598053;
inp[10251] = 0;
inp[10252] = 611799649;
inp[10253] = 0;
inp[10254] = 607038586;
inp[10255] = 0;
inp[10256] = 602314575;
inp[10257] = 0;
inp[10258] = 597627325;
inp[10259] = 0;
inp[10260] = 592976553;
inp[10261] = 0;
inp[10262] = 588361972;
inp[10263] = 0;
inp[10264] = 583783303;
inp[10265] = 0;
inp[10266] = 579240266;
inp[10267] = 0;
inp[10268] = 574732582;
inp[10269] = 0;
inp[10270] = 570259978;
inp[10271] = 0;
inp[10272] = 565822179;
inp[10273] = 0;
inp[10274] = 561418916;
inp[10275] = 0;
inp[10276] = 557049919;
inp[10277] = 0;
inp[10278] = 552714923;
inp[10279] = 0;
inp[10280] = 548413661;
inp[10281] = 0;
inp[10282] = 544145872;
inp[10283] = 0;
inp[10284] = 539911295;
inp[10285] = 0;
inp[10286] = 535709672;
inp[10287] = 0;
inp[10288] = 531540746;
inp[10289] = 0;
inp[10290] = 527404264;
inp[10291] = 0;
inp[10292] = 523299971;
inp[10293] = 0;
inp[10294] = 519227618;
inp[10295] = 0;
inp[10296] = 515186957;
inp[10297] = 0;
inp[10298] = 511177740;
inp[10299] = 0;
inp[10300] = 507199723;
inp[10301] = 0;
inp[10302] = 503252664;
inp[10303] = 0;
inp[10304] = 499336321;
inp[10305] = 0;
inp[10306] = 495450454;
inp[10307] = 0;
inp[10308] = 491594828;
inp[10309] = 0;
inp[10310] = 487769207;
inp[10311] = 0;
inp[10312] = 483973357;
inp[10313] = 0;
inp[10314] = 480207047;
inp[10315] = 0;
inp[10316] = 476470046;
inp[10317] = 0;
inp[10318] = 472762126;
inp[10319] = 0;
inp[10320] = 469083062;
inp[10321] = 0;
inp[10322] = 465432629;
inp[10323] = 0;
inp[10324] = 461810603;
inp[10325] = 0;
inp[10326] = 458216765;
inp[10327] = 0;
inp[10328] = 454650894;
inp[10329] = 0;
inp[10330] = 451112772;
inp[10331] = 0;
inp[10332] = 447602185;
inp[10333] = 0;
inp[10334] = 444118917;
inp[10335] = 0;
inp[10336] = 440662756;
inp[10337] = 0;
inp[10338] = 437233491;
inp[10339] = 0;
inp[10340] = 433830913;
inp[10341] = 0;
inp[10342] = 430454814;
inp[10343] = 0;
inp[10344] = 427104988;
inp[10345] = 0;
inp[10346] = 423781231;
inp[10347] = 0;
inp[10348] = 420483339;
inp[10349] = 0;
inp[10350] = 417211112;
inp[10351] = 0;
inp[10352] = 413964349;
inp[10353] = 0;
inp[10354] = 410742853;
inp[10355] = 0;
inp[10356] = 407546427;
inp[10357] = 0;
inp[10358] = 404374876;
inp[10359] = 0;
inp[10360] = 401228005;
inp[10361] = 0;
inp[10362] = 398105624;
inp[10363] = 0;
inp[10364] = 1073741824;
inp[10365] = 1073741824;
inp[10366] = 1069555701;
inp[10367] = 0;
inp[10368] = 1065385898;
inp[10369] = 0;
inp[10370] = 1061232352;
inp[10371] = 0;
inp[10372] = 1057094999;
inp[10373] = 0;
inp[10374] = 1052973777;
inp[10375] = 0;
inp[10376] = 1048868621;
inp[10377] = 0;
inp[10378] = 1044779470;
inp[10379] = 0;
inp[10380] = 1040706261;
inp[10381] = 0;
inp[10382] = 1036648931;
inp[10383] = 0;
inp[10384] = 1032607420;
inp[10385] = 0;
inp[10386] = 1028581665;
inp[10387] = 0;
inp[10388] = 1024571605;
inp[10389] = 0;
inp[10390] = 1020577179;
inp[10391] = 0;
inp[10392] = 1016598326;
inp[10393] = 0;
inp[10394] = 1012634985;
inp[10395] = 0;
inp[10396] = 1008687095;
inp[10397] = 0;
inp[10398] = 1004754597;
inp[10399] = 0;
inp[10400] = 1000837430;
inp[10401] = 0;
inp[10402] = 996935534;
inp[10403] = 0;
inp[10404] = 993048851;
inp[10405] = 0;
inp[10406] = 989177321;
inp[10407] = 0;
inp[10408] = 985320884;
inp[10409] = 0;
inp[10410] = 981479482;
inp[10411] = 0;
inp[10412] = 977653056;
inp[10413] = 0;
inp[10414] = 973841548;
inp[10415] = 0;
inp[10416] = 970044899;
inp[10417] = 0;
inp[10418] = 966263053;
inp[10419] = 0;
inp[10420] = 962495950;
inp[10421] = 0;
inp[10422] = 958743534;
inp[10423] = 0;
inp[10424] = 955005747;
inp[10425] = 0;
inp[10426] = 951282532;
inp[10427] = 0;
inp[10428] = 947573833;
inp[10429] = 0;
inp[10430] = 943879593;
inp[10431] = 0;
inp[10432] = 940199755;
inp[10433] = 0;
inp[10434] = 936534264;
inp[10435] = 0;
inp[10436] = 932883063;
inp[10437] = 0;
inp[10438] = 929246096;
inp[10439] = 0;
inp[10440] = 925623309;
inp[10441] = 0;
inp[10442] = 922014646;
inp[10443] = 0;
inp[10444] = 918420051;
inp[10445] = 0;
inp[10446] = 914839471;
inp[10447] = 0;
inp[10448] = 911272850;
inp[10449] = 0;
inp[10450] = 907720134;
inp[10451] = 0;
inp[10452] = 904181268;
inp[10453] = 0;
inp[10454] = 900656200;
inp[10455] = 0;
inp[10456] = 897144874;
inp[10457] = 0;
inp[10458] = 893647237;
inp[10459] = 0;
inp[10460] = 890163237;
inp[10461] = 0;
inp[10462] = 886692819;
inp[10463] = 0;
inp[10464] = 883235932;
inp[10465] = 0;
inp[10466] = 879792521;
inp[10467] = 0;
inp[10468] = 876362535;
inp[10469] = 0;
inp[10470] = 872945921;
inp[10471] = 0;
inp[10472] = 869542628;
inp[10473] = 0;
inp[10474] = 866152602;
inp[10475] = 0;
inp[10476] = 862775793;
inp[10477] = 0;
inp[10478] = 859412149;
inp[10479] = 0;
inp[10480] = 856061619;
inp[10481] = 0;
inp[10482] = 852724151;
inp[10483] = 0;
inp[10484] = 849399695;
inp[10485] = 0;
inp[10486] = 846088199;
inp[10487] = 0;
inp[10488] = 842789614;
inp[10489] = 0;
inp[10490] = 839503888;
inp[10491] = 0;
inp[10492] = 836230973;
inp[10493] = 0;
inp[10494] = 832970817;
inp[10495] = 0;
inp[10496] = 829723372;
inp[10497] = 0;
inp[10498] = 826488587;
inp[10499] = 0;
inp[10500] = 823266413;
inp[10501] = 0;
inp[10502] = 820056802;
inp[10503] = 0;
inp[10504] = 816859703;
inp[10505] = 0;
inp[10506] = 813675069;
inp[10507] = 0;
inp[10508] = 810502851;
inp[10509] = 0;
inp[10510] = 807342999;
inp[10511] = 0;
inp[10512] = 804195467;
inp[10513] = 0;
inp[10514] = 801060206;
inp[10515] = 0;
inp[10516] = 797937169;
inp[10517] = 0;
inp[10518] = 794826306;
inp[10519] = 0;
inp[10520] = 791727572;
inp[10521] = 0;
inp[10522] = 788640919;
inp[10523] = 0;
inp[10524] = 785566299;
inp[10525] = 0;
inp[10526] = 782503667;
inp[10527] = 0;
inp[10528] = 779452974;
inp[10529] = 0;
inp[10530] = 776414175;
inp[10531] = 0;
inp[10532] = 773387223;
inp[10533] = 0;
inp[10534] = 770372072;
inp[10535] = 0;
inp[10536] = 767368676;
inp[10537] = 0;
inp[10538] = 764376989;
inp[10539] = 0;
inp[10540] = 761396965;
inp[10541] = 0;
inp[10542] = 758428560;
inp[10543] = 0;
inp[10544] = 755471727;
inp[10545] = 0;
inp[10546] = 752526422;
inp[10547] = 0;
inp[10548] = 749592599;
inp[10549] = 0;
inp[10550] = 746670215;
inp[10551] = 0;
inp[10552] = 743759224;
inp[10553] = 0;
inp[10554] = 740859581;
inp[10555] = 0;
inp[10556] = 737971243;
inp[10557] = 0;
inp[10558] = 735094166;
inp[10559] = 0;
inp[10560] = 732228306;
inp[10561] = 0;
inp[10562] = 729373618;
inp[10563] = 0;
inp[10564] = 726530060;
inp[10565] = 0;
inp[10566] = 723697587;
inp[10567] = 0;
inp[10568] = 720876158;
inp[10569] = 0;
inp[10570] = 718065728;
inp[10571] = 0;
inp[10572] = 715266255;
inp[10573] = 0;
inp[10574] = 712477696;
inp[10575] = 0;
inp[10576] = 709700009;
inp[10577] = 0;
inp[10578] = 706933151;
inp[10579] = 0;
inp[10580] = 704177080;
inp[10581] = 0;
inp[10582] = 701431753;
inp[10583] = 0;
inp[10584] = 698697130;
inp[10585] = 0;
inp[10586] = 695973168;
inp[10587] = 0;
inp[10588] = 693259826;
inp[10589] = 0;
inp[10590] = 690557062;
inp[10591] = 0;
inp[10592] = 687864835;
inp[10593] = 0;
inp[10594] = 685183104;
inp[10595] = 0;
inp[10596] = 682511829;
inp[10597] = 0;
inp[10598] = 679850967;
inp[10599] = 0;
inp[10600] = 677200479;
inp[10601] = 0;
inp[10602] = 674560325;
inp[10603] = 0;
inp[10604] = 671930463;
inp[10605] = 0;
inp[10606] = 669310855;
inp[10607] = 0;
inp[10608] = 666701459;
inp[10609] = 0;
inp[10610] = 664102236;
inp[10611] = 0;
inp[10612] = 661513147;
inp[10613] = 0;
inp[10614] = 658934152;
inp[10615] = 0;
inp[10616] = 656365211;
inp[10617] = 0;
inp[10618] = 653806286;
inp[10619] = 0;
inp[10620] = 1073741824;
inp[10621] = 1073741824;
inp[10622] = 1071646718;
inp[10623] = 0;
inp[10624] = 1069555701;
inp[10625] = 0;
inp[10626] = 1067468764;
inp[10627] = 0;
inp[10628] = 1065385898;
inp[10629] = 0;
inp[10630] = 1063307097;
inp[10631] = 0;
inp[10632] = 1061232352;
inp[10633] = 0;
inp[10634] = 1059161656;
inp[10635] = 0;
inp[10636] = 1057094999;
inp[10637] = 0;
inp[10638] = 1055032376;
inp[10639] = 0;
inp[10640] = 1052973777;
inp[10641] = 0;
inp[10642] = 1050919194;
inp[10643] = 0;
inp[10644] = 1048868621;
inp[10645] = 0;
inp[10646] = 1046822049;
inp[10647] = 0;
inp[10648] = 1044779470;
inp[10649] = 0;
inp[10650] = 1042740876;
inp[10651] = 0;
inp[10652] = 1040706261;
inp[10653] = 0;
inp[10654] = 1038675615;
inp[10655] = 0;
inp[10656] = 1036648931;
inp[10657] = 0;
inp[10658] = 1034626202;
inp[10659] = 0;
inp[10660] = 1032607420;
inp[10661] = 0;
inp[10662] = 1030592577;
inp[10663] = 0;
inp[10664] = 1028581665;
inp[10665] = 0;
inp[10666] = 1026574677;
inp[10667] = 0;
inp[10668] = 1024571605;
inp[10669] = 0;
inp[10670] = 1022572442;
inp[10671] = 0;
inp[10672] = 1020577179;
inp[10673] = 0;
inp[10674] = 1018585810;
inp[10675] = 0;
inp[10676] = 1016598326;
inp[10677] = 0;
inp[10678] = 1014614720;
inp[10679] = 0;
inp[10680] = 1012634985;
inp[10681] = 0;
inp[10682] = 1010659112;
inp[10683] = 0;
inp[10684] = 1008687095;
inp[10685] = 0;
inp[10686] = 1006718926;
inp[10687] = 0;
inp[10688] = 1004754597;
inp[10689] = 0;
inp[10690] = 1002794101;
inp[10691] = 0;
inp[10692] = 1000837430;
inp[10693] = 0;
inp[10694] = 998884577;
inp[10695] = 0;
inp[10696] = 996935534;
inp[10697] = 0;
inp[10698] = 994990295;
inp[10699] = 0;
inp[10700] = 993048851;
inp[10701] = 0;
inp[10702] = 991111195;
inp[10703] = 0;
inp[10704] = 989177321;
inp[10705] = 0;
inp[10706] = 987247219;
inp[10707] = 0;
inp[10708] = 985320884;
inp[10709] = 0;
inp[10710] = 983398307;
inp[10711] = 0;
inp[10712] = 981479482;
inp[10713] = 0;
inp[10714] = 979564400;
inp[10715] = 0;
inp[10716] = 977653056;
inp[10717] = 0;
inp[10718] = 975745441;
inp[10719] = 0;
inp[10720] = 973841548;
inp[10721] = 0;
inp[10722] = 971941370;
inp[10723] = 0;
inp[10724] = 970044899;
inp[10725] = 0;
inp[10726] = 968152129;
inp[10727] = 0;
inp[10728] = 966263053;
inp[10729] = 0;
inp[10730] = 964377662;
inp[10731] = 0;
inp[10732] = 962495950;
inp[10733] = 0;
inp[10734] = 960617910;
inp[10735] = 0;
inp[10736] = 958743534;
inp[10737] = 0;
inp[10738] = 956872815;
inp[10739] = 0;
inp[10740] = 955005747;
inp[10741] = 0;
inp[10742] = 953142322;
inp[10743] = 0;
inp[10744] = 951282532;
inp[10745] = 0;
inp[10746] = 949426372;
inp[10747] = 0;
inp[10748] = 947573833;
inp[10749] = 0;
inp[10750] = 945724909;
inp[10751] = 0;
inp[10752] = 943879593;
inp[10753] = 0;
inp[10754] = 942037877;
inp[10755] = 0;
inp[10756] = 940199755;
inp[10757] = 0;
inp[10758] = 938365220;
inp[10759] = 0;
inp[10760] = 936534264;
inp[10761] = 0;
inp[10762] = 934706880;
inp[10763] = 0;
inp[10764] = 932883063;
inp[10765] = 0;
inp[10766] = 931062804;
inp[10767] = 0;
inp[10768] = 929246096;
inp[10769] = 0;
inp[10770] = 927432934;
inp[10771] = 0;
inp[10772] = 925623309;
inp[10773] = 0;
inp[10774] = 923817215;
inp[10775] = 0;
inp[10776] = 922014646;
inp[10777] = 0;
inp[10778] = 920215593;
inp[10779] = 0;
inp[10780] = 918420051;
inp[10781] = 0;
inp[10782] = 916628013;
inp[10783] = 0;
inp[10784] = 914839471;
inp[10785] = 0;
inp[10786] = 913054419;
inp[10787] = 0;
inp[10788] = 911272850;
inp[10789] = 0;
inp[10790] = 909494757;
inp[10791] = 0;
inp[10792] = 907720134;
inp[10793] = 0;
inp[10794] = 905948973;
inp[10795] = 0;
inp[10796] = 904181268;
inp[10797] = 0;
inp[10798] = 902417013;
inp[10799] = 0;
inp[10800] = 900656200;
inp[10801] = 0;
inp[10802] = 898898822;
inp[10803] = 0;
inp[10804] = 897144874;
inp[10805] = 0;
inp[10806] = 895394348;
inp[10807] = 0;
inp[10808] = 893647237;
inp[10809] = 0;
inp[10810] = 891903536;
inp[10811] = 0;
inp[10812] = 890163237;
inp[10813] = 0;
inp[10814] = 888426334;
inp[10815] = 0;
inp[10816] = 886692819;
inp[10817] = 0;
inp[10818] = 884962688;
inp[10819] = 0;
inp[10820] = 883235932;
inp[10821] = 0;
inp[10822] = 881512545;
inp[10823] = 0;
inp[10824] = 879792521;
inp[10825] = 0;
inp[10826] = 878075853;
inp[10827] = 0;
inp[10828] = 876362535;
inp[10829] = 0;
inp[10830] = 874652560;
inp[10831] = 0;
inp[10832] = 872945921;
inp[10833] = 0;
inp[10834] = 871242613;
inp[10835] = 0;
inp[10836] = 869542628;
inp[10837] = 0;
inp[10838] = 867845960;
inp[10839] = 0;
inp[10840] = 866152602;
inp[10841] = 0;
inp[10842] = 864462549;
inp[10843] = 0;
inp[10844] = 862775793;
inp[10845] = 0;
inp[10846] = 861092329;
inp[10847] = 0;
inp[10848] = 859412149;
inp[10849] = 0;
inp[10850] = 857735248;
inp[10851] = 0;
inp[10852] = 856061619;
inp[10853] = 0;
inp[10854] = 854391255;
inp[10855] = 0;
inp[10856] = 852724151;
inp[10857] = 0;
inp[10858] = 851060299;
inp[10859] = 0;
inp[10860] = 849399695;
inp[10861] = 0;
inp[10862] = 847742330;
inp[10863] = 0;
inp[10864] = 846088199;
inp[10865] = 0;
inp[10866] = 844437296;
inp[10867] = 0;
inp[10868] = 842789614;
inp[10869] = 0;
inp[10870] = 841145147;
inp[10871] = 0;
inp[10872] = 839503888;
inp[10873] = 0;
inp[10874] = 837865832;
inp[10875] = 0;
inp[10876] = 1073741824;
inp[10877] = 1073741824;
inp[10878] = 1072693759;
inp[10879] = 0;
inp[10880] = 1071646718;
inp[10881] = 0;
inp[10882] = 1070600699;
inp[10883] = 0;
inp[10884] = 1069555701;
inp[10885] = 0;
inp[10886] = 1068511723;
inp[10887] = 0;
inp[10888] = 1067468764;
inp[10889] = 0;
inp[10890] = 1066426822;
inp[10891] = 0;
inp[10892] = 1065385898;
inp[10893] = 0;
inp[10894] = 1064345990;
inp[10895] = 0;
inp[10896] = 1063307097;
inp[10897] = 0;
inp[10898] = 1062269218;
inp[10899] = 0;
inp[10900] = 1061232352;
inp[10901] = 0;
inp[10902] = 1060196498;
inp[10903] = 0;
inp[10904] = 1059161656;
inp[10905] = 0;
inp[10906] = 1058127823;
inp[10907] = 0;
inp[10908] = 1057094999;
inp[10909] = 0;
inp[10910] = 1056063184;
inp[10911] = 0;
inp[10912] = 1055032376;
inp[10913] = 0;
inp[10914] = 1054002574;
inp[10915] = 0;
inp[10916] = 1052973777;
inp[10917] = 0;
inp[10918] = 1051945984;
inp[10919] = 0;
inp[10920] = 1050919194;
inp[10921] = 0;
inp[10922] = 1049893407;
inp[10923] = 0;
inp[10924] = 1048868621;
inp[10925] = 0;
inp[10926] = 1047844835;
inp[10927] = 0;
inp[10928] = 1046822049;
inp[10929] = 0;
inp[10930] = 1045800261;
inp[10931] = 0;
inp[10932] = 1044779470;
inp[10933] = 0;
inp[10934] = 1043759675;
inp[10935] = 0;
inp[10936] = 1042740876;
inp[10937] = 0;
inp[10938] = 1041723072;
inp[10939] = 0;
inp[10940] = 1040706261;
inp[10941] = 0;
inp[10942] = 1039690442;
inp[10943] = 0;
inp[10944] = 1038675615;
inp[10945] = 0;
inp[10946] = 1037661778;
inp[10947] = 0;
inp[10948] = 1036648931;
inp[10949] = 0;
inp[10950] = 1035637073;
inp[10951] = 0;
inp[10952] = 1034626202;
inp[10953] = 0;
inp[10954] = 1033616318;
inp[10955] = 0;
inp[10956] = 1032607420;
inp[10957] = 0;
inp[10958] = 1031599507;
inp[10959] = 0;
inp[10960] = 1030592577;
inp[10961] = 0;
inp[10962] = 1029586630;
inp[10963] = 0;
inp[10964] = 1028581665;
inp[10965] = 0;
inp[10966] = 1027577681;
inp[10967] = 0;
inp[10968] = 1026574677;
inp[10969] = 0;
inp[10970] = 1025572652;
inp[10971] = 0;
inp[10972] = 1024571605;
inp[10973] = 0;
inp[10974] = 1023571536;
inp[10975] = 0;
inp[10976] = 1022572442;
inp[10977] = 0;
inp[10978] = 1021574324;
inp[10979] = 0;
inp[10980] = 1020577179;
inp[10981] = 0;
inp[10982] = 1019581008;
inp[10983] = 0;
inp[10984] = 1018585810;
inp[10985] = 0;
inp[10986] = 1017591583;
inp[10987] = 0;
inp[10988] = 1016598326;
inp[10989] = 0;
inp[10990] = 1015606039;
inp[10991] = 0;
inp[10992] = 1014614720;
inp[10993] = 0;
inp[10994] = 1013624369;
inp[10995] = 0;
inp[10996] = 1012634985;
inp[10997] = 0;
inp[10998] = 1011646566;
inp[10999] = 0;
inp[11000] = 1010659112;
inp[11001] = 0;
inp[11002] = 1009672622;
inp[11003] = 0;
inp[11004] = 1008687095;
inp[11005] = 0;
inp[11006] = 1007702530;
inp[11007] = 0;
inp[11008] = 1006718926;
inp[11009] = 0;
inp[11010] = 1005736282;
inp[11011] = 0;
inp[11012] = 1004754597;
inp[11013] = 0;
inp[11014] = 1003773870;
inp[11015] = 0;
inp[11016] = 1002794101;
inp[11017] = 0;
inp[11018] = 1001815287;
inp[11019] = 0;
inp[11020] = 1000837430;
inp[11021] = 0;
inp[11022] = 999860527;
inp[11023] = 0;
inp[11024] = 998884577;
inp[11025] = 0;
inp[11026] = 997909580;
inp[11027] = 0;
inp[11028] = 996935534;
inp[11029] = 0;
inp[11030] = 995962440;
inp[11031] = 0;
inp[11032] = 994990295;
inp[11033] = 0;
inp[11034] = 994019099;
inp[11035] = 0;
inp[11036] = 993048851;
inp[11037] = 0;
inp[11038] = 992079550;
inp[11039] = 0;
inp[11040] = 991111195;
inp[11041] = 0;
inp[11042] = 990143786;
inp[11043] = 0;
inp[11044] = 989177321;
inp[11045] = 0;
inp[11046] = 988211799;
inp[11047] = 0;
inp[11048] = 987247219;
inp[11049] = 0;
inp[11050] = 986283581;
inp[11051] = 0;
inp[11052] = 985320884;
inp[11053] = 0;
inp[11054] = 984359126;
inp[11055] = 0;
inp[11056] = 983398307;
inp[11057] = 0;
inp[11058] = 982438426;
inp[11059] = 0;
inp[11060] = 981479482;
inp[11061] = 0;
inp[11062] = 980521473;
inp[11063] = 0;
inp[11064] = 979564400;
inp[11065] = 0;
inp[11066] = 978608261;
inp[11067] = 0;
inp[11068] = 977653056;
inp[11069] = 0;
inp[11070] = 976698782;
inp[11071] = 0;
inp[11072] = 975745441;
inp[11073] = 0;
inp[11074] = 974793029;
inp[11075] = 0;
inp[11076] = 973841548;
inp[11077] = 0;
inp[11078] = 972890995;
inp[11079] = 0;
inp[11080] = 971941370;
inp[11081] = 0;
inp[11082] = 970992671;
inp[11083] = 0;
inp[11084] = 970044899;
inp[11085] = 0;
inp[11086] = 969098052;
inp[11087] = 0;
inp[11088] = 968152129;
inp[11089] = 0;
inp[11090] = 967207130;
inp[11091] = 0;
inp[11092] = 966263053;
inp[11093] = 0;
inp[11094] = 965319897;
inp[11095] = 0;
inp[11096] = 964377662;
inp[11097] = 0;
inp[11098] = 963436347;
inp[11099] = 0;
inp[11100] = 962495950;
inp[11101] = 0;
inp[11102] = 961556471;
inp[11103] = 0;
inp[11104] = 960617910;
inp[11105] = 0;
inp[11106] = 959680264;
inp[11107] = 0;
inp[11108] = 958743534;
inp[11109] = 0;
inp[11110] = 957807718;
inp[11111] = 0;
inp[11112] = 956872815;
inp[11113] = 0;
inp[11114] = 955938825;
inp[11115] = 0;
inp[11116] = 955005747;
inp[11117] = 0;
inp[11118] = 954073579;
inp[11119] = 0;
inp[11120] = 953142322;
inp[11121] = 0;
inp[11122] = 952211973;
inp[11123] = 0;
inp[11124] = 951282532;
inp[11125] = 0;
inp[11126] = 950353999;
inp[11127] = 0;
inp[11128] = 949426372;
inp[11129] = 0;
inp[11130] = 948499650;
inp[11131] = 0;
inp[11132] = 1073741824;
inp[11133] = 1073741824;
inp[11134] = 1073217663;
inp[11135] = 0;
inp[11136] = 1072693759;
inp[11137] = 0;
inp[11138] = 1072170111;
inp[11139] = 0;
inp[11140] = 1071646718;
inp[11141] = 0;
inp[11142] = 1071123581;
inp[11143] = 0;
inp[11144] = 1070600699;
inp[11145] = 0;
inp[11146] = 1070078072;
inp[11147] = 0;
inp[11148] = 1069555701;
inp[11149] = 0;
inp[11150] = 1069033584;
inp[11151] = 0;
inp[11152] = 1068511723;
inp[11153] = 0;
inp[11154] = 1067990116;
inp[11155] = 0;
inp[11156] = 1067468764;
inp[11157] = 0;
inp[11158] = 1066947666;
inp[11159] = 0;
inp[11160] = 1066426822;
inp[11161] = 0;
inp[11162] = 1065906233;
inp[11163] = 0;
inp[11164] = 1065385898;
inp[11165] = 0;
inp[11166] = 1064865817;
inp[11167] = 0;
inp[11168] = 1064345990;
inp[11169] = 0;
inp[11170] = 1063826417;
inp[11171] = 0;
inp[11172] = 1063307097;
inp[11173] = 0;
inp[11174] = 1062788031;
inp[11175] = 0;
inp[11176] = 1062269218;
inp[11177] = 0;
inp[11178] = 1061750659;
inp[11179] = 0;
inp[11180] = 1061232352;
inp[11181] = 0;
inp[11182] = 1060714299;
inp[11183] = 0;
inp[11184] = 1060196498;
inp[11185] = 0;
inp[11186] = 1059678951;
inp[11187] = 0;
inp[11188] = 1059161656;
inp[11189] = 0;
inp[11190] = 1058644613;
inp[11191] = 0;
inp[11192] = 1058127823;
inp[11193] = 0;
inp[11194] = 1057611285;
inp[11195] = 0;
inp[11196] = 1057094999;
inp[11197] = 0;
inp[11198] = 1056578966;
inp[11199] = 0;
inp[11200] = 1056063184;
inp[11201] = 0;
inp[11202] = 1055547654;
inp[11203] = 0;
inp[11204] = 1055032376;
inp[11205] = 0;
inp[11206] = 1054517349;
inp[11207] = 0;
inp[11208] = 1054002574;
inp[11209] = 0;
inp[11210] = 1053488050;
inp[11211] = 0;
inp[11212] = 1052973777;
inp[11213] = 0;
inp[11214] = 1052459755;
inp[11215] = 0;
inp[11216] = 1051945984;
inp[11217] = 0;
inp[11218] = 1051432464;
inp[11219] = 0;
inp[11220] = 1050919194;
inp[11221] = 0;
inp[11222] = 1050406175;
inp[11223] = 0;
inp[11224] = 1049893407;
inp[11225] = 0;
inp[11226] = 1049380889;
inp[11227] = 0;
inp[11228] = 1048868621;
inp[11229] = 0;
inp[11230] = 1048356603;
inp[11231] = 0;
inp[11232] = 1047844835;
inp[11233] = 0;
inp[11234] = 1047333317;
inp[11235] = 0;
inp[11236] = 1046822049;
inp[11237] = 0;
inp[11238] = 1046311030;
inp[11239] = 0;
inp[11240] = 1045800261;
inp[11241] = 0;
inp[11242] = 1045289741;
inp[11243] = 0;
inp[11244] = 1044779470;
inp[11245] = 0;
inp[11246] = 1044269448;
inp[11247] = 0;
inp[11248] = 1043759675;
inp[11249] = 0;
inp[11250] = 1043250151;
inp[11251] = 0;
inp[11252] = 1042740876;
inp[11253] = 0;
inp[11254] = 1042231850;
inp[11255] = 0;
inp[11256] = 1041723072;
inp[11257] = 0;
inp[11258] = 1041214542;
inp[11259] = 0;
inp[11260] = 1040706261;
inp[11261] = 0;
inp[11262] = 1040198227;
inp[11263] = 0;
inp[11264] = 1039690442;
inp[11265] = 0;
inp[11266] = 1039182905;
inp[11267] = 0;
inp[11268] = 1038675615;
inp[11269] = 0;
inp[11270] = 1038168573;
inp[11271] = 0;
inp[11272] = 1037661778;
inp[11273] = 0;
inp[11274] = 1037155231;
inp[11275] = 0;
inp[11276] = 1036648931;
inp[11277] = 0;
inp[11278] = 1036142879;
inp[11279] = 0;
inp[11280] = 1035637073;
inp[11281] = 0;
inp[11282] = 1035131514;
inp[11283] = 0;
inp[11284] = 1034626202;
inp[11285] = 0;
inp[11286] = 1034121137;
inp[11287] = 0;
inp[11288] = 1033616318;
inp[11289] = 0;
inp[11290] = 1033111746;
inp[11291] = 0;
inp[11292] = 1032607420;
inp[11293] = 0;
inp[11294] = 1032103340;
inp[11295] = 0;
inp[11296] = 1031599507;
inp[11297] = 0;
inp[11298] = 1031095919;
inp[11299] = 0;
inp[11300] = 1030592577;
inp[11301] = 0;
inp[11302] = 1030089481;
inp[11303] = 0;
inp[11304] = 1029586630;
inp[11305] = 0;
inp[11306] = 1029084025;
inp[11307] = 0;
inp[11308] = 1028581665;
inp[11309] = 0;
inp[11310] = 1028079551;
inp[11311] = 0;
inp[11312] = 1027577681;
inp[11313] = 0;
inp[11314] = 1027076057;
inp[11315] = 0;
inp[11316] = 1026574677;
inp[11317] = 0;
inp[11318] = 1026073543;
inp[11319] = 0;
inp[11320] = 1025572652;
inp[11321] = 0;
inp[11322] = 1025072007;
inp[11323] = 0;
inp[11324] = 1024571605;
inp[11325] = 0;
inp[11326] = 1024071449;
inp[11327] = 0;
inp[11328] = 1023571536;
inp[11329] = 0;
inp[11330] = 1023071867;
inp[11331] = 0;
inp[11332] = 1022572442;
inp[11333] = 0;
inp[11334] = 1022073261;
inp[11335] = 0;
inp[11336] = 1021574324;
inp[11337] = 0;
inp[11338] = 1021075630;
inp[11339] = 0;
inp[11340] = 1020577179;
inp[11341] = 0;
inp[11342] = 1020078972;
inp[11343] = 0;
inp[11344] = 1019581008;
inp[11345] = 0;
inp[11346] = 1019083288;
inp[11347] = 0;
inp[11348] = 1018585810;
inp[11349] = 0;
inp[11350] = 1018088575;
inp[11351] = 0;
inp[11352] = 1017591583;
inp[11353] = 0;
inp[11354] = 1017094833;
inp[11355] = 0;
inp[11356] = 1016598326;
inp[11357] = 0;
inp[11358] = 1016102061;
inp[11359] = 0;
inp[11360] = 1015606039;
inp[11361] = 0;
inp[11362] = 1015110258;
inp[11363] = 0;
inp[11364] = 1014614720;
inp[11365] = 0;
inp[11366] = 1014119424;
inp[11367] = 0;
inp[11368] = 1013624369;
inp[11369] = 0;
inp[11370] = 1013129556;
inp[11371] = 0;
inp[11372] = 1012634985;
inp[11373] = 0;
inp[11374] = 1012140655;
inp[11375] = 0;
inp[11376] = 1011646566;
inp[11377] = 0;
inp[11378] = 1011152719;
inp[11379] = 0;
inp[11380] = 1010659112;
inp[11381] = 0;
inp[11382] = 1010165747;
inp[11383] = 0;
inp[11384] = 1009672622;
inp[11385] = 0;
inp[11386] = 1009179738;
inp[11387] = 0;
inp[11388] = 1073741824;
inp[11389] = 1073741824;
inp[11390] = 1073479711;
inp[11391] = 0;
inp[11392] = 1073217663;
inp[11393] = 0;
inp[11394] = 1072955679;
inp[11395] = 0;
inp[11396] = 1072693759;
inp[11397] = 0;
inp[11398] = 1072431903;
inp[11399] = 0;
inp[11400] = 1072170111;
inp[11401] = 0;
inp[11402] = 1071908383;
inp[11403] = 0;
inp[11404] = 1071646718;
inp[11405] = 0;
inp[11406] = 1071385118;
inp[11407] = 0;
inp[11408] = 1071123581;
inp[11409] = 0;
inp[11410] = 1070862108;
inp[11411] = 0;
inp[11412] = 1070600699;
inp[11413] = 0;
inp[11414] = 1070339354;
inp[11415] = 0;
inp[11416] = 1070078072;
inp[11417] = 0;
inp[11418] = 1069816855;
inp[11419] = 0;
inp[11420] = 1069555701;
inp[11421] = 0;
inp[11422] = 1069294611;
inp[11423] = 0;
inp[11424] = 1069033584;
inp[11425] = 0;
inp[11426] = 1068772622;
inp[11427] = 0;
inp[11428] = 1068511723;
inp[11429] = 0;
inp[11430] = 1068250887;
inp[11431] = 0;
inp[11432] = 1067990116;
inp[11433] = 0;
inp[11434] = 1067729408;
inp[11435] = 0;
inp[11436] = 1067468764;
inp[11437] = 0;
inp[11438] = 1067208183;
inp[11439] = 0;
inp[11440] = 1066947666;
inp[11441] = 0;
inp[11442] = 1066687212;
inp[11443] = 0;
inp[11444] = 1066426822;
inp[11445] = 0;
inp[11446] = 1066166496;
inp[11447] = 0;
inp[11448] = 1065906233;
inp[11449] = 0;
inp[11450] = 1065646034;
inp[11451] = 0;
inp[11452] = 1065385898;
inp[11453] = 0;
inp[11454] = 1065125826;
inp[11455] = 0;
inp[11456] = 1064865817;
inp[11457] = 0;
inp[11458] = 1064605872;
inp[11459] = 0;
inp[11460] = 1064345990;
inp[11461] = 0;
inp[11462] = 1064086172;
inp[11463] = 0;
inp[11464] = 1063826417;
inp[11465] = 0;
inp[11466] = 1063566725;
inp[11467] = 0;
inp[11468] = 1063307097;
inp[11469] = 0;
inp[11470] = 1063047532;
inp[11471] = 0;
inp[11472] = 1062788031;
inp[11473] = 0;
inp[11474] = 1062528593;
inp[11475] = 0;
inp[11476] = 1062269218;
inp[11477] = 0;
inp[11478] = 1062009907;
inp[11479] = 0;
inp[11480] = 1061750659;
inp[11481] = 0;
inp[11482] = 1061491474;
inp[11483] = 0;
inp[11484] = 1061232352;
inp[11485] = 0;
inp[11486] = 1060973294;
inp[11487] = 0;
inp[11488] = 1060714299;
inp[11489] = 0;
inp[11490] = 1060455367;
inp[11491] = 0;
inp[11492] = 1060196498;
inp[11493] = 0;
inp[11494] = 1059937693;
inp[11495] = 0;
inp[11496] = 1059678951;
inp[11497] = 0;
inp[11498] = 1059420272;
inp[11499] = 0;
inp[11500] = 1059161656;
inp[11501] = 0;
inp[11502] = 1058903103;
inp[11503] = 0;
inp[11504] = 1058644613;
inp[11505] = 0;
inp[11506] = 1058386187;
inp[11507] = 0;
inp[11508] = 1058127823;
inp[11509] = 0;
inp[11510] = 1057869523;
inp[11511] = 0;
inp[11512] = 1057611285;
inp[11513] = 0;
inp[11514] = 1057353111;
inp[11515] = 0;
inp[11516] = 1057094999;
inp[11517] = 0;
inp[11518] = 1056836951;
inp[11519] = 0;
inp[11520] = 1056578966;
inp[11521] = 0;
inp[11522] = 1056321043;
inp[11523] = 0;
inp[11524] = 1056063184;
inp[11525] = 0;
inp[11526] = 1055805388;
inp[11527] = 0;
inp[11528] = 1055547654;
inp[11529] = 0;
inp[11530] = 1055289983;
inp[11531] = 0;
inp[11532] = 1055032376;
inp[11533] = 0;
inp[11534] = 1054774831;
inp[11535] = 0;
inp[11536] = 1054517349;
inp[11537] = 0;
inp[11538] = 1054259930;
inp[11539] = 0;
inp[11540] = 1054002574;
inp[11541] = 0;
inp[11542] = 1053745280;
inp[11543] = 0;
inp[11544] = 1053488050;
inp[11545] = 0;
inp[11546] = 1053230882;
inp[11547] = 0;
inp[11548] = 1052973777;
inp[11549] = 0;
inp[11550] = 1052716734;
inp[11551] = 0;
inp[11552] = 1052459755;
inp[11553] = 0;
inp[11554] = 1052202838;
inp[11555] = 0;
inp[11556] = 1051945984;
inp[11557] = 0;
inp[11558] = 1051689192;
inp[11559] = 0;
inp[11560] = 1051432464;
inp[11561] = 0;
inp[11562] = 1051175798;
inp[11563] = 0;
inp[11564] = 1050919194;
inp[11565] = 0;
inp[11566] = 1050662654;
inp[11567] = 0;
inp[11568] = 1050406175;
inp[11569] = 0;
inp[11570] = 1050149760;
inp[11571] = 0;
inp[11572] = 1049893407;
inp[11573] = 0;
inp[11574] = 1049637117;
inp[11575] = 0;
inp[11576] = 1049380889;
inp[11577] = 0;
inp[11578] = 1049124724;
inp[11579] = 0;
inp[11580] = 1048868621;
inp[11581] = 0;
inp[11582] = 1048612581;
inp[11583] = 0;
inp[11584] = 1048356603;
inp[11585] = 0;
inp[11586] = 1048100688;
inp[11587] = 0;
inp[11588] = 1047844835;
inp[11589] = 0;
inp[11590] = 1047589045;
inp[11591] = 0;
inp[11592] = 1047333317;
inp[11593] = 0;
inp[11594] = 1047077652;
inp[11595] = 0;
inp[11596] = 1046822049;
inp[11597] = 0;
inp[11598] = 1046566508;
inp[11599] = 0;
inp[11600] = 1046311030;
inp[11601] = 0;
inp[11602] = 1046055614;
inp[11603] = 0;
inp[11604] = 1045800261;
inp[11605] = 0;
inp[11606] = 1045544969;
inp[11607] = 0;
inp[11608] = 1045289741;
inp[11609] = 0;
inp[11610] = 1045034574;
inp[11611] = 0;
inp[11612] = 1044779470;
inp[11613] = 0;
inp[11614] = 1044524428;
inp[11615] = 0;
inp[11616] = 1044269448;
inp[11617] = 0;
inp[11618] = 1044014531;
inp[11619] = 0;
inp[11620] = 1043759675;
inp[11621] = 0;
inp[11622] = 1043504882;
inp[11623] = 0;
inp[11624] = 1043250151;
inp[11625] = 0;
inp[11626] = 1042995483;
inp[11627] = 0;
inp[11628] = 1042740876;
inp[11629] = 0;
inp[11630] = 1042486332;
inp[11631] = 0;
inp[11632] = 1042231850;
inp[11633] = 0;
inp[11634] = 1041977430;
inp[11635] = 0;
inp[11636] = 1041723072;
inp[11637] = 0;
inp[11638] = 1041468776;
inp[11639] = 0;
inp[11640] = 1041214542;
inp[11641] = 0;
inp[11642] = 1040960370;
inp[11643] = 0;
inp[11644] = 1073741824;
inp[11645] = 1073741824;
inp[11646] = 1073610759;
inp[11647] = 0;
inp[11648] = 1073479711;
inp[11649] = 0;
inp[11650] = 1073348679;
inp[11651] = 0;
inp[11652] = 1073217663;
inp[11653] = 0;
inp[11654] = 1073086663;
inp[11655] = 0;
inp[11656] = 1072955679;
inp[11657] = 0;
inp[11658] = 1072824711;
inp[11659] = 0;
inp[11660] = 1072693759;
inp[11661] = 0;
inp[11662] = 1072562823;
inp[11663] = 0;
inp[11664] = 1072431903;
inp[11665] = 0;
inp[11666] = 1072300999;
inp[11667] = 0;
inp[11668] = 1072170111;
inp[11669] = 0;
inp[11670] = 1072039239;
inp[11671] = 0;
inp[11672] = 1071908383;
inp[11673] = 0;
inp[11674] = 1071777542;
inp[11675] = 0;
inp[11676] = 1071646718;
inp[11677] = 0;
inp[11678] = 1071515910;
inp[11679] = 0;
inp[11680] = 1071385118;
inp[11681] = 0;
inp[11682] = 1071254341;
inp[11683] = 0;
inp[11684] = 1071123581;
inp[11685] = 0;
inp[11686] = 1070992836;
inp[11687] = 0;
inp[11688] = 1070862108;
inp[11689] = 0;
inp[11690] = 1070731396;
inp[11691] = 0;
inp[11692] = 1070600699;
inp[11693] = 0;
inp[11694] = 1070470018;
inp[11695] = 0;
inp[11696] = 1070339354;
inp[11697] = 0;
inp[11698] = 1070208705;
inp[11699] = 0;
inp[11700] = 1070078072;
inp[11701] = 0;
inp[11702] = 1069947456;
inp[11703] = 0;
inp[11704] = 1069816855;
inp[11705] = 0;
inp[11706] = 1069686270;
inp[11707] = 0;
inp[11708] = 1069555701;
inp[11709] = 0;
inp[11710] = 1069425148;
inp[11711] = 0;
inp[11712] = 1069294611;
inp[11713] = 0;
inp[11714] = 1069164090;
inp[11715] = 0;
inp[11716] = 1069033584;
inp[11717] = 0;
inp[11718] = 1068903095;
inp[11719] = 0;
inp[11720] = 1068772622;
inp[11721] = 0;
inp[11722] = 1068642164;
inp[11723] = 0;
inp[11724] = 1068511723;
inp[11725] = 0;
inp[11726] = 1068381297;
inp[11727] = 0;
inp[11728] = 1068250887;
inp[11729] = 0;
inp[11730] = 1068120494;
inp[11731] = 0;
inp[11732] = 1067990116;
inp[11733] = 0;
inp[11734] = 1067859754;
inp[11735] = 0;
inp[11736] = 1067729408;
inp[11737] = 0;
inp[11738] = 1067599078;
inp[11739] = 0;
inp[11740] = 1067468764;
inp[11741] = 0;
inp[11742] = 1067338465;
inp[11743] = 0;
inp[11744] = 1067208183;
inp[11745] = 0;
inp[11746] = 1067077916;
inp[11747] = 0;
inp[11748] = 1066947666;
inp[11749] = 0;
inp[11750] = 1066817431;
inp[11751] = 0;
inp[11752] = 1066687212;
inp[11753] = 0;
inp[11754] = 1066557009;
inp[11755] = 0;
inp[11756] = 1066426822;
inp[11757] = 0;
inp[11758] = 1066296651;
inp[11759] = 0;
inp[11760] = 1066166496;
inp[11761] = 0;
inp[11762] = 1066036357;
inp[11763] = 0;
inp[11764] = 1065906233;
inp[11765] = 0;
inp[11766] = 1065776126;
inp[11767] = 0;
inp[11768] = 1065646034;
inp[11769] = 0;
inp[11770] = 1065515958;
inp[11771] = 0;
inp[11772] = 1065385898;
inp[11773] = 0;
inp[11774] = 1065255854;
inp[11775] = 0;
inp[11776] = 1065125826;
inp[11777] = 0;
inp[11778] = 1064995814;
inp[11779] = 0;
inp[11780] = 1064865817;
inp[11781] = 0;
inp[11782] = 1064735837;
inp[11783] = 0;
inp[11784] = 1064605872;
inp[11785] = 0;
inp[11786] = 1064475923;
inp[11787] = 0;
inp[11788] = 1064345990;
inp[11789] = 0;
inp[11790] = 1064216073;
inp[11791] = 0;
inp[11792] = 1064086172;
inp[11793] = 0;
inp[11794] = 1063956286;
inp[11795] = 0;
inp[11796] = 1063826417;
inp[11797] = 0;
inp[11798] = 1063696563;
inp[11799] = 0;
inp[11800] = 1063566725;
inp[11801] = 0;
inp[11802] = 1063436903;
inp[11803] = 0;
inp[11804] = 1063307097;
inp[11805] = 0;
inp[11806] = 1063177307;
inp[11807] = 0;
inp[11808] = 1063047532;
inp[11809] = 0;
inp[11810] = 1062917774;
inp[11811] = 0;
inp[11812] = 1062788031;
inp[11813] = 0;
inp[11814] = 1062658304;
inp[11815] = 0;
inp[11816] = 1062528593;
inp[11817] = 0;
inp[11818] = 1062398898;
inp[11819] = 0;
inp[11820] = 1062269218;
inp[11821] = 0;
inp[11822] = 1062139555;
inp[11823] = 0;
inp[11824] = 1062009907;
inp[11825] = 0;
inp[11826] = 1061880275;
inp[11827] = 0;
inp[11828] = 1061750659;
inp[11829] = 0;
inp[11830] = 1061621058;
inp[11831] = 0;
inp[11832] = 1061491474;
inp[11833] = 0;
inp[11834] = 1061361905;
inp[11835] = 0;
inp[11836] = 1061232352;
inp[11837] = 0;
inp[11838] = 1061102815;
inp[11839] = 0;
inp[11840] = 1060973294;
inp[11841] = 0;
inp[11842] = 1060843789;
inp[11843] = 0;
inp[11844] = 1060714299;
inp[11845] = 0;
inp[11846] = 1060584825;
inp[11847] = 0;
inp[11848] = 1060455367;
inp[11849] = 0;
inp[11850] = 1060325925;
inp[11851] = 0;
inp[11852] = 1060196498;
inp[11853] = 0;
inp[11854] = 1060067088;
inp[11855] = 0;
inp[11856] = 1059937693;
inp[11857] = 0;
inp[11858] = 1059808314;
inp[11859] = 0;
inp[11860] = 1059678951;
inp[11861] = 0;
inp[11862] = 1059549603;
inp[11863] = 0;
inp[11864] = 1059420272;
inp[11865] = 0;
inp[11866] = 1059290956;
inp[11867] = 0;
inp[11868] = 1059161656;
inp[11869] = 0;
inp[11870] = 1059032371;
inp[11871] = 0;
inp[11872] = 1058903103;
inp[11873] = 0;
inp[11874] = 1058773850;
inp[11875] = 0;
inp[11876] = 1058644613;
inp[11877] = 0;
inp[11878] = 1058515392;
inp[11879] = 0;
inp[11880] = 1058386187;
inp[11881] = 0;
inp[11882] = 1058256997;
inp[11883] = 0;
inp[11884] = 1058127823;
inp[11885] = 0;
inp[11886] = 1057998665;
inp[11887] = 0;
inp[11888] = 1057869523;
inp[11889] = 0;
inp[11890] = 1057740396;
inp[11891] = 0;
inp[11892] = 1057611285;
inp[11893] = 0;
inp[11894] = 1057482190;
inp[11895] = 0;
inp[11896] = 1057353111;
inp[11897] = 0;
inp[11898] = 1057224047;
inp[11899] = 0;
inp[11900] = 1073741824;
inp[11901] = 1073741824;
inp[11902] = 1073676289;
inp[11903] = 0;
inp[11904] = 1073610759;
inp[11905] = 0;
inp[11906] = 1073545233;
inp[11907] = 0;
inp[11908] = 1073479711;
inp[11909] = 0;
inp[11910] = 1073414193;
inp[11911] = 0;
inp[11912] = 1073348679;
inp[11913] = 0;
inp[11914] = 1073283169;
inp[11915] = 0;
inp[11916] = 1073217663;
inp[11917] = 0;
inp[11918] = 1073152161;
inp[11919] = 0;
inp[11920] = 1073086663;
inp[11921] = 0;
inp[11922] = 1073021169;
inp[11923] = 0;
inp[11924] = 1072955679;
inp[11925] = 0;
inp[11926] = 1072890193;
inp[11927] = 0;
inp[11928] = 1072824711;
inp[11929] = 0;
inp[11930] = 1072759233;
inp[11931] = 0;
inp[11932] = 1072693759;
inp[11933] = 0;
inp[11934] = 1072628289;
inp[11935] = 0;
inp[11936] = 1072562823;
inp[11937] = 0;
inp[11938] = 1072497361;
inp[11939] = 0;
inp[11940] = 1072431903;
inp[11941] = 0;
inp[11942] = 1072366449;
inp[11943] = 0;
inp[11944] = 1072300999;
inp[11945] = 0;
inp[11946] = 1072235553;
inp[11947] = 0;
inp[11948] = 1072170111;
inp[11949] = 0;
inp[11950] = 1072104673;
inp[11951] = 0;
inp[11952] = 1072039239;
inp[11953] = 0;
inp[11954] = 1071973809;
inp[11955] = 0;
inp[11956] = 1071908383;
inp[11957] = 0;
inp[11958] = 1071842961;
inp[11959] = 0;
inp[11960] = 1071777542;
inp[11961] = 0;
inp[11962] = 1071712128;
inp[11963] = 0;
inp[11964] = 1071646718;
inp[11965] = 0;
inp[11966] = 1071581312;
inp[11967] = 0;
inp[11968] = 1071515910;
inp[11969] = 0;
inp[11970] = 1071450512;
inp[11971] = 0;
inp[11972] = 1071385118;
inp[11973] = 0;
inp[11974] = 1071319727;
inp[11975] = 0;
inp[11976] = 1071254341;
inp[11977] = 0;
inp[11978] = 1071188959;
inp[11979] = 0;
inp[11980] = 1071123581;
inp[11981] = 0;
inp[11982] = 1071058207;
inp[11983] = 0;
inp[11984] = 1070992836;
inp[11985] = 0;
inp[11986] = 1070927470;
inp[11987] = 0;
inp[11988] = 1070862108;
inp[11989] = 0;
inp[11990] = 1070796750;
inp[11991] = 0;
inp[11992] = 1070731396;
inp[11993] = 0;
inp[11994] = 1070666045;
inp[11995] = 0;
inp[11996] = 1070600699;
inp[11997] = 0;
inp[11998] = 1070535357;
inp[11999] = 0;
inp[12000] = 1070470018;
inp[12001] = 0;
inp[12002] = 1070404684;
inp[12003] = 0;
inp[12004] = 1070339354;
inp[12005] = 0;
inp[12006] = 1070274027;
inp[12007] = 0;
inp[12008] = 1070208705;
inp[12009] = 0;
inp[12010] = 1070143387;
inp[12011] = 0;
inp[12012] = 1070078072;
inp[12013] = 0;
inp[12014] = 1070012762;
inp[12015] = 0;
inp[12016] = 1069947456;
inp[12017] = 0;
inp[12018] = 1069882153;
inp[12019] = 0;
inp[12020] = 1069816855;
inp[12021] = 0;
inp[12022] = 1069751560;
inp[12023] = 0;
inp[12024] = 1069686270;
inp[12025] = 0;
inp[12026] = 1069620983;
inp[12027] = 0;
inp[12028] = 1069555701;
inp[12029] = 0;
inp[12030] = 1069490422;
inp[12031] = 0;
inp[12032] = 1069425148;
inp[12033] = 0;
inp[12034] = 1069359877;
inp[12035] = 0;
inp[12036] = 1069294611;
inp[12037] = 0;
inp[12038] = 1069229348;
inp[12039] = 0;
inp[12040] = 1069164090;
inp[12041] = 0;
inp[12042] = 1069098835;
inp[12043] = 0;
inp[12044] = 1069033584;
inp[12045] = 0;
inp[12046] = 1068968338;
inp[12047] = 0;
inp[12048] = 1068903095;
inp[12049] = 0;
inp[12050] = 1068837856;
inp[12051] = 0;
inp[12052] = 1068772622;
inp[12053] = 0;
inp[12054] = 1068707391;
inp[12055] = 0;
inp[12056] = 1068642164;
inp[12057] = 0;
inp[12058] = 1068576941;
inp[12059] = 0;
inp[12060] = 1068511723;
inp[12061] = 0;
inp[12062] = 1068446508;
inp[12063] = 0;
inp[12064] = 1068381297;
inp[12065] = 0;
inp[12066] = 1068316090;
inp[12067] = 0;
inp[12068] = 1068250887;
inp[12069] = 0;
inp[12070] = 1068185689;
inp[12071] = 0;
inp[12072] = 1068120494;
inp[12073] = 0;
inp[12074] = 1068055303;
inp[12075] = 0;
inp[12076] = 1067990116;
inp[12077] = 0;
inp[12078] = 1067924933;
inp[12079] = 0;
inp[12080] = 1067859754;
inp[12081] = 0;
inp[12082] = 1067794579;
inp[12083] = 0;
inp[12084] = 1067729408;
inp[12085] = 0;
inp[12086] = 1067664241;
inp[12087] = 0;
inp[12088] = 1067599078;
inp[12089] = 0;
inp[12090] = 1067533919;
inp[12091] = 0;
inp[12092] = 1067468764;
inp[12093] = 0;
inp[12094] = 1067403612;
inp[12095] = 0;
inp[12096] = 1067338465;
inp[12097] = 0;
inp[12098] = 1067273322;
inp[12099] = 0;
inp[12100] = 1067208183;
inp[12101] = 0;
inp[12102] = 1067143048;
inp[12103] = 0;
inp[12104] = 1067077916;
inp[12105] = 0;
inp[12106] = 1067012789;
inp[12107] = 0;
inp[12108] = 1066947666;
inp[12109] = 0;
inp[12110] = 1066882546;
inp[12111] = 0;
inp[12112] = 1066817431;
inp[12113] = 0;
inp[12114] = 1066752320;
inp[12115] = 0;
inp[12116] = 1066687212;
inp[12117] = 0;
inp[12118] = 1066622109;
inp[12119] = 0;
inp[12120] = 1066557009;
inp[12121] = 0;
inp[12122] = 1066491914;
inp[12123] = 0;
inp[12124] = 1066426822;
inp[12125] = 0;
inp[12126] = 1066361735;
inp[12127] = 0;
inp[12128] = 1066296651;
inp[12129] = 0;
inp[12130] = 1066231572;
inp[12131] = 0;
inp[12132] = 1066166496;
inp[12133] = 0;
inp[12134] = 1066101424;
inp[12135] = 0;
inp[12136] = 1066036357;
inp[12137] = 0;
inp[12138] = 1065971293;
inp[12139] = 0;
inp[12140] = 1065906233;
inp[12141] = 0;
inp[12142] = 1065841178;
inp[12143] = 0;
inp[12144] = 1065776126;
inp[12145] = 0;
inp[12146] = 1065711078;
inp[12147] = 0;
inp[12148] = 1065646034;
inp[12149] = 0;
inp[12150] = 1065580994;
inp[12151] = 0;
inp[12152] = 1065515958;
inp[12153] = 0;
inp[12154] = 1065450926;
inp[12155] = 0;
inp[12156] = 1073741824;
inp[12157] = 1073741824;
inp[12158] = 1073709056;
inp[12159] = 0;
inp[12160] = 1073676289;
inp[12161] = 0;
inp[12162] = 1073643524;
inp[12163] = 0;
inp[12164] = 1073610759;
inp[12165] = 0;
inp[12166] = 1073577996;
inp[12167] = 0;
inp[12168] = 1073545233;
inp[12169] = 0;
inp[12170] = 1073512472;
inp[12171] = 0;
inp[12172] = 1073479711;
inp[12173] = 0;
inp[12174] = 1073446952;
inp[12175] = 0;
inp[12176] = 1073414193;
inp[12177] = 0;
inp[12178] = 1073381436;
inp[12179] = 0;
inp[12180] = 1073348679;
inp[12181] = 0;
inp[12182] = 1073315924;
inp[12183] = 0;
inp[12184] = 1073283169;
inp[12185] = 0;
inp[12186] = 1073250416;
inp[12187] = 0;
inp[12188] = 1073217663;
inp[12189] = 0;
inp[12190] = 1073184912;
inp[12191] = 0;
inp[12192] = 1073152161;
inp[12193] = 0;
inp[12194] = 1073119412;
inp[12195] = 0;
inp[12196] = 1073086663;
inp[12197] = 0;
inp[12198] = 1073053916;
inp[12199] = 0;
inp[12200] = 1073021169;
inp[12201] = 0;
inp[12202] = 1072988424;
inp[12203] = 0;
inp[12204] = 1072955679;
inp[12205] = 0;
inp[12206] = 1072922936;
inp[12207] = 0;
inp[12208] = 1072890193;
inp[12209] = 0;
inp[12210] = 1072857452;
inp[12211] = 0;
inp[12212] = 1072824711;
inp[12213] = 0;
inp[12214] = 1072791972;
inp[12215] = 0;
inp[12216] = 1072759233;
inp[12217] = 0;
inp[12218] = 1072726496;
inp[12219] = 0;
inp[12220] = 1072693759;
inp[12221] = 0;
inp[12222] = 1072661024;
inp[12223] = 0;
inp[12224] = 1072628289;
inp[12225] = 0;
inp[12226] = 1072595556;
inp[12227] = 0;
inp[12228] = 1072562823;
inp[12229] = 0;
inp[12230] = 1072530092;
inp[12231] = 0;
inp[12232] = 1072497361;
inp[12233] = 0;
inp[12234] = 1072464632;
inp[12235] = 0;
inp[12236] = 1072431903;
inp[12237] = 0;
inp[12238] = 1072399176;
inp[12239] = 0;
inp[12240] = 1072366449;
inp[12241] = 0;
inp[12242] = 1072333724;
inp[12243] = 0;
inp[12244] = 1072300999;
inp[12245] = 0;
inp[12246] = 1072268276;
inp[12247] = 0;
inp[12248] = 1072235553;
inp[12249] = 0;
inp[12250] = 1072202831;
inp[12251] = 0;
inp[12252] = 1072170111;
inp[12253] = 0;
inp[12254] = 1072137391;
inp[12255] = 0;
inp[12256] = 1072104673;
inp[12257] = 0;
inp[12258] = 1072071955;
inp[12259] = 0;
inp[12260] = 1072039239;
inp[12261] = 0;
inp[12262] = 1072006523;
inp[12263] = 0;
inp[12264] = 1071973809;
inp[12265] = 0;
inp[12266] = 1071941095;
inp[12267] = 0;
inp[12268] = 1071908383;
inp[12269] = 0;
inp[12270] = 1071875671;
inp[12271] = 0;
inp[12272] = 1071842961;
inp[12273] = 0;
inp[12274] = 1071810251;
inp[12275] = 0;
inp[12276] = 1071777542;
inp[12277] = 0;
inp[12278] = 1071744835;
inp[12279] = 0;
inp[12280] = 1071712128;
inp[12281] = 0;
inp[12282] = 1071679423;
inp[12283] = 0;
inp[12284] = 1071646718;
inp[12285] = 0;
inp[12286] = 1071614015;
inp[12287] = 0;
inp[12288] = 1071581312;
inp[12289] = 0;
inp[12290] = 1071548610;
inp[12291] = 0;
inp[12292] = 1071515910;
inp[12293] = 0;
inp[12294] = 1071483210;
inp[12295] = 0;
inp[12296] = 1071450512;
inp[12297] = 0;
inp[12298] = 1071417814;
inp[12299] = 0;
inp[12300] = 1071385118;
inp[12301] = 0;
inp[12302] = 1071352422;
inp[12303] = 0;
inp[12304] = 1071319727;
inp[12305] = 0;
inp[12306] = 1071287034;
inp[12307] = 0;
inp[12308] = 1071254341;
inp[12309] = 0;
inp[12310] = 1071221650;
inp[12311] = 0;
inp[12312] = 1071188959;
inp[12313] = 0;
inp[12314] = 1071156269;
inp[12315] = 0;
inp[12316] = 1071123581;
inp[12317] = 0;
inp[12318] = 1071090893;
inp[12319] = 0;
inp[12320] = 1071058207;
inp[12321] = 0;
inp[12322] = 1071025521;
inp[12323] = 0;
inp[12324] = 1070992836;
inp[12325] = 0;
inp[12326] = 1070960153;
inp[12327] = 0;
inp[12328] = 1070927470;
inp[12329] = 0;
inp[12330] = 1070894789;
inp[12331] = 0;
inp[12332] = 1070862108;
inp[12333] = 0;
inp[12334] = 1070829428;
inp[12335] = 0;
inp[12336] = 1070796750;
inp[12337] = 0;
inp[12338] = 1070764072;
inp[12339] = 0;
inp[12340] = 1070731396;
inp[12341] = 0;
inp[12342] = 1070698720;
inp[12343] = 0;
inp[12344] = 1070666045;
inp[12345] = 0;
inp[12346] = 1070633372;
inp[12347] = 0;
inp[12348] = 1070600699;
inp[12349] = 0;
inp[12350] = 1070568027;
inp[12351] = 0;
inp[12352] = 1070535357;
inp[12353] = 0;
inp[12354] = 1070502687;
inp[12355] = 0;
inp[12356] = 1070470018;
inp[12357] = 0;
inp[12358] = 1070437351;
inp[12359] = 0;
inp[12360] = 1070404684;
inp[12361] = 0;
inp[12362] = 1070372018;
inp[12363] = 0;
inp[12364] = 1070339354;
inp[12365] = 0;
inp[12366] = 1070306690;
inp[12367] = 0;
inp[12368] = 1070274027;
inp[12369] = 0;
inp[12370] = 1070241366;
inp[12371] = 0;
inp[12372] = 1070208705;
inp[12373] = 0;
inp[12374] = 1070176045;
inp[12375] = 0;
inp[12376] = 1070143387;
inp[12377] = 0;
inp[12378] = 1070110729;
inp[12379] = 0;
inp[12380] = 1070078072;
inp[12381] = 0;
inp[12382] = 1070045417;
inp[12383] = 0;
inp[12384] = 1070012762;
inp[12385] = 0;
inp[12386] = 1069980108;
inp[12387] = 0;
inp[12388] = 1069947456;
inp[12389] = 0;
inp[12390] = 1069914804;
inp[12391] = 0;
inp[12392] = 1069882153;
inp[12393] = 0;
inp[12394] = 1069849503;
inp[12395] = 0;
inp[12396] = 1069816855;
inp[12397] = 0;
inp[12398] = 1069784207;
inp[12399] = 0;
inp[12400] = 1069751560;
inp[12401] = 0;
inp[12402] = 1069718915;
inp[12403] = 0;
inp[12404] = 1069686270;
inp[12405] = 0;
inp[12406] = 1069653626;
inp[12407] = 0;
inp[12408] = 1069620983;
inp[12409] = 0;
inp[12410] = 1069588342;
inp[12411] = 0;
inp[12412] = 1073741824;
inp[12413] = 1073741824;
inp[12414] = 1073725440;
inp[12415] = 0;
inp[12416] = 1073709056;
inp[12417] = 0;
inp[12418] = 1073692673;
inp[12419] = 0;
inp[12420] = 1073676289;
inp[12421] = 0;
inp[12422] = 1073659907;
inp[12423] = 0;
inp[12424] = 1073643524;
inp[12425] = 0;
inp[12426] = 1073627142;
inp[12427] = 0;
inp[12428] = 1073610759;
inp[12429] = 0;
inp[12430] = 1073594378;
inp[12431] = 0;
inp[12432] = 1073577996;
inp[12433] = 0;
inp[12434] = 1073561615;
inp[12435] = 0;
inp[12436] = 1073545233;
inp[12437] = 0;
inp[12438] = 1073528853;
inp[12439] = 0;
inp[12440] = 1073512472;
inp[12441] = 0;
inp[12442] = 1073496092;
inp[12443] = 0;
inp[12444] = 1073479711;
inp[12445] = 0;
inp[12446] = 1073463332;
inp[12447] = 0;
inp[12448] = 1073446952;
inp[12449] = 0;
inp[12450] = 1073430573;
inp[12451] = 0;
inp[12452] = 1073414193;
inp[12453] = 0;
inp[12454] = 1073397815;
inp[12455] = 0;
inp[12456] = 1073381436;
inp[12457] = 0;
inp[12458] = 1073365058;
inp[12459] = 0;
inp[12460] = 1073348679;
inp[12461] = 0;
inp[12462] = 1073332302;
inp[12463] = 0;
inp[12464] = 1073315924;
inp[12465] = 0;
inp[12466] = 1073299547;
inp[12467] = 0;
inp[12468] = 1073283169;
inp[12469] = 0;
inp[12470] = 1073266793;
inp[12471] = 0;
inp[12472] = 1073250416;
inp[12473] = 0;
inp[12474] = 1073234040;
inp[12475] = 0;
inp[12476] = 1073217663;
inp[12477] = 0;
inp[12478] = 1073201288;
inp[12479] = 0;
inp[12480] = 1073184912;
inp[12481] = 0;
inp[12482] = 1073168537;
inp[12483] = 0;
inp[12484] = 1073152161;
inp[12485] = 0;
inp[12486] = 1073135787;
inp[12487] = 0;
inp[12488] = 1073119412;
inp[12489] = 0;
inp[12490] = 1073103038;
inp[12491] = 0;
inp[12492] = 1073086663;
inp[12493] = 0;
inp[12494] = 1073070290;
inp[12495] = 0;
inp[12496] = 1073053916;
inp[12497] = 0;
inp[12498] = 1073037543;
inp[12499] = 0;
inp[12500] = 1073021169;
inp[12501] = 0;
inp[12502] = 1073004797;
inp[12503] = 0;
inp[12504] = 1072988424;
inp[12505] = 0;
inp[12506] = 1072972052;
inp[12507] = 0;
inp[12508] = 1072955679;
inp[12509] = 0;
inp[12510] = 1072939308;
inp[12511] = 0;
inp[12512] = 1072922936;
inp[12513] = 0;
inp[12514] = 1072906565;
inp[12515] = 0;
inp[12516] = 1072890193;
inp[12517] = 0;
inp[12518] = 1072873823;
inp[12519] = 0;
inp[12520] = 1072857452;
inp[12521] = 0;
inp[12522] = 1072841082;
inp[12523] = 0;
inp[12524] = 1072824711;
inp[12525] = 0;
inp[12526] = 1072808342;
inp[12527] = 0;
inp[12528] = 1072791972;
inp[12529] = 0;
inp[12530] = 1072775602;
inp[12531] = 0;
inp[12532] = 1072759233;
inp[12533] = 0;
inp[12534] = 1072742864;
inp[12535] = 0;
inp[12536] = 1072726496;
inp[12537] = 0;
inp[12538] = 1072710127;
inp[12539] = 0;
inp[12540] = 1072693759;
inp[12541] = 0;
inp[12542] = 1072677391;
inp[12543] = 0;
inp[12544] = 1072661024;
inp[12545] = 0;
inp[12546] = 1072644656;
inp[12547] = 0;
inp[12548] = 1072628289;
inp[12549] = 0;
inp[12550] = 1072611922;
inp[12551] = 0;
inp[12552] = 1072595556;
inp[12553] = 0;
inp[12554] = 1072579189;
inp[12555] = 0;
inp[12556] = 1072562823;
inp[12557] = 0;
inp[12558] = 1072546457;
inp[12559] = 0;
inp[12560] = 1072530092;
inp[12561] = 0;
inp[12562] = 1072513726;
inp[12563] = 0;
inp[12564] = 1072497361;
inp[12565] = 0;
inp[12566] = 1072480996;
inp[12567] = 0;
inp[12568] = 1072464632;
inp[12569] = 0;
inp[12570] = 1072448267;
inp[12571] = 0;
inp[12572] = 1072431903;
inp[12573] = 0;
inp[12574] = 1072415539;
inp[12575] = 0;
inp[12576] = 1072399176;
inp[12577] = 0;
inp[12578] = 1072382812;
inp[12579] = 0;
inp[12580] = 1072366449;
inp[12581] = 0;
inp[12582] = 1072350086;
inp[12583] = 0;
inp[12584] = 1072333724;
inp[12585] = 0;
inp[12586] = 1072317361;
inp[12587] = 0;
inp[12588] = 1072300999;
inp[12589] = 0;
inp[12590] = 1072284637;
inp[12591] = 0;
inp[12592] = 1072268276;
inp[12593] = 0;
inp[12594] = 1072251914;
inp[12595] = 0;
inp[12596] = 1072235553;
inp[12597] = 0;
inp[12598] = 1072219192;
inp[12599] = 0;
inp[12600] = 1072202831;
inp[12601] = 0;
inp[12602] = 1072186471;
inp[12603] = 0;
inp[12604] = 1072170111;
inp[12605] = 0;
inp[12606] = 1072153751;
inp[12607] = 0;
inp[12608] = 1072137391;
inp[12609] = 0;
inp[12610] = 1072121032;
inp[12611] = 0;
inp[12612] = 1072104673;
inp[12613] = 0;
inp[12614] = 1072088314;
inp[12615] = 0;
inp[12616] = 1072071955;
inp[12617] = 0;
inp[12618] = 1072055597;
inp[12619] = 0;
inp[12620] = 1072039239;
inp[12621] = 0;
inp[12622] = 1072022881;
inp[12623] = 0;
inp[12624] = 1072006523;
inp[12625] = 0;
inp[12626] = 1071990166;
inp[12627] = 0;
inp[12628] = 1071973809;
inp[12629] = 0;
inp[12630] = 1071957452;
inp[12631] = 0;
inp[12632] = 1071941095;
inp[12633] = 0;
inp[12634] = 1071924739;
inp[12635] = 0;
inp[12636] = 1071908383;
inp[12637] = 0;
inp[12638] = 1071892027;
inp[12639] = 0;
inp[12640] = 1071875671;
inp[12641] = 0;
inp[12642] = 1071859316;
inp[12643] = 0;
inp[12644] = 1071842961;
inp[12645] = 0;
inp[12646] = 1071826606;
inp[12647] = 0;
inp[12648] = 1071810251;
inp[12649] = 0;
inp[12650] = 1071793897;
inp[12651] = 0;
inp[12652] = 1071777542;
inp[12653] = 0;
inp[12654] = 1071761188;
inp[12655] = 0;
inp[12656] = 1071744835;
inp[12657] = 0;
inp[12658] = 1071728481;
inp[12659] = 0;
inp[12660] = 1071712128;
inp[12661] = 0;
inp[12662] = 1071695775;
inp[12663] = 0;
inp[12664] = 1071679423;
inp[12665] = 0;
inp[12666] = 1071663070;
inp[12667] = 0;
inp[12668] = 1073741824;
inp[12669] = 1073741824;
inp[12670] = 1073733632;
inp[12671] = 0;
inp[12672] = 1073725440;
inp[12673] = 0;
inp[12674] = 1073717248;
inp[12675] = 0;
inp[12676] = 1073709056;
inp[12677] = 0;
inp[12678] = 1073700864;
inp[12679] = 0;
inp[12680] = 1073692673;
inp[12681] = 0;
inp[12682] = 1073684481;
inp[12683] = 0;
inp[12684] = 1073676289;
inp[12685] = 0;
inp[12686] = 1073668098;
inp[12687] = 0;
inp[12688] = 1073659907;
inp[12689] = 0;
inp[12690] = 1073651715;
inp[12691] = 0;
inp[12692] = 1073643524;
inp[12693] = 0;
inp[12694] = 1073635333;
inp[12695] = 0;
inp[12696] = 1073627142;
inp[12697] = 0;
inp[12698] = 1073618951;
inp[12699] = 0;
inp[12700] = 1073610759;
inp[12701] = 0;
inp[12702] = 1073602569;
inp[12703] = 0;
inp[12704] = 1073594378;
inp[12705] = 0;
inp[12706] = 1073586187;
inp[12707] = 0;
inp[12708] = 1073577996;
inp[12709] = 0;
inp[12710] = 1073569805;
inp[12711] = 0;
inp[12712] = 1073561615;
inp[12713] = 0;
inp[12714] = 1073553424;
inp[12715] = 0;
inp[12716] = 1073545233;
inp[12717] = 0;
inp[12718] = 1073537043;
inp[12719] = 0;
inp[12720] = 1073528853;
inp[12721] = 0;
inp[12722] = 1073520662;
inp[12723] = 0;
inp[12724] = 1073512472;
inp[12725] = 0;
inp[12726] = 1073504282;
inp[12727] = 0;
inp[12728] = 1073496092;
inp[12729] = 0;
inp[12730] = 1073487902;
inp[12731] = 0;
inp[12732] = 1073479711;
inp[12733] = 0;
inp[12734] = 1073471522;
inp[12735] = 0;
inp[12736] = 1073463332;
inp[12737] = 0;
inp[12738] = 1073455142;
inp[12739] = 0;
inp[12740] = 1073446952;
inp[12741] = 0;
inp[12742] = 1073438762;
inp[12743] = 0;
inp[12744] = 1073430573;
inp[12745] = 0;
inp[12746] = 1073422383;
inp[12747] = 0;
inp[12748] = 1073414193;
inp[12749] = 0;
inp[12750] = 1073406004;
inp[12751] = 0;
inp[12752] = 1073397815;
inp[12753] = 0;
inp[12754] = 1073389625;
inp[12755] = 0;
inp[12756] = 1073381436;
inp[12757] = 0;
inp[12758] = 1073373247;
inp[12759] = 0;
inp[12760] = 1073365058;
inp[12761] = 0;
inp[12762] = 1073356869;
inp[12763] = 0;
inp[12764] = 1073348679;
inp[12765] = 0;
inp[12766] = 1073340491;
inp[12767] = 0;
inp[12768] = 1073332302;
inp[12769] = 0;
inp[12770] = 1073324113;
inp[12771] = 0;
inp[12772] = 1073315924;
inp[12773] = 0;
inp[12774] = 1073307735;
inp[12775] = 0;
inp[12776] = 1073299547;
inp[12777] = 0;
inp[12778] = 1073291358;
inp[12779] = 0;
inp[12780] = 1073283169;
inp[12781] = 0;
inp[12782] = 1073274981;
inp[12783] = 0;
inp[12784] = 1073266793;
inp[12785] = 0;
inp[12786] = 1073258604;
inp[12787] = 0;
inp[12788] = 1073250416;
inp[12789] = 0;
inp[12790] = 1073242228;
inp[12791] = 0;
inp[12792] = 1073234040;
inp[12793] = 0;
inp[12794] = 1073225852;
inp[12795] = 0;
inp[12796] = 1073217663;
inp[12797] = 0;
inp[12798] = 1073209476;
inp[12799] = 0;
inp[12800] = 1073201288;
inp[12801] = 0;
inp[12802] = 1073193100;
inp[12803] = 0;
inp[12804] = 1073184912;
inp[12805] = 0;
inp[12806] = 1073176724;
inp[12807] = 0;
inp[12808] = 1073168537;
inp[12809] = 0;
inp[12810] = 1073160349;
inp[12811] = 0;
inp[12812] = 1073152161;
inp[12813] = 0;
inp[12814] = 1073143974;
inp[12815] = 0;
inp[12816] = 1073135787;
inp[12817] = 0;
inp[12818] = 1073127599;
inp[12819] = 0;
inp[12820] = 1073119412;
inp[12821] = 0;
inp[12822] = 1073111225;
inp[12823] = 0;
inp[12824] = 1073103038;
inp[12825] = 0;
inp[12826] = 1073094850;
inp[12827] = 0;
inp[12828] = 1073086663;
inp[12829] = 0;
inp[12830] = 1073078476;
inp[12831] = 0;
inp[12832] = 1073070290;
inp[12833] = 0;
inp[12834] = 1073062103;
inp[12835] = 0;
inp[12836] = 1073053916;
inp[12837] = 0;
inp[12838] = 1073045729;
inp[12839] = 0;
inp[12840] = 1073037543;
inp[12841] = 0;
inp[12842] = 1073029356;
inp[12843] = 0;
inp[12844] = 1073021169;
inp[12845] = 0;
inp[12846] = 1073012983;
inp[12847] = 0;
inp[12848] = 1073004797;
inp[12849] = 0;
inp[12850] = 1072996610;
inp[12851] = 0;
inp[12852] = 1072988424;
inp[12853] = 0;
inp[12854] = 1072980238;
inp[12855] = 0;
inp[12856] = 1072972052;
inp[12857] = 0;
inp[12858] = 1072963865;
inp[12859] = 0;
inp[12860] = 1072955679;
inp[12861] = 0;
inp[12862] = 1072947493;
inp[12863] = 0;
inp[12864] = 1072939308;
inp[12865] = 0;
inp[12866] = 1072931122;
inp[12867] = 0;
inp[12868] = 1072922936;
inp[12869] = 0;
inp[12870] = 1072914750;
inp[12871] = 0;
inp[12872] = 1072906565;
inp[12873] = 0;
inp[12874] = 1072898379;
inp[12875] = 0;
inp[12876] = 1072890193;
inp[12877] = 0;
inp[12878] = 1072882008;
inp[12879] = 0;
inp[12880] = 1072873823;
inp[12881] = 0;
inp[12882] = 1072865637;
inp[12883] = 0;
inp[12884] = 1072857452;
inp[12885] = 0;
inp[12886] = 1072849267;
inp[12887] = 0;
inp[12888] = 1072841082;
inp[12889] = 0;
inp[12890] = 1072832896;
inp[12891] = 0;
inp[12892] = 1072824711;
inp[12893] = 0;
inp[12894] = 1072816526;
inp[12895] = 0;
inp[12896] = 1072808342;
inp[12897] = 0;
inp[12898] = 1072800157;
inp[12899] = 0;
inp[12900] = 1072791972;
inp[12901] = 0;
inp[12902] = 1072783787;
inp[12903] = 0;
inp[12904] = 1072775602;
inp[12905] = 0;
inp[12906] = 1072767418;
inp[12907] = 0;
inp[12908] = 1072759233;
inp[12909] = 0;
inp[12910] = 1072751049;
inp[12911] = 0;
inp[12912] = 1072742864;
inp[12913] = 0;
inp[12914] = 1072734680;
inp[12915] = 0;
inp[12916] = 1072726496;
inp[12917] = 0;
inp[12918] = 1072718312;
inp[12919] = 0;
inp[12920] = 1072710127;
inp[12921] = 0;
inp[12922] = 1072701943;
inp[12923] = 0;
inp[12924] = 1073741824;
inp[12925] = 1073741824;
inp[12926] = 1073737728;
inp[12927] = 0;
inp[12928] = 1073733632;
inp[12929] = 0;
inp[12930] = 1073729536;
inp[12931] = 0;
inp[12932] = 1073725440;
inp[12933] = 0;
inp[12934] = 1073721344;
inp[12935] = 0;
inp[12936] = 1073717248;
inp[12937] = 0;
inp[12938] = 1073713152;
inp[12939] = 0;
inp[12940] = 1073709056;
inp[12941] = 0;
inp[12942] = 1073704960;
inp[12943] = 0;
inp[12944] = 1073700864;
inp[12945] = 0;
inp[12946] = 1073696768;
inp[12947] = 0;
inp[12948] = 1073692673;
inp[12949] = 0;
inp[12950] = 1073688577;
inp[12951] = 0;
inp[12952] = 1073684481;
inp[12953] = 0;
inp[12954] = 1073680385;
inp[12955] = 0;
inp[12956] = 1073676289;
inp[12957] = 0;
inp[12958] = 1073672194;
inp[12959] = 0;
inp[12960] = 1073668098;
inp[12961] = 0;
inp[12962] = 1073664002;
inp[12963] = 0;
inp[12964] = 1073659907;
inp[12965] = 0;
inp[12966] = 1073655811;
inp[12967] = 0;
inp[12968] = 1073651715;
inp[12969] = 0;
inp[12970] = 1073647620;
inp[12971] = 0;
inp[12972] = 1073643524;
inp[12973] = 0;
inp[12974] = 1073639428;
inp[12975] = 0;
inp[12976] = 1073635333;
inp[12977] = 0;
inp[12978] = 1073631237;
inp[12979] = 0;
inp[12980] = 1073627142;
inp[12981] = 0;
inp[12982] = 1073623046;
inp[12983] = 0;
inp[12984] = 1073618951;
inp[12985] = 0;
inp[12986] = 1073614855;
inp[12987] = 0;
inp[12988] = 1073610759;
inp[12989] = 0;
inp[12990] = 1073606664;
inp[12991] = 0;
inp[12992] = 1073602569;
inp[12993] = 0;
inp[12994] = 1073598473;
inp[12995] = 0;
inp[12996] = 1073594378;
inp[12997] = 0;
inp[12998] = 1073590282;
inp[12999] = 0;
inp[13000] = 1073586187;
inp[13001] = 0;
inp[13002] = 1073582091;
inp[13003] = 0;
inp[13004] = 1073577996;
inp[13005] = 0;
inp[13006] = 1073573901;
inp[13007] = 0;
inp[13008] = 1073569805;
inp[13009] = 0;
inp[13010] = 1073565710;
inp[13011] = 0;
inp[13012] = 1073561615;
inp[13013] = 0;
inp[13014] = 1073557519;
inp[13015] = 0;
inp[13016] = 1073553424;
inp[13017] = 0;
inp[13018] = 1073549329;
inp[13019] = 0;
inp[13020] = 1073545233;
inp[13021] = 0;
inp[13022] = 1073541138;
inp[13023] = 0;
inp[13024] = 1073537043;
inp[13025] = 0;
inp[13026] = 1073532948;
inp[13027] = 0;
inp[13028] = 1073528853;
inp[13029] = 0;
inp[13030] = 1073524757;
inp[13031] = 0;
inp[13032] = 1073520662;
inp[13033] = 0;
inp[13034] = 1073516567;
inp[13035] = 0;
inp[13036] = 1073512472;
inp[13037] = 0;
inp[13038] = 1073508377;
inp[13039] = 0;
inp[13040] = 1073504282;
inp[13041] = 0;
inp[13042] = 1073500187;
inp[13043] = 0;
inp[13044] = 1073496092;
inp[13045] = 0;
inp[13046] = 1073491997;
inp[13047] = 0;
inp[13048] = 1073487902;
inp[13049] = 0;
inp[13050] = 1073483807;
inp[13051] = 0;
inp[13052] = 1073479711;
inp[13053] = 0;
inp[13054] = 1073475617;
inp[13055] = 0;
inp[13056] = 1073471522;
inp[13057] = 0;
inp[13058] = 1073467427;
inp[13059] = 0;
inp[13060] = 1073463332;
inp[13061] = 0;
inp[13062] = 1073459237;
inp[13063] = 0;
inp[13064] = 1073455142;
inp[13065] = 0;
inp[13066] = 1073451047;
inp[13067] = 0;
inp[13068] = 1073446952;
inp[13069] = 0;
inp[13070] = 1073442857;
inp[13071] = 0;
inp[13072] = 1073438762;
inp[13073] = 0;
inp[13074] = 1073434667;
inp[13075] = 0;
inp[13076] = 1073430573;
inp[13077] = 0;
inp[13078] = 1073426478;
inp[13079] = 0;
inp[13080] = 1073422383;
inp[13081] = 0;
inp[13082] = 1073418288;
inp[13083] = 0;
inp[13084] = 1073414193;
inp[13085] = 0;
inp[13086] = 1073410099;
inp[13087] = 0;
inp[13088] = 1073406004;
inp[13089] = 0;
inp[13090] = 1073401909;
inp[13091] = 0;
inp[13092] = 1073397815;
inp[13093] = 0;
inp[13094] = 1073393720;
inp[13095] = 0;
inp[13096] = 1073389625;
inp[13097] = 0;
inp[13098] = 1073385531;
inp[13099] = 0;
inp[13100] = 1073381436;
inp[13101] = 0;
inp[13102] = 1073377341;
inp[13103] = 0;
inp[13104] = 1073373247;
inp[13105] = 0;
inp[13106] = 1073369152;
inp[13107] = 0;
inp[13108] = 1073365058;
inp[13109] = 0;
inp[13110] = 1073360963;
inp[13111] = 0;
inp[13112] = 1073356869;
inp[13113] = 0;
inp[13114] = 1073352774;
inp[13115] = 0;
inp[13116] = 1073348679;
inp[13117] = 0;
inp[13118] = 1073344585;
inp[13119] = 0;
inp[13120] = 1073340491;
inp[13121] = 0;
inp[13122] = 1073336396;
inp[13123] = 0;
inp[13124] = 1073332302;
inp[13125] = 0;
inp[13126] = 1073328207;
inp[13127] = 0;
inp[13128] = 1073324113;
inp[13129] = 0;
inp[13130] = 1073320018;
inp[13131] = 0;
inp[13132] = 1073315924;
inp[13133] = 0;
inp[13134] = 1073311830;
inp[13135] = 0;
inp[13136] = 1073307735;
inp[13137] = 0;
inp[13138] = 1073303641;
inp[13139] = 0;
inp[13140] = 1073299547;
inp[13141] = 0;
inp[13142] = 1073295452;
inp[13143] = 0;
inp[13144] = 1073291358;
inp[13145] = 0;
inp[13146] = 1073287264;
inp[13147] = 0;
inp[13148] = 1073283169;
inp[13149] = 0;
inp[13150] = 1073279075;
inp[13151] = 0;
inp[13152] = 1073274981;
inp[13153] = 0;
inp[13154] = 1073270887;
inp[13155] = 0;
inp[13156] = 1073266793;
inp[13157] = 0;
inp[13158] = 1073262698;
inp[13159] = 0;
inp[13160] = 1073258604;
inp[13161] = 0;
inp[13162] = 1073254510;
inp[13163] = 0;
inp[13164] = 1073250416;
inp[13165] = 0;
inp[13166] = 1073246322;
inp[13167] = 0;
inp[13168] = 1073242228;
inp[13169] = 0;
inp[13170] = 1073238134;
inp[13171] = 0;
inp[13172] = 1073234040;
inp[13173] = 0;
inp[13174] = 1073229946;
inp[13175] = 0;
inp[13176] = 1073225852;
inp[13177] = 0;
inp[13178] = 1073221757;
inp[13179] = 0;
inp[13180] = 1073741824;
inp[13181] = 1073741824;
inp[13182] = 1073739776;
inp[13183] = 0;
inp[13184] = 1073737728;
inp[13185] = 0;
inp[13186] = 1073735680;
inp[13187] = 0;
inp[13188] = 1073733632;
inp[13189] = 0;
inp[13190] = 1073731584;
inp[13191] = 0;
inp[13192] = 1073729536;
inp[13193] = 0;
inp[13194] = 1073727488;
inp[13195] = 0;
inp[13196] = 1073725440;
inp[13197] = 0;
inp[13198] = 1073723392;
inp[13199] = 0;
inp[13200] = 1073721344;
inp[13201] = 0;
inp[13202] = 1073719296;
inp[13203] = 0;
inp[13204] = 1073717248;
inp[13205] = 0;
inp[13206] = 1073715200;
inp[13207] = 0;
inp[13208] = 1073713152;
inp[13209] = 0;
inp[13210] = 1073711104;
inp[13211] = 0;
inp[13212] = 1073709056;
inp[13213] = 0;
inp[13214] = 1073707008;
inp[13215] = 0;
inp[13216] = 1073704960;
inp[13217] = 0;
inp[13218] = 1073702912;
inp[13219] = 0;
inp[13220] = 1073700864;
inp[13221] = 0;
inp[13222] = 1073698816;
inp[13223] = 0;
inp[13224] = 1073696768;
inp[13225] = 0;
inp[13226] = 1073694721;
inp[13227] = 0;
inp[13228] = 1073692673;
inp[13229] = 0;
inp[13230] = 1073690625;
inp[13231] = 0;
inp[13232] = 1073688577;
inp[13233] = 0;
inp[13234] = 1073686529;
inp[13235] = 0;
inp[13236] = 1073684481;
inp[13237] = 0;
inp[13238] = 1073682433;
inp[13239] = 0;
inp[13240] = 1073680385;
inp[13241] = 0;
inp[13242] = 1073678337;
inp[13243] = 0;
inp[13244] = 1073676289;
inp[13245] = 0;
inp[13246] = 1073674242;
inp[13247] = 0;
inp[13248] = 1073672194;
inp[13249] = 0;
inp[13250] = 1073670146;
inp[13251] = 0;
inp[13252] = 1073668098;
inp[13253] = 0;
inp[13254] = 1073666050;
inp[13255] = 0;
inp[13256] = 1073664002;
inp[13257] = 0;
inp[13258] = 1073661954;
inp[13259] = 0;
inp[13260] = 1073659907;
inp[13261] = 0;
inp[13262] = 1073657859;
inp[13263] = 0;
inp[13264] = 1073655811;
inp[13265] = 0;
inp[13266] = 1073653763;
inp[13267] = 0;
inp[13268] = 1073651715;
inp[13269] = 0;
inp[13270] = 1073649667;
inp[13271] = 0;
inp[13272] = 1073647620;
inp[13273] = 0;
inp[13274] = 1073645572;
inp[13275] = 0;
inp[13276] = 1073643524;
inp[13277] = 0;
inp[13278] = 1073641476;
inp[13279] = 0;
inp[13280] = 1073639428;
inp[13281] = 0;
inp[13282] = 1073637381;
inp[13283] = 0;
inp[13284] = 1073635333;
inp[13285] = 0;
inp[13286] = 1073633285;
inp[13287] = 0;
inp[13288] = 1073631237;
inp[13289] = 0;
inp[13290] = 1073629189;
inp[13291] = 0;
inp[13292] = 1073627142;
inp[13293] = 0;
inp[13294] = 1073625094;
inp[13295] = 0;
inp[13296] = 1073623046;
inp[13297] = 0;
inp[13298] = 1073620998;
inp[13299] = 0;
inp[13300] = 1073618951;
inp[13301] = 0;
inp[13302] = 1073616903;
inp[13303] = 0;
inp[13304] = 1073614855;
inp[13305] = 0;
inp[13306] = 1073612807;
inp[13307] = 0;
inp[13308] = 1073610759;
inp[13309] = 0;
inp[13310] = 1073608712;
inp[13311] = 0;
inp[13312] = 1073606664;
inp[13313] = 0;
inp[13314] = 1073604616;
inp[13315] = 0;
inp[13316] = 1073602569;
inp[13317] = 0;
inp[13318] = 1073600521;
inp[13319] = 0;
inp[13320] = 1073598473;
inp[13321] = 0;
inp[13322] = 1073596425;
inp[13323] = 0;
inp[13324] = 1073594378;
inp[13325] = 0;
inp[13326] = 1073592330;
inp[13327] = 0;
inp[13328] = 1073590282;
inp[13329] = 0;
inp[13330] = 1073588234;
inp[13331] = 0;
inp[13332] = 1073586187;
inp[13333] = 0;
inp[13334] = 1073584139;
inp[13335] = 0;
inp[13336] = 1073582091;
inp[13337] = 0;
inp[13338] = 1073580044;
inp[13339] = 0;
inp[13340] = 1073577996;
inp[13341] = 0;
inp[13342] = 1073575948;
inp[13343] = 0;
inp[13344] = 1073573901;
inp[13345] = 0;
inp[13346] = 1073571853;
inp[13347] = 0;
inp[13348] = 1073569805;
inp[13349] = 0;
inp[13350] = 1073567758;
inp[13351] = 0;
inp[13352] = 1073565710;
inp[13353] = 0;
inp[13354] = 1073563662;
inp[13355] = 0;
inp[13356] = 1073561615;
inp[13357] = 0;
inp[13358] = 1073559567;
inp[13359] = 0;
inp[13360] = 1073557519;
inp[13361] = 0;
inp[13362] = 1073555472;
inp[13363] = 0;
inp[13364] = 1073553424;
inp[13365] = 0;
inp[13366] = 1073551376;
inp[13367] = 0;
inp[13368] = 1073549329;
inp[13369] = 0;
inp[13370] = 1073547281;
inp[13371] = 0;
inp[13372] = 1073545233;
inp[13373] = 0;
inp[13374] = 1073543186;
inp[13375] = 0;
inp[13376] = 1073541138;
inp[13377] = 0;
inp[13378] = 1073539091;
inp[13379] = 0;
inp[13380] = 1073537043;
inp[13381] = 0;
inp[13382] = 1073534995;
inp[13383] = 0;
inp[13384] = 1073532948;
inp[13385] = 0;
inp[13386] = 1073530900;
inp[13387] = 0;
inp[13388] = 1073528853;
inp[13389] = 0;
inp[13390] = 1073526805;
inp[13391] = 0;
inp[13392] = 1073524757;
inp[13393] = 0;
inp[13394] = 1073522710;
inp[13395] = 0;
inp[13396] = 1073520662;
inp[13397] = 0;
inp[13398] = 1073518615;
inp[13399] = 0;
inp[13400] = 1073516567;
inp[13401] = 0;
inp[13402] = 1073514520;
inp[13403] = 0;
inp[13404] = 1073512472;
inp[13405] = 0;
inp[13406] = 1073510424;
inp[13407] = 0;
inp[13408] = 1073508377;
inp[13409] = 0;
inp[13410] = 1073506329;
inp[13411] = 0;
inp[13412] = 1073504282;
inp[13413] = 0;
inp[13414] = 1073502234;
inp[13415] = 0;
inp[13416] = 1073500187;
inp[13417] = 0;
inp[13418] = 1073498139;
inp[13419] = 0;
inp[13420] = 1073496092;
inp[13421] = 0;
inp[13422] = 1073494044;
inp[13423] = 0;
inp[13424] = 1073491997;
inp[13425] = 0;
inp[13426] = 1073489949;
inp[13427] = 0;
inp[13428] = 1073487902;
inp[13429] = 0;
inp[13430] = 1073485854;
inp[13431] = 0;
inp[13432] = 1073483807;
inp[13433] = 0;
inp[13434] = 1073481759;
inp[13435] = 0;
inp[13436] = 1073741824;
inp[13437] = 1073741824;
inp[13438] = 1073740800;
inp[13439] = 0;
inp[13440] = 1073739776;
inp[13441] = 0;
inp[13442] = 1073738752;
inp[13443] = 0;
inp[13444] = 1073737728;
inp[13445] = 0;
inp[13446] = 1073736704;
inp[13447] = 0;
inp[13448] = 1073735680;
inp[13449] = 0;
inp[13450] = 1073734656;
inp[13451] = 0;
inp[13452] = 1073733632;
inp[13453] = 0;
inp[13454] = 1073732608;
inp[13455] = 0;
inp[13456] = 1073731584;
inp[13457] = 0;
inp[13458] = 1073730560;
inp[13459] = 0;
inp[13460] = 1073729536;
inp[13461] = 0;
inp[13462] = 1073728512;
inp[13463] = 0;
inp[13464] = 1073727488;
inp[13465] = 0;
inp[13466] = 1073726464;
inp[13467] = 0;
inp[13468] = 1073725440;
inp[13469] = 0;
inp[13470] = 1073724416;
inp[13471] = 0;
inp[13472] = 1073723392;
inp[13473] = 0;
inp[13474] = 1073722368;
inp[13475] = 0;
inp[13476] = 1073721344;
inp[13477] = 0;
inp[13478] = 1073720320;
inp[13479] = 0;
inp[13480] = 1073719296;
inp[13481] = 0;
inp[13482] = 1073718272;
inp[13483] = 0;
inp[13484] = 1073717248;
inp[13485] = 0;
inp[13486] = 1073716224;
inp[13487] = 0;
inp[13488] = 1073715200;
inp[13489] = 0;
inp[13490] = 1073714176;
inp[13491] = 0;
inp[13492] = 1073713152;
inp[13493] = 0;
inp[13494] = 1073712128;
inp[13495] = 0;
inp[13496] = 1073711104;
inp[13497] = 0;
inp[13498] = 1073710080;
inp[13499] = 0;
inp[13500] = 1073709056;
inp[13501] = 0;
inp[13502] = 1073708032;
inp[13503] = 0;
inp[13504] = 1073707008;
inp[13505] = 0;
inp[13506] = 1073705984;
inp[13507] = 0;
inp[13508] = 1073704960;
inp[13509] = 0;
inp[13510] = 1073703936;
inp[13511] = 0;
inp[13512] = 1073702912;
inp[13513] = 0;
inp[13514] = 1073701888;
inp[13515] = 0;
inp[13516] = 1073700864;
inp[13517] = 0;
inp[13518] = 1073699840;
inp[13519] = 0;
inp[13520] = 1073698816;
inp[13521] = 0;
inp[13522] = 1073697792;
inp[13523] = 0;
inp[13524] = 1073696768;
inp[13525] = 0;
inp[13526] = 1073695744;
inp[13527] = 0;
inp[13528] = 1073694721;
inp[13529] = 0;
inp[13530] = 1073693697;
inp[13531] = 0;
inp[13532] = 1073692673;
inp[13533] = 0;
inp[13534] = 1073691649;
inp[13535] = 0;
inp[13536] = 1073690625;
inp[13537] = 0;
inp[13538] = 1073689601;
inp[13539] = 0;
inp[13540] = 1073688577;
inp[13541] = 0;
inp[13542] = 1073687553;
inp[13543] = 0;
inp[13544] = 1073686529;
inp[13545] = 0;
inp[13546] = 1073685505;
inp[13547] = 0;
inp[13548] = 1073684481;
inp[13549] = 0;
inp[13550] = 1073683457;
inp[13551] = 0;
inp[13552] = 1073682433;
inp[13553] = 0;
inp[13554] = 1073681409;
inp[13555] = 0;
inp[13556] = 1073680385;
inp[13557] = 0;
inp[13558] = 1073679361;
inp[13559] = 0;
inp[13560] = 1073678337;
inp[13561] = 0;
inp[13562] = 1073677313;
inp[13563] = 0;
inp[13564] = 1073676289;
inp[13565] = 0;
inp[13566] = 1073675266;
inp[13567] = 0;
inp[13568] = 1073674242;
inp[13569] = 0;
inp[13570] = 1073673218;
inp[13571] = 0;
inp[13572] = 1073672194;
inp[13573] = 0;
inp[13574] = 1073671170;
inp[13575] = 0;
inp[13576] = 1073670146;
inp[13577] = 0;
inp[13578] = 1073669122;
inp[13579] = 0;
inp[13580] = 1073668098;
inp[13581] = 0;
inp[13582] = 1073667074;
inp[13583] = 0;
inp[13584] = 1073666050;
inp[13585] = 0;
inp[13586] = 1073665026;
inp[13587] = 0;
inp[13588] = 1073664002;
inp[13589] = 0;
inp[13590] = 1073662978;
inp[13591] = 0;
inp[13592] = 1073661954;
inp[13593] = 0;
inp[13594] = 1073660931;
inp[13595] = 0;
inp[13596] = 1073659907;
inp[13597] = 0;
inp[13598] = 1073658883;
inp[13599] = 0;
inp[13600] = 1073657859;
inp[13601] = 0;
inp[13602] = 1073656835;
inp[13603] = 0;
inp[13604] = 1073655811;
inp[13605] = 0;
inp[13606] = 1073654787;
inp[13607] = 0;
inp[13608] = 1073653763;
inp[13609] = 0;
inp[13610] = 1073652739;
inp[13611] = 0;
inp[13612] = 1073651715;
inp[13613] = 0;
inp[13614] = 1073650691;
inp[13615] = 0;
inp[13616] = 1073649667;
inp[13617] = 0;
inp[13618] = 1073648644;
inp[13619] = 0;
inp[13620] = 1073647620;
inp[13621] = 0;
inp[13622] = 1073646596;
inp[13623] = 0;
inp[13624] = 1073645572;
inp[13625] = 0;
inp[13626] = 1073644548;
inp[13627] = 0;
inp[13628] = 1073643524;
inp[13629] = 0;
inp[13630] = 1073642500;
inp[13631] = 0;
inp[13632] = 1073641476;
inp[13633] = 0;
inp[13634] = 1073640452;
inp[13635] = 0;
inp[13636] = 1073639428;
inp[13637] = 0;
inp[13638] = 1073638404;
inp[13639] = 0;
inp[13640] = 1073637381;
inp[13641] = 0;
inp[13642] = 1073636357;
inp[13643] = 0;
inp[13644] = 1073635333;
inp[13645] = 0;
inp[13646] = 1073634309;
inp[13647] = 0;
inp[13648] = 1073633285;
inp[13649] = 0;
inp[13650] = 1073632261;
inp[13651] = 0;
inp[13652] = 1073631237;
inp[13653] = 0;
inp[13654] = 1073630213;
inp[13655] = 0;
inp[13656] = 1073629189;
inp[13657] = 0;
inp[13658] = 1073628166;
inp[13659] = 0;
inp[13660] = 1073627142;
inp[13661] = 0;
inp[13662] = 1073626118;
inp[13663] = 0;
inp[13664] = 1073625094;
inp[13665] = 0;
inp[13666] = 1073624070;
inp[13667] = 0;
inp[13668] = 1073623046;
inp[13669] = 0;
inp[13670] = 1073622022;
inp[13671] = 0;
inp[13672] = 1073620998;
inp[13673] = 0;
inp[13674] = 1073619974;
inp[13675] = 0;
inp[13676] = 1073618951;
inp[13677] = 0;
inp[13678] = 1073617927;
inp[13679] = 0;
inp[13680] = 1073616903;
inp[13681] = 0;
inp[13682] = 1073615879;
inp[13683] = 0;
inp[13684] = 1073614855;
inp[13685] = 0;
inp[13686] = 1073613831;
inp[13687] = 0;
inp[13688] = 1073612807;
inp[13689] = 0;
inp[13690] = 1073611783;
inp[13691] = 0;
inp[13692] = 1073741824;
inp[13693] = 1073741824;
inp[13694] = 1073741312;
inp[13695] = 0;
inp[13696] = 1073740800;
inp[13697] = 0;
inp[13698] = 1073740288;
inp[13699] = 0;
inp[13700] = 1073739776;
inp[13701] = 0;
inp[13702] = 1073739264;
inp[13703] = 0;
inp[13704] = 1073738752;
inp[13705] = 0;
inp[13706] = 1073738240;
inp[13707] = 0;
inp[13708] = 1073737728;
inp[13709] = 0;
inp[13710] = 1073737216;
inp[13711] = 0;
inp[13712] = 1073736704;
inp[13713] = 0;
inp[13714] = 1073736192;
inp[13715] = 0;
inp[13716] = 1073735680;
inp[13717] = 0;
inp[13718] = 1073735168;
inp[13719] = 0;
inp[13720] = 1073734656;
inp[13721] = 0;
inp[13722] = 1073734144;
inp[13723] = 0;
inp[13724] = 1073733632;
inp[13725] = 0;
inp[13726] = 1073733120;
inp[13727] = 0;
inp[13728] = 1073732608;
inp[13729] = 0;
inp[13730] = 1073732096;
inp[13731] = 0;
inp[13732] = 1073731584;
inp[13733] = 0;
inp[13734] = 1073731072;
inp[13735] = 0;
inp[13736] = 1073730560;
inp[13737] = 0;
inp[13738] = 1073730048;
inp[13739] = 0;
inp[13740] = 1073729536;
inp[13741] = 0;
inp[13742] = 1073729024;
inp[13743] = 0;
inp[13744] = 1073728512;
inp[13745] = 0;
inp[13746] = 1073728000;
inp[13747] = 0;
inp[13748] = 1073727488;
inp[13749] = 0;
inp[13750] = 1073726976;
inp[13751] = 0;
inp[13752] = 1073726464;
inp[13753] = 0;
inp[13754] = 1073725952;
inp[13755] = 0;
inp[13756] = 1073725440;
inp[13757] = 0;
inp[13758] = 1073724928;
inp[13759] = 0;
inp[13760] = 1073724416;
inp[13761] = 0;
inp[13762] = 1073723904;
inp[13763] = 0;
inp[13764] = 1073723392;
inp[13765] = 0;
inp[13766] = 1073722880;
inp[13767] = 0;
inp[13768] = 1073722368;
inp[13769] = 0;
inp[13770] = 1073721856;
inp[13771] = 0;
inp[13772] = 1073721344;
inp[13773] = 0;
inp[13774] = 1073720832;
inp[13775] = 0;
inp[13776] = 1073720320;
inp[13777] = 0;
inp[13778] = 1073719808;
inp[13779] = 0;
inp[13780] = 1073719296;
inp[13781] = 0;
inp[13782] = 1073718784;
inp[13783] = 0;
inp[13784] = 1073718272;
inp[13785] = 0;
inp[13786] = 1073717760;
inp[13787] = 0;
inp[13788] = 1073717248;
inp[13789] = 0;
inp[13790] = 1073716736;
inp[13791] = 0;
inp[13792] = 1073716224;
inp[13793] = 0;
inp[13794] = 1073715712;
inp[13795] = 0;
inp[13796] = 1073715200;
inp[13797] = 0;
inp[13798] = 1073714688;
inp[13799] = 0;
inp[13800] = 1073714176;
inp[13801] = 0;
inp[13802] = 1073713664;
inp[13803] = 0;
inp[13804] = 1073713152;
inp[13805] = 0;
inp[13806] = 1073712640;
inp[13807] = 0;
inp[13808] = 1073712128;
inp[13809] = 0;
inp[13810] = 1073711616;
inp[13811] = 0;
inp[13812] = 1073711104;
inp[13813] = 0;
inp[13814] = 1073710592;
inp[13815] = 0;
inp[13816] = 1073710080;
inp[13817] = 0;
inp[13818] = 1073709568;
inp[13819] = 0;
inp[13820] = 1073709056;
inp[13821] = 0;
inp[13822] = 1073708544;
inp[13823] = 0;
inp[13824] = 1073708032;
inp[13825] = 0;
inp[13826] = 1073707520;
inp[13827] = 0;
inp[13828] = 1073707008;
inp[13829] = 0;
inp[13830] = 1073706496;
inp[13831] = 0;
inp[13832] = 1073705984;
inp[13833] = 0;
inp[13834] = 1073705472;
inp[13835] = 0;
inp[13836] = 1073704960;
inp[13837] = 0;
inp[13838] = 1073704448;
inp[13839] = 0;
inp[13840] = 1073703936;
inp[13841] = 0;
inp[13842] = 1073703424;
inp[13843] = 0;
inp[13844] = 1073702912;
inp[13845] = 0;
inp[13846] = 1073702400;
inp[13847] = 0;
inp[13848] = 1073701888;
inp[13849] = 0;
inp[13850] = 1073701376;
inp[13851] = 0;
inp[13852] = 1073700864;
inp[13853] = 0;
inp[13854] = 1073700352;
inp[13855] = 0;
inp[13856] = 1073699840;
inp[13857] = 0;
inp[13858] = 1073699328;
inp[13859] = 0;
inp[13860] = 1073698816;
inp[13861] = 0;
inp[13862] = 1073698304;
inp[13863] = 0;
inp[13864] = 1073697792;
inp[13865] = 0;
inp[13866] = 1073697280;
inp[13867] = 0;
inp[13868] = 1073696768;
inp[13869] = 0;
inp[13870] = 1073696256;
inp[13871] = 0;
inp[13872] = 1073695744;
inp[13873] = 0;
inp[13874] = 1073695233;
inp[13875] = 0;
inp[13876] = 1073694721;
inp[13877] = 0;
inp[13878] = 1073694209;
inp[13879] = 0;
inp[13880] = 1073693697;
inp[13881] = 0;
inp[13882] = 1073693185;
inp[13883] = 0;
inp[13884] = 1073692673;
inp[13885] = 0;
inp[13886] = 1073692161;
inp[13887] = 0;
inp[13888] = 1073691649;
inp[13889] = 0;
inp[13890] = 1073691137;
inp[13891] = 0;
inp[13892] = 1073690625;
inp[13893] = 0;
inp[13894] = 1073690113;
inp[13895] = 0;
inp[13896] = 1073689601;
inp[13897] = 0;
inp[13898] = 1073689089;
inp[13899] = 0;
inp[13900] = 1073688577;
inp[13901] = 0;
inp[13902] = 1073688065;
inp[13903] = 0;
inp[13904] = 1073687553;
inp[13905] = 0;
inp[13906] = 1073687041;
inp[13907] = 0;
inp[13908] = 1073686529;
inp[13909] = 0;
inp[13910] = 1073686017;
inp[13911] = 0;
inp[13912] = 1073685505;
inp[13913] = 0;
inp[13914] = 1073684993;
inp[13915] = 0;
inp[13916] = 1073684481;
inp[13917] = 0;
inp[13918] = 1073683969;
inp[13919] = 0;
inp[13920] = 1073683457;
inp[13921] = 0;
inp[13922] = 1073682945;
inp[13923] = 0;
inp[13924] = 1073682433;
inp[13925] = 0;
inp[13926] = 1073681921;
inp[13927] = 0;
inp[13928] = 1073681409;
inp[13929] = 0;
inp[13930] = 1073680897;
inp[13931] = 0;
inp[13932] = 1073680385;
inp[13933] = 0;
inp[13934] = 1073679873;
inp[13935] = 0;
inp[13936] = 1073679361;
inp[13937] = 0;
inp[13938] = 1073678849;
inp[13939] = 0;
inp[13940] = 1073678337;
inp[13941] = 0;
inp[13942] = 1073677825;
inp[13943] = 0;
inp[13944] = 1073677313;
inp[13945] = 0;
inp[13946] = 1073676801;
inp[13947] = 0;
inp[13948] = 1073741824;
inp[13949] = 1073741824;
inp[13950] = 1073741568;
inp[13951] = 0;
inp[13952] = 1073741312;
inp[13953] = 0;
inp[13954] = 1073741056;
inp[13955] = 0;
inp[13956] = 1073740800;
inp[13957] = 0;
inp[13958] = 1073740544;
inp[13959] = 0;
inp[13960] = 1073740288;
inp[13961] = 0;
inp[13962] = 1073740032;
inp[13963] = 0;
inp[13964] = 1073739776;
inp[13965] = 0;
inp[13966] = 1073739520;
inp[13967] = 0;
inp[13968] = 1073739264;
inp[13969] = 0;
inp[13970] = 1073739008;
inp[13971] = 0;
inp[13972] = 1073738752;
inp[13973] = 0;
inp[13974] = 1073738496;
inp[13975] = 0;
inp[13976] = 1073738240;
inp[13977] = 0;
inp[13978] = 1073737984;
inp[13979] = 0;
inp[13980] = 1073737728;
inp[13981] = 0;
inp[13982] = 1073737472;
inp[13983] = 0;
inp[13984] = 1073737216;
inp[13985] = 0;
inp[13986] = 1073736960;
inp[13987] = 0;
inp[13988] = 1073736704;
inp[13989] = 0;
inp[13990] = 1073736448;
inp[13991] = 0;
inp[13992] = 1073736192;
inp[13993] = 0;
inp[13994] = 1073735936;
inp[13995] = 0;
inp[13996] = 1073735680;
inp[13997] = 0;
inp[13998] = 1073735424;
inp[13999] = 0;
inp[14000] = 1073735168;
inp[14001] = 0;
inp[14002] = 1073734912;
inp[14003] = 0;
inp[14004] = 1073734656;
inp[14005] = 0;
inp[14006] = 1073734400;
inp[14007] = 0;
inp[14008] = 1073734144;
inp[14009] = 0;
inp[14010] = 1073733888;
inp[14011] = 0;
inp[14012] = 1073733632;
inp[14013] = 0;
inp[14014] = 1073733376;
inp[14015] = 0;
inp[14016] = 1073733120;
inp[14017] = 0;
inp[14018] = 1073732864;
inp[14019] = 0;
inp[14020] = 1073732608;
inp[14021] = 0;
inp[14022] = 1073732352;
inp[14023] = 0;
inp[14024] = 1073732096;
inp[14025] = 0;
inp[14026] = 1073731840;
inp[14027] = 0;
inp[14028] = 1073731584;
inp[14029] = 0;
inp[14030] = 1073731328;
inp[14031] = 0;
inp[14032] = 1073731072;
inp[14033] = 0;
inp[14034] = 1073730816;
inp[14035] = 0;
inp[14036] = 1073730560;
inp[14037] = 0;
inp[14038] = 1073730304;
inp[14039] = 0;
inp[14040] = 1073730048;
inp[14041] = 0;
inp[14042] = 1073729792;
inp[14043] = 0;
inp[14044] = 1073729536;
inp[14045] = 0;
inp[14046] = 1073729280;
inp[14047] = 0;
inp[14048] = 1073729024;
inp[14049] = 0;
inp[14050] = 1073728768;
inp[14051] = 0;
inp[14052] = 1073728512;
inp[14053] = 0;
inp[14054] = 1073728256;
inp[14055] = 0;
inp[14056] = 1073728000;
inp[14057] = 0;
inp[14058] = 1073727744;
inp[14059] = 0;
inp[14060] = 1073727488;
inp[14061] = 0;
inp[14062] = 1073727232;
inp[14063] = 0;
inp[14064] = 1073726976;
inp[14065] = 0;
inp[14066] = 1073726720;
inp[14067] = 0;
inp[14068] = 1073726464;
inp[14069] = 0;
inp[14070] = 1073726208;
inp[14071] = 0;
inp[14072] = 1073725952;
inp[14073] = 0;
inp[14074] = 1073725696;
inp[14075] = 0;
inp[14076] = 1073725440;
inp[14077] = 0;
inp[14078] = 1073725184;
inp[14079] = 0;
inp[14080] = 1073724928;
inp[14081] = 0;
inp[14082] = 1073724672;
inp[14083] = 0;
inp[14084] = 1073724416;
inp[14085] = 0;
inp[14086] = 1073724160;
inp[14087] = 0;
inp[14088] = 1073723904;
inp[14089] = 0;
inp[14090] = 1073723648;
inp[14091] = 0;
inp[14092] = 1073723392;
inp[14093] = 0;
inp[14094] = 1073723136;
inp[14095] = 0;
inp[14096] = 1073722880;
inp[14097] = 0;
inp[14098] = 1073722624;
inp[14099] = 0;
inp[14100] = 1073722368;
inp[14101] = 0;
inp[14102] = 1073722112;
inp[14103] = 0;
inp[14104] = 1073721856;
inp[14105] = 0;
inp[14106] = 1073721600;
inp[14107] = 0;
inp[14108] = 1073721344;
inp[14109] = 0;
inp[14110] = 1073721088;
inp[14111] = 0;
inp[14112] = 1073720832;
inp[14113] = 0;
inp[14114] = 1073720576;
inp[14115] = 0;
inp[14116] = 1073720320;
inp[14117] = 0;
inp[14118] = 1073720064;
inp[14119] = 0;
inp[14120] = 1073719808;
inp[14121] = 0;
inp[14122] = 1073719552;
inp[14123] = 0;
inp[14124] = 1073719296;
inp[14125] = 0;
inp[14126] = 1073719040;
inp[14127] = 0;
inp[14128] = 1073718784;
inp[14129] = 0;
inp[14130] = 1073718528;
inp[14131] = 0;
inp[14132] = 1073718272;
inp[14133] = 0;
inp[14134] = 1073718016;
inp[14135] = 0;
inp[14136] = 1073717760;
inp[14137] = 0;
inp[14138] = 1073717504;
inp[14139] = 0;
inp[14140] = 1073717248;
inp[14141] = 0;
inp[14142] = 1073716992;
inp[14143] = 0;
inp[14144] = 1073716736;
inp[14145] = 0;
inp[14146] = 1073716480;
inp[14147] = 0;
inp[14148] = 1073716224;
inp[14149] = 0;
inp[14150] = 1073715968;
inp[14151] = 0;
inp[14152] = 1073715712;
inp[14153] = 0;
inp[14154] = 1073715456;
inp[14155] = 0;
inp[14156] = 1073715200;
inp[14157] = 0;
inp[14158] = 1073714944;
inp[14159] = 0;
inp[14160] = 1073714688;
inp[14161] = 0;
inp[14162] = 1073714432;
inp[14163] = 0;
inp[14164] = 1073714176;
inp[14165] = 0;
inp[14166] = 1073713920;
inp[14167] = 0;
inp[14168] = 1073713664;
inp[14169] = 0;
inp[14170] = 1073713408;
inp[14171] = 0;
inp[14172] = 1073713152;
inp[14173] = 0;
inp[14174] = 1073712896;
inp[14175] = 0;
inp[14176] = 1073712640;
inp[14177] = 0;
inp[14178] = 1073712384;
inp[14179] = 0;
inp[14180] = 1073712128;
inp[14181] = 0;
inp[14182] = 1073711872;
inp[14183] = 0;
inp[14184] = 1073711616;
inp[14185] = 0;
inp[14186] = 1073711360;
inp[14187] = 0;
inp[14188] = 1073711104;
inp[14189] = 0;
inp[14190] = 1073710848;
inp[14191] = 0;
inp[14192] = 1073710592;
inp[14193] = 0;
inp[14194] = 1073710336;
inp[14195] = 0;
inp[14196] = 1073710080;
inp[14197] = 0;
inp[14198] = 1073709824;
inp[14199] = 0;
inp[14200] = 1073709568;
inp[14201] = 0;
inp[14202] = 1073709312;
inp[14203] = 0;
inp[14204] = 1073741824;
inp[14205] = 1073741824;
inp[14206] = 1073741696;
inp[14207] = 0;
inp[14208] = 1073741568;
inp[14209] = 0;
inp[14210] = 1073741440;
inp[14211] = 0;
inp[14212] = 1073741312;
inp[14213] = 0;
inp[14214] = 1073741184;
inp[14215] = 0;
inp[14216] = 1073741056;
inp[14217] = 0;
inp[14218] = 1073740928;
inp[14219] = 0;
inp[14220] = 1073740800;
inp[14221] = 0;
inp[14222] = 1073740672;
inp[14223] = 0;
inp[14224] = 1073740544;
inp[14225] = 0;
inp[14226] = 1073740416;
inp[14227] = 0;
inp[14228] = 1073740288;
inp[14229] = 0;
inp[14230] = 1073740160;
inp[14231] = 0;
inp[14232] = 1073740032;
inp[14233] = 0;
inp[14234] = 1073739904;
inp[14235] = 0;
inp[14236] = 1073739776;
inp[14237] = 0;
inp[14238] = 1073739648;
inp[14239] = 0;
inp[14240] = 1073739520;
inp[14241] = 0;
inp[14242] = 1073739392;
inp[14243] = 0;
inp[14244] = 1073739264;
inp[14245] = 0;
inp[14246] = 1073739136;
inp[14247] = 0;
inp[14248] = 1073739008;
inp[14249] = 0;
inp[14250] = 1073738880;
inp[14251] = 0;
inp[14252] = 1073738752;
inp[14253] = 0;
inp[14254] = 1073738624;
inp[14255] = 0;
inp[14256] = 1073738496;
inp[14257] = 0;
inp[14258] = 1073738368;
inp[14259] = 0;
inp[14260] = 1073738240;
inp[14261] = 0;
inp[14262] = 1073738112;
inp[14263] = 0;
inp[14264] = 1073737984;
inp[14265] = 0;
inp[14266] = 1073737856;
inp[14267] = 0;
inp[14268] = 1073737728;
inp[14269] = 0;
inp[14270] = 1073737600;
inp[14271] = 0;
inp[14272] = 1073737472;
inp[14273] = 0;
inp[14274] = 1073737344;
inp[14275] = 0;
inp[14276] = 1073737216;
inp[14277] = 0;
inp[14278] = 1073737088;
inp[14279] = 0;
inp[14280] = 1073736960;
inp[14281] = 0;
inp[14282] = 1073736832;
inp[14283] = 0;
inp[14284] = 1073736704;
inp[14285] = 0;
inp[14286] = 1073736576;
inp[14287] = 0;
inp[14288] = 1073736448;
inp[14289] = 0;
inp[14290] = 1073736320;
inp[14291] = 0;
inp[14292] = 1073736192;
inp[14293] = 0;
inp[14294] = 1073736064;
inp[14295] = 0;
inp[14296] = 1073735936;
inp[14297] = 0;
inp[14298] = 1073735808;
inp[14299] = 0;
inp[14300] = 1073735680;
inp[14301] = 0;
inp[14302] = 1073735552;
inp[14303] = 0;
inp[14304] = 1073735424;
inp[14305] = 0;
inp[14306] = 1073735296;
inp[14307] = 0;
inp[14308] = 1073735168;
inp[14309] = 0;
inp[14310] = 1073735040;
inp[14311] = 0;
inp[14312] = 1073734912;
inp[14313] = 0;
inp[14314] = 1073734784;
inp[14315] = 0;
inp[14316] = 1073734656;
inp[14317] = 0;
inp[14318] = 1073734528;
inp[14319] = 0;
inp[14320] = 1073734400;
inp[14321] = 0;
inp[14322] = 1073734272;
inp[14323] = 0;
inp[14324] = 1073734144;
inp[14325] = 0;
inp[14326] = 1073734016;
inp[14327] = 0;
inp[14328] = 1073733888;
inp[14329] = 0;
inp[14330] = 1073733760;
inp[14331] = 0;
inp[14332] = 1073733632;
inp[14333] = 0;
inp[14334] = 1073733504;
inp[14335] = 0;
inp[14336] = 1073733376;
inp[14337] = 0;
inp[14338] = 1073733248;
inp[14339] = 0;
inp[14340] = 1073733120;
inp[14341] = 0;
inp[14342] = 1073732992;
inp[14343] = 0;
inp[14344] = 1073732864;
inp[14345] = 0;
inp[14346] = 1073732736;
inp[14347] = 0;
inp[14348] = 1073732608;
inp[14349] = 0;
inp[14350] = 1073732480;
inp[14351] = 0;
inp[14352] = 1073732352;
inp[14353] = 0;
inp[14354] = 1073732224;
inp[14355] = 0;
inp[14356] = 1073732096;
inp[14357] = 0;
inp[14358] = 1073731968;
inp[14359] = 0;
inp[14360] = 1073731840;
inp[14361] = 0;
inp[14362] = 1073731712;
inp[14363] = 0;
inp[14364] = 1073731584;
inp[14365] = 0;
inp[14366] = 1073731456;
inp[14367] = 0;
inp[14368] = 1073731328;
inp[14369] = 0;
inp[14370] = 1073731200;
inp[14371] = 0;
inp[14372] = 1073731072;
inp[14373] = 0;
inp[14374] = 1073730944;
inp[14375] = 0;
inp[14376] = 1073730816;
inp[14377] = 0;
inp[14378] = 1073730688;
inp[14379] = 0;
inp[14380] = 1073730560;
inp[14381] = 0;
inp[14382] = 1073730432;
inp[14383] = 0;
inp[14384] = 1073730304;
inp[14385] = 0;
inp[14386] = 1073730176;
inp[14387] = 0;
inp[14388] = 1073730048;
inp[14389] = 0;
inp[14390] = 1073729920;
inp[14391] = 0;
inp[14392] = 1073729792;
inp[14393] = 0;
inp[14394] = 1073729664;
inp[14395] = 0;
inp[14396] = 1073729536;
inp[14397] = 0;
inp[14398] = 1073729408;
inp[14399] = 0;
inp[14400] = 1073729280;
inp[14401] = 0;
inp[14402] = 1073729152;
inp[14403] = 0;
inp[14404] = 1073729024;
inp[14405] = 0;
inp[14406] = 1073728896;
inp[14407] = 0;
inp[14408] = 1073728768;
inp[14409] = 0;
inp[14410] = 1073728640;
inp[14411] = 0;
inp[14412] = 1073728512;
inp[14413] = 0;
inp[14414] = 1073728384;
inp[14415] = 0;
inp[14416] = 1073728256;
inp[14417] = 0;
inp[14418] = 1073728128;
inp[14419] = 0;
inp[14420] = 1073728000;
inp[14421] = 0;
inp[14422] = 1073727872;
inp[14423] = 0;
inp[14424] = 1073727744;
inp[14425] = 0;
inp[14426] = 1073727616;
inp[14427] = 0;
inp[14428] = 1073727488;
inp[14429] = 0;
inp[14430] = 1073727360;
inp[14431] = 0;
inp[14432] = 1073727232;
inp[14433] = 0;
inp[14434] = 1073727104;
inp[14435] = 0;
inp[14436] = 1073726976;
inp[14437] = 0;
inp[14438] = 1073726848;
inp[14439] = 0;
inp[14440] = 1073726720;
inp[14441] = 0;
inp[14442] = 1073726592;
inp[14443] = 0;
inp[14444] = 1073726464;
inp[14445] = 0;
inp[14446] = 1073726336;
inp[14447] = 0;
inp[14448] = 1073726208;
inp[14449] = 0;
inp[14450] = 1073726080;
inp[14451] = 0;
inp[14452] = 1073725952;
inp[14453] = 0;
inp[14454] = 1073725824;
inp[14455] = 0;
inp[14456] = 1073725696;
inp[14457] = 0;
inp[14458] = 1073725568;
inp[14459] = 0;
inp[14460] = 1073741824;
inp[14461] = 1073741824;
inp[14462] = 1073741760;
inp[14463] = 0;
inp[14464] = 1073741696;
inp[14465] = 0;
inp[14466] = 1073741632;
inp[14467] = 0;
inp[14468] = 1073741568;
inp[14469] = 0;
inp[14470] = 1073741504;
inp[14471] = 0;
inp[14472] = 1073741440;
inp[14473] = 0;
inp[14474] = 1073741376;
inp[14475] = 0;
inp[14476] = 1073741312;
inp[14477] = 0;
inp[14478] = 1073741248;
inp[14479] = 0;
inp[14480] = 1073741184;
inp[14481] = 0;
inp[14482] = 1073741120;
inp[14483] = 0;
inp[14484] = 1073741056;
inp[14485] = 0;
inp[14486] = 1073740992;
inp[14487] = 0;
inp[14488] = 1073740928;
inp[14489] = 0;
inp[14490] = 1073740864;
inp[14491] = 0;
inp[14492] = 1073740800;
inp[14493] = 0;
inp[14494] = 1073740736;
inp[14495] = 0;
inp[14496] = 1073740672;
inp[14497] = 0;
inp[14498] = 1073740608;
inp[14499] = 0;
inp[14500] = 1073740544;
inp[14501] = 0;
inp[14502] = 1073740480;
inp[14503] = 0;
inp[14504] = 1073740416;
inp[14505] = 0;
inp[14506] = 1073740352;
inp[14507] = 0;
inp[14508] = 1073740288;
inp[14509] = 0;
inp[14510] = 1073740224;
inp[14511] = 0;
inp[14512] = 1073740160;
inp[14513] = 0;
inp[14514] = 1073740096;
inp[14515] = 0;
inp[14516] = 1073740032;
inp[14517] = 0;
inp[14518] = 1073739968;
inp[14519] = 0;
inp[14520] = 1073739904;
inp[14521] = 0;
inp[14522] = 1073739840;
inp[14523] = 0;
inp[14524] = 1073739776;
inp[14525] = 0;
inp[14526] = 1073739712;
inp[14527] = 0;
inp[14528] = 1073739648;
inp[14529] = 0;
inp[14530] = 1073739584;
inp[14531] = 0;
inp[14532] = 1073739520;
inp[14533] = 0;
inp[14534] = 1073739456;
inp[14535] = 0;
inp[14536] = 1073739392;
inp[14537] = 0;
inp[14538] = 1073739328;
inp[14539] = 0;
inp[14540] = 1073739264;
inp[14541] = 0;
inp[14542] = 1073739200;
inp[14543] = 0;
inp[14544] = 1073739136;
inp[14545] = 0;
inp[14546] = 1073739072;
inp[14547] = 0;
inp[14548] = 1073739008;
inp[14549] = 0;
inp[14550] = 1073738944;
inp[14551] = 0;
inp[14552] = 1073738880;
inp[14553] = 0;
inp[14554] = 1073738816;
inp[14555] = 0;
inp[14556] = 1073738752;
inp[14557] = 0;
inp[14558] = 1073738688;
inp[14559] = 0;
inp[14560] = 1073738624;
inp[14561] = 0;
inp[14562] = 1073738560;
inp[14563] = 0;
inp[14564] = 1073738496;
inp[14565] = 0;
inp[14566] = 1073738432;
inp[14567] = 0;
inp[14568] = 1073738368;
inp[14569] = 0;
inp[14570] = 1073738304;
inp[14571] = 0;
inp[14572] = 1073738240;
inp[14573] = 0;
inp[14574] = 1073738176;
inp[14575] = 0;
inp[14576] = 1073738112;
inp[14577] = 0;
inp[14578] = 1073738048;
inp[14579] = 0;
inp[14580] = 1073737984;
inp[14581] = 0;
inp[14582] = 1073737920;
inp[14583] = 0;
inp[14584] = 1073737856;
inp[14585] = 0;
inp[14586] = 1073737792;
inp[14587] = 0;
inp[14588] = 1073737728;
inp[14589] = 0;
inp[14590] = 1073737664;
inp[14591] = 0;
inp[14592] = 1073737600;
inp[14593] = 0;
inp[14594] = 1073737536;
inp[14595] = 0;
inp[14596] = 1073737472;
inp[14597] = 0;
inp[14598] = 1073737408;
inp[14599] = 0;
inp[14600] = 1073737344;
inp[14601] = 0;
inp[14602] = 1073737280;
inp[14603] = 0;
inp[14604] = 1073737216;
inp[14605] = 0;
inp[14606] = 1073737152;
inp[14607] = 0;
inp[14608] = 1073737088;
inp[14609] = 0;
inp[14610] = 1073737024;
inp[14611] = 0;
inp[14612] = 1073736960;
inp[14613] = 0;
inp[14614] = 1073736896;
inp[14615] = 0;
inp[14616] = 1073736832;
inp[14617] = 0;
inp[14618] = 1073736768;
inp[14619] = 0;
inp[14620] = 1073736704;
inp[14621] = 0;
inp[14622] = 1073736640;
inp[14623] = 0;
inp[14624] = 1073736576;
inp[14625] = 0;
inp[14626] = 1073736512;
inp[14627] = 0;
inp[14628] = 1073736448;
inp[14629] = 0;
inp[14630] = 1073736384;
inp[14631] = 0;
inp[14632] = 1073736320;
inp[14633] = 0;
inp[14634] = 1073736256;
inp[14635] = 0;
inp[14636] = 1073736192;
inp[14637] = 0;
inp[14638] = 1073736128;
inp[14639] = 0;
inp[14640] = 1073736064;
inp[14641] = 0;
inp[14642] = 1073736000;
inp[14643] = 0;
inp[14644] = 1073735936;
inp[14645] = 0;
inp[14646] = 1073735872;
inp[14647] = 0;
inp[14648] = 1073735808;
inp[14649] = 0;
inp[14650] = 1073735744;
inp[14651] = 0;
inp[14652] = 1073735680;
inp[14653] = 0;
inp[14654] = 1073735616;
inp[14655] = 0;
inp[14656] = 1073735552;
inp[14657] = 0;
inp[14658] = 1073735488;
inp[14659] = 0;
inp[14660] = 1073735424;
inp[14661] = 0;
inp[14662] = 1073735360;
inp[14663] = 0;
inp[14664] = 1073735296;
inp[14665] = 0;
inp[14666] = 1073735232;
inp[14667] = 0;
inp[14668] = 1073735168;
inp[14669] = 0;
inp[14670] = 1073735104;
inp[14671] = 0;
inp[14672] = 1073735040;
inp[14673] = 0;
inp[14674] = 1073734976;
inp[14675] = 0;
inp[14676] = 1073734912;
inp[14677] = 0;
inp[14678] = 1073734848;
inp[14679] = 0;
inp[14680] = 1073734784;
inp[14681] = 0;
inp[14682] = 1073734720;
inp[14683] = 0;
inp[14684] = 1073734656;
inp[14685] = 0;
inp[14686] = 1073734592;
inp[14687] = 0;
inp[14688] = 1073734528;
inp[14689] = 0;
inp[14690] = 1073734464;
inp[14691] = 0;
inp[14692] = 1073734400;
inp[14693] = 0;
inp[14694] = 1073734336;
inp[14695] = 0;
inp[14696] = 1073734272;
inp[14697] = 0;
inp[14698] = 1073734208;
inp[14699] = 0;
inp[14700] = 1073734144;
inp[14701] = 0;
inp[14702] = 1073734080;
inp[14703] = 0;
inp[14704] = 1073734016;
inp[14705] = 0;
inp[14706] = 1073733952;
inp[14707] = 0;
inp[14708] = 1073733888;
inp[14709] = 0;
inp[14710] = 1073733824;
inp[14711] = 0;
inp[14712] = 1073733760;
inp[14713] = 0;
inp[14714] = 1073733696;
inp[14715] = 0;
inp[14716] = 1073741824;
inp[14717] = 1073741824;
inp[14718] = 1073741792;
inp[14719] = 0;
inp[14720] = 1073741760;
inp[14721] = 0;
inp[14722] = 1073741728;
inp[14723] = 0;
inp[14724] = 1073741696;
inp[14725] = 0;
inp[14726] = 1073741664;
inp[14727] = 0;
inp[14728] = 1073741632;
inp[14729] = 0;
inp[14730] = 1073741600;
inp[14731] = 0;
inp[14732] = 1073741568;
inp[14733] = 0;
inp[14734] = 1073741536;
inp[14735] = 0;
inp[14736] = 1073741504;
inp[14737] = 0;
inp[14738] = 1073741472;
inp[14739] = 0;
inp[14740] = 1073741440;
inp[14741] = 0;
inp[14742] = 1073741408;
inp[14743] = 0;
inp[14744] = 1073741376;
inp[14745] = 0;
inp[14746] = 1073741344;
inp[14747] = 0;
inp[14748] = 1073741312;
inp[14749] = 0;
inp[14750] = 1073741280;
inp[14751] = 0;
inp[14752] = 1073741248;
inp[14753] = 0;
inp[14754] = 1073741216;
inp[14755] = 0;
inp[14756] = 1073741184;
inp[14757] = 0;
inp[14758] = 1073741152;
inp[14759] = 0;
inp[14760] = 1073741120;
inp[14761] = 0;
inp[14762] = 1073741088;
inp[14763] = 0;
inp[14764] = 1073741056;
inp[14765] = 0;
inp[14766] = 1073741024;
inp[14767] = 0;
inp[14768] = 1073740992;
inp[14769] = 0;
inp[14770] = 1073740960;
inp[14771] = 0;
inp[14772] = 1073740928;
inp[14773] = 0;
inp[14774] = 1073740896;
inp[14775] = 0;
inp[14776] = 1073740864;
inp[14777] = 0;
inp[14778] = 1073740832;
inp[14779] = 0;
inp[14780] = 1073740800;
inp[14781] = 0;
inp[14782] = 1073740768;
inp[14783] = 0;
inp[14784] = 1073740736;
inp[14785] = 0;
inp[14786] = 1073740704;
inp[14787] = 0;
inp[14788] = 1073740672;
inp[14789] = 0;
inp[14790] = 1073740640;
inp[14791] = 0;
inp[14792] = 1073740608;
inp[14793] = 0;
inp[14794] = 1073740576;
inp[14795] = 0;
inp[14796] = 1073740544;
inp[14797] = 0;
inp[14798] = 1073740512;
inp[14799] = 0;
inp[14800] = 1073740480;
inp[14801] = 0;
inp[14802] = 1073740448;
inp[14803] = 0;
inp[14804] = 1073740416;
inp[14805] = 0;
inp[14806] = 1073740384;
inp[14807] = 0;
inp[14808] = 1073740352;
inp[14809] = 0;
inp[14810] = 1073740320;
inp[14811] = 0;
inp[14812] = 1073740288;
inp[14813] = 0;
inp[14814] = 1073740256;
inp[14815] = 0;
inp[14816] = 1073740224;
inp[14817] = 0;
inp[14818] = 1073740192;
inp[14819] = 0;
inp[14820] = 1073740160;
inp[14821] = 0;
inp[14822] = 1073740128;
inp[14823] = 0;
inp[14824] = 1073740096;
inp[14825] = 0;
inp[14826] = 1073740064;
inp[14827] = 0;
inp[14828] = 1073740032;
inp[14829] = 0;
inp[14830] = 1073740000;
inp[14831] = 0;
inp[14832] = 1073739968;
inp[14833] = 0;
inp[14834] = 1073739936;
inp[14835] = 0;
inp[14836] = 1073739904;
inp[14837] = 0;
inp[14838] = 1073739872;
inp[14839] = 0;
inp[14840] = 1073739840;
inp[14841] = 0;
inp[14842] = 1073739808;
inp[14843] = 0;
inp[14844] = 1073739776;
inp[14845] = 0;
inp[14846] = 1073739744;
inp[14847] = 0;
inp[14848] = 1073739712;
inp[14849] = 0;
inp[14850] = 1073739680;
inp[14851] = 0;
inp[14852] = 1073739648;
inp[14853] = 0;
inp[14854] = 1073739616;
inp[14855] = 0;
inp[14856] = 1073739584;
inp[14857] = 0;
inp[14858] = 1073739552;
inp[14859] = 0;
inp[14860] = 1073739520;
inp[14861] = 0;
inp[14862] = 1073739488;
inp[14863] = 0;
inp[14864] = 1073739456;
inp[14865] = 0;
inp[14866] = 1073739424;
inp[14867] = 0;
inp[14868] = 1073739392;
inp[14869] = 0;
inp[14870] = 1073739360;
inp[14871] = 0;
inp[14872] = 1073739328;
inp[14873] = 0;
inp[14874] = 1073739296;
inp[14875] = 0;
inp[14876] = 1073739264;
inp[14877] = 0;
inp[14878] = 1073739232;
inp[14879] = 0;
inp[14880] = 1073739200;
inp[14881] = 0;
inp[14882] = 1073739168;
inp[14883] = 0;
inp[14884] = 1073739136;
inp[14885] = 0;
inp[14886] = 1073739104;
inp[14887] = 0;
inp[14888] = 1073739072;
inp[14889] = 0;
inp[14890] = 1073739040;
inp[14891] = 0;
inp[14892] = 1073739008;
inp[14893] = 0;
inp[14894] = 1073738976;
inp[14895] = 0;
inp[14896] = 1073738944;
inp[14897] = 0;
inp[14898] = 1073738912;
inp[14899] = 0;
inp[14900] = 1073738880;
inp[14901] = 0;
inp[14902] = 1073738848;
inp[14903] = 0;
inp[14904] = 1073738816;
inp[14905] = 0;
inp[14906] = 1073738784;
inp[14907] = 0;
inp[14908] = 1073738752;
inp[14909] = 0;
inp[14910] = 1073738720;
inp[14911] = 0;
inp[14912] = 1073738688;
inp[14913] = 0;
inp[14914] = 1073738656;
inp[14915] = 0;
inp[14916] = 1073738624;
inp[14917] = 0;
inp[14918] = 1073738592;
inp[14919] = 0;
inp[14920] = 1073738560;
inp[14921] = 0;
inp[14922] = 1073738528;
inp[14923] = 0;
inp[14924] = 1073738496;
inp[14925] = 0;
inp[14926] = 1073738464;
inp[14927] = 0;
inp[14928] = 1073738432;
inp[14929] = 0;
inp[14930] = 1073738400;
inp[14931] = 0;
inp[14932] = 1073738368;
inp[14933] = 0;
inp[14934] = 1073738336;
inp[14935] = 0;
inp[14936] = 1073738304;
inp[14937] = 0;
inp[14938] = 1073738272;
inp[14939] = 0;
inp[14940] = 1073738240;
inp[14941] = 0;
inp[14942] = 1073738208;
inp[14943] = 0;
inp[14944] = 1073738176;
inp[14945] = 0;
inp[14946] = 1073738144;
inp[14947] = 0;
inp[14948] = 1073738112;
inp[14949] = 0;
inp[14950] = 1073738080;
inp[14951] = 0;
inp[14952] = 1073738048;
inp[14953] = 0;
inp[14954] = 1073738016;
inp[14955] = 0;
inp[14956] = 1073737984;
inp[14957] = 0;
inp[14958] = 1073737952;
inp[14959] = 0;
inp[14960] = 1073737920;
inp[14961] = 0;
inp[14962] = 1073737888;
inp[14963] = 0;
inp[14964] = 1073737856;
inp[14965] = 0;
inp[14966] = 1073737824;
inp[14967] = 0;
inp[14968] = 1073737792;
inp[14969] = 0;
inp[14970] = 1073737760;
inp[14971] = 0;
inp[14972] = 1073741824;
inp[14973] = 1073741824;
inp[14974] = 1073741808;
inp[14975] = 0;
inp[14976] = 1073741792;
inp[14977] = 0;
inp[14978] = 1073741776;
inp[14979] = 0;
inp[14980] = 1073741760;
inp[14981] = 0;
inp[14982] = 1073741744;
inp[14983] = 0;
inp[14984] = 1073741728;
inp[14985] = 0;
inp[14986] = 1073741712;
inp[14987] = 0;
inp[14988] = 1073741696;
inp[14989] = 0;
inp[14990] = 1073741680;
inp[14991] = 0;
inp[14992] = 1073741664;
inp[14993] = 0;
inp[14994] = 1073741648;
inp[14995] = 0;
inp[14996] = 1073741632;
inp[14997] = 0;
inp[14998] = 1073741616;
inp[14999] = 0;
inp[15000] = 1073741600;
inp[15001] = 0;
inp[15002] = 1073741584;
inp[15003] = 0;
inp[15004] = 1073741568;
inp[15005] = 0;
inp[15006] = 1073741552;
inp[15007] = 0;
inp[15008] = 1073741536;
inp[15009] = 0;
inp[15010] = 1073741520;
inp[15011] = 0;
inp[15012] = 1073741504;
inp[15013] = 0;
inp[15014] = 1073741488;
inp[15015] = 0;
inp[15016] = 1073741472;
inp[15017] = 0;
inp[15018] = 1073741456;
inp[15019] = 0;
inp[15020] = 1073741440;
inp[15021] = 0;
inp[15022] = 1073741424;
inp[15023] = 0;
inp[15024] = 1073741408;
inp[15025] = 0;
inp[15026] = 1073741392;
inp[15027] = 0;
inp[15028] = 1073741376;
inp[15029] = 0;
inp[15030] = 1073741360;
inp[15031] = 0;
inp[15032] = 1073741344;
inp[15033] = 0;
inp[15034] = 1073741328;
inp[15035] = 0;
inp[15036] = 1073741312;
inp[15037] = 0;
inp[15038] = 1073741296;
inp[15039] = 0;
inp[15040] = 1073741280;
inp[15041] = 0;
inp[15042] = 1073741264;
inp[15043] = 0;
inp[15044] = 1073741248;
inp[15045] = 0;
inp[15046] = 1073741232;
inp[15047] = 0;
inp[15048] = 1073741216;
inp[15049] = 0;
inp[15050] = 1073741200;
inp[15051] = 0;
inp[15052] = 1073741184;
inp[15053] = 0;
inp[15054] = 1073741168;
inp[15055] = 0;
inp[15056] = 1073741152;
inp[15057] = 0;
inp[15058] = 1073741136;
inp[15059] = 0;
inp[15060] = 1073741120;
inp[15061] = 0;
inp[15062] = 1073741104;
inp[15063] = 0;
inp[15064] = 1073741088;
inp[15065] = 0;
inp[15066] = 1073741072;
inp[15067] = 0;
inp[15068] = 1073741056;
inp[15069] = 0;
inp[15070] = 1073741040;
inp[15071] = 0;
inp[15072] = 1073741024;
inp[15073] = 0;
inp[15074] = 1073741008;
inp[15075] = 0;
inp[15076] = 1073740992;
inp[15077] = 0;
inp[15078] = 1073740976;
inp[15079] = 0;
inp[15080] = 1073740960;
inp[15081] = 0;
inp[15082] = 1073740944;
inp[15083] = 0;
inp[15084] = 1073740928;
inp[15085] = 0;
inp[15086] = 1073740912;
inp[15087] = 0;
inp[15088] = 1073740896;
inp[15089] = 0;
inp[15090] = 1073740880;
inp[15091] = 0;
inp[15092] = 1073740864;
inp[15093] = 0;
inp[15094] = 1073740848;
inp[15095] = 0;
inp[15096] = 1073740832;
inp[15097] = 0;
inp[15098] = 1073740816;
inp[15099] = 0;
inp[15100] = 1073740800;
inp[15101] = 0;
inp[15102] = 1073740784;
inp[15103] = 0;
inp[15104] = 1073740768;
inp[15105] = 0;
inp[15106] = 1073740752;
inp[15107] = 0;
inp[15108] = 1073740736;
inp[15109] = 0;
inp[15110] = 1073740720;
inp[15111] = 0;
inp[15112] = 1073740704;
inp[15113] = 0;
inp[15114] = 1073740688;
inp[15115] = 0;
inp[15116] = 1073740672;
inp[15117] = 0;
inp[15118] = 1073740656;
inp[15119] = 0;
inp[15120] = 1073740640;
inp[15121] = 0;
inp[15122] = 1073740624;
inp[15123] = 0;
inp[15124] = 1073740608;
inp[15125] = 0;
inp[15126] = 1073740592;
inp[15127] = 0;
inp[15128] = 1073740576;
inp[15129] = 0;
inp[15130] = 1073740560;
inp[15131] = 0;
inp[15132] = 1073740544;
inp[15133] = 0;
inp[15134] = 1073740528;
inp[15135] = 0;
inp[15136] = 1073740512;
inp[15137] = 0;
inp[15138] = 1073740496;
inp[15139] = 0;
inp[15140] = 1073740480;
inp[15141] = 0;
inp[15142] = 1073740464;
inp[15143] = 0;
inp[15144] = 1073740448;
inp[15145] = 0;
inp[15146] = 1073740432;
inp[15147] = 0;
inp[15148] = 1073740416;
inp[15149] = 0;
inp[15150] = 1073740400;
inp[15151] = 0;
inp[15152] = 1073740384;
inp[15153] = 0;
inp[15154] = 1073740368;
inp[15155] = 0;
inp[15156] = 1073740352;
inp[15157] = 0;
inp[15158] = 1073740336;
inp[15159] = 0;
inp[15160] = 1073740320;
inp[15161] = 0;
inp[15162] = 1073740304;
inp[15163] = 0;
inp[15164] = 1073740288;
inp[15165] = 0;
inp[15166] = 1073740272;
inp[15167] = 0;
inp[15168] = 1073740256;
inp[15169] = 0;
inp[15170] = 1073740240;
inp[15171] = 0;
inp[15172] = 1073740224;
inp[15173] = 0;
inp[15174] = 1073740208;
inp[15175] = 0;
inp[15176] = 1073740192;
inp[15177] = 0;
inp[15178] = 1073740176;
inp[15179] = 0;
inp[15180] = 1073740160;
inp[15181] = 0;
inp[15182] = 1073740144;
inp[15183] = 0;
inp[15184] = 1073740128;
inp[15185] = 0;
inp[15186] = 1073740112;
inp[15187] = 0;
inp[15188] = 1073740096;
inp[15189] = 0;
inp[15190] = 1073740080;
inp[15191] = 0;
inp[15192] = 1073740064;
inp[15193] = 0;
inp[15194] = 1073740048;
inp[15195] = 0;
inp[15196] = 1073740032;
inp[15197] = 0;
inp[15198] = 1073740016;
inp[15199] = 0;
inp[15200] = 1073740000;
inp[15201] = 0;
inp[15202] = 1073739984;
inp[15203] = 0;
inp[15204] = 1073739968;
inp[15205] = 0;
inp[15206] = 1073739952;
inp[15207] = 0;
inp[15208] = 1073739936;
inp[15209] = 0;
inp[15210] = 1073739920;
inp[15211] = 0;
inp[15212] = 1073739904;
inp[15213] = 0;
inp[15214] = 1073739888;
inp[15215] = 0;
inp[15216] = 1073739872;
inp[15217] = 0;
inp[15218] = 1073739856;
inp[15219] = 0;
inp[15220] = 1073739840;
inp[15221] = 0;
inp[15222] = 1073739824;
inp[15223] = 0;
inp[15224] = 1073739808;
inp[15225] = 0;
inp[15226] = 1073739792;
inp[15227] = 0;
inp[15228] = 1073741824;
inp[15229] = 1073741824;
inp[15230] = 1073741816;
inp[15231] = 0;
inp[15232] = 1073741808;
inp[15233] = 0;
inp[15234] = 1073741800;
inp[15235] = 0;
inp[15236] = 1073741792;
inp[15237] = 0;
inp[15238] = 1073741784;
inp[15239] = 0;
inp[15240] = 1073741776;
inp[15241] = 0;
inp[15242] = 1073741768;
inp[15243] = 0;
inp[15244] = 1073741760;
inp[15245] = 0;
inp[15246] = 1073741752;
inp[15247] = 0;
inp[15248] = 1073741744;
inp[15249] = 0;
inp[15250] = 1073741736;
inp[15251] = 0;
inp[15252] = 1073741728;
inp[15253] = 0;
inp[15254] = 1073741720;
inp[15255] = 0;
inp[15256] = 1073741712;
inp[15257] = 0;
inp[15258] = 1073741704;
inp[15259] = 0;
inp[15260] = 1073741696;
inp[15261] = 0;
inp[15262] = 1073741688;
inp[15263] = 0;
inp[15264] = 1073741680;
inp[15265] = 0;
inp[15266] = 1073741672;
inp[15267] = 0;
inp[15268] = 1073741664;
inp[15269] = 0;
inp[15270] = 1073741656;
inp[15271] = 0;
inp[15272] = 1073741648;
inp[15273] = 0;
inp[15274] = 1073741640;
inp[15275] = 0;
inp[15276] = 1073741632;
inp[15277] = 0;
inp[15278] = 1073741624;
inp[15279] = 0;
inp[15280] = 1073741616;
inp[15281] = 0;
inp[15282] = 1073741608;
inp[15283] = 0;
inp[15284] = 1073741600;
inp[15285] = 0;
inp[15286] = 1073741592;
inp[15287] = 0;
inp[15288] = 1073741584;
inp[15289] = 0;
inp[15290] = 1073741576;
inp[15291] = 0;
inp[15292] = 1073741568;
inp[15293] = 0;
inp[15294] = 1073741560;
inp[15295] = 0;
inp[15296] = 1073741552;
inp[15297] = 0;
inp[15298] = 1073741544;
inp[15299] = 0;
inp[15300] = 1073741536;
inp[15301] = 0;
inp[15302] = 1073741528;
inp[15303] = 0;
inp[15304] = 1073741520;
inp[15305] = 0;
inp[15306] = 1073741512;
inp[15307] = 0;
inp[15308] = 1073741504;
inp[15309] = 0;
inp[15310] = 1073741496;
inp[15311] = 0;
inp[15312] = 1073741488;
inp[15313] = 0;
inp[15314] = 1073741480;
inp[15315] = 0;
inp[15316] = 1073741472;
inp[15317] = 0;
inp[15318] = 1073741464;
inp[15319] = 0;
inp[15320] = 1073741456;
inp[15321] = 0;
inp[15322] = 1073741448;
inp[15323] = 0;
inp[15324] = 1073741440;
inp[15325] = 0;
inp[15326] = 1073741432;
inp[15327] = 0;
inp[15328] = 1073741424;
inp[15329] = 0;
inp[15330] = 1073741416;
inp[15331] = 0;
inp[15332] = 1073741408;
inp[15333] = 0;
inp[15334] = 1073741400;
inp[15335] = 0;
inp[15336] = 1073741392;
inp[15337] = 0;
inp[15338] = 1073741384;
inp[15339] = 0;
inp[15340] = 1073741376;
inp[15341] = 0;
inp[15342] = 1073741368;
inp[15343] = 0;
inp[15344] = 1073741360;
inp[15345] = 0;
inp[15346] = 1073741352;
inp[15347] = 0;
inp[15348] = 1073741344;
inp[15349] = 0;
inp[15350] = 1073741336;
inp[15351] = 0;
inp[15352] = 1073741328;
inp[15353] = 0;
inp[15354] = 1073741320;
inp[15355] = 0;
inp[15356] = 1073741312;
inp[15357] = 0;
inp[15358] = 1073741304;
inp[15359] = 0;
inp[15360] = 1073741296;
inp[15361] = 0;
inp[15362] = 1073741288;
inp[15363] = 0;
inp[15364] = 1073741280;
inp[15365] = 0;
inp[15366] = 1073741272;
inp[15367] = 0;
inp[15368] = 1073741264;
inp[15369] = 0;
inp[15370] = 1073741256;
inp[15371] = 0;
inp[15372] = 1073741248;
inp[15373] = 0;
inp[15374] = 1073741240;
inp[15375] = 0;
inp[15376] = 1073741232;
inp[15377] = 0;
inp[15378] = 1073741224;
inp[15379] = 0;
inp[15380] = 1073741216;
inp[15381] = 0;
inp[15382] = 1073741208;
inp[15383] = 0;
inp[15384] = 1073741200;
inp[15385] = 0;
inp[15386] = 1073741192;
inp[15387] = 0;
inp[15388] = 1073741184;
inp[15389] = 0;
inp[15390] = 1073741176;
inp[15391] = 0;
inp[15392] = 1073741168;
inp[15393] = 0;
inp[15394] = 1073741160;
inp[15395] = 0;
inp[15396] = 1073741152;
inp[15397] = 0;
inp[15398] = 1073741144;
inp[15399] = 0;
inp[15400] = 1073741136;
inp[15401] = 0;
inp[15402] = 1073741128;
inp[15403] = 0;
inp[15404] = 1073741120;
inp[15405] = 0;
inp[15406] = 1073741112;
inp[15407] = 0;
inp[15408] = 1073741104;
inp[15409] = 0;
inp[15410] = 1073741096;
inp[15411] = 0;
inp[15412] = 1073741088;
inp[15413] = 0;
inp[15414] = 1073741080;
inp[15415] = 0;
inp[15416] = 1073741072;
inp[15417] = 0;
inp[15418] = 1073741064;
inp[15419] = 0;
inp[15420] = 1073741056;
inp[15421] = 0;
inp[15422] = 1073741048;
inp[15423] = 0;
inp[15424] = 1073741040;
inp[15425] = 0;
inp[15426] = 1073741032;
inp[15427] = 0;
inp[15428] = 1073741024;
inp[15429] = 0;
inp[15430] = 1073741016;
inp[15431] = 0;
inp[15432] = 1073741008;
inp[15433] = 0;
inp[15434] = 1073741000;
inp[15435] = 0;
inp[15436] = 1073740992;
inp[15437] = 0;
inp[15438] = 1073740984;
inp[15439] = 0;
inp[15440] = 1073740976;
inp[15441] = 0;
inp[15442] = 1073740968;
inp[15443] = 0;
inp[15444] = 1073740960;
inp[15445] = 0;
inp[15446] = 1073740952;
inp[15447] = 0;
inp[15448] = 1073740944;
inp[15449] = 0;
inp[15450] = 1073740936;
inp[15451] = 0;
inp[15452] = 1073740928;
inp[15453] = 0;
inp[15454] = 1073740920;
inp[15455] = 0;
inp[15456] = 1073740912;
inp[15457] = 0;
inp[15458] = 1073740904;
inp[15459] = 0;
inp[15460] = 1073740896;
inp[15461] = 0;
inp[15462] = 1073740888;
inp[15463] = 0;
inp[15464] = 1073740880;
inp[15465] = 0;
inp[15466] = 1073740872;
inp[15467] = 0;
inp[15468] = 1073740864;
inp[15469] = 0;
inp[15470] = 1073740856;
inp[15471] = 0;
inp[15472] = 1073740848;
inp[15473] = 0;
inp[15474] = 1073740840;
inp[15475] = 0;
inp[15476] = 1073740832;
inp[15477] = 0;
inp[15478] = 1073740824;
inp[15479] = 0;
inp[15480] = 1073740816;
inp[15481] = 0;
inp[15482] = 1073740808;
inp[15483] = 0;
inp[15484] = 1073741824;
inp[15485] = 1073741824;
inp[15486] = 1073741820;
inp[15487] = 0;
inp[15488] = 1073741816;
inp[15489] = 0;
inp[15490] = 1073741812;
inp[15491] = 0;
inp[15492] = 1073741808;
inp[15493] = 0;
inp[15494] = 1073741804;
inp[15495] = 0;
inp[15496] = 1073741800;
inp[15497] = 0;
inp[15498] = 1073741796;
inp[15499] = 0;
inp[15500] = 1073741792;
inp[15501] = 0;
inp[15502] = 1073741788;
inp[15503] = 0;
inp[15504] = 1073741784;
inp[15505] = 0;
inp[15506] = 1073741780;
inp[15507] = 0;
inp[15508] = 1073741776;
inp[15509] = 0;
inp[15510] = 1073741772;
inp[15511] = 0;
inp[15512] = 1073741768;
inp[15513] = 0;
inp[15514] = 1073741764;
inp[15515] = 0;
inp[15516] = 1073741760;
inp[15517] = 0;
inp[15518] = 1073741756;
inp[15519] = 0;
inp[15520] = 1073741752;
inp[15521] = 0;
inp[15522] = 1073741748;
inp[15523] = 0;
inp[15524] = 1073741744;
inp[15525] = 0;
inp[15526] = 1073741740;
inp[15527] = 0;
inp[15528] = 1073741736;
inp[15529] = 0;
inp[15530] = 1073741732;
inp[15531] = 0;
inp[15532] = 1073741728;
inp[15533] = 0;
inp[15534] = 1073741724;
inp[15535] = 0;
inp[15536] = 1073741720;
inp[15537] = 0;
inp[15538] = 1073741716;
inp[15539] = 0;
inp[15540] = 1073741712;
inp[15541] = 0;
inp[15542] = 1073741708;
inp[15543] = 0;
inp[15544] = 1073741704;
inp[15545] = 0;
inp[15546] = 1073741700;
inp[15547] = 0;
inp[15548] = 1073741696;
inp[15549] = 0;
inp[15550] = 1073741692;
inp[15551] = 0;
inp[15552] = 1073741688;
inp[15553] = 0;
inp[15554] = 1073741684;
inp[15555] = 0;
inp[15556] = 1073741680;
inp[15557] = 0;
inp[15558] = 1073741676;
inp[15559] = 0;
inp[15560] = 1073741672;
inp[15561] = 0;
inp[15562] = 1073741668;
inp[15563] = 0;
inp[15564] = 1073741664;
inp[15565] = 0;
inp[15566] = 1073741660;
inp[15567] = 0;
inp[15568] = 1073741656;
inp[15569] = 0;
inp[15570] = 1073741652;
inp[15571] = 0;
inp[15572] = 1073741648;
inp[15573] = 0;
inp[15574] = 1073741644;
inp[15575] = 0;
inp[15576] = 1073741640;
inp[15577] = 0;
inp[15578] = 1073741636;
inp[15579] = 0;
inp[15580] = 1073741632;
inp[15581] = 0;
inp[15582] = 1073741628;
inp[15583] = 0;
inp[15584] = 1073741624;
inp[15585] = 0;
inp[15586] = 1073741620;
inp[15587] = 0;
inp[15588] = 1073741616;
inp[15589] = 0;
inp[15590] = 1073741612;
inp[15591] = 0;
inp[15592] = 1073741608;
inp[15593] = 0;
inp[15594] = 1073741604;
inp[15595] = 0;
inp[15596] = 1073741600;
inp[15597] = 0;
inp[15598] = 1073741596;
inp[15599] = 0;
inp[15600] = 1073741592;
inp[15601] = 0;
inp[15602] = 1073741588;
inp[15603] = 0;
inp[15604] = 1073741584;
inp[15605] = 0;
inp[15606] = 1073741580;
inp[15607] = 0;
inp[15608] = 1073741576;
inp[15609] = 0;
inp[15610] = 1073741572;
inp[15611] = 0;
inp[15612] = 1073741568;
inp[15613] = 0;
inp[15614] = 1073741564;
inp[15615] = 0;
inp[15616] = 1073741560;
inp[15617] = 0;
inp[15618] = 1073741556;
inp[15619] = 0;
inp[15620] = 1073741552;
inp[15621] = 0;
inp[15622] = 1073741548;
inp[15623] = 0;
inp[15624] = 1073741544;
inp[15625] = 0;
inp[15626] = 1073741540;
inp[15627] = 0;
inp[15628] = 1073741536;
inp[15629] = 0;
inp[15630] = 1073741532;
inp[15631] = 0;
inp[15632] = 1073741528;
inp[15633] = 0;
inp[15634] = 1073741524;
inp[15635] = 0;
inp[15636] = 1073741520;
inp[15637] = 0;
inp[15638] = 1073741516;
inp[15639] = 0;
inp[15640] = 1073741512;
inp[15641] = 0;
inp[15642] = 1073741508;
inp[15643] = 0;
inp[15644] = 1073741504;
inp[15645] = 0;
inp[15646] = 1073741500;
inp[15647] = 0;
inp[15648] = 1073741496;
inp[15649] = 0;
inp[15650] = 1073741492;
inp[15651] = 0;
inp[15652] = 1073741488;
inp[15653] = 0;
inp[15654] = 1073741484;
inp[15655] = 0;
inp[15656] = 1073741480;
inp[15657] = 0;
inp[15658] = 1073741476;
inp[15659] = 0;
inp[15660] = 1073741472;
inp[15661] = 0;
inp[15662] = 1073741468;
inp[15663] = 0;
inp[15664] = 1073741464;
inp[15665] = 0;
inp[15666] = 1073741460;
inp[15667] = 0;
inp[15668] = 1073741456;
inp[15669] = 0;
inp[15670] = 1073741452;
inp[15671] = 0;
inp[15672] = 1073741448;
inp[15673] = 0;
inp[15674] = 1073741444;
inp[15675] = 0;
inp[15676] = 1073741440;
inp[15677] = 0;
inp[15678] = 1073741436;
inp[15679] = 0;
inp[15680] = 1073741432;
inp[15681] = 0;
inp[15682] = 1073741428;
inp[15683] = 0;
inp[15684] = 1073741424;
inp[15685] = 0;
inp[15686] = 1073741420;
inp[15687] = 0;
inp[15688] = 1073741416;
inp[15689] = 0;
inp[15690] = 1073741412;
inp[15691] = 0;
inp[15692] = 1073741408;
inp[15693] = 0;
inp[15694] = 1073741404;
inp[15695] = 0;
inp[15696] = 1073741400;
inp[15697] = 0;
inp[15698] = 1073741396;
inp[15699] = 0;
inp[15700] = 1073741392;
inp[15701] = 0;
inp[15702] = 1073741388;
inp[15703] = 0;
inp[15704] = 1073741384;
inp[15705] = 0;
inp[15706] = 1073741380;
inp[15707] = 0;
inp[15708] = 1073741376;
inp[15709] = 0;
inp[15710] = 1073741372;
inp[15711] = 0;
inp[15712] = 1073741368;
inp[15713] = 0;
inp[15714] = 1073741364;
inp[15715] = 0;
inp[15716] = 1073741360;
inp[15717] = 0;
inp[15718] = 1073741356;
inp[15719] = 0;
inp[15720] = 1073741352;
inp[15721] = 0;
inp[15722] = 1073741348;
inp[15723] = 0;
inp[15724] = 1073741344;
inp[15725] = 0;
inp[15726] = 1073741340;
inp[15727] = 0;
inp[15728] = 1073741336;
inp[15729] = 0;
inp[15730] = 1073741332;
inp[15731] = 0;
inp[15732] = 1073741328;
inp[15733] = 0;
inp[15734] = 1073741324;
inp[15735] = 0;
inp[15736] = 1073741320;
inp[15737] = 0;
inp[15738] = 1073741316;
inp[15739] = 0;
inp[15740] = 1073741824;
inp[15741] = 1073741824;
inp[15742] = 1073741822;
inp[15743] = 0;
inp[15744] = 1073741820;
inp[15745] = 0;
inp[15746] = 1073741818;
inp[15747] = 0;
inp[15748] = 1073741816;
inp[15749] = 0;
inp[15750] = 1073741814;
inp[15751] = 0;
inp[15752] = 1073741812;
inp[15753] = 0;
inp[15754] = 1073741810;
inp[15755] = 0;
inp[15756] = 1073741808;
inp[15757] = 0;
inp[15758] = 1073741806;
inp[15759] = 0;
inp[15760] = 1073741804;
inp[15761] = 0;
inp[15762] = 1073741802;
inp[15763] = 0;
inp[15764] = 1073741800;
inp[15765] = 0;
inp[15766] = 1073741798;
inp[15767] = 0;
inp[15768] = 1073741796;
inp[15769] = 0;
inp[15770] = 1073741794;
inp[15771] = 0;
inp[15772] = 1073741792;
inp[15773] = 0;
inp[15774] = 1073741790;
inp[15775] = 0;
inp[15776] = 1073741788;
inp[15777] = 0;
inp[15778] = 1073741786;
inp[15779] = 0;
inp[15780] = 1073741784;
inp[15781] = 0;
inp[15782] = 1073741782;
inp[15783] = 0;
inp[15784] = 1073741780;
inp[15785] = 0;
inp[15786] = 1073741778;
inp[15787] = 0;
inp[15788] = 1073741776;
inp[15789] = 0;
inp[15790] = 1073741774;
inp[15791] = 0;
inp[15792] = 1073741772;
inp[15793] = 0;
inp[15794] = 1073741770;
inp[15795] = 0;
inp[15796] = 1073741768;
inp[15797] = 0;
inp[15798] = 1073741766;
inp[15799] = 0;
inp[15800] = 1073741764;
inp[15801] = 0;
inp[15802] = 1073741762;
inp[15803] = 0;
inp[15804] = 1073741760;
inp[15805] = 0;
inp[15806] = 1073741758;
inp[15807] = 0;
inp[15808] = 1073741756;
inp[15809] = 0;
inp[15810] = 1073741754;
inp[15811] = 0;
inp[15812] = 1073741752;
inp[15813] = 0;
inp[15814] = 1073741750;
inp[15815] = 0;
inp[15816] = 1073741748;
inp[15817] = 0;
inp[15818] = 1073741746;
inp[15819] = 0;
inp[15820] = 1073741744;
inp[15821] = 0;
inp[15822] = 1073741742;
inp[15823] = 0;
inp[15824] = 1073741740;
inp[15825] = 0;
inp[15826] = 1073741738;
inp[15827] = 0;
inp[15828] = 1073741736;
inp[15829] = 0;
inp[15830] = 1073741734;
inp[15831] = 0;
inp[15832] = 1073741732;
inp[15833] = 0;
inp[15834] = 1073741730;
inp[15835] = 0;
inp[15836] = 1073741728;
inp[15837] = 0;
inp[15838] = 1073741726;
inp[15839] = 0;
inp[15840] = 1073741724;
inp[15841] = 0;
inp[15842] = 1073741722;
inp[15843] = 0;
inp[15844] = 1073741720;
inp[15845] = 0;
inp[15846] = 1073741718;
inp[15847] = 0;
inp[15848] = 1073741716;
inp[15849] = 0;
inp[15850] = 1073741714;
inp[15851] = 0;
inp[15852] = 1073741712;
inp[15853] = 0;
inp[15854] = 1073741710;
inp[15855] = 0;
inp[15856] = 1073741708;
inp[15857] = 0;
inp[15858] = 1073741706;
inp[15859] = 0;
inp[15860] = 1073741704;
inp[15861] = 0;
inp[15862] = 1073741702;
inp[15863] = 0;
inp[15864] = 1073741700;
inp[15865] = 0;
inp[15866] = 1073741698;
inp[15867] = 0;
inp[15868] = 1073741696;
inp[15869] = 0;
inp[15870] = 1073741694;
inp[15871] = 0;
inp[15872] = 1073741692;
inp[15873] = 0;
inp[15874] = 1073741690;
inp[15875] = 0;
inp[15876] = 1073741688;
inp[15877] = 0;
inp[15878] = 1073741686;
inp[15879] = 0;
inp[15880] = 1073741684;
inp[15881] = 0;
inp[15882] = 1073741682;
inp[15883] = 0;
inp[15884] = 1073741680;
inp[15885] = 0;
inp[15886] = 1073741678;
inp[15887] = 0;
inp[15888] = 1073741676;
inp[15889] = 0;
inp[15890] = 1073741674;
inp[15891] = 0;
inp[15892] = 1073741672;
inp[15893] = 0;
inp[15894] = 1073741670;
inp[15895] = 0;
inp[15896] = 1073741668;
inp[15897] = 0;
inp[15898] = 1073741666;
inp[15899] = 0;
inp[15900] = 1073741664;
inp[15901] = 0;
inp[15902] = 1073741662;
inp[15903] = 0;
inp[15904] = 1073741660;
inp[15905] = 0;
inp[15906] = 1073741658;
inp[15907] = 0;
inp[15908] = 1073741656;
inp[15909] = 0;
inp[15910] = 1073741654;
inp[15911] = 0;
inp[15912] = 1073741652;
inp[15913] = 0;
inp[15914] = 1073741650;
inp[15915] = 0;
inp[15916] = 1073741648;
inp[15917] = 0;
inp[15918] = 1073741646;
inp[15919] = 0;
inp[15920] = 1073741644;
inp[15921] = 0;
inp[15922] = 1073741642;
inp[15923] = 0;
inp[15924] = 1073741640;
inp[15925] = 0;
inp[15926] = 1073741638;
inp[15927] = 0;
inp[15928] = 1073741636;
inp[15929] = 0;
inp[15930] = 1073741634;
inp[15931] = 0;
inp[15932] = 1073741632;
inp[15933] = 0;
inp[15934] = 1073741630;
inp[15935] = 0;
inp[15936] = 1073741628;
inp[15937] = 0;
inp[15938] = 1073741626;
inp[15939] = 0;
inp[15940] = 1073741624;
inp[15941] = 0;
inp[15942] = 1073741622;
inp[15943] = 0;
inp[15944] = 1073741620;
inp[15945] = 0;
inp[15946] = 1073741618;
inp[15947] = 0;
inp[15948] = 1073741616;
inp[15949] = 0;
inp[15950] = 1073741614;
inp[15951] = 0;
inp[15952] = 1073741612;
inp[15953] = 0;
inp[15954] = 1073741610;
inp[15955] = 0;
inp[15956] = 1073741608;
inp[15957] = 0;
inp[15958] = 1073741606;
inp[15959] = 0;
inp[15960] = 1073741604;
inp[15961] = 0;
inp[15962] = 1073741602;
inp[15963] = 0;
inp[15964] = 1073741600;
inp[15965] = 0;
inp[15966] = 1073741598;
inp[15967] = 0;
inp[15968] = 1073741596;
inp[15969] = 0;
inp[15970] = 1073741594;
inp[15971] = 0;
inp[15972] = 1073741592;
inp[15973] = 0;
inp[15974] = 1073741590;
inp[15975] = 0;
inp[15976] = 1073741588;
inp[15977] = 0;
inp[15978] = 1073741586;
inp[15979] = 0;
inp[15980] = 1073741584;
inp[15981] = 0;
inp[15982] = 1073741582;
inp[15983] = 0;
inp[15984] = 1073741580;
inp[15985] = 0;
inp[15986] = 1073741578;
inp[15987] = 0;
inp[15988] = 1073741576;
inp[15989] = 0;
inp[15990] = 1073741574;
inp[15991] = 0;
inp[15992] = 1073741572;
inp[15993] = 0;
inp[15994] = 1073741570;
inp[15995] = 0;
inp[15996] = 1073741824;
inp[15997] = 1073741824;
inp[15998] = 1073741823;
inp[15999] = 0;
inp[16000] = 1073741822;
inp[16001] = 0;
inp[16002] = 1073741821;
inp[16003] = 0;
inp[16004] = 1073741820;
inp[16005] = 0;
inp[16006] = 1073741819;
inp[16007] = 0;
inp[16008] = 1073741818;
inp[16009] = 0;
inp[16010] = 1073741817;
inp[16011] = 0;
inp[16012] = 1073741816;
inp[16013] = 0;
inp[16014] = 1073741815;
inp[16015] = 0;
inp[16016] = 1073741814;
inp[16017] = 0;
inp[16018] = 1073741813;
inp[16019] = 0;
inp[16020] = 1073741812;
inp[16021] = 0;
inp[16022] = 1073741811;
inp[16023] = 0;
inp[16024] = 1073741810;
inp[16025] = 0;
inp[16026] = 1073741809;
inp[16027] = 0;
inp[16028] = 1073741808;
inp[16029] = 0;
inp[16030] = 1073741807;
inp[16031] = 0;
inp[16032] = 1073741806;
inp[16033] = 0;
inp[16034] = 1073741805;
inp[16035] = 0;
inp[16036] = 1073741804;
inp[16037] = 0;
inp[16038] = 1073741803;
inp[16039] = 0;
inp[16040] = 1073741802;
inp[16041] = 0;
inp[16042] = 1073741801;
inp[16043] = 0;
inp[16044] = 1073741800;
inp[16045] = 0;
inp[16046] = 1073741799;
inp[16047] = 0;
inp[16048] = 1073741798;
inp[16049] = 0;
inp[16050] = 1073741797;
inp[16051] = 0;
inp[16052] = 1073741796;
inp[16053] = 0;
inp[16054] = 1073741795;
inp[16055] = 0;
inp[16056] = 1073741794;
inp[16057] = 0;
inp[16058] = 1073741793;
inp[16059] = 0;
inp[16060] = 1073741792;
inp[16061] = 0;
inp[16062] = 1073741791;
inp[16063] = 0;
inp[16064] = 1073741790;
inp[16065] = 0;
inp[16066] = 1073741789;
inp[16067] = 0;
inp[16068] = 1073741788;
inp[16069] = 0;
inp[16070] = 1073741787;
inp[16071] = 0;
inp[16072] = 1073741786;
inp[16073] = 0;
inp[16074] = 1073741785;
inp[16075] = 0;
inp[16076] = 1073741784;
inp[16077] = 0;
inp[16078] = 1073741783;
inp[16079] = 0;
inp[16080] = 1073741782;
inp[16081] = 0;
inp[16082] = 1073741781;
inp[16083] = 0;
inp[16084] = 1073741780;
inp[16085] = 0;
inp[16086] = 1073741779;
inp[16087] = 0;
inp[16088] = 1073741778;
inp[16089] = 0;
inp[16090] = 1073741777;
inp[16091] = 0;
inp[16092] = 1073741776;
inp[16093] = 0;
inp[16094] = 1073741775;
inp[16095] = 0;
inp[16096] = 1073741774;
inp[16097] = 0;
inp[16098] = 1073741773;
inp[16099] = 0;
inp[16100] = 1073741772;
inp[16101] = 0;
inp[16102] = 1073741771;
inp[16103] = 0;
inp[16104] = 1073741770;
inp[16105] = 0;
inp[16106] = 1073741769;
inp[16107] = 0;
inp[16108] = 1073741768;
inp[16109] = 0;
inp[16110] = 1073741767;
inp[16111] = 0;
inp[16112] = 1073741766;
inp[16113] = 0;
inp[16114] = 1073741765;
inp[16115] = 0;
inp[16116] = 1073741764;
inp[16117] = 0;
inp[16118] = 1073741763;
inp[16119] = 0;
inp[16120] = 1073741762;
inp[16121] = 0;
inp[16122] = 1073741761;
inp[16123] = 0;
inp[16124] = 1073741760;
inp[16125] = 0;
inp[16126] = 1073741759;
inp[16127] = 0;
inp[16128] = 1073741758;
inp[16129] = 0;
inp[16130] = 1073741757;
inp[16131] = 0;
inp[16132] = 1073741756;
inp[16133] = 0;
inp[16134] = 1073741755;
inp[16135] = 0;
inp[16136] = 1073741754;
inp[16137] = 0;
inp[16138] = 1073741753;
inp[16139] = 0;
inp[16140] = 1073741752;
inp[16141] = 0;
inp[16142] = 1073741751;
inp[16143] = 0;
inp[16144] = 1073741750;
inp[16145] = 0;
inp[16146] = 1073741749;
inp[16147] = 0;
inp[16148] = 1073741748;
inp[16149] = 0;
inp[16150] = 1073741747;
inp[16151] = 0;
inp[16152] = 1073741746;
inp[16153] = 0;
inp[16154] = 1073741745;
inp[16155] = 0;
inp[16156] = 1073741744;
inp[16157] = 0;
inp[16158] = 1073741743;
inp[16159] = 0;
inp[16160] = 1073741742;
inp[16161] = 0;
inp[16162] = 1073741741;
inp[16163] = 0;
inp[16164] = 1073741740;
inp[16165] = 0;
inp[16166] = 1073741739;
inp[16167] = 0;
inp[16168] = 1073741738;
inp[16169] = 0;
inp[16170] = 1073741737;
inp[16171] = 0;
inp[16172] = 1073741736;
inp[16173] = 0;
inp[16174] = 1073741735;
inp[16175] = 0;
inp[16176] = 1073741734;
inp[16177] = 0;
inp[16178] = 1073741733;
inp[16179] = 0;
inp[16180] = 1073741732;
inp[16181] = 0;
inp[16182] = 1073741731;
inp[16183] = 0;
inp[16184] = 1073741730;
inp[16185] = 0;
inp[16186] = 1073741729;
inp[16187] = 0;
inp[16188] = 1073741728;
inp[16189] = 0;
inp[16190] = 1073741727;
inp[16191] = 0;
inp[16192] = 1073741726;
inp[16193] = 0;
inp[16194] = 1073741725;
inp[16195] = 0;
inp[16196] = 1073741724;
inp[16197] = 0;
inp[16198] = 1073741723;
inp[16199] = 0;
inp[16200] = 1073741722;
inp[16201] = 0;
inp[16202] = 1073741721;
inp[16203] = 0;
inp[16204] = 1073741720;
inp[16205] = 0;
inp[16206] = 1073741719;
inp[16207] = 0;
inp[16208] = 1073741718;
inp[16209] = 0;
inp[16210] = 1073741717;
inp[16211] = 0;
inp[16212] = 1073741716;
inp[16213] = 0;
inp[16214] = 1073741715;
inp[16215] = 0;
inp[16216] = 1073741714;
inp[16217] = 0;
inp[16218] = 1073741713;
inp[16219] = 0;
inp[16220] = 1073741712;
inp[16221] = 0;
inp[16222] = 1073741711;
inp[16223] = 0;
inp[16224] = 1073741710;
inp[16225] = 0;
inp[16226] = 1073741709;
inp[16227] = 0;
inp[16228] = 1073741708;
inp[16229] = 0;
inp[16230] = 1073741707;
inp[16231] = 0;
inp[16232] = 1073741706;
inp[16233] = 0;
inp[16234] = 1073741705;
inp[16235] = 0;
inp[16236] = 1073741704;
inp[16237] = 0;
inp[16238] = 1073741703;
inp[16239] = 0;
inp[16240] = 1073741702;
inp[16241] = 0;
inp[16242] = 1073741701;
inp[16243] = 0;
inp[16244] = 1073741700;
inp[16245] = 0;
inp[16246] = 1073741699;
inp[16247] = 0;
inp[16248] = 1073741698;
inp[16249] = 0;
inp[16250] = 1073741697;
inp[16251] = 0;
inp[16252] = 1073741824;
inp[16253] = 1073741824;
inp[16254] = 1073741823;
inp[16255] = 0;
inp[16256] = 1073741823;
inp[16257] = 0;
inp[16258] = 1073741822;
inp[16259] = 0;
inp[16260] = 1073741822;
inp[16261] = 0;
inp[16262] = 1073741821;
inp[16263] = 0;
inp[16264] = 1073741821;
inp[16265] = 0;
inp[16266] = 1073741820;
inp[16267] = 0;
inp[16268] = 1073741820;
inp[16269] = 0;
inp[16270] = 1073741819;
inp[16271] = 0;
inp[16272] = 1073741819;
inp[16273] = 0;
inp[16274] = 1073741818;
inp[16275] = 0;
inp[16276] = 1073741818;
inp[16277] = 0;
inp[16278] = 1073741817;
inp[16279] = 0;
inp[16280] = 1073741817;
inp[16281] = 0;
inp[16282] = 1073741816;
inp[16283] = 0;
inp[16284] = 1073741816;
inp[16285] = 0;
inp[16286] = 1073741815;
inp[16287] = 0;
inp[16288] = 1073741815;
inp[16289] = 0;
inp[16290] = 1073741814;
inp[16291] = 0;
inp[16292] = 1073741814;
inp[16293] = 0;
inp[16294] = 1073741813;
inp[16295] = 0;
inp[16296] = 1073741813;
inp[16297] = 0;
inp[16298] = 1073741812;
inp[16299] = 0;
inp[16300] = 1073741812;
inp[16301] = 0;
inp[16302] = 1073741811;
inp[16303] = 0;
inp[16304] = 1073741811;
inp[16305] = 0;
inp[16306] = 1073741810;
inp[16307] = 0;
inp[16308] = 1073741810;
inp[16309] = 0;
inp[16310] = 1073741809;
inp[16311] = 0;
inp[16312] = 1073741809;
inp[16313] = 0;
inp[16314] = 1073741808;
inp[16315] = 0;
inp[16316] = 1073741808;
inp[16317] = 0;
inp[16318] = 1073741807;
inp[16319] = 0;
inp[16320] = 1073741807;
inp[16321] = 0;
inp[16322] = 1073741806;
inp[16323] = 0;
inp[16324] = 1073741806;
inp[16325] = 0;
inp[16326] = 1073741805;
inp[16327] = 0;
inp[16328] = 1073741805;
inp[16329] = 0;
inp[16330] = 1073741804;
inp[16331] = 0;
inp[16332] = 1073741804;
inp[16333] = 0;
inp[16334] = 1073741803;
inp[16335] = 0;
inp[16336] = 1073741803;
inp[16337] = 0;
inp[16338] = 1073741802;
inp[16339] = 0;
inp[16340] = 1073741802;
inp[16341] = 0;
inp[16342] = 1073741801;
inp[16343] = 0;
inp[16344] = 1073741801;
inp[16345] = 0;
inp[16346] = 1073741800;
inp[16347] = 0;
inp[16348] = 1073741800;
inp[16349] = 0;
inp[16350] = 1073741799;
inp[16351] = 0;
inp[16352] = 1073741799;
inp[16353] = 0;
inp[16354] = 1073741798;
inp[16355] = 0;
inp[16356] = 1073741798;
inp[16357] = 0;
inp[16358] = 1073741797;
inp[16359] = 0;
inp[16360] = 1073741797;
inp[16361] = 0;
inp[16362] = 1073741796;
inp[16363] = 0;
inp[16364] = 1073741796;
inp[16365] = 0;
inp[16366] = 1073741795;
inp[16367] = 0;
inp[16368] = 1073741795;
inp[16369] = 0;
inp[16370] = 1073741794;
inp[16371] = 0;
inp[16372] = 1073741794;
inp[16373] = 0;
inp[16374] = 1073741793;
inp[16375] = 0;
inp[16376] = 1073741793;
inp[16377] = 0;
inp[16378] = 1073741792;
inp[16379] = 0;
inp[16380] = 1073741792;
inp[16381] = 0;
inp[16382] = 1073741791;
inp[16383] = 0;
inp[16384] = 1073741791;
inp[16385] = 0;
inp[16386] = 1073741790;
inp[16387] = 0;
inp[16388] = 1073741790;
inp[16389] = 0;
inp[16390] = 1073741789;
inp[16391] = 0;
inp[16392] = 1073741789;
inp[16393] = 0;
inp[16394] = 1073741788;
inp[16395] = 0;
inp[16396] = 1073741788;
inp[16397] = 0;
inp[16398] = 1073741787;
inp[16399] = 0;
inp[16400] = 1073741787;
inp[16401] = 0;
inp[16402] = 1073741786;
inp[16403] = 0;
inp[16404] = 1073741786;
inp[16405] = 0;
inp[16406] = 1073741785;
inp[16407] = 0;
inp[16408] = 1073741785;
inp[16409] = 0;
inp[16410] = 1073741784;
inp[16411] = 0;
inp[16412] = 1073741784;
inp[16413] = 0;
inp[16414] = 1073741783;
inp[16415] = 0;
inp[16416] = 1073741783;
inp[16417] = 0;
inp[16418] = 1073741782;
inp[16419] = 0;
inp[16420] = 1073741782;
inp[16421] = 0;
inp[16422] = 1073741781;
inp[16423] = 0;
inp[16424] = 1073741781;
inp[16425] = 0;
inp[16426] = 1073741780;
inp[16427] = 0;
inp[16428] = 1073741780;
inp[16429] = 0;
inp[16430] = 1073741779;
inp[16431] = 0;
inp[16432] = 1073741779;
inp[16433] = 0;
inp[16434] = 1073741778;
inp[16435] = 0;
inp[16436] = 1073741778;
inp[16437] = 0;
inp[16438] = 1073741777;
inp[16439] = 0;
inp[16440] = 1073741777;
inp[16441] = 0;
inp[16442] = 1073741776;
inp[16443] = 0;
inp[16444] = 1073741776;
inp[16445] = 0;
inp[16446] = 1073741775;
inp[16447] = 0;
inp[16448] = 1073741775;
inp[16449] = 0;
inp[16450] = 1073741774;
inp[16451] = 0;
inp[16452] = 1073741774;
inp[16453] = 0;
inp[16454] = 1073741773;
inp[16455] = 0;
inp[16456] = 1073741773;
inp[16457] = 0;
inp[16458] = 1073741772;
inp[16459] = 0;
inp[16460] = 1073741772;
inp[16461] = 0;
inp[16462] = 1073741771;
inp[16463] = 0;
inp[16464] = 1073741771;
inp[16465] = 0;
inp[16466] = 1073741770;
inp[16467] = 0;
inp[16468] = 1073741770;
inp[16469] = 0;
inp[16470] = 1073741769;
inp[16471] = 0;
inp[16472] = 1073741769;
inp[16473] = 0;
inp[16474] = 1073741768;
inp[16475] = 0;
inp[16476] = 1073741768;
inp[16477] = 0;
inp[16478] = 1073741767;
inp[16479] = 0;
inp[16480] = 1073741767;
inp[16481] = 0;
inp[16482] = 1073741766;
inp[16483] = 0;
inp[16484] = 1073741766;
inp[16485] = 0;
inp[16486] = 1073741765;
inp[16487] = 0;
inp[16488] = 1073741765;
inp[16489] = 0;
inp[16490] = 1073741764;
inp[16491] = 0;
inp[16492] = 1073741764;
inp[16493] = 0;
inp[16494] = 1073741763;
inp[16495] = 0;
inp[16496] = 1073741763;
inp[16497] = 0;
inp[16498] = 1073741762;
inp[16499] = 0;
inp[16500] = 1073741762;
inp[16501] = 0;
inp[16502] = 1073741761;
inp[16503] = 0;
inp[16504] = 1073741761;
inp[16505] = 0;
inp[16506] = 1073741760;
inp[16507] = 0;
inp[16508] = 1073741824;
inp[16509] = 1073741824;
inp[16510] = 1073741823;
inp[16511] = 0;
inp[16512] = 1073741823;
inp[16513] = 0;
inp[16514] = 1073741823;
inp[16515] = 0;
inp[16516] = 1073741823;
inp[16517] = 0;
inp[16518] = 1073741822;
inp[16519] = 0;
inp[16520] = 1073741822;
inp[16521] = 0;
inp[16522] = 1073741822;
inp[16523] = 0;
inp[16524] = 1073741822;
inp[16525] = 0;
inp[16526] = 1073741821;
inp[16527] = 0;
inp[16528] = 1073741821;
inp[16529] = 0;
inp[16530] = 1073741821;
inp[16531] = 0;
inp[16532] = 1073741821;
inp[16533] = 0;
inp[16534] = 1073741820;
inp[16535] = 0;
inp[16536] = 1073741820;
inp[16537] = 0;
inp[16538] = 1073741820;
inp[16539] = 0;
inp[16540] = 1073741820;
inp[16541] = 0;
inp[16542] = 1073741819;
inp[16543] = 0;
inp[16544] = 1073741819;
inp[16545] = 0;
inp[16546] = 1073741819;
inp[16547] = 0;
inp[16548] = 1073741819;
inp[16549] = 0;
inp[16550] = 1073741818;
inp[16551] = 0;
inp[16552] = 1073741818;
inp[16553] = 0;
inp[16554] = 1073741818;
inp[16555] = 0;
inp[16556] = 1073741818;
inp[16557] = 0;
inp[16558] = 1073741817;
inp[16559] = 0;
inp[16560] = 1073741817;
inp[16561] = 0;
inp[16562] = 1073741817;
inp[16563] = 0;
inp[16564] = 1073741817;
inp[16565] = 0;
inp[16566] = 1073741816;
inp[16567] = 0;
inp[16568] = 1073741816;
inp[16569] = 0;
inp[16570] = 1073741816;
inp[16571] = 0;
inp[16572] = 1073741816;
inp[16573] = 0;
inp[16574] = 1073741815;
inp[16575] = 0;
inp[16576] = 1073741815;
inp[16577] = 0;
inp[16578] = 1073741815;
inp[16579] = 0;
inp[16580] = 1073741815;
inp[16581] = 0;
inp[16582] = 1073741814;
inp[16583] = 0;
inp[16584] = 1073741814;
inp[16585] = 0;
inp[16586] = 1073741814;
inp[16587] = 0;
inp[16588] = 1073741814;
inp[16589] = 0;
inp[16590] = 1073741813;
inp[16591] = 0;
inp[16592] = 1073741813;
inp[16593] = 0;
inp[16594] = 1073741813;
inp[16595] = 0;
inp[16596] = 1073741813;
inp[16597] = 0;
inp[16598] = 1073741812;
inp[16599] = 0;
inp[16600] = 1073741812;
inp[16601] = 0;
inp[16602] = 1073741812;
inp[16603] = 0;
inp[16604] = 1073741812;
inp[16605] = 0;
inp[16606] = 1073741811;
inp[16607] = 0;
inp[16608] = 1073741811;
inp[16609] = 0;
inp[16610] = 1073741811;
inp[16611] = 0;
inp[16612] = 1073741811;
inp[16613] = 0;
inp[16614] = 1073741810;
inp[16615] = 0;
inp[16616] = 1073741810;
inp[16617] = 0;
inp[16618] = 1073741810;
inp[16619] = 0;
inp[16620] = 1073741810;
inp[16621] = 0;
inp[16622] = 1073741809;
inp[16623] = 0;
inp[16624] = 1073741809;
inp[16625] = 0;
inp[16626] = 1073741809;
inp[16627] = 0;
inp[16628] = 1073741809;
inp[16629] = 0;
inp[16630] = 1073741808;
inp[16631] = 0;
inp[16632] = 1073741808;
inp[16633] = 0;
inp[16634] = 1073741808;
inp[16635] = 0;
inp[16636] = 1073741808;
inp[16637] = 0;
inp[16638] = 1073741807;
inp[16639] = 0;
inp[16640] = 1073741807;
inp[16641] = 0;
inp[16642] = 1073741807;
inp[16643] = 0;
inp[16644] = 1073741807;
inp[16645] = 0;
inp[16646] = 1073741806;
inp[16647] = 0;
inp[16648] = 1073741806;
inp[16649] = 0;
inp[16650] = 1073741806;
inp[16651] = 0;
inp[16652] = 1073741806;
inp[16653] = 0;
inp[16654] = 1073741805;
inp[16655] = 0;
inp[16656] = 1073741805;
inp[16657] = 0;
inp[16658] = 1073741805;
inp[16659] = 0;
inp[16660] = 1073741805;
inp[16661] = 0;
inp[16662] = 1073741804;
inp[16663] = 0;
inp[16664] = 1073741804;
inp[16665] = 0;
inp[16666] = 1073741804;
inp[16667] = 0;
inp[16668] = 1073741804;
inp[16669] = 0;
inp[16670] = 1073741803;
inp[16671] = 0;
inp[16672] = 1073741803;
inp[16673] = 0;
inp[16674] = 1073741803;
inp[16675] = 0;
inp[16676] = 1073741803;
inp[16677] = 0;
inp[16678] = 1073741802;
inp[16679] = 0;
inp[16680] = 1073741802;
inp[16681] = 0;
inp[16682] = 1073741802;
inp[16683] = 0;
inp[16684] = 1073741802;
inp[16685] = 0;
inp[16686] = 1073741801;
inp[16687] = 0;
inp[16688] = 1073741801;
inp[16689] = 0;
inp[16690] = 1073741801;
inp[16691] = 0;
inp[16692] = 1073741801;
inp[16693] = 0;
inp[16694] = 1073741800;
inp[16695] = 0;
inp[16696] = 1073741800;
inp[16697] = 0;
inp[16698] = 1073741800;
inp[16699] = 0;
inp[16700] = 1073741800;
inp[16701] = 0;
inp[16702] = 1073741799;
inp[16703] = 0;
inp[16704] = 1073741799;
inp[16705] = 0;
inp[16706] = 1073741799;
inp[16707] = 0;
inp[16708] = 1073741799;
inp[16709] = 0;
inp[16710] = 1073741798;
inp[16711] = 0;
inp[16712] = 1073741798;
inp[16713] = 0;
inp[16714] = 1073741798;
inp[16715] = 0;
inp[16716] = 1073741798;
inp[16717] = 0;
inp[16718] = 1073741797;
inp[16719] = 0;
inp[16720] = 1073741797;
inp[16721] = 0;
inp[16722] = 1073741797;
inp[16723] = 0;
inp[16724] = 1073741797;
inp[16725] = 0;
inp[16726] = 1073741796;
inp[16727] = 0;
inp[16728] = 1073741796;
inp[16729] = 0;
inp[16730] = 1073741796;
inp[16731] = 0;
inp[16732] = 1073741796;
inp[16733] = 0;
inp[16734] = 1073741795;
inp[16735] = 0;
inp[16736] = 1073741795;
inp[16737] = 0;
inp[16738] = 1073741795;
inp[16739] = 0;
inp[16740] = 1073741795;
inp[16741] = 0;
inp[16742] = 1073741794;
inp[16743] = 0;
inp[16744] = 1073741794;
inp[16745] = 0;
inp[16746] = 1073741794;
inp[16747] = 0;
inp[16748] = 1073741794;
inp[16749] = 0;
inp[16750] = 1073741793;
inp[16751] = 0;
inp[16752] = 1073741793;
inp[16753] = 0;
inp[16754] = 1073741793;
inp[16755] = 0;
inp[16756] = 1073741793;
inp[16757] = 0;
inp[16758] = 1073741792;
inp[16759] = 0;
inp[16760] = 1073741792;
inp[16761] = 0;
inp[16762] = 1073741792;
inp[16763] = 0;
inp[16764] = 1073741824;
inp[16765] = 1073741824;
inp[16766] = 395007542;
inp[16767] = 395007542;
inp[16768] = 145315153;
inp[16769] = 145315153;
inp[16770] = 53458457;
inp[16771] = 53458457;
inp[16772] = 19666267;
inp[16773] = 19666267;
inp[16774] = 7234815;
inp[16775] = 7234815;
inp[16776] = 2661539;
inp[16777] = 2661539;
inp[16778] = 979125;
inp[16779] = 979125;
inp[16780] = 360200;
inp[16781] = 360200;
inp[16782] = 132510;
inp[16783] = 132510;
inp[16784] = 48747;
inp[16785] = 48747;
inp[16786] = 17933;
inp[16787] = 17933;
inp[16788] = 6597;
inp[16789] = 6597;
inp[16790] = 2427;
inp[16791] = 2427;
inp[16792] = 892;
inp[16793] = 892;
inp[16794] = 328;
inp[16795] = 328;
inp[16796] = 120;
inp[16797] = 120;
inp[16798] = 44;
inp[16799] = 44;
inp[16800] = 16;
inp[16801] = 16;
inp[16802] = 6;
inp[16803] = 6;
inp[16804] = 2;
inp[16805] = 2;
inp[16806] = 0;
inp[16807] = 0;
inp[16808] = 0;
inp[16809] = 0;
inp[16810] = 0;
inp[16811] = 0;
inp[16812] = 0;
inp[16813] = 0;
inp[16814] = 0;
inp[16815] = 0;
inp[16816] = 0;
inp[16817] = 0;
inp[16818] = 0;
inp[16819] = 0;
inp[16820] = 0;
inp[16821] = 0;
inp[16822] = 0;
inp[16823] = 0;
inp[16824] = 0;
inp[16825] = 0;
inp[16826] = 0;
inp[16827] = 0;
inp[16828] = 0;
inp[16829] = 0;
inp[16830] = 0;
inp[16831] = 0;
inp[16832] = 0;
inp[16833] = 0;
inp[16834] = 0;
inp[16835] = 0;
inp[16836] = 0;
inp[16837] = 0;
inp[16838] = 0;
inp[16839] = 0;
inp[16840] = 0;
inp[16841] = 0;
inp[16842] = 0;
inp[16843] = 0;
inp[16844] = 0;
inp[16845] = 0;
inp[16846] = 0;
inp[16847] = 0;
inp[16848] = 0;
inp[16849] = 0;
inp[16850] = 0;
inp[16851] = 0;
inp[16852] = 0;
inp[16853] = 0;
inp[16854] = 0;
inp[16855] = 0;
inp[16856] = 0;
inp[16857] = 0;
inp[16858] = 0;
inp[16859] = 0;
inp[16860] = 0;
inp[16861] = 0;
inp[16862] = 0;
inp[16863] = 0;
inp[16864] = 0;
inp[16865] = 0;
inp[16866] = 0;
inp[16867] = 0;
inp[16868] = 0;
inp[16869] = 0;
inp[16870] = 0;
inp[16871] = 0;
inp[16872] = 0;
inp[16873] = 0;
inp[16874] = 0;
inp[16875] = 0;
inp[16876] = 0;
inp[16877] = 0;
inp[16878] = 0;
inp[16879] = 0;
inp[16880] = 0;
inp[16881] = 0;
inp[16882] = 0;
inp[16883] = 0;
inp[16884] = 0;
inp[16885] = 0;
inp[16886] = 0;
inp[16887] = 0;
inp[16888] = 0;
inp[16889] = 0;
inp[16890] = 0;
inp[16891] = 0;
inp[16892] = 0;
inp[16893] = 0;
inp[16894] = 0;
inp[16895] = 0;
inp[16896] = 0;
inp[16897] = 0;
inp[16898] = 0;
inp[16899] = 0;
inp[16900] = 0;
inp[16901] = 0;
inp[16902] = 0;
inp[16903] = 0;
inp[16904] = 0;
inp[16905] = 0;
inp[16906] = 0;
inp[16907] = 0;
inp[16908] = 0;
inp[16909] = 0;
inp[16910] = 0;
inp[16911] = 0;
inp[16912] = 0;
inp[16913] = 0;
inp[16914] = 0;
inp[16915] = 0;
inp[16916] = 0;
inp[16917] = 0;
inp[16918] = 0;
inp[16919] = 0;
inp[16920] = 0;
inp[16921] = 0;
inp[16922] = 0;
inp[16923] = 0;
inp[16924] = 0;
inp[16925] = 0;
inp[16926] = 0;
inp[16927] = 0;
inp[16928] = 0;
inp[16929] = 0;
inp[16930] = 0;
inp[16931] = 0;
inp[16932] = 0;
inp[16933] = 0;
inp[16934] = 0;
inp[16935] = 0;
inp[16936] = 0;
inp[16937] = 0;
inp[16938] = 0;
inp[16939] = 0;
inp[16940] = 0;
inp[16941] = 0;
inp[16942] = 0;
inp[16943] = 0;
inp[16944] = 0;
inp[16945] = 0;
inp[16946] = 0;
inp[16947] = 0;
inp[16948] = 0;
inp[16949] = 0;
inp[16950] = 0;
inp[16951] = 0;
inp[16952] = 0;
inp[16953] = 0;
inp[16954] = 0;
inp[16955] = 0;
inp[16956] = 0;
inp[16957] = 0;
inp[16958] = 0;
inp[16959] = 0;
inp[16960] = 0;
inp[16961] = 0;
inp[16962] = 0;
inp[16963] = 0;
inp[16964] = 0;
inp[16965] = 0;
inp[16966] = 0;
inp[16967] = 0;
inp[16968] = 0;
inp[16969] = 0;
inp[16970] = 0;
inp[16971] = 0;
inp[16972] = 0;
inp[16973] = 0;
inp[16974] = 0;
inp[16975] = 0;
inp[16976] = 0;
inp[16977] = 0;
inp[16978] = 0;
inp[16979] = 0;
inp[16980] = 0;
inp[16981] = 0;
inp[16982] = 0;
inp[16983] = 0;
inp[16984] = 0;
inp[16985] = 0;
inp[16986] = 0;
inp[16987] = 0;
inp[16988] = 0;
inp[16989] = 0;
inp[16990] = 0;
inp[16991] = 0;
inp[16992] = 0;
inp[16993] = 0;
inp[16994] = 0;
inp[16995] = 0;
inp[16996] = 0;
inp[16997] = 0;
inp[16998] = 0;
inp[16999] = 0;
inp[17000] = 0;
inp[17001] = 0;
inp[17002] = 0;
inp[17003] = 0;
inp[17004] = 0;
inp[17005] = 0;
inp[17006] = 0;
inp[17007] = 0;
inp[17008] = 0;
inp[17009] = 0;
inp[17010] = 0;
inp[17011] = 0;
inp[17012] = 0;
inp[17013] = 0;
inp[17014] = 0;
inp[17015] = 0;
inp[17016] = 0;
inp[17017] = 0;
inp[17018] = 0;
inp[17019] = 0;
inp[17020] = 0;
inp[17021] = 0;
inp[17022] = 0;
inp[17023] = 0;
inp[17024] = 0;
inp[17025] = 0;
inp[17026] = 0;
inp[17027] = 0;
inp[17028] = 0;
inp[17029] = 0;
inp[17030] = 0;
inp[17031] = 0;
inp[17032] = 0;
inp[17033] = 0;
inp[17034] = 0;
inp[17035] = 0;
inp[17036] = 0;
inp[17037] = 0;
inp[17038] = 0;
inp[17039] = 0;
inp[17040] = 0;
inp[17041] = 0;
inp[17042] = 0;
inp[17043] = 0;
inp[17044] = 0;
inp[17045] = 0;
inp[17046] = 0;
inp[17047] = 0;
inp[17048] = 0;
inp[17049] = 0;
inp[17050] = 0;
inp[17051] = 0;
inp[17052] = 0;
inp[17053] = 0;
inp[17054] = 0;
inp[17055] = 0;
inp[17056] = 0;
inp[17057] = 0;
inp[17058] = 0;
inp[17059] = 0;
inp[17060] = 0;
inp[17061] = 0;
inp[17062] = 0;
inp[17063] = 0;
inp[17064] = 0;
inp[17065] = 0;
inp[17066] = 0;
inp[17067] = 0;
inp[17068] = 0;
inp[17069] = 0;
inp[17070] = 0;
inp[17071] = 0;
inp[17072] = 0;
inp[17073] = 0;
inp[17074] = 0;
inp[17075] = 0;
inp[17076] = 0;
inp[17077] = 0;
inp[17078] = 0;
inp[17079] = 0;
inp[17080] = 0;
inp[17081] = 0;
inp[17082] = 0;
inp[17083] = 0;
inp[17084] = 0;
inp[17085] = 0;
inp[17086] = 0;
inp[17087] = 0;
inp[17088] = 0;
inp[17089] = 0;
inp[17090] = 0;
inp[17091] = 0;
inp[17092] = 0;
inp[17093] = 0;
inp[17094] = 0;
inp[17095] = 0;
inp[17096] = 0;
inp[17097] = 0;
inp[17098] = 0;
inp[17099] = 0;
inp[17100] = 0;
inp[17101] = 0;
inp[17102] = 0;
inp[17103] = 0;
inp[17104] = 0;
inp[17105] = 0;
inp[17106] = 0;
inp[17107] = 0;
inp[17108] = 0;
inp[17109] = 0;
inp[17110] = 0;
inp[17111] = 0;
inp[17112] = 0;
inp[17113] = 0;
inp[17114] = 0;
inp[17115] = 0;
inp[17116] = 0;
inp[17117] = 0;
inp[17118] = 0;
inp[17119] = 0;
inp[17120] = 0;
inp[17121] = 0;
inp[17122] = 0;
inp[17123] = 0;
inp[17124] = 0;
inp[17125] = 0;
inp[17126] = 0;
inp[17127] = 0;
inp[17128] = 0;
inp[17129] = 0;
inp[17130] = 0;
inp[17131] = 0;
inp[17132] = 0;
inp[17133] = 0;
inp[17134] = 0;
inp[17135] = 0;
inp[17136] = 0;
inp[17137] = 0;
inp[17138] = 0;
inp[17139] = 0;
inp[17140] = 0;
inp[17141] = 0;
inp[17142] = 0;
inp[17143] = 0;
inp[17144] = 0;
inp[17145] = 0;
inp[17146] = 0;
inp[17147] = 0;
inp[17148] = 0;
inp[17149] = 0;
inp[17150] = 0;
inp[17151] = 0;
inp[17152] = 0;
inp[17153] = 0;
inp[17154] = 0;
inp[17155] = 0;
inp[17156] = 0;
inp[17157] = 0;
inp[17158] = 0;
inp[17159] = 0;
inp[17160] = 0;
inp[17161] = 0;
inp[17162] = 0;
inp[17163] = 0;
inp[17164] = 0;
inp[17165] = 0;
inp[17166] = 0;
inp[17167] = 0;
inp[17168] = 0;
inp[17169] = 0;
inp[17170] = 0;
inp[17171] = 0;
inp[17172] = 0;
inp[17173] = 0;
inp[17174] = 0;
inp[17175] = 0;
inp[17176] = 0;
inp[17177] = 0;
inp[17178] = 0;
inp[17179] = 0;
inp[17180] = 0;
inp[17181] = 0;
inp[17182] = 0;
inp[17183] = 0;
inp[17184] = 0;
inp[17185] = 0;
inp[17186] = 0;
inp[17187] = 0;
inp[17188] = 0;
inp[17189] = 0;
inp[17190] = 0;
inp[17191] = 0;
inp[17192] = 0;
inp[17193] = 0;
inp[17194] = 0;
inp[17195] = 0;
inp[17196] = 0;
inp[17197] = 0;
inp[17198] = 0;
inp[17199] = 0;
inp[17200] = 0;
inp[17201] = 0;
inp[17202] = 0;
inp[17203] = 0;
inp[17204] = 0;
inp[17205] = 0;
inp[17206] = 0;
inp[17207] = 0;
inp[17208] = 0;
inp[17209] = 0;
inp[17210] = 0;
inp[17211] = 0;
inp[17212] = 0;
inp[17213] = 0;
inp[17214] = 0;
inp[17215] = 0;
inp[17216] = 0;
inp[17217] = 0;
inp[17218] = 0;
inp[17219] = 0;
inp[17220] = 0;
inp[17221] = 0;
inp[17222] = 0;
inp[17223] = 0;
inp[17224] = 0;
inp[17225] = 0;
inp[17226] = 0;
inp[17227] = 0;
inp[17228] = 0;
inp[17229] = 0;
inp[17230] = 0;
inp[17231] = 0;
inp[17232] = 0;
inp[17233] = 0;
inp[17234] = 0;
inp[17235] = 0;
inp[17236] = 0;
inp[17237] = 0;
inp[17238] = 0;
inp[17239] = 0;
inp[17240] = 0;
inp[17241] = 0;
inp[17242] = 0;
inp[17243] = 0;
inp[17244] = 0;
inp[17245] = 0;
inp[17246] = 0;
inp[17247] = 0;
inp[17248] = 0;
inp[17249] = 0;
inp[17250] = 0;
inp[17251] = 0;
inp[17252] = 0;
inp[17253] = 0;
inp[17254] = 0;
inp[17255] = 0;
inp[17256] = 0;
inp[17257] = 0;
inp[17258] = 0;
inp[17259] = 0;
inp[17260] = 0;
inp[17261] = 0;
inp[17262] = 0;
inp[17263] = 0;
inp[17264] = 0;
inp[17265] = 0;
inp[17266] = 0;
inp[17267] = 0;
inp[17268] = 0;
inp[17269] = 0;
inp[17270] = 0;
inp[17271] = 0;
inp[17272] = 0;
inp[17273] = 0;
inp[17274] = 0;
inp[17275] = 0;
inp[17276] = 1073741824;
inp[17277] = 1073741824;
inp[17278] = 651257336;
inp[17279] = 145315153;
inp[17280] = 395007542;
inp[17281] = 19666267;
inp[17282] = 239584185;
inp[17283] = 2661539;
inp[17284] = 145315153;
inp[17285] = 360200;
inp[17286] = 88138096;
inp[17287] = 48747;
inp[17288] = 53458457;
inp[17289] = 6597;
inp[17290] = 32424193;
inp[17291] = 892;
inp[17292] = 19666267;
inp[17293] = 120;
inp[17294] = 11928194;
inp[17295] = 16;
inp[17296] = 7234815;
inp[17297] = 2;
inp[17298] = 4388137;
inp[17299] = 0;
inp[17300] = 2661539;
inp[17301] = 0;
inp[17302] = 1614305;
inp[17303] = 0;
inp[17304] = 979125;
inp[17305] = 0;
inp[17306] = 593869;
inp[17307] = 0;
inp[17308] = 360200;
inp[17309] = 0;
inp[17310] = 218472;
inp[17311] = 0;
inp[17312] = 132510;
inp[17313] = 0;
inp[17314] = 80371;
inp[17315] = 0;
inp[17316] = 48747;
inp[17317] = 0;
inp[17318] = 29567;
inp[17319] = 0;
inp[17320] = 17933;
inp[17321] = 0;
inp[17322] = 10877;
inp[17323] = 0;
inp[17324] = 6597;
inp[17325] = 0;
inp[17326] = 4001;
inp[17327] = 0;
inp[17328] = 2427;
inp[17329] = 0;
inp[17330] = 1472;
inp[17331] = 0;
inp[17332] = 892;
inp[17333] = 0;
inp[17334] = 541;
inp[17335] = 0;
inp[17336] = 328;
inp[17337] = 0;
inp[17338] = 199;
inp[17339] = 0;
inp[17340] = 120;
inp[17341] = 0;
inp[17342] = 73;
inp[17343] = 0;
inp[17344] = 44;
inp[17345] = 0;
inp[17346] = 26;
inp[17347] = 0;
inp[17348] = 16;
inp[17349] = 0;
inp[17350] = 9;
inp[17351] = 0;
inp[17352] = 6;
inp[17353] = 0;
inp[17354] = 3;
inp[17355] = 0;
inp[17356] = 2;
inp[17357] = 0;
inp[17358] = 1;
inp[17359] = 0;
inp[17360] = 0;
inp[17361] = 0;
inp[17362] = 0;
inp[17363] = 0;
inp[17364] = 0;
inp[17365] = 0;
inp[17366] = 0;
inp[17367] = 0;
inp[17368] = 0;
inp[17369] = 0;
inp[17370] = 0;
inp[17371] = 0;
inp[17372] = 0;
inp[17373] = 0;
inp[17374] = 0;
inp[17375] = 0;
inp[17376] = 0;
inp[17377] = 0;
inp[17378] = 0;
inp[17379] = 0;
inp[17380] = 0;
inp[17381] = 0;
inp[17382] = 0;
inp[17383] = 0;
inp[17384] = 0;
inp[17385] = 0;
inp[17386] = 0;
inp[17387] = 0;
inp[17388] = 0;
inp[17389] = 0;
inp[17390] = 0;
inp[17391] = 0;
inp[17392] = 0;
inp[17393] = 0;
inp[17394] = 0;
inp[17395] = 0;
inp[17396] = 0;
inp[17397] = 0;
inp[17398] = 0;
inp[17399] = 0;
inp[17400] = 0;
inp[17401] = 0;
inp[17402] = 0;
inp[17403] = 0;
inp[17404] = 0;
inp[17405] = 0;
inp[17406] = 0;
inp[17407] = 0;
inp[17408] = 0;
inp[17409] = 0;
inp[17410] = 0;
inp[17411] = 0;
inp[17412] = 0;
inp[17413] = 0;
inp[17414] = 0;
inp[17415] = 0;
inp[17416] = 0;
inp[17417] = 0;
inp[17418] = 0;
inp[17419] = 0;
inp[17420] = 0;
inp[17421] = 0;
inp[17422] = 0;
inp[17423] = 0;
inp[17424] = 0;
inp[17425] = 0;
inp[17426] = 0;
inp[17427] = 0;
inp[17428] = 0;
inp[17429] = 0;
inp[17430] = 0;
inp[17431] = 0;
inp[17432] = 0;
inp[17433] = 0;
inp[17434] = 0;
inp[17435] = 0;
inp[17436] = 0;
inp[17437] = 0;
inp[17438] = 0;
inp[17439] = 0;
inp[17440] = 0;
inp[17441] = 0;
inp[17442] = 0;
inp[17443] = 0;
inp[17444] = 0;
inp[17445] = 0;
inp[17446] = 0;
inp[17447] = 0;
inp[17448] = 0;
inp[17449] = 0;
inp[17450] = 0;
inp[17451] = 0;
inp[17452] = 0;
inp[17453] = 0;
inp[17454] = 0;
inp[17455] = 0;
inp[17456] = 0;
inp[17457] = 0;
inp[17458] = 0;
inp[17459] = 0;
inp[17460] = 0;
inp[17461] = 0;
inp[17462] = 0;
inp[17463] = 0;
inp[17464] = 0;
inp[17465] = 0;
inp[17466] = 0;
inp[17467] = 0;
inp[17468] = 0;
inp[17469] = 0;
inp[17470] = 0;
inp[17471] = 0;
inp[17472] = 0;
inp[17473] = 0;
inp[17474] = 0;
inp[17475] = 0;
inp[17476] = 0;
inp[17477] = 0;
inp[17478] = 0;
inp[17479] = 0;
inp[17480] = 0;
inp[17481] = 0;
inp[17482] = 0;
inp[17483] = 0;
inp[17484] = 0;
inp[17485] = 0;
inp[17486] = 0;
inp[17487] = 0;
inp[17488] = 0;
inp[17489] = 0;
inp[17490] = 0;
inp[17491] = 0;
inp[17492] = 0;
inp[17493] = 0;
inp[17494] = 0;
inp[17495] = 0;
inp[17496] = 0;
inp[17497] = 0;
inp[17498] = 0;
inp[17499] = 0;
inp[17500] = 0;
inp[17501] = 0;
inp[17502] = 0;
inp[17503] = 0;
inp[17504] = 0;
inp[17505] = 0;
inp[17506] = 0;
inp[17507] = 0;
inp[17508] = 0;
inp[17509] = 0;
inp[17510] = 0;
inp[17511] = 0;
inp[17512] = 0;
inp[17513] = 0;
inp[17514] = 0;
inp[17515] = 0;
inp[17516] = 0;
inp[17517] = 0;
inp[17518] = 0;
inp[17519] = 0;
inp[17520] = 0;
inp[17521] = 0;
inp[17522] = 0;
inp[17523] = 0;
inp[17524] = 0;
inp[17525] = 0;
inp[17526] = 0;
inp[17527] = 0;
inp[17528] = 0;
inp[17529] = 0;
inp[17530] = 0;
inp[17531] = 0;
inp[17532] = 0;
inp[17533] = 0;
inp[17534] = 0;
inp[17535] = 0;
inp[17536] = 0;
inp[17537] = 0;
inp[17538] = 0;
inp[17539] = 0;
inp[17540] = 0;
inp[17541] = 0;
inp[17542] = 0;
inp[17543] = 0;
inp[17544] = 0;
inp[17545] = 0;
inp[17546] = 0;
inp[17547] = 0;
inp[17548] = 0;
inp[17549] = 0;
inp[17550] = 0;
inp[17551] = 0;
inp[17552] = 0;
inp[17553] = 0;
inp[17554] = 0;
inp[17555] = 0;
inp[17556] = 0;
inp[17557] = 0;
inp[17558] = 0;
inp[17559] = 0;
inp[17560] = 0;
inp[17561] = 0;
inp[17562] = 0;
inp[17563] = 0;
inp[17564] = 0;
inp[17565] = 0;
inp[17566] = 0;
inp[17567] = 0;
inp[17568] = 0;
inp[17569] = 0;
inp[17570] = 0;
inp[17571] = 0;
inp[17572] = 0;
inp[17573] = 0;
inp[17574] = 0;
inp[17575] = 0;
inp[17576] = 0;
inp[17577] = 0;
inp[17578] = 0;
inp[17579] = 0;
inp[17580] = 0;
inp[17581] = 0;
inp[17582] = 0;
inp[17583] = 0;
inp[17584] = 0;
inp[17585] = 0;
inp[17586] = 0;
inp[17587] = 0;
inp[17588] = 0;
inp[17589] = 0;
inp[17590] = 0;
inp[17591] = 0;
inp[17592] = 0;
inp[17593] = 0;
inp[17594] = 0;
inp[17595] = 0;
inp[17596] = 0;
inp[17597] = 0;
inp[17598] = 0;
inp[17599] = 0;
inp[17600] = 0;
inp[17601] = 0;
inp[17602] = 0;
inp[17603] = 0;
inp[17604] = 0;
inp[17605] = 0;
inp[17606] = 0;
inp[17607] = 0;
inp[17608] = 0;
inp[17609] = 0;
inp[17610] = 0;
inp[17611] = 0;
inp[17612] = 0;
inp[17613] = 0;
inp[17614] = 0;
inp[17615] = 0;
inp[17616] = 0;
inp[17617] = 0;
inp[17618] = 0;
inp[17619] = 0;
inp[17620] = 0;
inp[17621] = 0;
inp[17622] = 0;
inp[17623] = 0;
inp[17624] = 0;
inp[17625] = 0;
inp[17626] = 0;
inp[17627] = 0;
inp[17628] = 0;
inp[17629] = 0;
inp[17630] = 0;
inp[17631] = 0;
inp[17632] = 0;
inp[17633] = 0;
inp[17634] = 0;
inp[17635] = 0;
inp[17636] = 0;
inp[17637] = 0;
inp[17638] = 0;
inp[17639] = 0;
inp[17640] = 0;
inp[17641] = 0;
inp[17642] = 0;
inp[17643] = 0;
inp[17644] = 0;
inp[17645] = 0;
inp[17646] = 0;
inp[17647] = 0;
inp[17648] = 0;
inp[17649] = 0;
inp[17650] = 0;
inp[17651] = 0;
inp[17652] = 0;
inp[17653] = 0;
inp[17654] = 0;
inp[17655] = 0;
inp[17656] = 0;
inp[17657] = 0;
inp[17658] = 0;
inp[17659] = 0;
inp[17660] = 0;
inp[17661] = 0;
inp[17662] = 0;
inp[17663] = 0;
inp[17664] = 0;
inp[17665] = 0;
inp[17666] = 0;
inp[17667] = 0;
inp[17668] = 0;
inp[17669] = 0;
inp[17670] = 0;
inp[17671] = 0;
inp[17672] = 0;
inp[17673] = 0;
inp[17674] = 0;
inp[17675] = 0;
inp[17676] = 0;
inp[17677] = 0;
inp[17678] = 0;
inp[17679] = 0;
inp[17680] = 0;
inp[17681] = 0;
inp[17682] = 0;
inp[17683] = 0;
inp[17684] = 0;
inp[17685] = 0;
inp[17686] = 0;
inp[17687] = 0;
inp[17688] = 0;
inp[17689] = 0;
inp[17690] = 0;
inp[17691] = 0;
inp[17692] = 0;
inp[17693] = 0;
inp[17694] = 0;
inp[17695] = 0;
inp[17696] = 0;
inp[17697] = 0;
inp[17698] = 0;
inp[17699] = 0;
inp[17700] = 0;
inp[17701] = 0;
inp[17702] = 0;
inp[17703] = 0;
inp[17704] = 0;
inp[17705] = 0;
inp[17706] = 0;
inp[17707] = 0;
inp[17708] = 0;
inp[17709] = 0;
inp[17710] = 0;
inp[17711] = 0;
inp[17712] = 0;
inp[17713] = 0;
inp[17714] = 0;
inp[17715] = 0;
inp[17716] = 0;
inp[17717] = 0;
inp[17718] = 0;
inp[17719] = 0;
inp[17720] = 0;
inp[17721] = 0;
inp[17722] = 0;
inp[17723] = 0;
inp[17724] = 0;
inp[17725] = 0;
inp[17726] = 0;
inp[17727] = 0;
inp[17728] = 0;
inp[17729] = 0;
inp[17730] = 0;
inp[17731] = 0;
inp[17732] = 0;
inp[17733] = 0;
inp[17734] = 0;
inp[17735] = 0;
inp[17736] = 0;
inp[17737] = 0;
inp[17738] = 0;
inp[17739] = 0;
inp[17740] = 0;
inp[17741] = 0;
inp[17742] = 0;
inp[17743] = 0;
inp[17744] = 0;
inp[17745] = 0;
inp[17746] = 0;
inp[17747] = 0;
inp[17748] = 0;
inp[17749] = 0;
inp[17750] = 0;
inp[17751] = 0;
inp[17752] = 0;
inp[17753] = 0;
inp[17754] = 0;
inp[17755] = 0;
inp[17756] = 0;
inp[17757] = 0;
inp[17758] = 0;
inp[17759] = 0;
inp[17760] = 0;
inp[17761] = 0;
inp[17762] = 0;
inp[17763] = 0;
inp[17764] = 0;
inp[17765] = 0;
inp[17766] = 0;
inp[17767] = 0;
inp[17768] = 0;
inp[17769] = 0;
inp[17770] = 0;
inp[17771] = 0;
inp[17772] = 0;
inp[17773] = 0;
inp[17774] = 0;
inp[17775] = 0;
inp[17776] = 0;
inp[17777] = 0;
inp[17778] = 0;
inp[17779] = 0;
inp[17780] = 0;
inp[17781] = 0;
inp[17782] = 0;
inp[17783] = 0;
inp[17784] = 0;
inp[17785] = 0;
inp[17786] = 0;
inp[17787] = 0;
inp[17788] = 1073741824;
inp[17789] = 1073741824;
inp[17790] = 836230973;
inp[17791] = 19666267;
inp[17792] = 651257336;
inp[17793] = 360200;
inp[17794] = 507199723;
inp[17795] = 6597;
inp[17796] = 395007542;
inp[17797] = 120;
inp[17798] = 307632183;
inp[17799] = 2;
inp[17800] = 239584185;
inp[17801] = 0;
inp[17802] = 186588351;
inp[17803] = 0;
inp[17804] = 145315153;
inp[17805] = 0;
inp[17806] = 113171555;
inp[17807] = 0;
inp[17808] = 88138096;
inp[17809] = 0;
inp[17810] = 68642018;
inp[17811] = 0;
inp[17812] = 53458457;
inp[17813] = 0;
inp[17814] = 41633488;
inp[17815] = 0;
inp[17816] = 32424193;
inp[17817] = 0;
inp[17818] = 25251987;
inp[17819] = 0;
inp[17820] = 19666267;
inp[17821] = 0;
inp[17822] = 15316104;
inp[17823] = 0;
inp[17824] = 11928194;
inp[17825] = 0;
inp[17826] = 9289686;
inp[17827] = 0;
inp[17828] = 7234815;
inp[17829] = 0;
inp[17830] = 5634479;
inp[17831] = 0;
inp[17832] = 4388137;
inp[17833] = 0;
inp[17834] = 3417484;
inp[17835] = 0;
inp[17836] = 2661539;
inp[17837] = 0;
inp[17838] = 2072809;
inp[17839] = 0;
inp[17840] = 1614305;
inp[17841] = 0;
inp[17842] = 1257222;
inp[17843] = 0;
inp[17844] = 979125;
inp[17845] = 0;
inp[17846] = 762543;
inp[17847] = 0;
inp[17848] = 593869;
inp[17849] = 0;
inp[17850] = 462506;
inp[17851] = 0;
inp[17852] = 360200;
inp[17853] = 0;
inp[17854] = 280524;
inp[17855] = 0;
inp[17856] = 218472;
inp[17857] = 0;
inp[17858] = 170146;
inp[17859] = 0;
inp[17860] = 132510;
inp[17861] = 0;
inp[17862] = 103199;
inp[17863] = 0;
inp[17864] = 80371;
inp[17865] = 0;
inp[17866] = 62593;
inp[17867] = 0;
inp[17868] = 48747;
inp[17869] = 0;
inp[17870] = 37964;
inp[17871] = 0;
inp[17872] = 29567;
inp[17873] = 0;
inp[17874] = 23026;
inp[17875] = 0;
inp[17876] = 17933;
inp[17877] = 0;
inp[17878] = 13966;
inp[17879] = 0;
inp[17880] = 10877;
inp[17881] = 0;
inp[17882] = 8471;
inp[17883] = 0;
inp[17884] = 6597;
inp[17885] = 0;
inp[17886] = 5137;
inp[17887] = 0;
inp[17888] = 4001;
inp[17889] = 0;
inp[17890] = 3116;
inp[17891] = 0;
inp[17892] = 2427;
inp[17893] = 0;
inp[17894] = 1890;
inp[17895] = 0;
inp[17896] = 1472;
inp[17897] = 0;
inp[17898] = 1146;
inp[17899] = 0;
inp[17900] = 892;
inp[17901] = 0;
inp[17902] = 695;
inp[17903] = 0;
inp[17904] = 541;
inp[17905] = 0;
inp[17906] = 421;
inp[17907] = 0;
inp[17908] = 328;
inp[17909] = 0;
inp[17910] = 255;
inp[17911] = 0;
inp[17912] = 199;
inp[17913] = 0;
inp[17914] = 155;
inp[17915] = 0;
inp[17916] = 120;
inp[17917] = 0;
inp[17918] = 94;
inp[17919] = 0;
inp[17920] = 73;
inp[17921] = 0;
inp[17922] = 57;
inp[17923] = 0;
inp[17924] = 44;
inp[17925] = 0;
inp[17926] = 34;
inp[17927] = 0;
inp[17928] = 26;
inp[17929] = 0;
inp[17930] = 20;
inp[17931] = 0;
inp[17932] = 16;
inp[17933] = 0;
inp[17934] = 12;
inp[17935] = 0;
inp[17936] = 9;
inp[17937] = 0;
inp[17938] = 7;
inp[17939] = 0;
inp[17940] = 6;
inp[17941] = 0;
inp[17942] = 4;
inp[17943] = 0;
inp[17944] = 3;
inp[17945] = 0;
inp[17946] = 2;
inp[17947] = 0;
inp[17948] = 2;
inp[17949] = 0;
inp[17950] = 1;
inp[17951] = 0;
inp[17952] = 1;
inp[17953] = 0;
inp[17954] = 1;
inp[17955] = 0;
inp[17956] = 0;
inp[17957] = 0;
inp[17958] = 0;
inp[17959] = 0;
inp[17960] = 0;
inp[17961] = 0;
inp[17962] = 0;
inp[17963] = 0;
inp[17964] = 0;
inp[17965] = 0;
inp[17966] = 0;
inp[17967] = 0;
inp[17968] = 0;
inp[17969] = 0;
inp[17970] = 0;
inp[17971] = 0;
inp[17972] = 0;
inp[17973] = 0;
inp[17974] = 0;
inp[17975] = 0;
inp[17976] = 0;
inp[17977] = 0;
inp[17978] = 0;
inp[17979] = 0;
inp[17980] = 0;
inp[17981] = 0;
inp[17982] = 0;
inp[17983] = 0;
inp[17984] = 0;
inp[17985] = 0;
inp[17986] = 0;
inp[17987] = 0;
inp[17988] = 0;
inp[17989] = 0;
inp[17990] = 0;
inp[17991] = 0;
inp[17992] = 0;
inp[17993] = 0;
inp[17994] = 0;
inp[17995] = 0;
inp[17996] = 0;
inp[17997] = 0;
inp[17998] = 0;
inp[17999] = 0;
inp[18000] = 0;
inp[18001] = 0;
inp[18002] = 0;
inp[18003] = 0;
inp[18004] = 0;
inp[18005] = 0;
inp[18006] = 0;
inp[18007] = 0;
inp[18008] = 0;
inp[18009] = 0;
inp[18010] = 0;
inp[18011] = 0;
inp[18012] = 0;
inp[18013] = 0;
inp[18014] = 0;
inp[18015] = 0;
inp[18016] = 0;
inp[18017] = 0;
inp[18018] = 0;
inp[18019] = 0;
inp[18020] = 0;
inp[18021] = 0;
inp[18022] = 0;
inp[18023] = 0;
inp[18024] = 0;
inp[18025] = 0;
inp[18026] = 0;
inp[18027] = 0;
inp[18028] = 0;
inp[18029] = 0;
inp[18030] = 0;
inp[18031] = 0;
inp[18032] = 0;
inp[18033] = 0;
inp[18034] = 0;
inp[18035] = 0;
inp[18036] = 0;
inp[18037] = 0;
inp[18038] = 0;
inp[18039] = 0;
inp[18040] = 0;
inp[18041] = 0;
inp[18042] = 0;
inp[18043] = 0;
inp[18044] = 0;
inp[18045] = 0;
inp[18046] = 0;
inp[18047] = 0;
inp[18048] = 0;
inp[18049] = 0;
inp[18050] = 0;
inp[18051] = 0;
inp[18052] = 0;
inp[18053] = 0;
inp[18054] = 0;
inp[18055] = 0;
inp[18056] = 0;
inp[18057] = 0;
inp[18058] = 0;
inp[18059] = 0;
inp[18060] = 0;
inp[18061] = 0;
inp[18062] = 0;
inp[18063] = 0;
inp[18064] = 0;
inp[18065] = 0;
inp[18066] = 0;
inp[18067] = 0;
inp[18068] = 0;
inp[18069] = 0;
inp[18070] = 0;
inp[18071] = 0;
inp[18072] = 0;
inp[18073] = 0;
inp[18074] = 0;
inp[18075] = 0;
inp[18076] = 0;
inp[18077] = 0;
inp[18078] = 0;
inp[18079] = 0;
inp[18080] = 0;
inp[18081] = 0;
inp[18082] = 0;
inp[18083] = 0;
inp[18084] = 0;
inp[18085] = 0;
inp[18086] = 0;
inp[18087] = 0;
inp[18088] = 0;
inp[18089] = 0;
inp[18090] = 0;
inp[18091] = 0;
inp[18092] = 0;
inp[18093] = 0;
inp[18094] = 0;
inp[18095] = 0;
inp[18096] = 0;
inp[18097] = 0;
inp[18098] = 0;
inp[18099] = 0;
inp[18100] = 0;
inp[18101] = 0;
inp[18102] = 0;
inp[18103] = 0;
inp[18104] = 0;
inp[18105] = 0;
inp[18106] = 0;
inp[18107] = 0;
inp[18108] = 0;
inp[18109] = 0;
inp[18110] = 0;
inp[18111] = 0;
inp[18112] = 0;
inp[18113] = 0;
inp[18114] = 0;
inp[18115] = 0;
inp[18116] = 0;
inp[18117] = 0;
inp[18118] = 0;
inp[18119] = 0;
inp[18120] = 0;
inp[18121] = 0;
inp[18122] = 0;
inp[18123] = 0;
inp[18124] = 0;
inp[18125] = 0;
inp[18126] = 0;
inp[18127] = 0;
inp[18128] = 0;
inp[18129] = 0;
inp[18130] = 0;
inp[18131] = 0;
inp[18132] = 0;
inp[18133] = 0;
inp[18134] = 0;
inp[18135] = 0;
inp[18136] = 0;
inp[18137] = 0;
inp[18138] = 0;
inp[18139] = 0;
inp[18140] = 0;
inp[18141] = 0;
inp[18142] = 0;
inp[18143] = 0;
inp[18144] = 0;
inp[18145] = 0;
inp[18146] = 0;
inp[18147] = 0;
inp[18148] = 0;
inp[18149] = 0;
inp[18150] = 0;
inp[18151] = 0;
inp[18152] = 0;
inp[18153] = 0;
inp[18154] = 0;
inp[18155] = 0;
inp[18156] = 0;
inp[18157] = 0;
inp[18158] = 0;
inp[18159] = 0;
inp[18160] = 0;
inp[18161] = 0;
inp[18162] = 0;
inp[18163] = 0;
inp[18164] = 0;
inp[18165] = 0;
inp[18166] = 0;
inp[18167] = 0;
inp[18168] = 0;
inp[18169] = 0;
inp[18170] = 0;
inp[18171] = 0;
inp[18172] = 0;
inp[18173] = 0;
inp[18174] = 0;
inp[18175] = 0;
inp[18176] = 0;
inp[18177] = 0;
inp[18178] = 0;
inp[18179] = 0;
inp[18180] = 0;
inp[18181] = 0;
inp[18182] = 0;
inp[18183] = 0;
inp[18184] = 0;
inp[18185] = 0;
inp[18186] = 0;
inp[18187] = 0;
inp[18188] = 0;
inp[18189] = 0;
inp[18190] = 0;
inp[18191] = 0;
inp[18192] = 0;
inp[18193] = 0;
inp[18194] = 0;
inp[18195] = 0;
inp[18196] = 0;
inp[18197] = 0;
inp[18198] = 0;
inp[18199] = 0;
inp[18200] = 0;
inp[18201] = 0;
inp[18202] = 0;
inp[18203] = 0;
inp[18204] = 0;
inp[18205] = 0;
inp[18206] = 0;
inp[18207] = 0;
inp[18208] = 0;
inp[18209] = 0;
inp[18210] = 0;
inp[18211] = 0;
inp[18212] = 0;
inp[18213] = 0;
inp[18214] = 0;
inp[18215] = 0;
inp[18216] = 0;
inp[18217] = 0;
inp[18218] = 0;
inp[18219] = 0;
inp[18220] = 0;
inp[18221] = 0;
inp[18222] = 0;
inp[18223] = 0;
inp[18224] = 0;
inp[18225] = 0;
inp[18226] = 0;
inp[18227] = 0;
inp[18228] = 0;
inp[18229] = 0;
inp[18230] = 0;
inp[18231] = 0;
inp[18232] = 0;
inp[18233] = 0;
inp[18234] = 0;
inp[18235] = 0;
inp[18236] = 0;
inp[18237] = 0;
inp[18238] = 0;
inp[18239] = 0;
inp[18240] = 0;
inp[18241] = 0;
inp[18242] = 0;
inp[18243] = 0;
inp[18244] = 0;
inp[18245] = 0;
inp[18246] = 0;
inp[18247] = 0;
inp[18248] = 0;
inp[18249] = 0;
inp[18250] = 0;
inp[18251] = 0;
inp[18252] = 0;
inp[18253] = 0;
inp[18254] = 0;
inp[18255] = 0;
inp[18256] = 0;
inp[18257] = 0;
inp[18258] = 0;
inp[18259] = 0;
inp[18260] = 0;
inp[18261] = 0;
inp[18262] = 0;
inp[18263] = 0;
inp[18264] = 0;
inp[18265] = 0;
inp[18266] = 0;
inp[18267] = 0;
inp[18268] = 0;
inp[18269] = 0;
inp[18270] = 0;
inp[18271] = 0;
inp[18272] = 0;
inp[18273] = 0;
inp[18274] = 0;
inp[18275] = 0;
inp[18276] = 0;
inp[18277] = 0;
inp[18278] = 0;
inp[18279] = 0;
inp[18280] = 0;
inp[18281] = 0;
inp[18282] = 0;
inp[18283] = 0;
inp[18284] = 0;
inp[18285] = 0;
inp[18286] = 0;
inp[18287] = 0;
inp[18288] = 0;
inp[18289] = 0;
inp[18290] = 0;
inp[18291] = 0;
inp[18292] = 0;
inp[18293] = 0;
inp[18294] = 0;
inp[18295] = 0;
inp[18296] = 0;
inp[18297] = 0;
inp[18298] = 0;
inp[18299] = 0;
inp[18300] = 1073741824;
inp[18301] = 1073741824;
inp[18302] = 947573833;
inp[18303] = 360200;
inp[18304] = 836230973;
inp[18305] = 120;
inp[18306] = 737971243;
inp[18307] = 0;
inp[18308] = 651257336;
inp[18309] = 0;
inp[18310] = 574732582;
inp[18311] = 0;
inp[18312] = 507199723;
inp[18313] = 0;
inp[18314] = 447602185;
inp[18315] = 0;
inp[18316] = 395007542;
inp[18317] = 0;
inp[18318] = 348592932;
inp[18319] = 0;
inp[18320] = 307632183;
inp[18321] = 0;
inp[18322] = 271484448;
inp[18323] = 0;
inp[18324] = 239584185;
inp[18325] = 0;
inp[18326] = 211432301;
inp[18327] = 0;
inp[18328] = 186588351;
inp[18329] = 0;
inp[18330] = 164663641;
inp[18331] = 0;
inp[18332] = 145315153;
inp[18333] = 0;
inp[18334] = 128240173;
inp[18335] = 0;
inp[18336] = 113171555;
inp[18337] = 0;
inp[18338] = 99873547;
inp[18339] = 0;
inp[18340] = 88138096;
inp[18341] = 0;
inp[18342] = 77781596;
inp[18343] = 0;
inp[18344] = 68642018;
inp[18345] = 0;
inp[18346] = 60576368;
inp[18347] = 0;
inp[18348] = 53458457;
inp[18349] = 0;
inp[18350] = 47176923;
inp[18351] = 0;
inp[18352] = 41633488;
inp[18353] = 0;
inp[18354] = 36741424;
inp[18355] = 0;
inp[18356] = 32424193;
inp[18357] = 0;
inp[18358] = 28614250;
inp[18359] = 0;
inp[18360] = 25251987;
inp[18361] = 0;
inp[18362] = 22284800;
inp[18363] = 0;
inp[18364] = 19666267;
inp[18365] = 0;
inp[18366] = 17355420;
inp[18367] = 0;
inp[18368] = 15316104;
inp[18369] = 0;
inp[18370] = 13516414;
inp[18371] = 0;
inp[18372] = 11928194;
inp[18373] = 0;
inp[18374] = 10526594;
inp[18375] = 0;
inp[18376] = 9289686;
inp[18377] = 0;
inp[18378] = 8198119;
inp[18379] = 0;
inp[18380] = 7234815;
inp[18381] = 0;
inp[18382] = 6384702;
inp[18383] = 0;
inp[18384] = 5634479;
inp[18385] = 0;
inp[18386] = 4972411;
inp[18387] = 0;
inp[18388] = 4388137;
inp[18389] = 0;
inp[18390] = 3872517;
inp[18391] = 0;
inp[18392] = 3417484;
inp[18393] = 0;
inp[18394] = 3015919;
inp[18395] = 0;
inp[18396] = 2661539;
inp[18397] = 0;
inp[18398] = 2348800;
inp[18399] = 0;
inp[18400] = 2072809;
inp[18401] = 0;
inp[18402] = 1829247;
inp[18403] = 0;
inp[18404] = 1614305;
inp[18405] = 0;
inp[18406] = 1424619;
inp[18407] = 0;
inp[18408] = 1257222;
inp[18409] = 0;
inp[18410] = 1109494;
inp[18411] = 0;
inp[18412] = 979125;
inp[18413] = 0;
inp[18414] = 864075;
inp[18415] = 0;
inp[18416] = 762543;
inp[18417] = 0;
inp[18418] = 672942;
inp[18419] = 0;
inp[18420] = 593869;
inp[18421] = 0;
inp[18422] = 524088;
inp[18423] = 0;
inp[18424] = 462506;
inp[18425] = 0;
inp[18426] = 408160;
inp[18427] = 0;
inp[18428] = 360200;
inp[18429] = 0;
inp[18430] = 317875;
inp[18431] = 0;
inp[18432] = 280524;
inp[18433] = 0;
inp[18434] = 247561;
inp[18435] = 0;
inp[18436] = 218472;
inp[18437] = 0;
inp[18438] = 192801;
inp[18439] = 0;
inp[18440] = 170146;
inp[18441] = 0;
inp[18442] = 150153;
inp[18443] = 0;
inp[18444] = 132510;
inp[18445] = 0;
inp[18446] = 116939;
inp[18447] = 0;
inp[18448] = 103199;
inp[18449] = 0;
inp[18450] = 91072;
inp[18451] = 0;
inp[18452] = 80371;
inp[18453] = 0;
inp[18454] = 70927;
inp[18455] = 0;
inp[18456] = 62593;
inp[18457] = 0;
inp[18458] = 55238;
inp[18459] = 0;
inp[18460] = 48747;
inp[18461] = 0;
inp[18462] = 43019;
inp[18463] = 0;
inp[18464] = 37964;
inp[18465] = 0;
inp[18466] = 33503;
inp[18467] = 0;
inp[18468] = 29567;
inp[18469] = 0;
inp[18470] = 26092;
inp[18471] = 0;
inp[18472] = 23026;
inp[18473] = 0;
inp[18474] = 20321;
inp[18475] = 0;
inp[18476] = 17933;
inp[18477] = 0;
inp[18478] = 15826;
inp[18479] = 0;
inp[18480] = 13966;
inp[18481] = 0;
inp[18482] = 12325;
inp[18483] = 0;
inp[18484] = 10877;
inp[18485] = 0;
inp[18486] = 9599;
inp[18487] = 0;
inp[18488] = 8471;
inp[18489] = 0;
inp[18490] = 7475;
inp[18491] = 0;
inp[18492] = 6597;
inp[18493] = 0;
inp[18494] = 5822;
inp[18495] = 0;
inp[18496] = 5137;
inp[18497] = 0;
inp[18498] = 4534;
inp[18499] = 0;
inp[18500] = 4001;
inp[18501] = 0;
inp[18502] = 3531;
inp[18503] = 0;
inp[18504] = 3116;
inp[18505] = 0;
inp[18506] = 2750;
inp[18507] = 0;
inp[18508] = 2427;
inp[18509] = 0;
inp[18510] = 2141;
inp[18511] = 0;
inp[18512] = 1890;
inp[18513] = 0;
inp[18514] = 1668;
inp[18515] = 0;
inp[18516] = 1472;
inp[18517] = 0;
inp[18518] = 1299;
inp[18519] = 0;
inp[18520] = 1146;
inp[18521] = 0;
inp[18522] = 1011;
inp[18523] = 0;
inp[18524] = 892;
inp[18525] = 0;
inp[18526] = 787;
inp[18527] = 0;
inp[18528] = 695;
inp[18529] = 0;
inp[18530] = 613;
inp[18531] = 0;
inp[18532] = 541;
inp[18533] = 0;
inp[18534] = 477;
inp[18535] = 0;
inp[18536] = 421;
inp[18537] = 0;
inp[18538] = 372;
inp[18539] = 0;
inp[18540] = 328;
inp[18541] = 0;
inp[18542] = 289;
inp[18543] = 0;
inp[18544] = 255;
inp[18545] = 0;
inp[18546] = 225;
inp[18547] = 0;
inp[18548] = 199;
inp[18549] = 0;
inp[18550] = 175;
inp[18551] = 0;
inp[18552] = 155;
inp[18553] = 0;
inp[18554] = 136;
inp[18555] = 0;
inp[18556] = 120;
inp[18557] = 0;
inp[18558] = 106;
inp[18559] = 0;
inp[18560] = 94;
inp[18561] = 0;
inp[18562] = 83;
inp[18563] = 0;
inp[18564] = 73;
inp[18565] = 0;
inp[18566] = 64;
inp[18567] = 0;
inp[18568] = 57;
inp[18569] = 0;
inp[18570] = 50;
inp[18571] = 0;
inp[18572] = 44;
inp[18573] = 0;
inp[18574] = 39;
inp[18575] = 0;
inp[18576] = 34;
inp[18577] = 0;
inp[18578] = 30;
inp[18579] = 0;
inp[18580] = 26;
inp[18581] = 0;
inp[18582] = 23;
inp[18583] = 0;
inp[18584] = 20;
inp[18585] = 0;
inp[18586] = 18;
inp[18587] = 0;
inp[18588] = 16;
inp[18589] = 0;
inp[18590] = 14;
inp[18591] = 0;
inp[18592] = 12;
inp[18593] = 0;
inp[18594] = 11;
inp[18595] = 0;
inp[18596] = 9;
inp[18597] = 0;
inp[18598] = 8;
inp[18599] = 0;
inp[18600] = 7;
inp[18601] = 0;
inp[18602] = 6;
inp[18603] = 0;
inp[18604] = 6;
inp[18605] = 0;
inp[18606] = 5;
inp[18607] = 0;
inp[18608] = 4;
inp[18609] = 0;
inp[18610] = 4;
inp[18611] = 0;
inp[18612] = 3;
inp[18613] = 0;
inp[18614] = 3;
inp[18615] = 0;
inp[18616] = 2;
inp[18617] = 0;
inp[18618] = 2;
inp[18619] = 0;
inp[18620] = 2;
inp[18621] = 0;
inp[18622] = 1;
inp[18623] = 0;
inp[18624] = 1;
inp[18625] = 0;
inp[18626] = 1;
inp[18627] = 0;
inp[18628] = 1;
inp[18629] = 0;
inp[18630] = 1;
inp[18631] = 0;
inp[18632] = 1;
inp[18633] = 0;
inp[18634] = 0;
inp[18635] = 0;
inp[18636] = 0;
inp[18637] = 0;
inp[18638] = 0;
inp[18639] = 0;
inp[18640] = 0;
inp[18641] = 0;
inp[18642] = 0;
inp[18643] = 0;
inp[18644] = 0;
inp[18645] = 0;
inp[18646] = 0;
inp[18647] = 0;
inp[18648] = 0;
inp[18649] = 0;
inp[18650] = 0;
inp[18651] = 0;
inp[18652] = 0;
inp[18653] = 0;
inp[18654] = 0;
inp[18655] = 0;
inp[18656] = 0;
inp[18657] = 0;
inp[18658] = 0;
inp[18659] = 0;
inp[18660] = 0;
inp[18661] = 0;
inp[18662] = 0;
inp[18663] = 0;
inp[18664] = 0;
inp[18665] = 0;
inp[18666] = 0;
inp[18667] = 0;
inp[18668] = 0;
inp[18669] = 0;
inp[18670] = 0;
inp[18671] = 0;
inp[18672] = 0;
inp[18673] = 0;
inp[18674] = 0;
inp[18675] = 0;
inp[18676] = 0;
inp[18677] = 0;
inp[18678] = 0;
inp[18679] = 0;
inp[18680] = 0;
inp[18681] = 0;
inp[18682] = 0;
inp[18683] = 0;
inp[18684] = 0;
inp[18685] = 0;
inp[18686] = 0;
inp[18687] = 0;
inp[18688] = 0;
inp[18689] = 0;
inp[18690] = 0;
inp[18691] = 0;
inp[18692] = 0;
inp[18693] = 0;
inp[18694] = 0;
inp[18695] = 0;
inp[18696] = 0;
inp[18697] = 0;
inp[18698] = 0;
inp[18699] = 0;
inp[18700] = 0;
inp[18701] = 0;
inp[18702] = 0;
inp[18703] = 0;
inp[18704] = 0;
inp[18705] = 0;
inp[18706] = 0;
inp[18707] = 0;
inp[18708] = 0;
inp[18709] = 0;
inp[18710] = 0;
inp[18711] = 0;
inp[18712] = 0;
inp[18713] = 0;
inp[18714] = 0;
inp[18715] = 0;
inp[18716] = 0;
inp[18717] = 0;
inp[18718] = 0;
inp[18719] = 0;
inp[18720] = 0;
inp[18721] = 0;
inp[18722] = 0;
inp[18723] = 0;
inp[18724] = 0;
inp[18725] = 0;
inp[18726] = 0;
inp[18727] = 0;
inp[18728] = 0;
inp[18729] = 0;
inp[18730] = 0;
inp[18731] = 0;
inp[18732] = 0;
inp[18733] = 0;
inp[18734] = 0;
inp[18735] = 0;
inp[18736] = 0;
inp[18737] = 0;
inp[18738] = 0;
inp[18739] = 0;
inp[18740] = 0;
inp[18741] = 0;
inp[18742] = 0;
inp[18743] = 0;
inp[18744] = 0;
inp[18745] = 0;
inp[18746] = 0;
inp[18747] = 0;
inp[18748] = 0;
inp[18749] = 0;
inp[18750] = 0;
inp[18751] = 0;
inp[18752] = 0;
inp[18753] = 0;
inp[18754] = 0;
inp[18755] = 0;
inp[18756] = 0;
inp[18757] = 0;
inp[18758] = 0;
inp[18759] = 0;
inp[18760] = 0;
inp[18761] = 0;
inp[18762] = 0;
inp[18763] = 0;
inp[18764] = 0;
inp[18765] = 0;
inp[18766] = 0;
inp[18767] = 0;
inp[18768] = 0;
inp[18769] = 0;
inp[18770] = 0;
inp[18771] = 0;
inp[18772] = 0;
inp[18773] = 0;
inp[18774] = 0;
inp[18775] = 0;
inp[18776] = 0;
inp[18777] = 0;
inp[18778] = 0;
inp[18779] = 0;
inp[18780] = 0;
inp[18781] = 0;
inp[18782] = 0;
inp[18783] = 0;
inp[18784] = 0;
inp[18785] = 0;
inp[18786] = 0;
inp[18787] = 0;
inp[18788] = 0;
inp[18789] = 0;
inp[18790] = 0;
inp[18791] = 0;
inp[18792] = 0;
inp[18793] = 0;
inp[18794] = 0;
inp[18795] = 0;
inp[18796] = 0;
inp[18797] = 0;
inp[18798] = 0;
inp[18799] = 0;
inp[18800] = 0;
inp[18801] = 0;
inp[18802] = 0;
inp[18803] = 0;
inp[18804] = 0;
inp[18805] = 0;
inp[18806] = 0;
inp[18807] = 0;
inp[18808] = 0;
inp[18809] = 0;
inp[18810] = 0;
inp[18811] = 0;
inp[18812] = 1073741824;
inp[18813] = 1073741824;
inp[18814] = 1008687095;
inp[18815] = 120;
inp[18816] = 947573833;
inp[18817] = 0;
inp[18818] = 890163237;
inp[18819] = 0;
inp[18820] = 836230973;
inp[18821] = 0;
inp[18822] = 785566299;
inp[18823] = 0;
inp[18824] = 737971243;
inp[18825] = 0;
inp[18826] = 693259826;
inp[18827] = 0;
inp[18828] = 651257336;
inp[18829] = 0;
inp[18830] = 611799649;
inp[18831] = 0;
inp[18832] = 574732582;
inp[18833] = 0;
inp[18834] = 539911295;
inp[18835] = 0;
inp[18836] = 507199723;
inp[18837] = 0;
inp[18838] = 476470046;
inp[18839] = 0;
inp[18840] = 447602185;
inp[18841] = 0;
inp[18842] = 420483339;
inp[18843] = 0;
inp[18844] = 395007542;
inp[18845] = 0;
inp[18846] = 371075245;
inp[18847] = 0;
inp[18848] = 348592932;
inp[18849] = 0;
inp[18850] = 327472754;
inp[18851] = 0;
inp[18852] = 307632183;
inp[18853] = 0;
inp[18854] = 288993691;
inp[18855] = 0;
inp[18856] = 271484448;
inp[18857] = 0;
inp[18858] = 255036037;
inp[18859] = 0;
inp[18860] = 239584185;
inp[18861] = 0;
inp[18862] = 225068513;
inp[18863] = 0;
inp[18864] = 211432301;
inp[18865] = 0;
inp[18866] = 198622265;
inp[18867] = 0;
inp[18868] = 186588351;
inp[18869] = 0;
inp[18870] = 175283534;
inp[18871] = 0;
inp[18872] = 164663641;
inp[18873] = 0;
inp[18874] = 154687176;
inp[18875] = 0;
inp[18876] = 145315153;
inp[18877] = 0;
inp[18878] = 136510953;
inp[18879] = 0;
inp[18880] = 128240173;
inp[18881] = 0;
inp[18882] = 120470493;
inp[18883] = 0;
inp[18884] = 113171555;
inp[18885] = 0;
inp[18886] = 106314837;
inp[18887] = 0;
inp[18888] = 99873547;
inp[18889] = 0;
inp[18890] = 93822514;
inp[18891] = 0;
inp[18892] = 88138096;
inp[18893] = 0;
inp[18894] = 82798078;
inp[18895] = 0;
inp[18896] = 77781596;
inp[18897] = 0;
inp[18898] = 73069048;
inp[18899] = 0;
inp[18900] = 68642018;
inp[18901] = 0;
inp[18902] = 64483208;
inp[18903] = 0;
inp[18904] = 60576368;
inp[18905] = 0;
inp[18906] = 56906231;
inp[18907] = 0;
inp[18908] = 53458457;
inp[18909] = 0;
inp[18910] = 50219573;
inp[18911] = 0;
inp[18912] = 47176923;
inp[18913] = 0;
inp[18914] = 44318617;
inp[18915] = 0;
inp[18916] = 41633488;
inp[18917] = 0;
inp[18918] = 39111043;
inp[18919] = 0;
inp[18920] = 36741424;
inp[18921] = 0;
inp[18922] = 34515374;
inp[18923] = 0;
inp[18924] = 32424193;
inp[18925] = 0;
inp[18926] = 30459710;
inp[18927] = 0;
inp[18928] = 28614250;
inp[18929] = 0;
inp[18930] = 26880600;
inp[18931] = 0;
inp[18932] = 25251987;
inp[18933] = 0;
inp[18934] = 23722046;
inp[18935] = 0;
inp[18936] = 22284800;
inp[18937] = 0;
inp[18938] = 20934632;
inp[18939] = 0;
inp[18940] = 19666267;
inp[18941] = 0;
inp[18942] = 18474748;
inp[18943] = 0;
inp[18944] = 17355420;
inp[18945] = 0;
inp[18946] = 16303908;
inp[18947] = 0;
inp[18948] = 15316104;
inp[18949] = 0;
inp[18950] = 14388148;
inp[18951] = 0;
inp[18952] = 13516414;
inp[18953] = 0;
inp[18954] = 12697496;
inp[18955] = 0;
inp[18956] = 11928194;
inp[18957] = 0;
inp[18958] = 11205501;
inp[18959] = 0;
inp[18960] = 10526594;
inp[18961] = 0;
inp[18962] = 9888820;
inp[18963] = 0;
inp[18964] = 9289686;
inp[18965] = 0;
inp[18966] = 8726853;
inp[18967] = 0;
inp[18968] = 8198119;
inp[18969] = 0;
inp[18970] = 7701421;
inp[18971] = 0;
inp[18972] = 7234815;
inp[18973] = 0;
inp[18974] = 6796480;
inp[18975] = 0;
inp[18976] = 6384702;
inp[18977] = 0;
inp[18978] = 5997872;
inp[18979] = 0;
inp[18980] = 5634479;
inp[18981] = 0;
inp[18982] = 5293104;
inp[18983] = 0;
inp[18984] = 4972411;
inp[18985] = 0;
inp[18986] = 4671147;
inp[18987] = 0;
inp[18988] = 4388137;
inp[18989] = 0;
inp[18990] = 4122273;
inp[18991] = 0;
inp[18992] = 3872517;
inp[18993] = 0;
inp[18994] = 3637893;
inp[18995] = 0;
inp[18996] = 3417484;
inp[18997] = 0;
inp[18998] = 3210429;
inp[18999] = 0;
inp[19000] = 3015919;
inp[19001] = 0;
inp[19002] = 2833194;
inp[19003] = 0;
inp[19004] = 2661539;
inp[19005] = 0;
inp[19006] = 2500285;
inp[19007] = 0;
inp[19008] = 2348800;
inp[19009] = 0;
inp[19010] = 2206494;
inp[19011] = 0;
inp[19012] = 2072809;
inp[19013] = 0;
inp[19014] = 1947224;
inp[19015] = 0;
inp[19016] = 1829247;
inp[19017] = 0;
inp[19018] = 1718419;
inp[19019] = 0;
inp[19020] = 1614305;
inp[19021] = 0;
inp[19022] = 1516499;
inp[19023] = 0;
inp[19024] = 1424619;
inp[19025] = 0;
inp[19026] = 1338306;
inp[19027] = 0;
inp[19028] = 1257222;
inp[19029] = 0;
inp[19030] = 1181051;
inp[19031] = 0;
inp[19032] = 1109494;
inp[19033] = 0;
inp[19034] = 1042273;
inp[19035] = 0;
inp[19036] = 979125;
inp[19037] = 0;
inp[19038] = 919803;
inp[19039] = 0;
inp[19040] = 864075;
inp[19041] = 0;
inp[19042] = 811723;
inp[19043] = 0;
inp[19044] = 762543;
inp[19045] = 0;
inp[19046] = 716343;
inp[19047] = 0;
inp[19048] = 672942;
inp[19049] = 0;
inp[19050] = 632171;
inp[19051] = 0;
inp[19052] = 593869;
inp[19053] = 0;
inp[19054] = 557889;
inp[19055] = 0;
inp[19056] = 524088;
inp[19057] = 0;
inp[19058] = 492335;
inp[19059] = 0;
inp[19060] = 462506;
inp[19061] = 0;
inp[19062] = 434484;
inp[19063] = 0;
inp[19064] = 408160;
inp[19065] = 0;
inp[19066] = 383431;
inp[19067] = 0;
inp[19068] = 360200;
inp[19069] = 0;
inp[19070] = 338376;
inp[19071] = 0;
inp[19072] = 317875;
inp[19073] = 0;
inp[19074] = 298616;
inp[19075] = 0;
inp[19076] = 280524;
inp[19077] = 0;
inp[19078] = 263528;
inp[19079] = 0;
inp[19080] = 247561;
inp[19081] = 0;
inp[19082] = 232562;
inp[19083] = 0;
inp[19084] = 218472;
inp[19085] = 0;
inp[19086] = 205235;
inp[19087] = 0;
inp[19088] = 192801;
inp[19089] = 0;
inp[19090] = 181120;
inp[19091] = 0;
inp[19092] = 170146;
inp[19093] = 0;
inp[19094] = 159837;
inp[19095] = 0;
inp[19096] = 150153;
inp[19097] = 0;
inp[19098] = 141056;
inp[19099] = 0;
inp[19100] = 132510;
inp[19101] = 0;
inp[19102] = 124481;
inp[19103] = 0;
inp[19104] = 116939;
inp[19105] = 0;
inp[19106] = 109854;
inp[19107] = 0;
inp[19108] = 103199;
inp[19109] = 0;
inp[19110] = 96946;
inp[19111] = 0;
inp[19112] = 91072;
inp[19113] = 0;
inp[19114] = 85555;
inp[19115] = 0;
inp[19116] = 80371;
inp[19117] = 0;
inp[19118] = 75502;
inp[19119] = 0;
inp[19120] = 70927;
inp[19121] = 0;
inp[19122] = 66630;
inp[19123] = 0;
inp[19124] = 62593;
inp[19125] = 0;
inp[19126] = 58801;
inp[19127] = 0;
inp[19128] = 55238;
inp[19129] = 0;
inp[19130] = 51891;
inp[19131] = 0;
inp[19132] = 48747;
inp[19133] = 0;
inp[19134] = 45794;
inp[19135] = 0;
inp[19136] = 43019;
inp[19137] = 0;
inp[19138] = 40413;
inp[19139] = 0;
inp[19140] = 37964;
inp[19141] = 0;
inp[19142] = 35664;
inp[19143] = 0;
inp[19144] = 33503;
inp[19145] = 0;
inp[19146] = 31473;
inp[19147] = 0;
inp[19148] = 29567;
inp[19149] = 0;
inp[19150] = 27775;
inp[19151] = 0;
inp[19152] = 26092;
inp[19153] = 0;
inp[19154] = 24511;
inp[19155] = 0;
inp[19156] = 23026;
inp[19157] = 0;
inp[19158] = 21631;
inp[19159] = 0;
inp[19160] = 20321;
inp[19161] = 0;
inp[19162] = 19089;
inp[19163] = 0;
inp[19164] = 17933;
inp[19165] = 0;
inp[19166] = 16846;
inp[19167] = 0;
inp[19168] = 15826;
inp[19169] = 0;
inp[19170] = 14867;
inp[19171] = 0;
inp[19172] = 13966;
inp[19173] = 0;
inp[19174] = 13120;
inp[19175] = 0;
inp[19176] = 12325;
inp[19177] = 0;
inp[19178] = 11578;
inp[19179] = 0;
inp[19180] = 10877;
inp[19181] = 0;
inp[19182] = 10218;
inp[19183] = 0;
inp[19184] = 9599;
inp[19185] = 0;
inp[19186] = 9017;
inp[19187] = 0;
inp[19188] = 8471;
inp[19189] = 0;
inp[19190] = 7957;
inp[19191] = 0;
inp[19192] = 7475;
inp[19193] = 0;
inp[19194] = 7022;
inp[19195] = 0;
inp[19196] = 6597;
inp[19197] = 0;
inp[19198] = 6197;
inp[19199] = 0;
inp[19200] = 5822;
inp[19201] = 0;
inp[19202] = 5469;
inp[19203] = 0;
inp[19204] = 5137;
inp[19205] = 0;
inp[19206] = 4826;
inp[19207] = 0;
inp[19208] = 4534;
inp[19209] = 0;
inp[19210] = 4259;
inp[19211] = 0;
inp[19212] = 4001;
inp[19213] = 0;
inp[19214] = 3759;
inp[19215] = 0;
inp[19216] = 3531;
inp[19217] = 0;
inp[19218] = 3317;
inp[19219] = 0;
inp[19220] = 3116;
inp[19221] = 0;
inp[19222] = 2927;
inp[19223] = 0;
inp[19224] = 2750;
inp[19225] = 0;
inp[19226] = 2583;
inp[19227] = 0;
inp[19228] = 2427;
inp[19229] = 0;
inp[19230] = 2279;
inp[19231] = 0;
inp[19232] = 2141;
inp[19233] = 0;
inp[19234] = 2012;
inp[19235] = 0;
inp[19236] = 1890;
inp[19237] = 0;
inp[19238] = 1775;
inp[19239] = 0;
inp[19240] = 1668;
inp[19241] = 0;
inp[19242] = 1566;
inp[19243] = 0;
inp[19244] = 1472;
inp[19245] = 0;
inp[19246] = 1382;
inp[19247] = 0;
inp[19248] = 1299;
inp[19249] = 0;
inp[19250] = 1220;
inp[19251] = 0;
inp[19252] = 1146;
inp[19253] = 0;
inp[19254] = 1076;
inp[19255] = 0;
inp[19256] = 1011;
inp[19257] = 0;
inp[19258] = 950;
inp[19259] = 0;
inp[19260] = 892;
inp[19261] = 0;
inp[19262] = 838;
inp[19263] = 0;
inp[19264] = 787;
inp[19265] = 0;
inp[19266] = 740;
inp[19267] = 0;
inp[19268] = 695;
inp[19269] = 0;
inp[19270] = 653;
inp[19271] = 0;
inp[19272] = 613;
inp[19273] = 0;
inp[19274] = 576;
inp[19275] = 0;
inp[19276] = 541;
inp[19277] = 0;
inp[19278] = 508;
inp[19279] = 0;
inp[19280] = 477;
inp[19281] = 0;
inp[19282] = 448;
inp[19283] = 0;
inp[19284] = 421;
inp[19285] = 0;
inp[19286] = 396;
inp[19287] = 0;
inp[19288] = 372;
inp[19289] = 0;
inp[19290] = 349;
inp[19291] = 0;
inp[19292] = 328;
inp[19293] = 0;
inp[19294] = 308;
inp[19295] = 0;
inp[19296] = 289;
inp[19297] = 0;
inp[19298] = 272;
inp[19299] = 0;
inp[19300] = 255;
inp[19301] = 0;
inp[19302] = 240;
inp[19303] = 0;
inp[19304] = 225;
inp[19305] = 0;
inp[19306] = 212;
inp[19307] = 0;
inp[19308] = 199;
inp[19309] = 0;
inp[19310] = 187;
inp[19311] = 0;
inp[19312] = 175;
inp[19313] = 0;
inp[19314] = 165;
inp[19315] = 0;
inp[19316] = 155;
inp[19317] = 0;
inp[19318] = 145;
inp[19319] = 0;
inp[19320] = 136;
inp[19321] = 0;
inp[19322] = 128;
inp[19323] = 0;
inp[19324] = 1073741824;
inp[19325] = 1073741824;
inp[19326] = 1040706261;
inp[19327] = 0;
inp[19328] = 1008687095;
inp[19329] = 0;
inp[19330] = 977653056;
inp[19331] = 0;
inp[19332] = 947573833;
inp[19333] = 0;
inp[19334] = 918420051;
inp[19335] = 0;
inp[19336] = 890163237;
inp[19337] = 0;
inp[19338] = 862775793;
inp[19339] = 0;
inp[19340] = 836230973;
inp[19341] = 0;
inp[19342] = 810502851;
inp[19343] = 0;
inp[19344] = 785566299;
inp[19345] = 0;
inp[19346] = 761396965;
inp[19347] = 0;
inp[19348] = 737971243;
inp[19349] = 0;
inp[19350] = 715266255;
inp[19351] = 0;
inp[19352] = 693259826;
inp[19353] = 0;
inp[19354] = 671930463;
inp[19355] = 0;
inp[19356] = 651257336;
inp[19357] = 0;
inp[19358] = 631220255;
inp[19359] = 0;
inp[19360] = 611799649;
inp[19361] = 0;
inp[19362] = 592976553;
inp[19363] = 0;
inp[19364] = 574732582;
inp[19365] = 0;
inp[19366] = 557049919;
inp[19367] = 0;
inp[19368] = 539911295;
inp[19369] = 0;
inp[19370] = 523299971;
inp[19371] = 0;
inp[19372] = 507199723;
inp[19373] = 0;
inp[19374] = 491594828;
inp[19375] = 0;
inp[19376] = 476470046;
inp[19377] = 0;
inp[19378] = 461810603;
inp[19379] = 0;
inp[19380] = 447602185;
inp[19381] = 0;
inp[19382] = 433830913;
inp[19383] = 0;
inp[19384] = 420483339;
inp[19385] = 0;
inp[19386] = 407546427;
inp[19387] = 0;
inp[19388] = 395007542;
inp[19389] = 0;
inp[19390] = 382854437;
inp[19391] = 0;
inp[19392] = 371075245;
inp[19393] = 0;
inp[19394] = 359658459;
inp[19395] = 0;
inp[19396] = 348592932;
inp[19397] = 0;
inp[19398] = 337867855;
inp[19399] = 0;
inp[19400] = 327472754;
inp[19401] = 0;
inp[19402] = 317397476;
inp[19403] = 0;
inp[19404] = 307632183;
inp[19405] = 0;
inp[19406] = 298167335;
inp[19407] = 0;
inp[19408] = 288993691;
inp[19409] = 0;
inp[19410] = 280102290;
inp[19411] = 0;
inp[19412] = 271484448;
inp[19413] = 0;
inp[19414] = 263131750;
inp[19415] = 0;
inp[19416] = 255036037;
inp[19417] = 0;
inp[19418] = 247189403;
inp[19419] = 0;
inp[19420] = 239584185;
inp[19421] = 0;
inp[19422] = 232212954;
inp[19423] = 0;
inp[19424] = 225068513;
inp[19425] = 0;
inp[19426] = 218143882;
inp[19427] = 0;
inp[19428] = 211432301;
inp[19429] = 0;
inp[19430] = 204927213;
inp[19431] = 0;
inp[19432] = 198622265;
inp[19433] = 0;
inp[19434] = 192511301;
inp[19435] = 0;
inp[19436] = 186588351;
inp[19437] = 0;
inp[19438] = 180847630;
inp[19439] = 0;
inp[19440] = 175283534;
inp[19441] = 0;
inp[19442] = 169890626;
inp[19443] = 0;
inp[19444] = 164663641;
inp[19445] = 0;
inp[19446] = 159597474;
inp[19447] = 0;
inp[19448] = 154687176;
inp[19449] = 0;
inp[19450] = 149927952;
inp[19451] = 0;
inp[19452] = 145315153;
inp[19453] = 0;
inp[19454] = 140844276;
inp[19455] = 0;
inp[19456] = 136510953;
inp[19457] = 0;
inp[19458] = 132310953;
inp[19459] = 0;
inp[19460] = 128240173;
inp[19461] = 0;
inp[19462] = 124294637;
inp[19463] = 0;
inp[19464] = 120470493;
inp[19465] = 0;
inp[19466] = 116764006;
inp[19467] = 0;
inp[19468] = 113171555;
inp[19469] = 0;
inp[19470] = 109689632;
inp[19471] = 0;
inp[19472] = 106314837;
inp[19473] = 0;
inp[19474] = 103043874;
inp[19475] = 0;
inp[19476] = 99873547;
inp[19477] = 0;
inp[19478] = 96800761;
inp[19479] = 0;
inp[19480] = 93822514;
inp[19481] = 0;
inp[19482] = 90935899;
inp[19483] = 0;
inp[19484] = 88138096;
inp[19485] = 0;
inp[19486] = 85426372;
inp[19487] = 0;
inp[19488] = 82798078;
inp[19489] = 0;
inp[19490] = 80250649;
inp[19491] = 0;
inp[19492] = 77781596;
inp[19493] = 0;
inp[19494] = 75388508;
inp[19495] = 0;
inp[19496] = 73069048;
inp[19497] = 0;
inp[19498] = 70820949;
inp[19499] = 0;
inp[19500] = 68642018;
inp[19501] = 0;
inp[19502] = 66530125;
inp[19503] = 0;
inp[19504] = 64483208;
inp[19505] = 0;
inp[19506] = 62499268;
inp[19507] = 0;
inp[19508] = 60576368;
inp[19509] = 0;
inp[19510] = 58712629;
inp[19511] = 0;
inp[19512] = 56906231;
inp[19513] = 0;
inp[19514] = 55155411;
inp[19515] = 0;
inp[19516] = 53458457;
inp[19517] = 0;
inp[19518] = 51813713;
inp[19519] = 0;
inp[19520] = 50219573;
inp[19521] = 0;
inp[19522] = 48674479;
inp[19523] = 0;
inp[19524] = 47176923;
inp[19525] = 0;
inp[19526] = 45725441;
inp[19527] = 0;
inp[19528] = 44318617;
inp[19529] = 0;
inp[19530] = 42955077;
inp[19531] = 0;
inp[19532] = 41633488;
inp[19533] = 0;
inp[19534] = 40352560;
inp[19535] = 0;
inp[19536] = 39111043;
inp[19537] = 0;
inp[19538] = 37907722;
inp[19539] = 0;
inp[19540] = 36741424;
inp[19541] = 0;
inp[19542] = 35611009;
inp[19543] = 0;
inp[19544] = 34515374;
inp[19545] = 0;
inp[19546] = 33453447;
inp[19547] = 0;
inp[19548] = 32424193;
inp[19549] = 0;
inp[19550] = 31426605;
inp[19551] = 0;
inp[19552] = 30459710;
inp[19553] = 0;
inp[19554] = 29522564;
inp[19555] = 0;
inp[19556] = 28614250;
inp[19557] = 0;
inp[19558] = 27733882;
inp[19559] = 0;
inp[19560] = 26880600;
inp[19561] = 0;
inp[19562] = 26053571;
inp[19563] = 0;
inp[19564] = 25251987;
inp[19565] = 0;
inp[19566] = 24475065;
inp[19567] = 0;
inp[19568] = 23722046;
inp[19569] = 0;
inp[19570] = 22992196;
inp[19571] = 0;
inp[19572] = 22284800;
inp[19573] = 0;
inp[19574] = 21599169;
inp[19575] = 0;
inp[19576] = 20934632;
inp[19577] = 0;
inp[19578] = 20290541;
inp[19579] = 0;
inp[19580] = 19666267;
inp[19581] = 0;
inp[19582] = 19061200;
inp[19583] = 0;
inp[19584] = 18474748;
inp[19585] = 0;
inp[19586] = 17906340;
inp[19587] = 0;
inp[19588] = 17355420;
inp[19589] = 0;
inp[19590] = 16821450;
inp[19591] = 0;
inp[19592] = 16303908;
inp[19593] = 0;
inp[19594] = 15802289;
inp[19595] = 0;
inp[19596] = 15316104;
inp[19597] = 0;
inp[19598] = 14844877;
inp[19599] = 0;
inp[19600] = 14388148;
inp[19601] = 0;
inp[19602] = 13945471;
inp[19603] = 0;
inp[19604] = 13516414;
inp[19605] = 0;
inp[19606] = 13100558;
inp[19607] = 0;
inp[19608] = 12697496;
inp[19609] = 0;
inp[19610] = 12306835;
inp[19611] = 0;
inp[19612] = 11928194;
inp[19613] = 0;
inp[19614] = 11561202;
inp[19615] = 0;
inp[19616] = 11205501;
inp[19617] = 0;
inp[19618] = 10860744;
inp[19619] = 0;
inp[19620] = 10526594;
inp[19621] = 0;
inp[19622] = 10202725;
inp[19623] = 0;
inp[19624] = 9888820;
inp[19625] = 0;
inp[19626] = 9584573;
inp[19627] = 0;
inp[19628] = 9289686;
inp[19629] = 0;
inp[19630] = 9003873;
inp[19631] = 0;
inp[19632] = 8726853;
inp[19633] = 0;
inp[19634] = 8458356;
inp[19635] = 0;
inp[19636] = 8198119;
inp[19637] = 0;
inp[19638] = 7945890;
inp[19639] = 0;
inp[19640] = 7701421;
inp[19641] = 0;
inp[19642] = 7464473;
inp[19643] = 0;
inp[19644] = 7234815;
inp[19645] = 0;
inp[19646] = 7012223;
inp[19647] = 0;
inp[19648] = 6796480;
inp[19649] = 0;
inp[19650] = 6587374;
inp[19651] = 0;
inp[19652] = 6384702;
inp[19653] = 0;
inp[19654] = 6188265;
inp[19655] = 0;
inp[19656] = 5997872;
inp[19657] = 0;
inp[19658] = 5813337;
inp[19659] = 0;
inp[19660] = 5634479;
inp[19661] = 0;
inp[19662] = 5461125;
inp[19663] = 0;
inp[19664] = 5293104;
inp[19665] = 0;
inp[19666] = 5130252;
inp[19667] = 0;
inp[19668] = 4972411;
inp[19669] = 0;
inp[19670] = 4819426;
inp[19671] = 0;
inp[19672] = 4671147;
inp[19673] = 0;
inp[19674] = 4527431;
inp[19675] = 0;
inp[19676] = 4388137;
inp[19677] = 0;
inp[19678] = 4253128;
inp[19679] = 0;
inp[19680] = 4122273;
inp[19681] = 0;
inp[19682] = 3995444;
inp[19683] = 0;
inp[19684] = 3872517;
inp[19685] = 0;
inp[19686] = 3753372;
inp[19687] = 0;
inp[19688] = 3637893;
inp[19689] = 0;
inp[19690] = 3525967;
inp[19691] = 0;
inp[19692] = 3417484;
inp[19693] = 0;
inp[19694] = 3312339;
inp[19695] = 0;
inp[19696] = 3210429;
inp[19697] = 0;
inp[19698] = 3111655;
inp[19699] = 0;
inp[19700] = 3015919;
inp[19701] = 0;
inp[19702] = 2923129;
inp[19703] = 0;
inp[19704] = 2833194;
inp[19705] = 0;
inp[19706] = 2746026;
inp[19707] = 0;
inp[19708] = 2661539;
inp[19709] = 0;
inp[19710] = 2579652;
inp[19711] = 0;
inp[19712] = 2500285;
inp[19713] = 0;
inp[19714] = 2423359;
inp[19715] = 0;
inp[19716] = 2348800;
inp[19717] = 0;
inp[19718] = 2276535;
inp[19719] = 0;
inp[19720] = 2206494;
inp[19721] = 0;
inp[19722] = 2138607;
inp[19723] = 0;
inp[19724] = 2072809;
inp[19725] = 0;
inp[19726] = 2009035;
inp[19727] = 0;
inp[19728] = 1947224;
inp[19729] = 0;
inp[19730] = 1887314;
inp[19731] = 0;
inp[19732] = 1829247;
inp[19733] = 0;
inp[19734] = 1772967;
inp[19735] = 0;
inp[19736] = 1718419;
inp[19737] = 0;
inp[19738] = 1665549;
inp[19739] = 0;
inp[19740] = 1614305;
inp[19741] = 0;
inp[19742] = 1564638;
inp[19743] = 0;
inp[19744] = 1516499;
inp[19745] = 0;
inp[19746] = 1469841;
inp[19747] = 0;
inp[19748] = 1424619;
inp[19749] = 0;
inp[19750] = 1380788;
inp[19751] = 0;
inp[19752] = 1338306;
inp[19753] = 0;
inp[19754] = 1297130;
inp[19755] = 0;
inp[19756] = 1257222;
inp[19757] = 0;
inp[19758] = 1218541;
inp[19759] = 0;
inp[19760] = 1181051;
inp[19761] = 0;
inp[19762] = 1144714;
inp[19763] = 0;
inp[19764] = 1109494;
inp[19765] = 0;
inp[19766] = 1075359;
inp[19767] = 0;
inp[19768] = 1042273;
inp[19769] = 0;
inp[19770] = 1010206;
inp[19771] = 0;
inp[19772] = 979125;
inp[19773] = 0;
inp[19774] = 949001;
inp[19775] = 0;
inp[19776] = 919803;
inp[19777] = 0;
inp[19778] = 891504;
inp[19779] = 0;
inp[19780] = 864075;
inp[19781] = 0;
inp[19782] = 837490;
inp[19783] = 0;
inp[19784] = 811723;
inp[19785] = 0;
inp[19786] = 786749;
inp[19787] = 0;
inp[19788] = 762543;
inp[19789] = 0;
inp[19790] = 739082;
inp[19791] = 0;
inp[19792] = 716343;
inp[19793] = 0;
inp[19794] = 694304;
inp[19795] = 0;
inp[19796] = 672942;
inp[19797] = 0;
inp[19798] = 652238;
inp[19799] = 0;
inp[19800] = 632171;
inp[19801] = 0;
inp[19802] = 612721;
inp[19803] = 0;
inp[19804] = 593869;
inp[19805] = 0;
inp[19806] = 575598;
inp[19807] = 0;
inp[19808] = 557889;
inp[19809] = 0;
inp[19810] = 540724;
inp[19811] = 0;
inp[19812] = 524088;
inp[19813] = 0;
inp[19814] = 507963;
inp[19815] = 0;
inp[19816] = 492335;
inp[19817] = 0;
inp[19818] = 477187;
inp[19819] = 0;
inp[19820] = 462506;
inp[19821] = 0;
inp[19822] = 448276;
inp[19823] = 0;
inp[19824] = 434484;
inp[19825] = 0;
inp[19826] = 421116;
inp[19827] = 0;
inp[19828] = 408160;
inp[19829] = 0;
inp[19830] = 395602;
inp[19831] = 0;
inp[19832] = 383431;
inp[19833] = 0;
inp[19834] = 371634;
inp[19835] = 0;
inp[19836] = 1073741824;
inp[19837] = 1073741824;
inp[19838] = 1057094999;
inp[19839] = 0;
inp[19840] = 1040706261;
inp[19841] = 0;
inp[19842] = 1024571605;
inp[19843] = 0;
inp[19844] = 1008687095;
inp[19845] = 0;
inp[19846] = 993048851;
inp[19847] = 0;
inp[19848] = 977653056;
inp[19849] = 0;
inp[19850] = 962495950;
inp[19851] = 0;
inp[19852] = 947573833;
inp[19853] = 0;
inp[19854] = 932883063;
inp[19855] = 0;
inp[19856] = 918420051;
inp[19857] = 0;
inp[19858] = 904181268;
inp[19859] = 0;
inp[19860] = 890163237;
inp[19861] = 0;
inp[19862] = 876362535;
inp[19863] = 0;
inp[19864] = 862775793;
inp[19865] = 0;
inp[19866] = 849399695;
inp[19867] = 0;
inp[19868] = 836230973;
inp[19869] = 0;
inp[19870] = 823266413;
inp[19871] = 0;
inp[19872] = 810502851;
inp[19873] = 0;
inp[19874] = 797937169;
inp[19875] = 0;
inp[19876] = 785566299;
inp[19877] = 0;
inp[19878] = 773387223;
inp[19879] = 0;
inp[19880] = 761396965;
inp[19881] = 0;
inp[19882] = 749592599;
inp[19883] = 0;
inp[19884] = 737971243;
inp[19885] = 0;
inp[19886] = 726530060;
inp[19887] = 0;
inp[19888] = 715266255;
inp[19889] = 0;
inp[19890] = 704177080;
inp[19891] = 0;
inp[19892] = 693259826;
inp[19893] = 0;
inp[19894] = 682511829;
inp[19895] = 0;
inp[19896] = 671930463;
inp[19897] = 0;
inp[19898] = 661513147;
inp[19899] = 0;
inp[19900] = 651257336;
inp[19901] = 0;
inp[19902] = 641160527;
inp[19903] = 0;
inp[19904] = 631220255;
inp[19905] = 0;
inp[19906] = 621434092;
inp[19907] = 0;
inp[19908] = 611799649;
inp[19909] = 0;
inp[19910] = 602314575;
inp[19911] = 0;
inp[19912] = 592976553;
inp[19913] = 0;
inp[19914] = 583783303;
inp[19915] = 0;
inp[19916] = 574732582;
inp[19917] = 0;
inp[19918] = 565822179;
inp[19919] = 0;
inp[19920] = 557049919;
inp[19921] = 0;
inp[19922] = 548413661;
inp[19923] = 0;
inp[19924] = 539911295;
inp[19925] = 0;
inp[19926] = 531540746;
inp[19927] = 0;
inp[19928] = 523299971;
inp[19929] = 0;
inp[19930] = 515186957;
inp[19931] = 0;
inp[19932] = 507199723;
inp[19933] = 0;
inp[19934] = 499336321;
inp[19935] = 0;
inp[19936] = 491594828;
inp[19937] = 0;
inp[19938] = 483973357;
inp[19939] = 0;
inp[19940] = 476470046;
inp[19941] = 0;
inp[19942] = 469083062;
inp[19943] = 0;
inp[19944] = 461810603;
inp[19945] = 0;
inp[19946] = 454650894;
inp[19947] = 0;
inp[19948] = 447602185;
inp[19949] = 0;
inp[19950] = 440662756;
inp[19951] = 0;
inp[19952] = 433830913;
inp[19953] = 0;
inp[19954] = 427104988;
inp[19955] = 0;
inp[19956] = 420483339;
inp[19957] = 0;
inp[19958] = 413964349;
inp[19959] = 0;
inp[19960] = 407546427;
inp[19961] = 0;
inp[19962] = 401228005;
inp[19963] = 0;
inp[19964] = 395007542;
inp[19965] = 0;
inp[19966] = 388883517;
inp[19967] = 0;
inp[19968] = 382854437;
inp[19969] = 0;
inp[19970] = 376918829;
inp[19971] = 0;
inp[19972] = 371075245;
inp[19973] = 0;
inp[19974] = 365322256;
inp[19975] = 0;
inp[19976] = 359658459;
inp[19977] = 0;
inp[19978] = 354082472;
inp[19979] = 0;
inp[19980] = 348592932;
inp[19981] = 0;
inp[19982] = 343188499;
inp[19983] = 0;
inp[19984] = 337867855;
inp[19985] = 0;
inp[19986] = 332629699;
inp[19987] = 0;
inp[19988] = 327472754;
inp[19989] = 0;
inp[19990] = 322395759;
inp[19991] = 0;
inp[19992] = 317397476;
inp[19993] = 0;
inp[19994] = 312476685;
inp[19995] = 0;
inp[19996] = 307632183;
inp[19997] = 0;
inp[19998] = 302862788;
inp[19999] = 0;
inp[20000] = 298167335;
inp[20001] = 0;
inp[20002] = 293544679;
inp[20003] = 0;
inp[20004] = 288993691;
inp[20005] = 0;
inp[20006] = 284513259;
inp[20007] = 0;
inp[20008] = 280102290;
inp[20009] = 0;
inp[20010] = 275759706;
inp[20011] = 0;
inp[20012] = 271484448;
inp[20013] = 0;
inp[20014] = 267275472;
inp[20015] = 0;
inp[20016] = 263131750;
inp[20017] = 0;
inp[20018] = 259052270;
inp[20019] = 0;
inp[20020] = 255036037;
inp[20021] = 0;
inp[20022] = 251082070;
inp[20023] = 0;
inp[20024] = 247189403;
inp[20025] = 0;
inp[20026] = 243357087;
inp[20027] = 0;
inp[20028] = 239584185;
inp[20029] = 0;
inp[20030] = 235869776;
inp[20031] = 0;
inp[20032] = 232212954;
inp[20033] = 0;
inp[20034] = 228612826;
inp[20035] = 0;
inp[20036] = 225068513;
inp[20037] = 0;
inp[20038] = 221579149;
inp[20039] = 0;
inp[20040] = 218143882;
inp[20041] = 0;
inp[20042] = 214761875;
inp[20043] = 0;
inp[20044] = 211432301;
inp[20045] = 0;
inp[20046] = 208154347;
inp[20047] = 0;
inp[20048] = 204927213;
inp[20049] = 0;
inp[20050] = 201750111;
inp[20051] = 0;
inp[20052] = 198622265;
inp[20053] = 0;
inp[20054] = 195542912;
inp[20055] = 0;
inp[20056] = 192511301;
inp[20057] = 0;
inp[20058] = 189526689;
inp[20059] = 0;
inp[20060] = 186588351;
inp[20061] = 0;
inp[20062] = 183695566;
inp[20063] = 0;
inp[20064] = 180847630;
inp[20065] = 0;
inp[20066] = 178043848;
inp[20067] = 0;
inp[20068] = 175283534;
inp[20069] = 0;
inp[20070] = 172566014;
inp[20071] = 0;
inp[20072] = 169890626;
inp[20073] = 0;
inp[20074] = 167256716;
inp[20075] = 0;
inp[20076] = 164663641;
inp[20077] = 0;
inp[20078] = 162110768;
inp[20079] = 0;
inp[20080] = 159597474;
inp[20081] = 0;
inp[20082] = 157123144;
inp[20083] = 0;
inp[20084] = 154687176;
inp[20085] = 0;
inp[20086] = 152288973;
inp[20087] = 0;
inp[20088] = 149927952;
inp[20089] = 0;
inp[20090] = 147603534;
inp[20091] = 0;
inp[20092] = 145315153;
inp[20093] = 0;
inp[20094] = 143062251;
inp[20095] = 0;
inp[20096] = 140844276;
inp[20097] = 0;
inp[20098] = 138660688;
inp[20099] = 0;
inp[20100] = 136510953;
inp[20101] = 0;
inp[20102] = 134394547;
inp[20103] = 0;
inp[20104] = 132310953;
inp[20105] = 0;
inp[20106] = 130259662;
inp[20107] = 0;
inp[20108] = 128240173;
inp[20109] = 0;
inp[20110] = 126251993;
inp[20111] = 0;
inp[20112] = 124294637;
inp[20113] = 0;
inp[20114] = 122367628;
inp[20115] = 0;
inp[20116] = 120470493;
inp[20117] = 0;
inp[20118] = 118602771;
inp[20119] = 0;
inp[20120] = 116764006;
inp[20121] = 0;
inp[20122] = 114953748;
inp[20123] = 0;
inp[20124] = 113171555;
inp[20125] = 0;
inp[20126] = 111416993;
inp[20127] = 0;
inp[20128] = 109689632;
inp[20129] = 0;
inp[20130] = 107989052;
inp[20131] = 0;
inp[20132] = 106314837;
inp[20133] = 0;
inp[20134] = 104666578;
inp[20135] = 0;
inp[20136] = 103043874;
inp[20137] = 0;
inp[20138] = 101446326;
inp[20139] = 0;
inp[20140] = 99873547;
inp[20141] = 0;
inp[20142] = 98325151;
inp[20143] = 0;
inp[20144] = 96800761;
inp[20145] = 0;
inp[20146] = 95300004;
inp[20147] = 0;
inp[20148] = 93822514;
inp[20149] = 0;
inp[20150] = 92367931;
inp[20151] = 0;
inp[20152] = 90935899;
inp[20153] = 0;
inp[20154] = 89526069;
inp[20155] = 0;
inp[20156] = 88138096;
inp[20157] = 0;
inp[20158] = 86771641;
inp[20159] = 0;
inp[20160] = 85426372;
inp[20161] = 0;
inp[20162] = 84101958;
inp[20163] = 0;
inp[20164] = 82798078;
inp[20165] = 0;
inp[20166] = 81514413;
inp[20167] = 0;
inp[20168] = 80250649;
inp[20169] = 0;
inp[20170] = 79006478;
inp[20171] = 0;
inp[20172] = 77781596;
inp[20173] = 0;
inp[20174] = 76575704;
inp[20175] = 0;
inp[20176] = 75388508;
inp[20177] = 0;
inp[20178] = 74219718;
inp[20179] = 0;
inp[20180] = 73069048;
inp[20181] = 0;
inp[20182] = 71936217;
inp[20183] = 0;
inp[20184] = 70820949;
inp[20185] = 0;
inp[20186] = 69722972;
inp[20187] = 0;
inp[20188] = 68642018;
inp[20189] = 0;
inp[20190] = 67577822;
inp[20191] = 0;
inp[20192] = 66530125;
inp[20193] = 0;
inp[20194] = 65498671;
inp[20195] = 0;
inp[20196] = 64483208;
inp[20197] = 0;
inp[20198] = 63483489;
inp[20199] = 0;
inp[20200] = 62499268;
inp[20201] = 0;
inp[20202] = 61530307;
inp[20203] = 0;
inp[20204] = 60576368;
inp[20205] = 0;
inp[20206] = 59637218;
inp[20207] = 0;
inp[20208] = 58712629;
inp[20209] = 0;
inp[20210] = 57802374;
inp[20211] = 0;
inp[20212] = 56906231;
inp[20213] = 0;
inp[20214] = 56023982;
inp[20215] = 0;
inp[20216] = 55155411;
inp[20217] = 0;
inp[20218] = 54300305;
inp[20219] = 0;
inp[20220] = 53458457;
inp[20221] = 0;
inp[20222] = 52629661;
inp[20223] = 0;
inp[20224] = 51813713;
inp[20225] = 0;
inp[20226] = 51010416;
inp[20227] = 0;
inp[20228] = 50219573;
inp[20229] = 0;
inp[20230] = 49440991;
inp[20231] = 0;
inp[20232] = 48674479;
inp[20233] = 0;
inp[20234] = 47919851;
inp[20235] = 0;
inp[20236] = 47176923;
inp[20237] = 0;
inp[20238] = 46445512;
inp[20239] = 0;
inp[20240] = 45725441;
inp[20241] = 0;
inp[20242] = 45016534;
inp[20243] = 0;
inp[20244] = 44318617;
inp[20245] = 0;
inp[20246] = 43631521;
inp[20247] = 0;
inp[20248] = 42955077;
inp[20249] = 0;
inp[20250] = 42289120;
inp[20251] = 0;
inp[20252] = 41633488;
inp[20253] = 0;
inp[20254] = 40988021;
inp[20255] = 0;
inp[20256] = 40352560;
inp[20257] = 0;
inp[20258] = 39726952;
inp[20259] = 0;
inp[20260] = 39111043;
inp[20261] = 0;
inp[20262] = 38504682;
inp[20263] = 0;
inp[20264] = 37907722;
inp[20265] = 0;
inp[20266] = 37320018;
inp[20267] = 0;
inp[20268] = 36741424;
inp[20269] = 0;
inp[20270] = 36171801;
inp[20271] = 0;
inp[20272] = 35611009;
inp[20273] = 0;
inp[20274] = 35058912;
inp[20275] = 0;
inp[20276] = 34515374;
inp[20277] = 0;
inp[20278] = 33980263;
inp[20279] = 0;
inp[20280] = 33453447;
inp[20281] = 0;
inp[20282] = 32934800;
inp[20283] = 0;
inp[20284] = 32424193;
inp[20285] = 0;
inp[20286] = 31921503;
inp[20287] = 0;
inp[20288] = 31426605;
inp[20289] = 0;
inp[20290] = 30939381;
inp[20291] = 0;
inp[20292] = 30459710;
inp[20293] = 0;
inp[20294] = 29987476;
inp[20295] = 0;
inp[20296] = 29522564;
inp[20297] = 0;
inp[20298] = 29064859;
inp[20299] = 0;
inp[20300] = 28614250;
inp[20301] = 0;
inp[20302] = 28170627;
inp[20303] = 0;
inp[20304] = 27733882;
inp[20305] = 0;
inp[20306] = 27303908;
inp[20307] = 0;
inp[20308] = 26880600;
inp[20309] = 0;
inp[20310] = 26463855;
inp[20311] = 0;
inp[20312] = 26053571;
inp[20313] = 0;
inp[20314] = 25649648;
inp[20315] = 0;
inp[20316] = 25251987;
inp[20317] = 0;
inp[20318] = 24860491;
inp[20319] = 0;
inp[20320] = 24475065;
inp[20321] = 0;
inp[20322] = 24095614;
inp[20323] = 0;
inp[20324] = 23722046;
inp[20325] = 0;
inp[20326] = 23354270;
inp[20327] = 0;
inp[20328] = 22992196;
inp[20329] = 0;
inp[20330] = 22635735;
inp[20331] = 0;
inp[20332] = 22284800;
inp[20333] = 0;
inp[20334] = 21939306;
inp[20335] = 0;
inp[20336] = 21599169;
inp[20337] = 0;
inp[20338] = 21264305;
inp[20339] = 0;
inp[20340] = 20934632;
inp[20341] = 0;
inp[20342] = 20610071;
inp[20343] = 0;
inp[20344] = 20290541;
inp[20345] = 0;
inp[20346] = 19975966;
inp[20347] = 0;
inp[20348] = 1073741824;
inp[20349] = 1073741824;
inp[20350] = 1065385898;
inp[20351] = 0;
inp[20352] = 1057094999;
inp[20353] = 0;
inp[20354] = 1048868621;
inp[20355] = 0;
inp[20356] = 1040706261;
inp[20357] = 0;
inp[20358] = 1032607420;
inp[20359] = 0;
inp[20360] = 1024571605;
inp[20361] = 0;
inp[20362] = 1016598326;
inp[20363] = 0;
inp[20364] = 1008687095;
inp[20365] = 0;
inp[20366] = 1000837430;
inp[20367] = 0;
inp[20368] = 993048851;
inp[20369] = 0;
inp[20370] = 985320884;
inp[20371] = 0;
inp[20372] = 977653056;
inp[20373] = 0;
inp[20374] = 970044899;
inp[20375] = 0;
inp[20376] = 962495950;
inp[20377] = 0;
inp[20378] = 955005747;
inp[20379] = 0;
inp[20380] = 947573833;
inp[20381] = 0;
inp[20382] = 940199755;
inp[20383] = 0;
inp[20384] = 932883063;
inp[20385] = 0;
inp[20386] = 925623309;
inp[20387] = 0;
inp[20388] = 918420051;
inp[20389] = 0;
inp[20390] = 911272850;
inp[20391] = 0;
inp[20392] = 904181268;
inp[20393] = 0;
inp[20394] = 897144874;
inp[20395] = 0;
inp[20396] = 890163237;
inp[20397] = 0;
inp[20398] = 883235932;
inp[20399] = 0;
inp[20400] = 876362535;
inp[20401] = 0;
inp[20402] = 869542628;
inp[20403] = 0;
inp[20404] = 862775793;
inp[20405] = 0;
inp[20406] = 856061619;
inp[20407] = 0;
inp[20408] = 849399695;
inp[20409] = 0;
inp[20410] = 842789614;
inp[20411] = 0;
inp[20412] = 836230973;
inp[20413] = 0;
inp[20414] = 829723372;
inp[20415] = 0;
inp[20416] = 823266413;
inp[20417] = 0;
inp[20418] = 816859703;
inp[20419] = 0;
inp[20420] = 810502851;
inp[20421] = 0;
inp[20422] = 804195467;
inp[20423] = 0;
inp[20424] = 797937169;
inp[20425] = 0;
inp[20426] = 791727572;
inp[20427] = 0;
inp[20428] = 785566299;
inp[20429] = 0;
inp[20430] = 779452974;
inp[20431] = 0;
inp[20432] = 773387223;
inp[20433] = 0;
inp[20434] = 767368676;
inp[20435] = 0;
inp[20436] = 761396965;
inp[20437] = 0;
inp[20438] = 755471727;
inp[20439] = 0;
inp[20440] = 749592599;
inp[20441] = 0;
inp[20442] = 743759224;
inp[20443] = 0;
inp[20444] = 737971243;
inp[20445] = 0;
inp[20446] = 732228306;
inp[20447] = 0;
inp[20448] = 726530060;
inp[20449] = 0;
inp[20450] = 720876158;
inp[20451] = 0;
inp[20452] = 715266255;
inp[20453] = 0;
inp[20454] = 709700009;
inp[20455] = 0;
inp[20456] = 704177080;
inp[20457] = 0;
inp[20458] = 698697130;
inp[20459] = 0;
inp[20460] = 693259826;
inp[20461] = 0;
inp[20462] = 687864835;
inp[20463] = 0;
inp[20464] = 682511829;
inp[20465] = 0;
inp[20466] = 677200479;
inp[20467] = 0;
inp[20468] = 671930463;
inp[20469] = 0;
inp[20470] = 666701459;
inp[20471] = 0;
inp[20472] = 661513147;
inp[20473] = 0;
inp[20474] = 656365211;
inp[20475] = 0;
inp[20476] = 651257336;
inp[20477] = 0;
inp[20478] = 646189212;
inp[20479] = 0;
inp[20480] = 641160527;
inp[20481] = 0;
inp[20482] = 636170976;
inp[20483] = 0;
inp[20484] = 631220255;
inp[20485] = 0;
inp[20486] = 626308060;
inp[20487] = 0;
inp[20488] = 621434092;
inp[20489] = 0;
inp[20490] = 616598053;
inp[20491] = 0;
inp[20492] = 611799649;
inp[20493] = 0;
inp[20494] = 607038586;
inp[20495] = 0;
inp[20496] = 602314575;
inp[20497] = 0;
inp[20498] = 597627325;
inp[20499] = 0;
inp[20500] = 592976553;
inp[20501] = 0;
inp[20502] = 588361972;
inp[20503] = 0;
inp[20504] = 583783303;
inp[20505] = 0;
inp[20506] = 579240266;
inp[20507] = 0;
inp[20508] = 574732582;
inp[20509] = 0;
inp[20510] = 570259978;
inp[20511] = 0;
inp[20512] = 565822179;
inp[20513] = 0;
inp[20514] = 561418916;
inp[20515] = 0;
inp[20516] = 557049919;
inp[20517] = 0;
inp[20518] = 552714923;
inp[20519] = 0;
inp[20520] = 548413661;
inp[20521] = 0;
inp[20522] = 544145872;
inp[20523] = 0;
inp[20524] = 539911295;
inp[20525] = 0;
inp[20526] = 535709672;
inp[20527] = 0;
inp[20528] = 531540746;
inp[20529] = 0;
inp[20530] = 527404264;
inp[20531] = 0;
inp[20532] = 523299971;
inp[20533] = 0;
inp[20534] = 519227618;
inp[20535] = 0;
inp[20536] = 515186957;
inp[20537] = 0;
inp[20538] = 511177740;
inp[20539] = 0;
inp[20540] = 507199723;
inp[20541] = 0;
inp[20542] = 503252664;
inp[20543] = 0;
inp[20544] = 499336321;
inp[20545] = 0;
inp[20546] = 495450454;
inp[20547] = 0;
inp[20548] = 491594828;
inp[20549] = 0;
inp[20550] = 487769207;
inp[20551] = 0;
inp[20552] = 483973357;
inp[20553] = 0;
inp[20554] = 480207047;
inp[20555] = 0;
inp[20556] = 476470046;
inp[20557] = 0;
inp[20558] = 472762126;
inp[20559] = 0;
inp[20560] = 469083062;
inp[20561] = 0;
inp[20562] = 465432629;
inp[20563] = 0;
inp[20564] = 461810603;
inp[20565] = 0;
inp[20566] = 458216765;
inp[20567] = 0;
inp[20568] = 454650894;
inp[20569] = 0;
inp[20570] = 451112772;
inp[20571] = 0;
inp[20572] = 447602185;
inp[20573] = 0;
inp[20574] = 444118917;
inp[20575] = 0;
inp[20576] = 440662756;
inp[20577] = 0;
inp[20578] = 437233491;
inp[20579] = 0;
inp[20580] = 433830913;
inp[20581] = 0;
inp[20582] = 430454814;
inp[20583] = 0;
inp[20584] = 427104988;
inp[20585] = 0;
inp[20586] = 423781231;
inp[20587] = 0;
inp[20588] = 420483339;
inp[20589] = 0;
inp[20590] = 417211112;
inp[20591] = 0;
inp[20592] = 413964349;
inp[20593] = 0;
inp[20594] = 410742853;
inp[20595] = 0;
inp[20596] = 407546427;
inp[20597] = 0;
inp[20598] = 404374876;
inp[20599] = 0;
inp[20600] = 401228005;
inp[20601] = 0;
inp[20602] = 398105624;
inp[20603] = 0;
inp[20604] = 395007542;
inp[20605] = 0;
inp[20606] = 391933569;
inp[20607] = 0;
inp[20608] = 388883517;
inp[20609] = 0;
inp[20610] = 385857202;
inp[20611] = 0;
inp[20612] = 382854437;
inp[20613] = 0;
inp[20614] = 379875040;
inp[20615] = 0;
inp[20616] = 376918829;
inp[20617] = 0;
inp[20618] = 373985624;
inp[20619] = 0;
inp[20620] = 371075245;
inp[20621] = 0;
inp[20622] = 368187514;
inp[20623] = 0;
inp[20624] = 365322256;
inp[20625] = 0;
inp[20626] = 362479296;
inp[20627] = 0;
inp[20628] = 359658459;
inp[20629] = 0;
inp[20630] = 356859575;
inp[20631] = 0;
inp[20632] = 354082472;
inp[20633] = 0;
inp[20634] = 351326980;
inp[20635] = 0;
inp[20636] = 348592932;
inp[20637] = 0;
inp[20638] = 345880160;
inp[20639] = 0;
inp[20640] = 343188499;
inp[20641] = 0;
inp[20642] = 340517785;
inp[20643] = 0;
inp[20644] = 337867855;
inp[20645] = 0;
inp[20646] = 335238546;
inp[20647] = 0;
inp[20648] = 332629699;
inp[20649] = 0;
inp[20650] = 330041155;
inp[20651] = 0;
inp[20652] = 327472754;
inp[20653] = 0;
inp[20654] = 324924341;
inp[20655] = 0;
inp[20656] = 322395759;
inp[20657] = 0;
inp[20658] = 319886856;
inp[20659] = 0;
inp[20660] = 317397476;
inp[20661] = 0;
inp[20662] = 314927470;
inp[20663] = 0;
inp[20664] = 312476685;
inp[20665] = 0;
inp[20666] = 310044972;
inp[20667] = 0;
inp[20668] = 307632183;
inp[20669] = 0;
inp[20670] = 305238170;
inp[20671] = 0;
inp[20672] = 302862788;
inp[20673] = 0;
inp[20674] = 300505891;
inp[20675] = 0;
inp[20676] = 298167335;
inp[20677] = 0;
inp[20678] = 295846979;
inp[20679] = 0;
inp[20680] = 293544679;
inp[20681] = 0;
inp[20682] = 291260297;
inp[20683] = 0;
inp[20684] = 288993691;
inp[20685] = 0;
inp[20686] = 286744724;
inp[20687] = 0;
inp[20688] = 284513259;
inp[20689] = 0;
inp[20690] = 282299159;
inp[20691] = 0;
inp[20692] = 280102290;
inp[20693] = 0;
inp[20694] = 277922516;
inp[20695] = 0;
inp[20696] = 275759706;
inp[20697] = 0;
inp[20698] = 273613727;
inp[20699] = 0;
inp[20700] = 271484448;
inp[20701] = 0;
inp[20702] = 269371740;
inp[20703] = 0;
inp[20704] = 267275472;
inp[20705] = 0;
inp[20706] = 265195518;
inp[20707] = 0;
inp[20708] = 263131750;
inp[20709] = 0;
inp[20710] = 261084042;
inp[20711] = 0;
inp[20712] = 259052270;
inp[20713] = 0;
inp[20714] = 257036309;
inp[20715] = 0;
inp[20716] = 255036037;
inp[20717] = 0;
inp[20718] = 253051331;
inp[20719] = 0;
inp[20720] = 251082070;
inp[20721] = 0;
inp[20722] = 249128134;
inp[20723] = 0;
inp[20724] = 247189403;
inp[20725] = 0;
inp[20726] = 245265760;
inp[20727] = 0;
inp[20728] = 243357087;
inp[20729] = 0;
inp[20730] = 241463267;
inp[20731] = 0;
inp[20732] = 239584185;
inp[20733] = 0;
inp[20734] = 237719726;
inp[20735] = 0;
inp[20736] = 235869776;
inp[20737] = 0;
inp[20738] = 234034223;
inp[20739] = 0;
inp[20740] = 232212954;
inp[20741] = 0;
inp[20742] = 230405859;
inp[20743] = 0;
inp[20744] = 228612826;
inp[20745] = 0;
inp[20746] = 226833747;
inp[20747] = 0;
inp[20748] = 225068513;
inp[20749] = 0;
inp[20750] = 223317016;
inp[20751] = 0;
inp[20752] = 221579149;
inp[20753] = 0;
inp[20754] = 219854806;
inp[20755] = 0;
inp[20756] = 218143882;
inp[20757] = 0;
inp[20758] = 216446273;
inp[20759] = 0;
inp[20760] = 214761875;
inp[20761] = 0;
inp[20762] = 213090585;
inp[20763] = 0;
inp[20764] = 211432301;
inp[20765] = 0;
inp[20766] = 209786922;
inp[20767] = 0;
inp[20768] = 208154347;
inp[20769] = 0;
inp[20770] = 206534477;
inp[20771] = 0;
inp[20772] = 204927213;
inp[20773] = 0;
inp[20774] = 203332457;
inp[20775] = 0;
inp[20776] = 201750111;
inp[20777] = 0;
inp[20778] = 200180079;
inp[20779] = 0;
inp[20780] = 198622265;
inp[20781] = 0;
inp[20782] = 197076575;
inp[20783] = 0;
inp[20784] = 195542912;
inp[20785] = 0;
inp[20786] = 194021185;
inp[20787] = 0;
inp[20788] = 192511301;
inp[20789] = 0;
inp[20790] = 191013166;
inp[20791] = 0;
inp[20792] = 189526689;
inp[20793] = 0;
inp[20794] = 188051781;
inp[20795] = 0;
inp[20796] = 186588351;
inp[20797] = 0;
inp[20798] = 185136308;
inp[20799] = 0;
inp[20800] = 183695566;
inp[20801] = 0;
inp[20802] = 182266036;
inp[20803] = 0;
inp[20804] = 180847630;
inp[20805] = 0;
inp[20806] = 179440263;
inp[20807] = 0;
inp[20808] = 178043848;
inp[20809] = 0;
inp[20810] = 176658300;
inp[20811] = 0;
inp[20812] = 175283534;
inp[20813] = 0;
inp[20814] = 173919467;
inp[20815] = 0;
inp[20816] = 172566014;
inp[20817] = 0;
inp[20818] = 171223095;
inp[20819] = 0;
inp[20820] = 169890626;
inp[20821] = 0;
inp[20822] = 168568527;
inp[20823] = 0;
inp[20824] = 167256716;
inp[20825] = 0;
inp[20826] = 165955114;
inp[20827] = 0;
inp[20828] = 164663641;
inp[20829] = 0;
inp[20830] = 163382219;
inp[20831] = 0;
inp[20832] = 162110768;
inp[20833] = 0;
inp[20834] = 160849212;
inp[20835] = 0;
inp[20836] = 159597474;
inp[20837] = 0;
inp[20838] = 158355476;
inp[20839] = 0;
inp[20840] = 157123144;
inp[20841] = 0;
inp[20842] = 155900402;
inp[20843] = 0;
inp[20844] = 154687176;
inp[20845] = 0;
inp[20846] = 153483390;
inp[20847] = 0;
inp[20848] = 152288973;
inp[20849] = 0;
inp[20850] = 151103851;
inp[20851] = 0;
inp[20852] = 149927952;
inp[20853] = 0;
inp[20854] = 148761203;
inp[20855] = 0;
inp[20856] = 147603534;
inp[20857] = 0;
inp[20858] = 146454874;
inp[20859] = 0;
inp[20860] = 1073741824;
inp[20861] = 1073741824;
inp[20862] = 1069555701;
inp[20863] = 0;
inp[20864] = 1065385898;
inp[20865] = 0;
inp[20866] = 1061232352;
inp[20867] = 0;
inp[20868] = 1057094999;
inp[20869] = 0;
inp[20870] = 1052973777;
inp[20871] = 0;
inp[20872] = 1048868621;
inp[20873] = 0;
inp[20874] = 1044779470;
inp[20875] = 0;
inp[20876] = 1040706261;
inp[20877] = 0;
inp[20878] = 1036648931;
inp[20879] = 0;
inp[20880] = 1032607420;
inp[20881] = 0;
inp[20882] = 1028581665;
inp[20883] = 0;
inp[20884] = 1024571605;
inp[20885] = 0;
inp[20886] = 1020577179;
inp[20887] = 0;
inp[20888] = 1016598326;
inp[20889] = 0;
inp[20890] = 1012634985;
inp[20891] = 0;
inp[20892] = 1008687095;
inp[20893] = 0;
inp[20894] = 1004754597;
inp[20895] = 0;
inp[20896] = 1000837430;
inp[20897] = 0;
inp[20898] = 996935534;
inp[20899] = 0;
inp[20900] = 993048851;
inp[20901] = 0;
inp[20902] = 989177321;
inp[20903] = 0;
inp[20904] = 985320884;
inp[20905] = 0;
inp[20906] = 981479482;
inp[20907] = 0;
inp[20908] = 977653056;
inp[20909] = 0;
inp[20910] = 973841548;
inp[20911] = 0;
inp[20912] = 970044899;
inp[20913] = 0;
inp[20914] = 966263053;
inp[20915] = 0;
inp[20916] = 962495950;
inp[20917] = 0;
inp[20918] = 958743534;
inp[20919] = 0;
inp[20920] = 955005747;
inp[20921] = 0;
inp[20922] = 951282532;
inp[20923] = 0;
inp[20924] = 947573833;
inp[20925] = 0;
inp[20926] = 943879593;
inp[20927] = 0;
inp[20928] = 940199755;
inp[20929] = 0;
inp[20930] = 936534264;
inp[20931] = 0;
inp[20932] = 932883063;
inp[20933] = 0;
inp[20934] = 929246096;
inp[20935] = 0;
inp[20936] = 925623309;
inp[20937] = 0;
inp[20938] = 922014646;
inp[20939] = 0;
inp[20940] = 918420051;
inp[20941] = 0;
inp[20942] = 914839471;
inp[20943] = 0;
inp[20944] = 911272850;
inp[20945] = 0;
inp[20946] = 907720134;
inp[20947] = 0;
inp[20948] = 904181268;
inp[20949] = 0;
inp[20950] = 900656200;
inp[20951] = 0;
inp[20952] = 897144874;
inp[20953] = 0;
inp[20954] = 893647237;
inp[20955] = 0;
inp[20956] = 890163237;
inp[20957] = 0;
inp[20958] = 886692819;
inp[20959] = 0;
inp[20960] = 883235932;
inp[20961] = 0;
inp[20962] = 879792521;
inp[20963] = 0;
inp[20964] = 876362535;
inp[20965] = 0;
inp[20966] = 872945921;
inp[20967] = 0;
inp[20968] = 869542628;
inp[20969] = 0;
inp[20970] = 866152602;
inp[20971] = 0;
inp[20972] = 862775793;
inp[20973] = 0;
inp[20974] = 859412149;
inp[20975] = 0;
inp[20976] = 856061619;
inp[20977] = 0;
inp[20978] = 852724151;
inp[20979] = 0;
inp[20980] = 849399695;
inp[20981] = 0;
inp[20982] = 846088199;
inp[20983] = 0;
inp[20984] = 842789614;
inp[20985] = 0;
inp[20986] = 839503888;
inp[20987] = 0;
inp[20988] = 836230973;
inp[20989] = 0;
inp[20990] = 832970817;
inp[20991] = 0;
inp[20992] = 829723372;
inp[20993] = 0;
inp[20994] = 826488587;
inp[20995] = 0;
inp[20996] = 823266413;
inp[20997] = 0;
inp[20998] = 820056802;
inp[20999] = 0;
inp[21000] = 816859703;
inp[21001] = 0;
inp[21002] = 813675069;
inp[21003] = 0;
inp[21004] = 810502851;
inp[21005] = 0;
inp[21006] = 807342999;
inp[21007] = 0;
inp[21008] = 804195467;
inp[21009] = 0;
inp[21010] = 801060206;
inp[21011] = 0;
inp[21012] = 797937169;
inp[21013] = 0;
inp[21014] = 794826306;
inp[21015] = 0;
inp[21016] = 791727572;
inp[21017] = 0;
inp[21018] = 788640919;
inp[21019] = 0;
inp[21020] = 785566299;
inp[21021] = 0;
inp[21022] = 782503667;
inp[21023] = 0;
inp[21024] = 779452974;
inp[21025] = 0;
inp[21026] = 776414175;
inp[21027] = 0;
inp[21028] = 773387223;
inp[21029] = 0;
inp[21030] = 770372072;
inp[21031] = 0;
inp[21032] = 767368676;
inp[21033] = 0;
inp[21034] = 764376989;
inp[21035] = 0;
inp[21036] = 761396965;
inp[21037] = 0;
inp[21038] = 758428560;
inp[21039] = 0;
inp[21040] = 755471727;
inp[21041] = 0;
inp[21042] = 752526422;
inp[21043] = 0;
inp[21044] = 749592599;
inp[21045] = 0;
inp[21046] = 746670215;
inp[21047] = 0;
inp[21048] = 743759224;
inp[21049] = 0;
inp[21050] = 740859581;
inp[21051] = 0;
inp[21052] = 737971243;
inp[21053] = 0;
inp[21054] = 735094166;
inp[21055] = 0;
inp[21056] = 732228306;
inp[21057] = 0;
inp[21058] = 729373618;
inp[21059] = 0;
inp[21060] = 726530060;
inp[21061] = 0;
inp[21062] = 723697587;
inp[21063] = 0;
inp[21064] = 720876158;
inp[21065] = 0;
inp[21066] = 718065728;
inp[21067] = 0;
inp[21068] = 715266255;
inp[21069] = 0;
inp[21070] = 712477696;
inp[21071] = 0;
inp[21072] = 709700009;
inp[21073] = 0;
inp[21074] = 706933151;
inp[21075] = 0;
inp[21076] = 704177080;
inp[21077] = 0;
inp[21078] = 701431753;
inp[21079] = 0;
inp[21080] = 698697130;
inp[21081] = 0;
inp[21082] = 695973168;
inp[21083] = 0;
inp[21084] = 693259826;
inp[21085] = 0;
inp[21086] = 690557062;
inp[21087] = 0;
inp[21088] = 687864835;
inp[21089] = 0;
inp[21090] = 685183104;
inp[21091] = 0;
inp[21092] = 682511829;
inp[21093] = 0;
inp[21094] = 679850967;
inp[21095] = 0;
inp[21096] = 677200479;
inp[21097] = 0;
inp[21098] = 674560325;
inp[21099] = 0;
inp[21100] = 671930463;
inp[21101] = 0;
inp[21102] = 669310855;
inp[21103] = 0;
inp[21104] = 666701459;
inp[21105] = 0;
inp[21106] = 664102236;
inp[21107] = 0;
inp[21108] = 661513147;
inp[21109] = 0;
inp[21110] = 658934152;
inp[21111] = 0;
inp[21112] = 656365211;
inp[21113] = 0;
inp[21114] = 653806286;
inp[21115] = 0;
inp[21116] = 651257336;
inp[21117] = 0;
inp[21118] = 648718325;
inp[21119] = 0;
inp[21120] = 646189212;
inp[21121] = 0;
inp[21122] = 643669959;
inp[21123] = 0;
inp[21124] = 641160527;
inp[21125] = 0;
inp[21126] = 638660879;
inp[21127] = 0;
inp[21128] = 636170976;
inp[21129] = 0;
inp[21130] = 633690781;
inp[21131] = 0;
inp[21132] = 631220255;
inp[21133] = 0;
inp[21134] = 628759360;
inp[21135] = 0;
inp[21136] = 626308060;
inp[21137] = 0;
inp[21138] = 623866316;
inp[21139] = 0;
inp[21140] = 621434092;
inp[21141] = 0;
inp[21142] = 619011350;
inp[21143] = 0;
inp[21144] = 616598053;
inp[21145] = 0;
inp[21146] = 614194165;
inp[21147] = 0;
inp[21148] = 611799649;
inp[21149] = 0;
inp[21150] = 609414468;
inp[21151] = 0;
inp[21152] = 607038586;
inp[21153] = 0;
inp[21154] = 604671967;
inp[21155] = 0;
inp[21156] = 602314575;
inp[21157] = 0;
inp[21158] = 599966373;
inp[21159] = 0;
inp[21160] = 597627325;
inp[21161] = 0;
inp[21162] = 595297397;
inp[21163] = 0;
inp[21164] = 592976553;
inp[21165] = 0;
inp[21166] = 590664756;
inp[21167] = 0;
inp[21168] = 588361972;
inp[21169] = 0;
inp[21170] = 586068167;
inp[21171] = 0;
inp[21172] = 583783303;
inp[21173] = 0;
inp[21174] = 581507348;
inp[21175] = 0;
inp[21176] = 579240266;
inp[21177] = 0;
inp[21178] = 576982022;
inp[21179] = 0;
inp[21180] = 574732582;
inp[21181] = 0;
inp[21182] = 572491912;
inp[21183] = 0;
inp[21184] = 570259978;
inp[21185] = 0;
inp[21186] = 568036745;
inp[21187] = 0;
inp[21188] = 565822179;
inp[21189] = 0;
inp[21190] = 563616248;
inp[21191] = 0;
inp[21192] = 561418916;
inp[21193] = 0;
inp[21194] = 559230151;
inp[21195] = 0;
inp[21196] = 557049919;
inp[21197] = 0;
inp[21198] = 554878188;
inp[21199] = 0;
inp[21200] = 552714923;
inp[21201] = 0;
inp[21202] = 550560091;
inp[21203] = 0;
inp[21204] = 548413661;
inp[21205] = 0;
inp[21206] = 546275599;
inp[21207] = 0;
inp[21208] = 544145872;
inp[21209] = 0;
inp[21210] = 542024448;
inp[21211] = 0;
inp[21212] = 539911295;
inp[21213] = 0;
inp[21214] = 537806381;
inp[21215] = 0;
inp[21216] = 535709672;
inp[21217] = 0;
inp[21218] = 533621138;
inp[21219] = 0;
inp[21220] = 531540746;
inp[21221] = 0;
inp[21222] = 529468465;
inp[21223] = 0;
inp[21224] = 527404264;
inp[21225] = 0;
inp[21226] = 525348109;
inp[21227] = 0;
inp[21228] = 523299971;
inp[21229] = 0;
inp[21230] = 521259818;
inp[21231] = 0;
inp[21232] = 519227618;
inp[21233] = 0;
inp[21234] = 517203342;
inp[21235] = 0;
inp[21236] = 515186957;
inp[21237] = 0;
inp[21238] = 513178433;
inp[21239] = 0;
inp[21240] = 511177740;
inp[21241] = 0;
inp[21242] = 509184847;
inp[21243] = 0;
inp[21244] = 507199723;
inp[21245] = 0;
inp[21246] = 505222339;
inp[21247] = 0;
inp[21248] = 503252664;
inp[21249] = 0;
inp[21250] = 501290668;
inp[21251] = 0;
inp[21252] = 499336321;
inp[21253] = 0;
inp[21254] = 497389593;
inp[21255] = 0;
inp[21256] = 495450454;
inp[21257] = 0;
inp[21258] = 493518876;
inp[21259] = 0;
inp[21260] = 491594828;
inp[21261] = 0;
inp[21262] = 489678282;
inp[21263] = 0;
inp[21264] = 487769207;
inp[21265] = 0;
inp[21266] = 485867575;
inp[21267] = 0;
inp[21268] = 483973357;
inp[21269] = 0;
inp[21270] = 482086524;
inp[21271] = 0;
inp[21272] = 480207047;
inp[21273] = 0;
inp[21274] = 478334897;
inp[21275] = 0;
inp[21276] = 476470046;
inp[21277] = 0;
inp[21278] = 474612465;
inp[21279] = 0;
inp[21280] = 472762126;
inp[21281] = 0;
inp[21282] = 470919001;
inp[21283] = 0;
inp[21284] = 469083062;
inp[21285] = 0;
inp[21286] = 467254281;
inp[21287] = 0;
inp[21288] = 465432629;
inp[21289] = 0;
inp[21290] = 463618079;
inp[21291] = 0;
inp[21292] = 461810603;
inp[21293] = 0;
inp[21294] = 460010175;
inp[21295] = 0;
inp[21296] = 458216765;
inp[21297] = 0;
inp[21298] = 456430347;
inp[21299] = 0;
inp[21300] = 454650894;
inp[21301] = 0;
inp[21302] = 452878378;
inp[21303] = 0;
inp[21304] = 451112772;
inp[21305] = 0;
inp[21306] = 449354050;
inp[21307] = 0;
inp[21308] = 447602185;
inp[21309] = 0;
inp[21310] = 445857149;
inp[21311] = 0;
inp[21312] = 444118917;
inp[21313] = 0;
inp[21314] = 442387461;
inp[21315] = 0;
inp[21316] = 440662756;
inp[21317] = 0;
inp[21318] = 438944775;
inp[21319] = 0;
inp[21320] = 437233491;
inp[21321] = 0;
inp[21322] = 435528880;
inp[21323] = 0;
inp[21324] = 433830913;
inp[21325] = 0;
inp[21326] = 432139567;
inp[21327] = 0;
inp[21328] = 430454814;
inp[21329] = 0;
inp[21330] = 428776630;
inp[21331] = 0;
inp[21332] = 427104988;
inp[21333] = 0;
inp[21334] = 425439864;
inp[21335] = 0;
inp[21336] = 423781231;
inp[21337] = 0;
inp[21338] = 422129065;
inp[21339] = 0;
inp[21340] = 420483339;
inp[21341] = 0;
inp[21342] = 418844030;
inp[21343] = 0;
inp[21344] = 417211112;
inp[21345] = 0;
inp[21346] = 415584560;
inp[21347] = 0;
inp[21348] = 413964349;
inp[21349] = 0;
inp[21350] = 412350455;
inp[21351] = 0;
inp[21352] = 410742853;
inp[21353] = 0;
inp[21354] = 409141519;
inp[21355] = 0;
inp[21356] = 407546427;
inp[21357] = 0;
inp[21358] = 405957554;
inp[21359] = 0;
inp[21360] = 404374876;
inp[21361] = 0;
inp[21362] = 402798367;
inp[21363] = 0;
inp[21364] = 401228005;
inp[21365] = 0;
inp[21366] = 399663766;
inp[21367] = 0;
inp[21368] = 398105624;
inp[21369] = 0;
inp[21370] = 396553557;
inp[21371] = 0;
inp[21372] = 1073741824;
inp[21373] = 1073741824;
inp[21374] = 1071646718;
inp[21375] = 0;
inp[21376] = 1069555701;
inp[21377] = 0;
inp[21378] = 1067468764;
inp[21379] = 0;
inp[21380] = 1065385898;
inp[21381] = 0;
inp[21382] = 1063307097;
inp[21383] = 0;
inp[21384] = 1061232352;
inp[21385] = 0;
inp[21386] = 1059161656;
inp[21387] = 0;
inp[21388] = 1057094999;
inp[21389] = 0;
inp[21390] = 1055032376;
inp[21391] = 0;
inp[21392] = 1052973777;
inp[21393] = 0;
inp[21394] = 1050919194;
inp[21395] = 0;
inp[21396] = 1048868621;
inp[21397] = 0;
inp[21398] = 1046822049;
inp[21399] = 0;
inp[21400] = 1044779470;
inp[21401] = 0;
inp[21402] = 1042740876;
inp[21403] = 0;
inp[21404] = 1040706261;
inp[21405] = 0;
inp[21406] = 1038675615;
inp[21407] = 0;
inp[21408] = 1036648931;
inp[21409] = 0;
inp[21410] = 1034626202;
inp[21411] = 0;
inp[21412] = 1032607420;
inp[21413] = 0;
inp[21414] = 1030592577;
inp[21415] = 0;
inp[21416] = 1028581665;
inp[21417] = 0;
inp[21418] = 1026574677;
inp[21419] = 0;
inp[21420] = 1024571605;
inp[21421] = 0;
inp[21422] = 1022572442;
inp[21423] = 0;
inp[21424] = 1020577179;
inp[21425] = 0;
inp[21426] = 1018585810;
inp[21427] = 0;
inp[21428] = 1016598326;
inp[21429] = 0;
inp[21430] = 1014614720;
inp[21431] = 0;
inp[21432] = 1012634985;
inp[21433] = 0;
inp[21434] = 1010659112;
inp[21435] = 0;
inp[21436] = 1008687095;
inp[21437] = 0;
inp[21438] = 1006718926;
inp[21439] = 0;
inp[21440] = 1004754597;
inp[21441] = 0;
inp[21442] = 1002794101;
inp[21443] = 0;
inp[21444] = 1000837430;
inp[21445] = 0;
inp[21446] = 998884577;
inp[21447] = 0;
inp[21448] = 996935534;
inp[21449] = 0;
inp[21450] = 994990295;
inp[21451] = 0;
inp[21452] = 993048851;
inp[21453] = 0;
inp[21454] = 991111195;
inp[21455] = 0;
inp[21456] = 989177321;
inp[21457] = 0;
inp[21458] = 987247219;
inp[21459] = 0;
inp[21460] = 985320884;
inp[21461] = 0;
inp[21462] = 983398307;
inp[21463] = 0;
inp[21464] = 981479482;
inp[21465] = 0;
inp[21466] = 979564400;
inp[21467] = 0;
inp[21468] = 977653056;
inp[21469] = 0;
inp[21470] = 975745441;
inp[21471] = 0;
inp[21472] = 973841548;
inp[21473] = 0;
inp[21474] = 971941370;
inp[21475] = 0;
inp[21476] = 970044899;
inp[21477] = 0;
inp[21478] = 968152129;
inp[21479] = 0;
inp[21480] = 966263053;
inp[21481] = 0;
inp[21482] = 964377662;
inp[21483] = 0;
inp[21484] = 962495950;
inp[21485] = 0;
inp[21486] = 960617910;
inp[21487] = 0;
inp[21488] = 958743534;
inp[21489] = 0;
inp[21490] = 956872815;
inp[21491] = 0;
inp[21492] = 955005747;
inp[21493] = 0;
inp[21494] = 953142322;
inp[21495] = 0;
inp[21496] = 951282532;
inp[21497] = 0;
inp[21498] = 949426372;
inp[21499] = 0;
inp[21500] = 947573833;
inp[21501] = 0;
inp[21502] = 945724909;
inp[21503] = 0;
inp[21504] = 943879593;
inp[21505] = 0;
inp[21506] = 942037877;
inp[21507] = 0;
inp[21508] = 940199755;
inp[21509] = 0;
inp[21510] = 938365220;
inp[21511] = 0;
inp[21512] = 936534264;
inp[21513] = 0;
inp[21514] = 934706880;
inp[21515] = 0;
inp[21516] = 932883063;
inp[21517] = 0;
inp[21518] = 931062804;
inp[21519] = 0;
inp[21520] = 929246096;
inp[21521] = 0;
inp[21522] = 927432934;
inp[21523] = 0;
inp[21524] = 925623309;
inp[21525] = 0;
inp[21526] = 923817215;
inp[21527] = 0;
inp[21528] = 922014646;
inp[21529] = 0;
inp[21530] = 920215593;
inp[21531] = 0;
inp[21532] = 918420051;
inp[21533] = 0;
inp[21534] = 916628013;
inp[21535] = 0;
inp[21536] = 914839471;
inp[21537] = 0;
inp[21538] = 913054419;
inp[21539] = 0;
inp[21540] = 911272850;
inp[21541] = 0;
inp[21542] = 909494757;
inp[21543] = 0;
inp[21544] = 907720134;
inp[21545] = 0;
inp[21546] = 905948973;
inp[21547] = 0;
inp[21548] = 904181268;
inp[21549] = 0;
inp[21550] = 902417013;
inp[21551] = 0;
inp[21552] = 900656200;
inp[21553] = 0;
inp[21554] = 898898822;
inp[21555] = 0;
inp[21556] = 897144874;
inp[21557] = 0;
inp[21558] = 895394348;
inp[21559] = 0;
inp[21560] = 893647237;
inp[21561] = 0;
inp[21562] = 891903536;
inp[21563] = 0;
inp[21564] = 890163237;
inp[21565] = 0;
inp[21566] = 888426334;
inp[21567] = 0;
inp[21568] = 886692819;
inp[21569] = 0;
inp[21570] = 884962688;
inp[21571] = 0;
inp[21572] = 883235932;
inp[21573] = 0;
inp[21574] = 881512545;
inp[21575] = 0;
inp[21576] = 879792521;
inp[21577] = 0;
inp[21578] = 878075853;
inp[21579] = 0;
inp[21580] = 876362535;
inp[21581] = 0;
inp[21582] = 874652560;
inp[21583] = 0;
inp[21584] = 872945921;
inp[21585] = 0;
inp[21586] = 871242613;
inp[21587] = 0;
inp[21588] = 869542628;
inp[21589] = 0;
inp[21590] = 867845960;
inp[21591] = 0;
inp[21592] = 866152602;
inp[21593] = 0;
inp[21594] = 864462549;
inp[21595] = 0;
inp[21596] = 862775793;
inp[21597] = 0;
inp[21598] = 861092329;
inp[21599] = 0;
inp[21600] = 859412149;
inp[21601] = 0;
inp[21602] = 857735248;
inp[21603] = 0;
inp[21604] = 856061619;
inp[21605] = 0;
inp[21606] = 854391255;
inp[21607] = 0;
inp[21608] = 852724151;
inp[21609] = 0;
inp[21610] = 851060299;
inp[21611] = 0;
inp[21612] = 849399695;
inp[21613] = 0;
inp[21614] = 847742330;
inp[21615] = 0;
inp[21616] = 846088199;
inp[21617] = 0;
inp[21618] = 844437296;
inp[21619] = 0;
inp[21620] = 842789614;
inp[21621] = 0;
inp[21622] = 841145147;
inp[21623] = 0;
inp[21624] = 839503888;
inp[21625] = 0;
inp[21626] = 837865832;
inp[21627] = 0;
inp[21628] = 836230973;
inp[21629] = 0;
inp[21630] = 834599303;
inp[21631] = 0;
inp[21632] = 832970817;
inp[21633] = 0;
inp[21634] = 831345509;
inp[21635] = 0;
inp[21636] = 829723372;
inp[21637] = 0;
inp[21638] = 828104400;
inp[21639] = 0;
inp[21640] = 826488587;
inp[21641] = 0;
inp[21642] = 824875927;
inp[21643] = 0;
inp[21644] = 823266413;
inp[21645] = 0;
inp[21646] = 821660040;
inp[21647] = 0;
inp[21648] = 820056802;
inp[21649] = 0;
inp[21650] = 818456691;
inp[21651] = 0;
inp[21652] = 816859703;
inp[21653] = 0;
inp[21654] = 815265831;
inp[21655] = 0;
inp[21656] = 813675069;
inp[21657] = 0;
inp[21658] = 812087411;
inp[21659] = 0;
inp[21660] = 810502851;
inp[21661] = 0;
inp[21662] = 808921382;
inp[21663] = 0;
inp[21664] = 807342999;
inp[21665] = 0;
inp[21666] = 805767696;
inp[21667] = 0;
inp[21668] = 804195467;
inp[21669] = 0;
inp[21670] = 802626306;
inp[21671] = 0;
inp[21672] = 801060206;
inp[21673] = 0;
inp[21674] = 799497163;
inp[21675] = 0;
inp[21676] = 797937169;
inp[21677] = 0;
inp[21678] = 796380218;
inp[21679] = 0;
inp[21680] = 794826306;
inp[21681] = 0;
inp[21682] = 793275426;
inp[21683] = 0;
inp[21684] = 791727572;
inp[21685] = 0;
inp[21686] = 790182738;
inp[21687] = 0;
inp[21688] = 788640919;
inp[21689] = 0;
inp[21690] = 787102108;
inp[21691] = 0;
inp[21692] = 785566299;
inp[21693] = 0;
inp[21694] = 784033488;
inp[21695] = 0;
inp[21696] = 782503667;
inp[21697] = 0;
inp[21698] = 780976831;
inp[21699] = 0;
inp[21700] = 779452974;
inp[21701] = 0;
inp[21702] = 777932091;
inp[21703] = 0;
inp[21704] = 776414175;
inp[21705] = 0;
inp[21706] = 774899221;
inp[21707] = 0;
inp[21708] = 773387223;
inp[21709] = 0;
inp[21710] = 771878175;
inp[21711] = 0;
inp[21712] = 770372072;
inp[21713] = 0;
inp[21714] = 768868907;
inp[21715] = 0;
inp[21716] = 767368676;
inp[21717] = 0;
inp[21718] = 765871371;
inp[21719] = 0;
inp[21720] = 764376989;
inp[21721] = 0;
inp[21722] = 762885522;
inp[21723] = 0;
inp[21724] = 761396965;
inp[21725] = 0;
inp[21726] = 759911313;
inp[21727] = 0;
inp[21728] = 758428560;
inp[21729] = 0;
inp[21730] = 756948700;
inp[21731] = 0;
inp[21732] = 755471727;
inp[21733] = 0;
inp[21734] = 753997636;
inp[21735] = 0;
inp[21736] = 752526422;
inp[21737] = 0;
inp[21738] = 751058078;
inp[21739] = 0;
inp[21740] = 749592599;
inp[21741] = 0;
inp[21742] = 748129980;
inp[21743] = 0;
inp[21744] = 746670215;
inp[21745] = 0;
inp[21746] = 745213298;
inp[21747] = 0;
inp[21748] = 743759224;
inp[21749] = 0;
inp[21750] = 742307986;
inp[21751] = 0;
inp[21752] = 740859581;
inp[21753] = 0;
inp[21754] = 739414002;
inp[21755] = 0;
inp[21756] = 737971243;
inp[21757] = 0;
inp[21758] = 736531300;
inp[21759] = 0;
inp[21760] = 735094166;
inp[21761] = 0;
inp[21762] = 733659836;
inp[21763] = 0;
inp[21764] = 732228306;
inp[21765] = 0;
inp[21766] = 730799568;
inp[21767] = 0;
inp[21768] = 729373618;
inp[21769] = 0;
inp[21770] = 727950450;
inp[21771] = 0;
inp[21772] = 726530060;
inp[21773] = 0;
inp[21774] = 725112440;
inp[21775] = 0;
inp[21776] = 723697587;
inp[21777] = 0;
inp[21778] = 722285495;
inp[21779] = 0;
inp[21780] = 720876158;
inp[21781] = 0;
inp[21782] = 719469571;
inp[21783] = 0;
inp[21784] = 718065728;
inp[21785] = 0;
inp[21786] = 716664625;
inp[21787] = 0;
inp[21788] = 715266255;
inp[21789] = 0;
inp[21790] = 713870614;
inp[21791] = 0;
inp[21792] = 712477696;
inp[21793] = 0;
inp[21794] = 711087496;
inp[21795] = 0;
inp[21796] = 709700009;
inp[21797] = 0;
inp[21798] = 708315229;
inp[21799] = 0;
inp[21800] = 706933151;
inp[21801] = 0;
inp[21802] = 705553769;
inp[21803] = 0;
inp[21804] = 704177080;
inp[21805] = 0;
inp[21806] = 702803076;
inp[21807] = 0;
inp[21808] = 701431753;
inp[21809] = 0;
inp[21810] = 700063106;
inp[21811] = 0;
inp[21812] = 698697130;
inp[21813] = 0;
inp[21814] = 697333819;
inp[21815] = 0;
inp[21816] = 695973168;
inp[21817] = 0;
inp[21818] = 694615172;
inp[21819] = 0;
inp[21820] = 693259826;
inp[21821] = 0;
inp[21822] = 691907124;
inp[21823] = 0;
inp[21824] = 690557062;
inp[21825] = 0;
inp[21826] = 689209634;
inp[21827] = 0;
inp[21828] = 687864835;
inp[21829] = 0;
inp[21830] = 686522660;
inp[21831] = 0;
inp[21832] = 685183104;
inp[21833] = 0;
inp[21834] = 683846162;
inp[21835] = 0;
inp[21836] = 682511829;
inp[21837] = 0;
inp[21838] = 681180099;
inp[21839] = 0;
inp[21840] = 679850967;
inp[21841] = 0;
inp[21842] = 678524429;
inp[21843] = 0;
inp[21844] = 677200479;
inp[21845] = 0;
inp[21846] = 675879113;
inp[21847] = 0;
inp[21848] = 674560325;
inp[21849] = 0;
inp[21850] = 673244110;
inp[21851] = 0;
inp[21852] = 671930463;
inp[21853] = 0;
inp[21854] = 670619380;
inp[21855] = 0;
inp[21856] = 669310855;
inp[21857] = 0;
inp[21858] = 668004883;
inp[21859] = 0;
inp[21860] = 666701459;
inp[21861] = 0;
inp[21862] = 665400579;
inp[21863] = 0;
inp[21864] = 664102236;
inp[21865] = 0;
inp[21866] = 662806428;
inp[21867] = 0;
inp[21868] = 661513147;
inp[21869] = 0;
inp[21870] = 660222390;
inp[21871] = 0;
inp[21872] = 658934152;
inp[21873] = 0;
inp[21874] = 657648427;
inp[21875] = 0;
inp[21876] = 656365211;
inp[21877] = 0;
inp[21878] = 655084499;
inp[21879] = 0;
inp[21880] = 653806286;
inp[21881] = 0;
inp[21882] = 652530566;
inp[21883] = 0;
inp[21884] = 1073741824;
inp[21885] = 1073741824;
inp[21886] = 1072693759;
inp[21887] = 0;
inp[21888] = 1071646718;
inp[21889] = 0;
inp[21890] = 1070600699;
inp[21891] = 0;
inp[21892] = 1069555701;
inp[21893] = 0;
inp[21894] = 1068511723;
inp[21895] = 0;
inp[21896] = 1067468764;
inp[21897] = 0;
inp[21898] = 1066426822;
inp[21899] = 0;
inp[21900] = 1065385898;
inp[21901] = 0;
inp[21902] = 1064345990;
inp[21903] = 0;
inp[21904] = 1063307097;
inp[21905] = 0;
inp[21906] = 1062269218;
inp[21907] = 0;
inp[21908] = 1061232352;
inp[21909] = 0;
inp[21910] = 1060196498;
inp[21911] = 0;
inp[21912] = 1059161656;
inp[21913] = 0;
inp[21914] = 1058127823;
inp[21915] = 0;
inp[21916] = 1057094999;
inp[21917] = 0;
inp[21918] = 1056063184;
inp[21919] = 0;
inp[21920] = 1055032376;
inp[21921] = 0;
inp[21922] = 1054002574;
inp[21923] = 0;
inp[21924] = 1052973777;
inp[21925] = 0;
inp[21926] = 1051945984;
inp[21927] = 0;
inp[21928] = 1050919194;
inp[21929] = 0;
inp[21930] = 1049893407;
inp[21931] = 0;
inp[21932] = 1048868621;
inp[21933] = 0;
inp[21934] = 1047844835;
inp[21935] = 0;
inp[21936] = 1046822049;
inp[21937] = 0;
inp[21938] = 1045800261;
inp[21939] = 0;
inp[21940] = 1044779470;
inp[21941] = 0;
inp[21942] = 1043759675;
inp[21943] = 0;
inp[21944] = 1042740876;
inp[21945] = 0;
inp[21946] = 1041723072;
inp[21947] = 0;
inp[21948] = 1040706261;
inp[21949] = 0;
inp[21950] = 1039690442;
inp[21951] = 0;
inp[21952] = 1038675615;
inp[21953] = 0;
inp[21954] = 1037661778;
inp[21955] = 0;
inp[21956] = 1036648931;
inp[21957] = 0;
inp[21958] = 1035637073;
inp[21959] = 0;
inp[21960] = 1034626202;
inp[21961] = 0;
inp[21962] = 1033616318;
inp[21963] = 0;
inp[21964] = 1032607420;
inp[21965] = 0;
inp[21966] = 1031599507;
inp[21967] = 0;
inp[21968] = 1030592577;
inp[21969] = 0;
inp[21970] = 1029586630;
inp[21971] = 0;
inp[21972] = 1028581665;
inp[21973] = 0;
inp[21974] = 1027577681;
inp[21975] = 0;
inp[21976] = 1026574677;
inp[21977] = 0;
inp[21978] = 1025572652;
inp[21979] = 0;
inp[21980] = 1024571605;
inp[21981] = 0;
inp[21982] = 1023571536;
inp[21983] = 0;
inp[21984] = 1022572442;
inp[21985] = 0;
inp[21986] = 1021574324;
inp[21987] = 0;
inp[21988] = 1020577179;
inp[21989] = 0;
inp[21990] = 1019581008;
inp[21991] = 0;
inp[21992] = 1018585810;
inp[21993] = 0;
inp[21994] = 1017591583;
inp[21995] = 0;
inp[21996] = 1016598326;
inp[21997] = 0;
inp[21998] = 1015606039;
inp[21999] = 0;
inp[22000] = 1014614720;
inp[22001] = 0;
inp[22002] = 1013624369;
inp[22003] = 0;
inp[22004] = 1012634985;
inp[22005] = 0;
inp[22006] = 1011646566;
inp[22007] = 0;
inp[22008] = 1010659112;
inp[22009] = 0;
inp[22010] = 1009672622;
inp[22011] = 0;
inp[22012] = 1008687095;
inp[22013] = 0;
inp[22014] = 1007702530;
inp[22015] = 0;
inp[22016] = 1006718926;
inp[22017] = 0;
inp[22018] = 1005736282;
inp[22019] = 0;
inp[22020] = 1004754597;
inp[22021] = 0;
inp[22022] = 1003773870;
inp[22023] = 0;
inp[22024] = 1002794101;
inp[22025] = 0;
inp[22026] = 1001815287;
inp[22027] = 0;
inp[22028] = 1000837430;
inp[22029] = 0;
inp[22030] = 999860527;
inp[22031] = 0;
inp[22032] = 998884577;
inp[22033] = 0;
inp[22034] = 997909580;
inp[22035] = 0;
inp[22036] = 996935534;
inp[22037] = 0;
inp[22038] = 995962440;
inp[22039] = 0;
inp[22040] = 994990295;
inp[22041] = 0;
inp[22042] = 994019099;
inp[22043] = 0;
inp[22044] = 993048851;
inp[22045] = 0;
inp[22046] = 992079550;
inp[22047] = 0;
inp[22048] = 991111195;
inp[22049] = 0;
inp[22050] = 990143786;
inp[22051] = 0;
inp[22052] = 989177321;
inp[22053] = 0;
inp[22054] = 988211799;
inp[22055] = 0;
inp[22056] = 987247219;
inp[22057] = 0;
inp[22058] = 986283581;
inp[22059] = 0;
inp[22060] = 985320884;
inp[22061] = 0;
inp[22062] = 984359126;
inp[22063] = 0;
inp[22064] = 983398307;
inp[22065] = 0;
inp[22066] = 982438426;
inp[22067] = 0;
inp[22068] = 981479482;
inp[22069] = 0;
inp[22070] = 980521473;
inp[22071] = 0;
inp[22072] = 979564400;
inp[22073] = 0;
inp[22074] = 978608261;
inp[22075] = 0;
inp[22076] = 977653056;
inp[22077] = 0;
inp[22078] = 976698782;
inp[22079] = 0;
inp[22080] = 975745441;
inp[22081] = 0;
inp[22082] = 974793029;
inp[22083] = 0;
inp[22084] = 973841548;
inp[22085] = 0;
inp[22086] = 972890995;
inp[22087] = 0;
inp[22088] = 971941370;
inp[22089] = 0;
inp[22090] = 970992671;
inp[22091] = 0;
inp[22092] = 970044899;
inp[22093] = 0;
inp[22094] = 969098052;
inp[22095] = 0;
inp[22096] = 968152129;
inp[22097] = 0;
inp[22098] = 967207130;
inp[22099] = 0;
inp[22100] = 966263053;
inp[22101] = 0;
inp[22102] = 965319897;
inp[22103] = 0;
inp[22104] = 964377662;
inp[22105] = 0;
inp[22106] = 963436347;
inp[22107] = 0;
inp[22108] = 962495950;
inp[22109] = 0;
inp[22110] = 961556471;
inp[22111] = 0;
inp[22112] = 960617910;
inp[22113] = 0;
inp[22114] = 959680264;
inp[22115] = 0;
inp[22116] = 958743534;
inp[22117] = 0;
inp[22118] = 957807718;
inp[22119] = 0;
inp[22120] = 956872815;
inp[22121] = 0;
inp[22122] = 955938825;
inp[22123] = 0;
inp[22124] = 955005747;
inp[22125] = 0;
inp[22126] = 954073579;
inp[22127] = 0;
inp[22128] = 953142322;
inp[22129] = 0;
inp[22130] = 952211973;
inp[22131] = 0;
inp[22132] = 951282532;
inp[22133] = 0;
inp[22134] = 950353999;
inp[22135] = 0;
inp[22136] = 949426372;
inp[22137] = 0;
inp[22138] = 948499650;
inp[22139] = 0;
inp[22140] = 947573833;
inp[22141] = 0;
inp[22142] = 946648920;
inp[22143] = 0;
inp[22144] = 945724909;
inp[22145] = 0;
inp[22146] = 944801801;
inp[22147] = 0;
inp[22148] = 943879593;
inp[22149] = 0;
inp[22150] = 942958286;
inp[22151] = 0;
inp[22152] = 942037877;
inp[22153] = 0;
inp[22154] = 941118368;
inp[22155] = 0;
inp[22156] = 940199755;
inp[22157] = 0;
inp[22158] = 939282040;
inp[22159] = 0;
inp[22160] = 938365220;
inp[22161] = 0;
inp[22162] = 937449295;
inp[22163] = 0;
inp[22164] = 936534264;
inp[22165] = 0;
inp[22166] = 935620126;
inp[22167] = 0;
inp[22168] = 934706880;
inp[22169] = 0;
inp[22170] = 933794526;
inp[22171] = 0;
inp[22172] = 932883063;
inp[22173] = 0;
inp[22174] = 931972489;
inp[22175] = 0;
inp[22176] = 931062804;
inp[22177] = 0;
inp[22178] = 930154006;
inp[22179] = 0;
inp[22180] = 929246096;
inp[22181] = 0;
inp[22182] = 928339072;
inp[22183] = 0;
inp[22184] = 927432934;
inp[22185] = 0;
inp[22186] = 926527680;
inp[22187] = 0;
inp[22188] = 925623309;
inp[22189] = 0;
inp[22190] = 924719821;
inp[22191] = 0;
inp[22192] = 923817215;
inp[22193] = 0;
inp[22194] = 922915491;
inp[22195] = 0;
inp[22196] = 922014646;
inp[22197] = 0;
inp[22198] = 921114680;
inp[22199] = 0;
inp[22200] = 920215593;
inp[22201] = 0;
inp[22202] = 919317384;
inp[22203] = 0;
inp[22204] = 918420051;
inp[22205] = 0;
inp[22206] = 917523595;
inp[22207] = 0;
inp[22208] = 916628013;
inp[22209] = 0;
inp[22210] = 915733305;
inp[22211] = 0;
inp[22212] = 914839471;
inp[22213] = 0;
inp[22214] = 913946509;
inp[22215] = 0;
inp[22216] = 913054419;
inp[22217] = 0;
inp[22218] = 912163199;
inp[22219] = 0;
inp[22220] = 911272850;
inp[22221] = 0;
inp[22222] = 910383369;
inp[22223] = 0;
inp[22224] = 909494757;
inp[22225] = 0;
inp[22226] = 908607012;
inp[22227] = 0;
inp[22228] = 907720134;
inp[22229] = 0;
inp[22230] = 906834121;
inp[22231] = 0;
inp[22232] = 905948973;
inp[22233] = 0;
inp[22234] = 905064689;
inp[22235] = 0;
inp[22236] = 904181268;
inp[22237] = 0;
inp[22238] = 903298710;
inp[22239] = 0;
inp[22240] = 902417013;
inp[22241] = 0;
inp[22242] = 901536176;
inp[22243] = 0;
inp[22244] = 900656200;
inp[22245] = 0;
inp[22246] = 899777082;
inp[22247] = 0;
inp[22248] = 898898822;
inp[22249] = 0;
inp[22250] = 898021420;
inp[22251] = 0;
inp[22252] = 897144874;
inp[22253] = 0;
inp[22254] = 896269183;
inp[22255] = 0;
inp[22256] = 895394348;
inp[22257] = 0;
inp[22258] = 894520366;
inp[22259] = 0;
inp[22260] = 893647237;
inp[22261] = 0;
inp[22262] = 892774961;
inp[22263] = 0;
inp[22264] = 891903536;
inp[22265] = 0;
inp[22266] = 891032962;
inp[22267] = 0;
inp[22268] = 890163237;
inp[22269] = 0;
inp[22270] = 889294361;
inp[22271] = 0;
inp[22272] = 888426334;
inp[22273] = 0;
inp[22274] = 887559153;
inp[22275] = 0;
inp[22276] = 886692819;
inp[22277] = 0;
inp[22278] = 885827331;
inp[22279] = 0;
inp[22280] = 884962688;
inp[22281] = 0;
inp[22282] = 884098888;
inp[22283] = 0;
inp[22284] = 883235932;
inp[22285] = 0;
inp[22286] = 882373818;
inp[22287] = 0;
inp[22288] = 881512545;
inp[22289] = 0;
inp[22290] = 880652113;
inp[22291] = 0;
inp[22292] = 879792521;
inp[22293] = 0;
inp[22294] = 878933768;
inp[22295] = 0;
inp[22296] = 878075853;
inp[22297] = 0;
inp[22298] = 877218776;
inp[22299] = 0;
inp[22300] = 876362535;
inp[22301] = 0;
inp[22302] = 875507130;
inp[22303] = 0;
inp[22304] = 874652560;
inp[22305] = 0;
inp[22306] = 873798824;
inp[22307] = 0;
inp[22308] = 872945921;
inp[22309] = 0;
inp[22310] = 872093851;
inp[22311] = 0;
inp[22312] = 871242613;
inp[22313] = 0;
inp[22314] = 870392205;
inp[22315] = 0;
inp[22316] = 869542628;
inp[22317] = 0;
inp[22318] = 868693880;
inp[22319] = 0;
inp[22320] = 867845960;
inp[22321] = 0;
inp[22322] = 866998868;
inp[22323] = 0;
inp[22324] = 866152602;
inp[22325] = 0;
inp[22326] = 865307163;
inp[22327] = 0;
inp[22328] = 864462549;
inp[22329] = 0;
inp[22330] = 863618759;
inp[22331] = 0;
inp[22332] = 862775793;
inp[22333] = 0;
inp[22334] = 861933650;
inp[22335] = 0;
inp[22336] = 861092329;
inp[22337] = 0;
inp[22338] = 860251829;
inp[22339] = 0;
inp[22340] = 859412149;
inp[22341] = 0;
inp[22342] = 858573289;
inp[22343] = 0;
inp[22344] = 857735248;
inp[22345] = 0;
inp[22346] = 856898025;
inp[22347] = 0;
inp[22348] = 856061619;
inp[22349] = 0;
inp[22350] = 855226029;
inp[22351] = 0;
inp[22352] = 854391255;
inp[22353] = 0;
inp[22354] = 853557296;
inp[22355] = 0;
inp[22356] = 852724151;
inp[22357] = 0;
inp[22358] = 851891819;
inp[22359] = 0;
inp[22360] = 851060299;
inp[22361] = 0;
inp[22362] = 850229592;
inp[22363] = 0;
inp[22364] = 849399695;
inp[22365] = 0;
inp[22366] = 848570608;
inp[22367] = 0;
inp[22368] = 847742330;
inp[22369] = 0;
inp[22370] = 846914861;
inp[22371] = 0;
inp[22372] = 846088199;
inp[22373] = 0;
inp[22374] = 845262344;
inp[22375] = 0;
inp[22376] = 844437296;
inp[22377] = 0;
inp[22378] = 843613052;
inp[22379] = 0;
inp[22380] = 842789614;
inp[22381] = 0;
inp[22382] = 841966979;
inp[22383] = 0;
inp[22384] = 841145147;
inp[22385] = 0;
inp[22386] = 840324117;
inp[22387] = 0;
inp[22388] = 839503888;
inp[22389] = 0;
inp[22390] = 838684460;
inp[22391] = 0;
inp[22392] = 837865832;
inp[22393] = 0;
inp[22394] = 837048004;
inp[22395] = 0;
inp[22396] = 1073741824;
inp[22397] = 1073741824;
inp[22398] = 1073217663;
inp[22399] = 0;
inp[22400] = 1072693759;
inp[22401] = 0;
inp[22402] = 1072170111;
inp[22403] = 0;
inp[22404] = 1071646718;
inp[22405] = 0;
inp[22406] = 1071123581;
inp[22407] = 0;
inp[22408] = 1070600699;
inp[22409] = 0;
inp[22410] = 1070078072;
inp[22411] = 0;
inp[22412] = 1069555701;
inp[22413] = 0;
inp[22414] = 1069033584;
inp[22415] = 0;
inp[22416] = 1068511723;
inp[22417] = 0;
inp[22418] = 1067990116;
inp[22419] = 0;
inp[22420] = 1067468764;
inp[22421] = 0;
inp[22422] = 1066947666;
inp[22423] = 0;
inp[22424] = 1066426822;
inp[22425] = 0;
inp[22426] = 1065906233;
inp[22427] = 0;
inp[22428] = 1065385898;
inp[22429] = 0;
inp[22430] = 1064865817;
inp[22431] = 0;
inp[22432] = 1064345990;
inp[22433] = 0;
inp[22434] = 1063826417;
inp[22435] = 0;
inp[22436] = 1063307097;
inp[22437] = 0;
inp[22438] = 1062788031;
inp[22439] = 0;
inp[22440] = 1062269218;
inp[22441] = 0;
inp[22442] = 1061750659;
inp[22443] = 0;
inp[22444] = 1061232352;
inp[22445] = 0;
inp[22446] = 1060714299;
inp[22447] = 0;
inp[22448] = 1060196498;
inp[22449] = 0;
inp[22450] = 1059678951;
inp[22451] = 0;
inp[22452] = 1059161656;
inp[22453] = 0;
inp[22454] = 1058644613;
inp[22455] = 0;
inp[22456] = 1058127823;
inp[22457] = 0;
inp[22458] = 1057611285;
inp[22459] = 0;
inp[22460] = 1057094999;
inp[22461] = 0;
inp[22462] = 1056578966;
inp[22463] = 0;
inp[22464] = 1056063184;
inp[22465] = 0;
inp[22466] = 1055547654;
inp[22467] = 0;
inp[22468] = 1055032376;
inp[22469] = 0;
inp[22470] = 1054517349;
inp[22471] = 0;
inp[22472] = 1054002574;
inp[22473] = 0;
inp[22474] = 1053488050;
inp[22475] = 0;
inp[22476] = 1052973777;
inp[22477] = 0;
inp[22478] = 1052459755;
inp[22479] = 0;
inp[22480] = 1051945984;
inp[22481] = 0;
inp[22482] = 1051432464;
inp[22483] = 0;
inp[22484] = 1050919194;
inp[22485] = 0;
inp[22486] = 1050406175;
inp[22487] = 0;
inp[22488] = 1049893407;
inp[22489] = 0;
inp[22490] = 1049380889;
inp[22491] = 0;
inp[22492] = 1048868621;
inp[22493] = 0;
inp[22494] = 1048356603;
inp[22495] = 0;
inp[22496] = 1047844835;
inp[22497] = 0;
inp[22498] = 1047333317;
inp[22499] = 0;
inp[22500] = 1046822049;
inp[22501] = 0;
inp[22502] = 1046311030;
inp[22503] = 0;
inp[22504] = 1045800261;
inp[22505] = 0;
inp[22506] = 1045289741;
inp[22507] = 0;
inp[22508] = 1044779470;
inp[22509] = 0;
inp[22510] = 1044269448;
inp[22511] = 0;
inp[22512] = 1043759675;
inp[22513] = 0;
inp[22514] = 1043250151;
inp[22515] = 0;
inp[22516] = 1042740876;
inp[22517] = 0;
inp[22518] = 1042231850;
inp[22519] = 0;
inp[22520] = 1041723072;
inp[22521] = 0;
inp[22522] = 1041214542;
inp[22523] = 0;
inp[22524] = 1040706261;
inp[22525] = 0;
inp[22526] = 1040198227;
inp[22527] = 0;
inp[22528] = 1039690442;
inp[22529] = 0;
inp[22530] = 1039182905;
inp[22531] = 0;
inp[22532] = 1038675615;
inp[22533] = 0;
inp[22534] = 1038168573;
inp[22535] = 0;
inp[22536] = 1037661778;
inp[22537] = 0;
inp[22538] = 1037155231;
inp[22539] = 0;
inp[22540] = 1036648931;
inp[22541] = 0;
inp[22542] = 1036142879;
inp[22543] = 0;
inp[22544] = 1035637073;
inp[22545] = 0;
inp[22546] = 1035131514;
inp[22547] = 0;
inp[22548] = 1034626202;
inp[22549] = 0;
inp[22550] = 1034121137;
inp[22551] = 0;
inp[22552] = 1033616318;
inp[22553] = 0;
inp[22554] = 1033111746;
inp[22555] = 0;
inp[22556] = 1032607420;
inp[22557] = 0;
inp[22558] = 1032103340;
inp[22559] = 0;
inp[22560] = 1031599507;
inp[22561] = 0;
inp[22562] = 1031095919;
inp[22563] = 0;
inp[22564] = 1030592577;
inp[22565] = 0;
inp[22566] = 1030089481;
inp[22567] = 0;
inp[22568] = 1029586630;
inp[22569] = 0;
inp[22570] = 1029084025;
inp[22571] = 0;
inp[22572] = 1028581665;
inp[22573] = 0;
inp[22574] = 1028079551;
inp[22575] = 0;
inp[22576] = 1027577681;
inp[22577] = 0;
inp[22578] = 1027076057;
inp[22579] = 0;
inp[22580] = 1026574677;
inp[22581] = 0;
inp[22582] = 1026073543;
inp[22583] = 0;
inp[22584] = 1025572652;
inp[22585] = 0;
inp[22586] = 1025072007;
inp[22587] = 0;
inp[22588] = 1024571605;
inp[22589] = 0;
inp[22590] = 1024071449;
inp[22591] = 0;
inp[22592] = 1023571536;
inp[22593] = 0;
inp[22594] = 1023071867;
inp[22595] = 0;
inp[22596] = 1022572442;
inp[22597] = 0;
inp[22598] = 1022073261;
inp[22599] = 0;
inp[22600] = 1021574324;
inp[22601] = 0;
inp[22602] = 1021075630;
inp[22603] = 0;
inp[22604] = 1020577179;
inp[22605] = 0;
inp[22606] = 1020078972;
inp[22607] = 0;
inp[22608] = 1019581008;
inp[22609] = 0;
inp[22610] = 1019083288;
inp[22611] = 0;
inp[22612] = 1018585810;
inp[22613] = 0;
inp[22614] = 1018088575;
inp[22615] = 0;
inp[22616] = 1017591583;
inp[22617] = 0;
inp[22618] = 1017094833;
inp[22619] = 0;
inp[22620] = 1016598326;
inp[22621] = 0;
inp[22622] = 1016102061;
inp[22623] = 0;
inp[22624] = 1015606039;
inp[22625] = 0;
inp[22626] = 1015110258;
inp[22627] = 0;
inp[22628] = 1014614720;
inp[22629] = 0;
inp[22630] = 1014119424;
inp[22631] = 0;
inp[22632] = 1013624369;
inp[22633] = 0;
inp[22634] = 1013129556;
inp[22635] = 0;
inp[22636] = 1012634985;
inp[22637] = 0;
inp[22638] = 1012140655;
inp[22639] = 0;
inp[22640] = 1011646566;
inp[22641] = 0;
inp[22642] = 1011152719;
inp[22643] = 0;
inp[22644] = 1010659112;
inp[22645] = 0;
inp[22646] = 1010165747;
inp[22647] = 0;
inp[22648] = 1009672622;
inp[22649] = 0;
inp[22650] = 1009179738;
inp[22651] = 0;
inp[22652] = 1008687095;
inp[22653] = 0;
inp[22654] = 1008194692;
inp[22655] = 0;
inp[22656] = 1007702530;
inp[22657] = 0;
inp[22658] = 1007210608;
inp[22659] = 0;
inp[22660] = 1006718926;
inp[22661] = 0;
inp[22662] = 1006227484;
inp[22663] = 0;
inp[22664] = 1005736282;
inp[22665] = 0;
inp[22666] = 1005245319;
inp[22667] = 0;
inp[22668] = 1004754597;
inp[22669] = 0;
inp[22670] = 1004264114;
inp[22671] = 0;
inp[22672] = 1003773870;
inp[22673] = 0;
inp[22674] = 1003283866;
inp[22675] = 0;
inp[22676] = 1002794101;
inp[22677] = 0;
inp[22678] = 1002304575;
inp[22679] = 0;
inp[22680] = 1001815287;
inp[22681] = 0;
inp[22682] = 1001326239;
inp[22683] = 0;
inp[22684] = 1000837430;
inp[22685] = 0;
inp[22686] = 1000348859;
inp[22687] = 0;
inp[22688] = 999860527;
inp[22689] = 0;
inp[22690] = 999372433;
inp[22691] = 0;
inp[22692] = 998884577;
inp[22693] = 0;
inp[22694] = 998396959;
inp[22695] = 0;
inp[22696] = 997909580;
inp[22697] = 0;
inp[22698] = 997422438;
inp[22699] = 0;
inp[22700] = 996935534;
inp[22701] = 0;
inp[22702] = 996448868;
inp[22703] = 0;
inp[22704] = 995962440;
inp[22705] = 0;
inp[22706] = 995476249;
inp[22707] = 0;
inp[22708] = 994990295;
inp[22709] = 0;
inp[22710] = 994504578;
inp[22711] = 0;
inp[22712] = 994019099;
inp[22713] = 0;
inp[22714] = 993533857;
inp[22715] = 0;
inp[22716] = 993048851;
inp[22717] = 0;
inp[22718] = 992564082;
inp[22719] = 0;
inp[22720] = 992079550;
inp[22721] = 0;
inp[22722] = 991595255;
inp[22723] = 0;
inp[22724] = 991111195;
inp[22725] = 0;
inp[22726] = 990627373;
inp[22727] = 0;
inp[22728] = 990143786;
inp[22729] = 0;
inp[22730] = 989660435;
inp[22731] = 0;
inp[22732] = 989177321;
inp[22733] = 0;
inp[22734] = 988694442;
inp[22735] = 0;
inp[22736] = 988211799;
inp[22737] = 0;
inp[22738] = 987729391;
inp[22739] = 0;
inp[22740] = 987247219;
inp[22741] = 0;
inp[22742] = 986765282;
inp[22743] = 0;
inp[22744] = 986283581;
inp[22745] = 0;
inp[22746] = 985802115;
inp[22747] = 0;
inp[22748] = 985320884;
inp[22749] = 0;
inp[22750] = 984839887;
inp[22751] = 0;
inp[22752] = 984359126;
inp[22753] = 0;
inp[22754] = 983878599;
inp[22755] = 0;
inp[22756] = 983398307;
inp[22757] = 0;
inp[22758] = 982918249;
inp[22759] = 0;
inp[22760] = 982438426;
inp[22761] = 0;
inp[22762] = 981958837;
inp[22763] = 0;
inp[22764] = 981479482;
inp[22765] = 0;
inp[22766] = 981000361;
inp[22767] = 0;
inp[22768] = 980521473;
inp[22769] = 0;
inp[22770] = 980042820;
inp[22771] = 0;
inp[22772] = 979564400;
inp[22773] = 0;
inp[22774] = 979086214;
inp[22775] = 0;
inp[22776] = 978608261;
inp[22777] = 0;
inp[22778] = 978130542;
inp[22779] = 0;
inp[22780] = 977653056;
inp[22781] = 0;
inp[22782] = 977175803;
inp[22783] = 0;
inp[22784] = 976698782;
inp[22785] = 0;
inp[22786] = 976221995;
inp[22787] = 0;
inp[22788] = 975745441;
inp[22789] = 0;
inp[22790] = 975269119;
inp[22791] = 0;
inp[22792] = 974793029;
inp[22793] = 0;
inp[22794] = 974317172;
inp[22795] = 0;
inp[22796] = 973841548;
inp[22797] = 0;
inp[22798] = 973366155;
inp[22799] = 0;
inp[22800] = 972890995;
inp[22801] = 0;
inp[22802] = 972416066;
inp[22803] = 0;
inp[22804] = 971941370;
inp[22805] = 0;
inp[22806] = 971466905;
inp[22807] = 0;
inp[22808] = 970992671;
inp[22809] = 0;
inp[22810] = 970518670;
inp[22811] = 0;
inp[22812] = 970044899;
inp[22813] = 0;
inp[22814] = 969571360;
inp[22815] = 0;
inp[22816] = 969098052;
inp[22817] = 0;
inp[22818] = 968624975;
inp[22819] = 0;
inp[22820] = 968152129;
inp[22821] = 0;
inp[22822] = 967679514;
inp[22823] = 0;
inp[22824] = 967207130;
inp[22825] = 0;
inp[22826] = 966734976;
inp[22827] = 0;
inp[22828] = 966263053;
inp[22829] = 0;
inp[22830] = 965791360;
inp[22831] = 0;
inp[22832] = 965319897;
inp[22833] = 0;
inp[22834] = 964848664;
inp[22835] = 0;
inp[22836] = 964377662;
inp[22837] = 0;
inp[22838] = 963906889;
inp[22839] = 0;
inp[22840] = 963436347;
inp[22841] = 0;
inp[22842] = 962966033;
inp[22843] = 0;
inp[22844] = 962495950;
inp[22845] = 0;
inp[22846] = 962026096;
inp[22847] = 0;
inp[22848] = 961556471;
inp[22849] = 0;
inp[22850] = 961087076;
inp[22851] = 0;
inp[22852] = 960617910;
inp[22853] = 0;
inp[22854] = 960148972;
inp[22855] = 0;
inp[22856] = 959680264;
inp[22857] = 0;
inp[22858] = 959211785;
inp[22859] = 0;
inp[22860] = 958743534;
inp[22861] = 0;
inp[22862] = 958275512;
inp[22863] = 0;
inp[22864] = 957807718;
inp[22865] = 0;
inp[22866] = 957340153;
inp[22867] = 0;
inp[22868] = 956872815;
inp[22869] = 0;
inp[22870] = 956405706;
inp[22871] = 0;
inp[22872] = 955938825;
inp[22873] = 0;
inp[22874] = 955472172;
inp[22875] = 0;
inp[22876] = 955005747;
inp[22877] = 0;
inp[22878] = 954539549;
inp[22879] = 0;
inp[22880] = 954073579;
inp[22881] = 0;
inp[22882] = 953607837;
inp[22883] = 0;
inp[22884] = 953142322;
inp[22885] = 0;
inp[22886] = 952677034;
inp[22887] = 0;
inp[22888] = 952211973;
inp[22889] = 0;
inp[22890] = 951747139;
inp[22891] = 0;
inp[22892] = 951282532;
inp[22893] = 0;
inp[22894] = 950818152;
inp[22895] = 0;
inp[22896] = 950353999;
inp[22897] = 0;
inp[22898] = 949890072;
inp[22899] = 0;
inp[22900] = 949426372;
inp[22901] = 0;
inp[22902] = 948962898;
inp[22903] = 0;
inp[22904] = 948499650;
inp[22905] = 0;
inp[22906] = 948036629;
inp[22907] = 0;
inp[22908] = 1073741824;
inp[22909] = 1073741824;
inp[22910] = 1073479711;
inp[22911] = 0;
inp[22912] = 1073217663;
inp[22913] = 0;
inp[22914] = 1072955679;
inp[22915] = 0;
inp[22916] = 1072693759;
inp[22917] = 0;
inp[22918] = 1072431903;
inp[22919] = 0;
inp[22920] = 1072170111;
inp[22921] = 0;
inp[22922] = 1071908383;
inp[22923] = 0;
inp[22924] = 1071646718;
inp[22925] = 0;
inp[22926] = 1071385118;
inp[22927] = 0;
inp[22928] = 1071123581;
inp[22929] = 0;
inp[22930] = 1070862108;
inp[22931] = 0;
inp[22932] = 1070600699;
inp[22933] = 0;
inp[22934] = 1070339354;
inp[22935] = 0;
inp[22936] = 1070078072;
inp[22937] = 0;
inp[22938] = 1069816855;
inp[22939] = 0;
inp[22940] = 1069555701;
inp[22941] = 0;
inp[22942] = 1069294611;
inp[22943] = 0;
inp[22944] = 1069033584;
inp[22945] = 0;
inp[22946] = 1068772622;
inp[22947] = 0;
inp[22948] = 1068511723;
inp[22949] = 0;
inp[22950] = 1068250887;
inp[22951] = 0;
inp[22952] = 1067990116;
inp[22953] = 0;
inp[22954] = 1067729408;
inp[22955] = 0;
inp[22956] = 1067468764;
inp[22957] = 0;
inp[22958] = 1067208183;
inp[22959] = 0;
inp[22960] = 1066947666;
inp[22961] = 0;
inp[22962] = 1066687212;
inp[22963] = 0;
inp[22964] = 1066426822;
inp[22965] = 0;
inp[22966] = 1066166496;
inp[22967] = 0;
inp[22968] = 1065906233;
inp[22969] = 0;
inp[22970] = 1065646034;
inp[22971] = 0;
inp[22972] = 1065385898;
inp[22973] = 0;
inp[22974] = 1065125826;
inp[22975] = 0;
inp[22976] = 1064865817;
inp[22977] = 0;
inp[22978] = 1064605872;
inp[22979] = 0;
inp[22980] = 1064345990;
inp[22981] = 0;
inp[22982] = 1064086172;
inp[22983] = 0;
inp[22984] = 1063826417;
inp[22985] = 0;
inp[22986] = 1063566725;
inp[22987] = 0;
inp[22988] = 1063307097;
inp[22989] = 0;
inp[22990] = 1063047532;
inp[22991] = 0;
inp[22992] = 1062788031;
inp[22993] = 0;
inp[22994] = 1062528593;
inp[22995] = 0;
inp[22996] = 1062269218;
inp[22997] = 0;
inp[22998] = 1062009907;
inp[22999] = 0;
inp[23000] = 1061750659;
inp[23001] = 0;
inp[23002] = 1061491474;
inp[23003] = 0;
inp[23004] = 1061232352;
inp[23005] = 0;
inp[23006] = 1060973294;
inp[23007] = 0;
inp[23008] = 1060714299;
inp[23009] = 0;
inp[23010] = 1060455367;
inp[23011] = 0;
inp[23012] = 1060196498;
inp[23013] = 0;
inp[23014] = 1059937693;
inp[23015] = 0;
inp[23016] = 1059678951;
inp[23017] = 0;
inp[23018] = 1059420272;
inp[23019] = 0;
inp[23020] = 1059161656;
inp[23021] = 0;
inp[23022] = 1058903103;
inp[23023] = 0;
inp[23024] = 1058644613;
inp[23025] = 0;
inp[23026] = 1058386187;
inp[23027] = 0;
inp[23028] = 1058127823;
inp[23029] = 0;
inp[23030] = 1057869523;
inp[23031] = 0;
inp[23032] = 1057611285;
inp[23033] = 0;
inp[23034] = 1057353111;
inp[23035] = 0;
inp[23036] = 1057094999;
inp[23037] = 0;
inp[23038] = 1056836951;
inp[23039] = 0;
inp[23040] = 1056578966;
inp[23041] = 0;
inp[23042] = 1056321043;
inp[23043] = 0;
inp[23044] = 1056063184;
inp[23045] = 0;
inp[23046] = 1055805388;
inp[23047] = 0;
inp[23048] = 1055547654;
inp[23049] = 0;
inp[23050] = 1055289983;
inp[23051] = 0;
inp[23052] = 1055032376;
inp[23053] = 0;
inp[23054] = 1054774831;
inp[23055] = 0;
inp[23056] = 1054517349;
inp[23057] = 0;
inp[23058] = 1054259930;
inp[23059] = 0;
inp[23060] = 1054002574;
inp[23061] = 0;
inp[23062] = 1053745280;
inp[23063] = 0;
inp[23064] = 1053488050;
inp[23065] = 0;
inp[23066] = 1053230882;
inp[23067] = 0;
inp[23068] = 1052973777;
inp[23069] = 0;
inp[23070] = 1052716734;
inp[23071] = 0;
inp[23072] = 1052459755;
inp[23073] = 0;
inp[23074] = 1052202838;
inp[23075] = 0;
inp[23076] = 1051945984;
inp[23077] = 0;
inp[23078] = 1051689192;
inp[23079] = 0;
inp[23080] = 1051432464;
inp[23081] = 0;
inp[23082] = 1051175798;
inp[23083] = 0;
inp[23084] = 1050919194;
inp[23085] = 0;
inp[23086] = 1050662654;
inp[23087] = 0;
inp[23088] = 1050406175;
inp[23089] = 0;
inp[23090] = 1050149760;
inp[23091] = 0;
inp[23092] = 1049893407;
inp[23093] = 0;
inp[23094] = 1049637117;
inp[23095] = 0;
inp[23096] = 1049380889;
inp[23097] = 0;
inp[23098] = 1049124724;
inp[23099] = 0;
inp[23100] = 1048868621;
inp[23101] = 0;
inp[23102] = 1048612581;
inp[23103] = 0;
inp[23104] = 1048356603;
inp[23105] = 0;
inp[23106] = 1048100688;
inp[23107] = 0;
inp[23108] = 1047844835;
inp[23109] = 0;
inp[23110] = 1047589045;
inp[23111] = 0;
inp[23112] = 1047333317;
inp[23113] = 0;
inp[23114] = 1047077652;
inp[23115] = 0;
inp[23116] = 1046822049;
inp[23117] = 0;
inp[23118] = 1046566508;
inp[23119] = 0;
inp[23120] = 1046311030;
inp[23121] = 0;
inp[23122] = 1046055614;
inp[23123] = 0;
inp[23124] = 1045800261;
inp[23125] = 0;
inp[23126] = 1045544969;
inp[23127] = 0;
inp[23128] = 1045289741;
inp[23129] = 0;
inp[23130] = 1045034574;
inp[23131] = 0;
inp[23132] = 1044779470;
inp[23133] = 0;
inp[23134] = 1044524428;
inp[23135] = 0;
inp[23136] = 1044269448;
inp[23137] = 0;
inp[23138] = 1044014531;
inp[23139] = 0;
inp[23140] = 1043759675;
inp[23141] = 0;
inp[23142] = 1043504882;
inp[23143] = 0;
inp[23144] = 1043250151;
inp[23145] = 0;
inp[23146] = 1042995483;
inp[23147] = 0;
inp[23148] = 1042740876;
inp[23149] = 0;
inp[23150] = 1042486332;
inp[23151] = 0;
inp[23152] = 1042231850;
inp[23153] = 0;
inp[23154] = 1041977430;
inp[23155] = 0;
inp[23156] = 1041723072;
inp[23157] = 0;
inp[23158] = 1041468776;
inp[23159] = 0;
inp[23160] = 1041214542;
inp[23161] = 0;
inp[23162] = 1040960370;
inp[23163] = 0;
inp[23164] = 1040706261;
inp[23165] = 0;
inp[23166] = 1040452213;
inp[23167] = 0;
inp[23168] = 1040198227;
inp[23169] = 0;
inp[23170] = 1039944304;
inp[23171] = 0;
inp[23172] = 1039690442;
inp[23173] = 0;
inp[23174] = 1039436642;
inp[23175] = 0;
inp[23176] = 1039182905;
inp[23177] = 0;
inp[23178] = 1038929229;
inp[23179] = 0;
inp[23180] = 1038675615;
inp[23181] = 0;
inp[23182] = 1038422063;
inp[23183] = 0;
inp[23184] = 1038168573;
inp[23185] = 0;
inp[23186] = 1037915145;
inp[23187] = 0;
inp[23188] = 1037661778;
inp[23189] = 0;
inp[23190] = 1037408474;
inp[23191] = 0;
inp[23192] = 1037155231;
inp[23193] = 0;
inp[23194] = 1036902050;
inp[23195] = 0;
inp[23196] = 1036648931;
inp[23197] = 0;
inp[23198] = 1036395874;
inp[23199] = 0;
inp[23200] = 1036142879;
inp[23201] = 0;
inp[23202] = 1035889945;
inp[23203] = 0;
inp[23204] = 1035637073;
inp[23205] = 0;
inp[23206] = 1035384263;
inp[23207] = 0;
inp[23208] = 1035131514;
inp[23209] = 0;
inp[23210] = 1034878828;
inp[23211] = 0;
inp[23212] = 1034626202;
inp[23213] = 0;
inp[23214] = 1034373639;
inp[23215] = 0;
inp[23216] = 1034121137;
inp[23217] = 0;
inp[23218] = 1033868697;
inp[23219] = 0;
inp[23220] = 1033616318;
inp[23221] = 0;
inp[23222] = 1033364001;
inp[23223] = 0;
inp[23224] = 1033111746;
inp[23225] = 0;
inp[23226] = 1032859552;
inp[23227] = 0;
inp[23228] = 1032607420;
inp[23229] = 0;
inp[23230] = 1032355350;
inp[23231] = 0;
inp[23232] = 1032103340;
inp[23233] = 0;
inp[23234] = 1031851393;
inp[23235] = 0;
inp[23236] = 1031599507;
inp[23237] = 0;
inp[23238] = 1031347682;
inp[23239] = 0;
inp[23240] = 1031095919;
inp[23241] = 0;
inp[23242] = 1030844217;
inp[23243] = 0;
inp[23244] = 1030592577;
inp[23245] = 0;
inp[23246] = 1030340998;
inp[23247] = 0;
inp[23248] = 1030089481;
inp[23249] = 0;
inp[23250] = 1029838025;
inp[23251] = 0;
inp[23252] = 1029586630;
inp[23253] = 0;
inp[23254] = 1029335297;
inp[23255] = 0;
inp[23256] = 1029084025;
inp[23257] = 0;
inp[23258] = 1028832815;
inp[23259] = 0;
inp[23260] = 1028581665;
inp[23261] = 0;
inp[23262] = 1028330577;
inp[23263] = 0;
inp[23264] = 1028079551;
inp[23265] = 0;
inp[23266] = 1027828585;
inp[23267] = 0;
inp[23268] = 1027577681;
inp[23269] = 0;
inp[23270] = 1027326839;
inp[23271] = 0;
inp[23272] = 1027076057;
inp[23273] = 0;
inp[23274] = 1026825337;
inp[23275] = 0;
inp[23276] = 1026574677;
inp[23277] = 0;
inp[23278] = 1026324079;
inp[23279] = 0;
inp[23280] = 1026073543;
inp[23281] = 0;
inp[23282] = 1025823067;
inp[23283] = 0;
inp[23284] = 1025572652;
inp[23285] = 0;
inp[23286] = 1025322299;
inp[23287] = 0;
inp[23288] = 1025072007;
inp[23289] = 0;
inp[23290] = 1024821776;
inp[23291] = 0;
inp[23292] = 1024571605;
inp[23293] = 0;
inp[23294] = 1024321496;
inp[23295] = 0;
inp[23296] = 1024071449;
inp[23297] = 0;
inp[23298] = 1023821462;
inp[23299] = 0;
inp[23300] = 1023571536;
inp[23301] = 0;
inp[23302] = 1023321671;
inp[23303] = 0;
inp[23304] = 1023071867;
inp[23305] = 0;
inp[23306] = 1022822124;
inp[23307] = 0;
inp[23308] = 1022572442;
inp[23309] = 0;
inp[23310] = 1022322821;
inp[23311] = 0;
inp[23312] = 1022073261;
inp[23313] = 0;
inp[23314] = 1021823762;
inp[23315] = 0;
inp[23316] = 1021574324;
inp[23317] = 0;
inp[23318] = 1021324946;
inp[23319] = 0;
inp[23320] = 1021075630;
inp[23321] = 0;
inp[23322] = 1020826374;
inp[23323] = 0;
inp[23324] = 1020577179;
inp[23325] = 0;
inp[23326] = 1020328045;
inp[23327] = 0;
inp[23328] = 1020078972;
inp[23329] = 0;
inp[23330] = 1019829960;
inp[23331] = 0;
inp[23332] = 1019581008;
inp[23333] = 0;
inp[23334] = 1019332118;
inp[23335] = 0;
inp[23336] = 1019083288;
inp[23337] = 0;
inp[23338] = 1018834518;
inp[23339] = 0;
inp[23340] = 1018585810;
inp[23341] = 0;
inp[23342] = 1018337162;
inp[23343] = 0;
inp[23344] = 1018088575;
inp[23345] = 0;
inp[23346] = 1017840048;
inp[23347] = 0;
inp[23348] = 1017591583;
inp[23349] = 0;
inp[23350] = 1017343178;
inp[23351] = 0;
inp[23352] = 1017094833;
inp[23353] = 0;
inp[23354] = 1016846549;
inp[23355] = 0;
inp[23356] = 1016598326;
inp[23357] = 0;
inp[23358] = 1016350163;
inp[23359] = 0;
inp[23360] = 1016102061;
inp[23361] = 0;
inp[23362] = 1015854020;
inp[23363] = 0;
inp[23364] = 1015606039;
inp[23365] = 0;
inp[23366] = 1015358118;
inp[23367] = 0;
inp[23368] = 1015110258;
inp[23369] = 0;
inp[23370] = 1014862459;
inp[23371] = 0;
inp[23372] = 1014614720;
inp[23373] = 0;
inp[23374] = 1014367042;
inp[23375] = 0;
inp[23376] = 1014119424;
inp[23377] = 0;
inp[23378] = 1013871866;
inp[23379] = 0;
inp[23380] = 1013624369;
inp[23381] = 0;
inp[23382] = 1013376932;
inp[23383] = 0;
inp[23384] = 1013129556;
inp[23385] = 0;
inp[23386] = 1012882240;
inp[23387] = 0;
inp[23388] = 1012634985;
inp[23389] = 0;
inp[23390] = 1012387790;
inp[23391] = 0;
inp[23392] = 1012140655;
inp[23393] = 0;
inp[23394] = 1011893580;
inp[23395] = 0;
inp[23396] = 1011646566;
inp[23397] = 0;
inp[23398] = 1011399612;
inp[23399] = 0;
inp[23400] = 1011152719;
inp[23401] = 0;
inp[23402] = 1010905885;
inp[23403] = 0;
inp[23404] = 1010659112;
inp[23405] = 0;
inp[23406] = 1010412399;
inp[23407] = 0;
inp[23408] = 1010165747;
inp[23409] = 0;
inp[23410] = 1009919154;
inp[23411] = 0;
inp[23412] = 1009672622;
inp[23413] = 0;
inp[23414] = 1009426150;
inp[23415] = 0;
inp[23416] = 1009179738;
inp[23417] = 0;
inp[23418] = 1008933387;
inp[23419] = 0;
inp[23420] = 1073741824;
inp[23421] = 1073741824;
inp[23422] = 1073610759;
inp[23423] = 0;
inp[23424] = 1073479711;
inp[23425] = 0;
inp[23426] = 1073348679;
inp[23427] = 0;
inp[23428] = 1073217663;
inp[23429] = 0;
inp[23430] = 1073086663;
inp[23431] = 0;
inp[23432] = 1072955679;
inp[23433] = 0;
inp[23434] = 1072824711;
inp[23435] = 0;
inp[23436] = 1072693759;
inp[23437] = 0;
inp[23438] = 1072562823;
inp[23439] = 0;
inp[23440] = 1072431903;
inp[23441] = 0;
inp[23442] = 1072300999;
inp[23443] = 0;
inp[23444] = 1072170111;
inp[23445] = 0;
inp[23446] = 1072039239;
inp[23447] = 0;
inp[23448] = 1071908383;
inp[23449] = 0;
inp[23450] = 1071777542;
inp[23451] = 0;
inp[23452] = 1071646718;
inp[23453] = 0;
inp[23454] = 1071515910;
inp[23455] = 0;
inp[23456] = 1071385118;
inp[23457] = 0;
inp[23458] = 1071254341;
inp[23459] = 0;
inp[23460] = 1071123581;
inp[23461] = 0;
inp[23462] = 1070992836;
inp[23463] = 0;
inp[23464] = 1070862108;
inp[23465] = 0;
inp[23466] = 1070731396;
inp[23467] = 0;
inp[23468] = 1070600699;
inp[23469] = 0;
inp[23470] = 1070470018;
inp[23471] = 0;
inp[23472] = 1070339354;
inp[23473] = 0;
inp[23474] = 1070208705;
inp[23475] = 0;
inp[23476] = 1070078072;
inp[23477] = 0;
inp[23478] = 1069947456;
inp[23479] = 0;
inp[23480] = 1069816855;
inp[23481] = 0;
inp[23482] = 1069686270;
inp[23483] = 0;
inp[23484] = 1069555701;
inp[23485] = 0;
inp[23486] = 1069425148;
inp[23487] = 0;
inp[23488] = 1069294611;
inp[23489] = 0;
inp[23490] = 1069164090;
inp[23491] = 0;
inp[23492] = 1069033584;
inp[23493] = 0;
inp[23494] = 1068903095;
inp[23495] = 0;
inp[23496] = 1068772622;
inp[23497] = 0;
inp[23498] = 1068642164;
inp[23499] = 0;
inp[23500] = 1068511723;
inp[23501] = 0;
inp[23502] = 1068381297;
inp[23503] = 0;
inp[23504] = 1068250887;
inp[23505] = 0;
inp[23506] = 1068120494;
inp[23507] = 0;
inp[23508] = 1067990116;
inp[23509] = 0;
inp[23510] = 1067859754;
inp[23511] = 0;
inp[23512] = 1067729408;
inp[23513] = 0;
inp[23514] = 1067599078;
inp[23515] = 0;
inp[23516] = 1067468764;
inp[23517] = 0;
inp[23518] = 1067338465;
inp[23519] = 0;
inp[23520] = 1067208183;
inp[23521] = 0;
inp[23522] = 1067077916;
inp[23523] = 0;
inp[23524] = 1066947666;
inp[23525] = 0;
inp[23526] = 1066817431;
inp[23527] = 0;
inp[23528] = 1066687212;
inp[23529] = 0;
inp[23530] = 1066557009;
inp[23531] = 0;
inp[23532] = 1066426822;
inp[23533] = 0;
inp[23534] = 1066296651;
inp[23535] = 0;
inp[23536] = 1066166496;
inp[23537] = 0;
inp[23538] = 1066036357;
inp[23539] = 0;
inp[23540] = 1065906233;
inp[23541] = 0;
inp[23542] = 1065776126;
inp[23543] = 0;
inp[23544] = 1065646034;
inp[23545] = 0;
inp[23546] = 1065515958;
inp[23547] = 0;
inp[23548] = 1065385898;
inp[23549] = 0;
inp[23550] = 1065255854;
inp[23551] = 0;
inp[23552] = 1065125826;
inp[23553] = 0;
inp[23554] = 1064995814;
inp[23555] = 0;
inp[23556] = 1064865817;
inp[23557] = 0;
inp[23558] = 1064735837;
inp[23559] = 0;
inp[23560] = 1064605872;
inp[23561] = 0;
inp[23562] = 1064475923;
inp[23563] = 0;
inp[23564] = 1064345990;
inp[23565] = 0;
inp[23566] = 1064216073;
inp[23567] = 0;
inp[23568] = 1064086172;
inp[23569] = 0;
inp[23570] = 1063956286;
inp[23571] = 0;
inp[23572] = 1063826417;
inp[23573] = 0;
inp[23574] = 1063696563;
inp[23575] = 0;
inp[23576] = 1063566725;
inp[23577] = 0;
inp[23578] = 1063436903;
inp[23579] = 0;
inp[23580] = 1063307097;
inp[23581] = 0;
inp[23582] = 1063177307;
inp[23583] = 0;
inp[23584] = 1063047532;
inp[23585] = 0;
inp[23586] = 1062917774;
inp[23587] = 0;
inp[23588] = 1062788031;
inp[23589] = 0;
inp[23590] = 1062658304;
inp[23591] = 0;
inp[23592] = 1062528593;
inp[23593] = 0;
inp[23594] = 1062398898;
inp[23595] = 0;
inp[23596] = 1062269218;
inp[23597] = 0;
inp[23598] = 1062139555;
inp[23599] = 0;
inp[23600] = 1062009907;
inp[23601] = 0;
inp[23602] = 1061880275;
inp[23603] = 0;
inp[23604] = 1061750659;
inp[23605] = 0;
inp[23606] = 1061621058;
inp[23607] = 0;
inp[23608] = 1061491474;
inp[23609] = 0;
inp[23610] = 1061361905;
inp[23611] = 0;
inp[23612] = 1061232352;
inp[23613] = 0;
inp[23614] = 1061102815;
inp[23615] = 0;
inp[23616] = 1060973294;
inp[23617] = 0;
inp[23618] = 1060843789;
inp[23619] = 0;
inp[23620] = 1060714299;
inp[23621] = 0;
inp[23622] = 1060584825;
inp[23623] = 0;
inp[23624] = 1060455367;
inp[23625] = 0;
inp[23626] = 1060325925;
inp[23627] = 0;
inp[23628] = 1060196498;
inp[23629] = 0;
inp[23630] = 1060067088;
inp[23631] = 0;
inp[23632] = 1059937693;
inp[23633] = 0;
inp[23634] = 1059808314;
inp[23635] = 0;
inp[23636] = 1059678951;
inp[23637] = 0;
inp[23638] = 1059549603;
inp[23639] = 0;
inp[23640] = 1059420272;
inp[23641] = 0;
inp[23642] = 1059290956;
inp[23643] = 0;
inp[23644] = 1059161656;
inp[23645] = 0;
inp[23646] = 1059032371;
inp[23647] = 0;
inp[23648] = 1058903103;
inp[23649] = 0;
inp[23650] = 1058773850;
inp[23651] = 0;
inp[23652] = 1058644613;
inp[23653] = 0;
inp[23654] = 1058515392;
inp[23655] = 0;
inp[23656] = 1058386187;
inp[23657] = 0;
inp[23658] = 1058256997;
inp[23659] = 0;
inp[23660] = 1058127823;
inp[23661] = 0;
inp[23662] = 1057998665;
inp[23663] = 0;
inp[23664] = 1057869523;
inp[23665] = 0;
inp[23666] = 1057740396;
inp[23667] = 0;
inp[23668] = 1057611285;
inp[23669] = 0;
inp[23670] = 1057482190;
inp[23671] = 0;
inp[23672] = 1057353111;
inp[23673] = 0;
inp[23674] = 1057224047;
inp[23675] = 0;
inp[23676] = 1057094999;
inp[23677] = 0;
inp[23678] = 1056965967;
inp[23679] = 0;
inp[23680] = 1056836951;
inp[23681] = 0;
inp[23682] = 1056707951;
inp[23683] = 0;
inp[23684] = 1056578966;
inp[23685] = 0;
inp[23686] = 1056449997;
inp[23687] = 0;
inp[23688] = 1056321043;
inp[23689] = 0;
inp[23690] = 1056192106;
inp[23691] = 0;
inp[23692] = 1056063184;
inp[23693] = 0;
inp[23694] = 1055934278;
inp[23695] = 0;
inp[23696] = 1055805388;
inp[23697] = 0;
inp[23698] = 1055676513;
inp[23699] = 0;
inp[23700] = 1055547654;
inp[23701] = 0;
inp[23702] = 1055418811;
inp[23703] = 0;
inp[23704] = 1055289983;
inp[23705] = 0;
inp[23706] = 1055161172;
inp[23707] = 0;
inp[23708] = 1055032376;
inp[23709] = 0;
inp[23710] = 1054903595;
inp[23711] = 0;
inp[23712] = 1054774831;
inp[23713] = 0;
inp[23714] = 1054646082;
inp[23715] = 0;
inp[23716] = 1054517349;
inp[23717] = 0;
inp[23718] = 1054388632;
inp[23719] = 0;
inp[23720] = 1054259930;
inp[23721] = 0;
inp[23722] = 1054131244;
inp[23723] = 0;
inp[23724] = 1054002574;
inp[23725] = 0;
inp[23726] = 1053873919;
inp[23727] = 0;
inp[23728] = 1053745280;
inp[23729] = 0;
inp[23730] = 1053616657;
inp[23731] = 0;
inp[23732] = 1053488050;
inp[23733] = 0;
inp[23734] = 1053359458;
inp[23735] = 0;
inp[23736] = 1053230882;
inp[23737] = 0;
inp[23738] = 1053102321;
inp[23739] = 0;
inp[23740] = 1052973777;
inp[23741] = 0;
inp[23742] = 1052845248;
inp[23743] = 0;
inp[23744] = 1052716734;
inp[23745] = 0;
inp[23746] = 1052588237;
inp[23747] = 0;
inp[23748] = 1052459755;
inp[23749] = 0;
inp[23750] = 1052331289;
inp[23751] = 0;
inp[23752] = 1052202838;
inp[23753] = 0;
inp[23754] = 1052074403;
inp[23755] = 0;
inp[23756] = 1051945984;
inp[23757] = 0;
inp[23758] = 1051817580;
inp[23759] = 0;
inp[23760] = 1051689192;
inp[23761] = 0;
inp[23762] = 1051560820;
inp[23763] = 0;
inp[23764] = 1051432464;
inp[23765] = 0;
inp[23766] = 1051304123;
inp[23767] = 0;
inp[23768] = 1051175798;
inp[23769] = 0;
inp[23770] = 1051047488;
inp[23771] = 0;
inp[23772] = 1050919194;
inp[23773] = 0;
inp[23774] = 1050790916;
inp[23775] = 0;
inp[23776] = 1050662654;
inp[23777] = 0;
inp[23778] = 1050534407;
inp[23779] = 0;
inp[23780] = 1050406175;
inp[23781] = 0;
inp[23782] = 1050277960;
inp[23783] = 0;
inp[23784] = 1050149760;
inp[23785] = 0;
inp[23786] = 1050021576;
inp[23787] = 0;
inp[23788] = 1049893407;
inp[23789] = 0;
inp[23790] = 1049765254;
inp[23791] = 0;
inp[23792] = 1049637117;
inp[23793] = 0;
inp[23794] = 1049508995;
inp[23795] = 0;
inp[23796] = 1049380889;
inp[23797] = 0;
inp[23798] = 1049252798;
inp[23799] = 0;
inp[23800] = 1049124724;
inp[23801] = 0;
inp[23802] = 1048996664;
inp[23803] = 0;
inp[23804] = 1048868621;
inp[23805] = 0;
inp[23806] = 1048740593;
inp[23807] = 0;
inp[23808] = 1048612581;
inp[23809] = 0;
inp[23810] = 1048484584;
inp[23811] = 0;
inp[23812] = 1048356603;
inp[23813] = 0;
inp[23814] = 1048228638;
inp[23815] = 0;
inp[23816] = 1048100688;
inp[23817] = 0;
inp[23818] = 1047972754;
inp[23819] = 0;
inp[23820] = 1047844835;
inp[23821] = 0;
inp[23822] = 1047716932;
inp[23823] = 0;
inp[23824] = 1047589045;
inp[23825] = 0;
inp[23826] = 1047461173;
inp[23827] = 0;
inp[23828] = 1047333317;
inp[23829] = 0;
inp[23830] = 1047205477;
inp[23831] = 0;
inp[23832] = 1047077652;
inp[23833] = 0;
inp[23834] = 1046949842;
inp[23835] = 0;
inp[23836] = 1046822049;
inp[23837] = 0;
inp[23838] = 1046694271;
inp[23839] = 0;
inp[23840] = 1046566508;
inp[23841] = 0;
inp[23842] = 1046438761;
inp[23843] = 0;
inp[23844] = 1046311030;
inp[23845] = 0;
inp[23846] = 1046183314;
inp[23847] = 0;
inp[23848] = 1046055614;
inp[23849] = 0;
inp[23850] = 1045927929;
inp[23851] = 0;
inp[23852] = 1045800261;
inp[23853] = 0;
inp[23854] = 1045672607;
inp[23855] = 0;
inp[23856] = 1045544969;
inp[23857] = 0;
inp[23858] = 1045417347;
inp[23859] = 0;
inp[23860] = 1045289741;
inp[23861] = 0;
inp[23862] = 1045162149;
inp[23863] = 0;
inp[23864] = 1045034574;
inp[23865] = 0;
inp[23866] = 1044907014;
inp[23867] = 0;
inp[23868] = 1044779470;
inp[23869] = 0;
inp[23870] = 1044651941;
inp[23871] = 0;
inp[23872] = 1044524428;
inp[23873] = 0;
inp[23874] = 1044396930;
inp[23875] = 0;
inp[23876] = 1044269448;
inp[23877] = 0;
inp[23878] = 1044141981;
inp[23879] = 0;
inp[23880] = 1044014531;
inp[23881] = 0;
inp[23882] = 1043887095;
inp[23883] = 0;
inp[23884] = 1043759675;
inp[23885] = 0;
inp[23886] = 1043632271;
inp[23887] = 0;
inp[23888] = 1043504882;
inp[23889] = 0;
inp[23890] = 1043377509;
inp[23891] = 0;
inp[23892] = 1043250151;
inp[23893] = 0;
inp[23894] = 1043122809;
inp[23895] = 0;
inp[23896] = 1042995483;
inp[23897] = 0;
inp[23898] = 1042868172;
inp[23899] = 0;
inp[23900] = 1042740876;
inp[23901] = 0;
inp[23902] = 1042613596;
inp[23903] = 0;
inp[23904] = 1042486332;
inp[23905] = 0;
inp[23906] = 1042359083;
inp[23907] = 0;
inp[23908] = 1042231850;
inp[23909] = 0;
inp[23910] = 1042104632;
inp[23911] = 0;
inp[23912] = 1041977430;
inp[23913] = 0;
inp[23914] = 1041850243;
inp[23915] = 0;
inp[23916] = 1041723072;
inp[23917] = 0;
inp[23918] = 1041595916;
inp[23919] = 0;
inp[23920] = 1041468776;
inp[23921] = 0;
inp[23922] = 1041341651;
inp[23923] = 0;
inp[23924] = 1041214542;
inp[23925] = 0;
inp[23926] = 1041087448;
inp[23927] = 0;
inp[23928] = 1040960370;
inp[23929] = 0;
inp[23930] = 1040833308;
inp[23931] = 0;
inp[23932] = 1073741824;
inp[23933] = 1073741824;
inp[23934] = 1073676289;
inp[23935] = 0;
inp[23936] = 1073610759;
inp[23937] = 0;
inp[23938] = 1073545233;
inp[23939] = 0;
inp[23940] = 1073479711;
inp[23941] = 0;
inp[23942] = 1073414193;
inp[23943] = 0;
inp[23944] = 1073348679;
inp[23945] = 0;
inp[23946] = 1073283169;
inp[23947] = 0;
inp[23948] = 1073217663;
inp[23949] = 0;
inp[23950] = 1073152161;
inp[23951] = 0;
inp[23952] = 1073086663;
inp[23953] = 0;
inp[23954] = 1073021169;
inp[23955] = 0;
inp[23956] = 1072955679;
inp[23957] = 0;
inp[23958] = 1072890193;
inp[23959] = 0;
inp[23960] = 1072824711;
inp[23961] = 0;
inp[23962] = 1072759233;
inp[23963] = 0;
inp[23964] = 1072693759;
inp[23965] = 0;
inp[23966] = 1072628289;
inp[23967] = 0;
inp[23968] = 1072562823;
inp[23969] = 0;
inp[23970] = 1072497361;
inp[23971] = 0;
inp[23972] = 1072431903;
inp[23973] = 0;
inp[23974] = 1072366449;
inp[23975] = 0;
inp[23976] = 1072300999;
inp[23977] = 0;
inp[23978] = 1072235553;
inp[23979] = 0;
inp[23980] = 1072170111;
inp[23981] = 0;
inp[23982] = 1072104673;
inp[23983] = 0;
inp[23984] = 1072039239;
inp[23985] = 0;
inp[23986] = 1071973809;
inp[23987] = 0;
inp[23988] = 1071908383;
inp[23989] = 0;
inp[23990] = 1071842961;
inp[23991] = 0;
inp[23992] = 1071777542;
inp[23993] = 0;
inp[23994] = 1071712128;
inp[23995] = 0;
inp[23996] = 1071646718;
inp[23997] = 0;
inp[23998] = 1071581312;
inp[23999] = 0;
inp[24000] = 1071515910;
inp[24001] = 0;
inp[24002] = 1071450512;
inp[24003] = 0;
inp[24004] = 1071385118;
inp[24005] = 0;
inp[24006] = 1071319727;
inp[24007] = 0;
inp[24008] = 1071254341;
inp[24009] = 0;
inp[24010] = 1071188959;
inp[24011] = 0;
inp[24012] = 1071123581;
inp[24013] = 0;
inp[24014] = 1071058207;
inp[24015] = 0;
inp[24016] = 1070992836;
inp[24017] = 0;
inp[24018] = 1070927470;
inp[24019] = 0;
inp[24020] = 1070862108;
inp[24021] = 0;
inp[24022] = 1070796750;
inp[24023] = 0;
inp[24024] = 1070731396;
inp[24025] = 0;
inp[24026] = 1070666045;
inp[24027] = 0;
inp[24028] = 1070600699;
inp[24029] = 0;
inp[24030] = 1070535357;
inp[24031] = 0;
inp[24032] = 1070470018;
inp[24033] = 0;
inp[24034] = 1070404684;
inp[24035] = 0;
inp[24036] = 1070339354;
inp[24037] = 0;
inp[24038] = 1070274027;
inp[24039] = 0;
inp[24040] = 1070208705;
inp[24041] = 0;
inp[24042] = 1070143387;
inp[24043] = 0;
inp[24044] = 1070078072;
inp[24045] = 0;
inp[24046] = 1070012762;
inp[24047] = 0;
inp[24048] = 1069947456;
inp[24049] = 0;
inp[24050] = 1069882153;
inp[24051] = 0;
inp[24052] = 1069816855;
inp[24053] = 0;
inp[24054] = 1069751560;
inp[24055] = 0;
inp[24056] = 1069686270;
inp[24057] = 0;
inp[24058] = 1069620983;
inp[24059] = 0;
inp[24060] = 1069555701;
inp[24061] = 0;
inp[24062] = 1069490422;
inp[24063] = 0;
inp[24064] = 1069425148;
inp[24065] = 0;
inp[24066] = 1069359877;
inp[24067] = 0;
inp[24068] = 1069294611;
inp[24069] = 0;
inp[24070] = 1069229348;
inp[24071] = 0;
inp[24072] = 1069164090;
inp[24073] = 0;
inp[24074] = 1069098835;
inp[24075] = 0;
inp[24076] = 1069033584;
inp[24077] = 0;
inp[24078] = 1068968338;
inp[24079] = 0;
inp[24080] = 1068903095;
inp[24081] = 0;
inp[24082] = 1068837856;
inp[24083] = 0;
inp[24084] = 1068772622;
inp[24085] = 0;
inp[24086] = 1068707391;
inp[24087] = 0;
inp[24088] = 1068642164;
inp[24089] = 0;
inp[24090] = 1068576941;
inp[24091] = 0;
inp[24092] = 1068511723;
inp[24093] = 0;
inp[24094] = 1068446508;
inp[24095] = 0;
inp[24096] = 1068381297;
inp[24097] = 0;
inp[24098] = 1068316090;
inp[24099] = 0;
inp[24100] = 1068250887;
inp[24101] = 0;
inp[24102] = 1068185689;
inp[24103] = 0;
inp[24104] = 1068120494;
inp[24105] = 0;
inp[24106] = 1068055303;
inp[24107] = 0;
inp[24108] = 1067990116;
inp[24109] = 0;
inp[24110] = 1067924933;
inp[24111] = 0;
inp[24112] = 1067859754;
inp[24113] = 0;
inp[24114] = 1067794579;
inp[24115] = 0;
inp[24116] = 1067729408;
inp[24117] = 0;
inp[24118] = 1067664241;
inp[24119] = 0;
inp[24120] = 1067599078;
inp[24121] = 0;
inp[24122] = 1067533919;
inp[24123] = 0;
inp[24124] = 1067468764;
inp[24125] = 0;
inp[24126] = 1067403612;
inp[24127] = 0;
inp[24128] = 1067338465;
inp[24129] = 0;
inp[24130] = 1067273322;
inp[24131] = 0;
inp[24132] = 1067208183;
inp[24133] = 0;
inp[24134] = 1067143048;
inp[24135] = 0;
inp[24136] = 1067077916;
inp[24137] = 0;
inp[24138] = 1067012789;
inp[24139] = 0;
inp[24140] = 1066947666;
inp[24141] = 0;
inp[24142] = 1066882546;
inp[24143] = 0;
inp[24144] = 1066817431;
inp[24145] = 0;
inp[24146] = 1066752320;
inp[24147] = 0;
inp[24148] = 1066687212;
inp[24149] = 0;
inp[24150] = 1066622109;
inp[24151] = 0;
inp[24152] = 1066557009;
inp[24153] = 0;
inp[24154] = 1066491914;
inp[24155] = 0;
inp[24156] = 1066426822;
inp[24157] = 0;
inp[24158] = 1066361735;
inp[24159] = 0;
inp[24160] = 1066296651;
inp[24161] = 0;
inp[24162] = 1066231572;
inp[24163] = 0;
inp[24164] = 1066166496;
inp[24165] = 0;
inp[24166] = 1066101424;
inp[24167] = 0;
inp[24168] = 1066036357;
inp[24169] = 0;
inp[24170] = 1065971293;
inp[24171] = 0;
inp[24172] = 1065906233;
inp[24173] = 0;
inp[24174] = 1065841178;
inp[24175] = 0;
inp[24176] = 1065776126;
inp[24177] = 0;
inp[24178] = 1065711078;
inp[24179] = 0;
inp[24180] = 1065646034;
inp[24181] = 0;
inp[24182] = 1065580994;
inp[24183] = 0;
inp[24184] = 1065515958;
inp[24185] = 0;
inp[24186] = 1065450926;
inp[24187] = 0;
inp[24188] = 1065385898;
inp[24189] = 0;
inp[24190] = 1065320874;
inp[24191] = 0;
inp[24192] = 1065255854;
inp[24193] = 0;
inp[24194] = 1065190838;
inp[24195] = 0;
inp[24196] = 1065125826;
inp[24197] = 0;
inp[24198] = 1065060818;
inp[24199] = 0;
inp[24200] = 1064995814;
inp[24201] = 0;
inp[24202] = 1064930814;
inp[24203] = 0;
inp[24204] = 1064865817;
inp[24205] = 0;
inp[24206] = 1064800825;
inp[24207] = 0;
inp[24208] = 1064735837;
inp[24209] = 0;
inp[24210] = 1064670852;
inp[24211] = 0;
inp[24212] = 1064605872;
inp[24213] = 0;
inp[24214] = 1064540896;
inp[24215] = 0;
inp[24216] = 1064475923;
inp[24217] = 0;
inp[24218] = 1064410955;
inp[24219] = 0;
inp[24220] = 1064345990;
inp[24221] = 0;
inp[24222] = 1064281030;
inp[24223] = 0;
inp[24224] = 1064216073;
inp[24225] = 0;
inp[24226] = 1064151121;
inp[24227] = 0;
inp[24228] = 1064086172;
inp[24229] = 0;
inp[24230] = 1064021227;
inp[24231] = 0;
inp[24232] = 1063956286;
inp[24233] = 0;
inp[24234] = 1063891350;
inp[24235] = 0;
inp[24236] = 1063826417;
inp[24237] = 0;
inp[24238] = 1063761488;
inp[24239] = 0;
inp[24240] = 1063696563;
inp[24241] = 0;
inp[24242] = 1063631642;
inp[24243] = 0;
inp[24244] = 1063566725;
inp[24245] = 0;
inp[24246] = 1063501812;
inp[24247] = 0;
inp[24248] = 1063436903;
inp[24249] = 0;
inp[24250] = 1063371998;
inp[24251] = 0;
inp[24252] = 1063307097;
inp[24253] = 0;
inp[24254] = 1063242200;
inp[24255] = 0;
inp[24256] = 1063177307;
inp[24257] = 0;
inp[24258] = 1063112418;
inp[24259] = 0;
inp[24260] = 1063047532;
inp[24261] = 0;
inp[24262] = 1062982651;
inp[24263] = 0;
inp[24264] = 1062917774;
inp[24265] = 0;
inp[24266] = 1062852900;
inp[24267] = 0;
inp[24268] = 1062788031;
inp[24269] = 0;
inp[24270] = 1062723166;
inp[24271] = 0;
inp[24272] = 1062658304;
inp[24273] = 0;
inp[24274] = 1062593447;
inp[24275] = 0;
inp[24276] = 1062528593;
inp[24277] = 0;
inp[24278] = 1062463743;
inp[24279] = 0;
inp[24280] = 1062398898;
inp[24281] = 0;
inp[24282] = 1062334056;
inp[24283] = 0;
inp[24284] = 1062269218;
inp[24285] = 0;
inp[24286] = 1062204384;
inp[24287] = 0;
inp[24288] = 1062139555;
inp[24289] = 0;
inp[24290] = 1062074729;
inp[24291] = 0;
inp[24292] = 1062009907;
inp[24293] = 0;
inp[24294] = 1061945089;
inp[24295] = 0;
inp[24296] = 1061880275;
inp[24297] = 0;
inp[24298] = 1061815465;
inp[24299] = 0;
inp[24300] = 1061750659;
inp[24301] = 0;
inp[24302] = 1061685857;
inp[24303] = 0;
inp[24304] = 1061621058;
inp[24305] = 0;
inp[24306] = 1061556264;
inp[24307] = 0;
inp[24308] = 1061491474;
inp[24309] = 0;
inp[24310] = 1061426688;
inp[24311] = 0;
inp[24312] = 1061361905;
inp[24313] = 0;
inp[24314] = 1061297127;
inp[24315] = 0;
inp[24316] = 1061232352;
inp[24317] = 0;
inp[24318] = 1061167582;
inp[24319] = 0;
inp[24320] = 1061102815;
inp[24321] = 0;
inp[24322] = 1061038053;
inp[24323] = 0;
inp[24324] = 1060973294;
inp[24325] = 0;
inp[24326] = 1060908539;
inp[24327] = 0;
inp[24328] = 1060843789;
inp[24329] = 0;
inp[24330] = 1060779042;
inp[24331] = 0;
inp[24332] = 1060714299;
inp[24333] = 0;
inp[24334] = 1060649560;
inp[24335] = 0;
inp[24336] = 1060584825;
inp[24337] = 0;
inp[24338] = 1060520094;
inp[24339] = 0;
inp[24340] = 1060455367;
inp[24341] = 0;
inp[24342] = 1060390644;
inp[24343] = 0;
inp[24344] = 1060325925;
inp[24345] = 0;
inp[24346] = 1060261210;
inp[24347] = 0;
inp[24348] = 1060196498;
inp[24349] = 0;
inp[24350] = 1060131791;
inp[24351] = 0;
inp[24352] = 1060067088;
inp[24353] = 0;
inp[24354] = 1060002388;
inp[24355] = 0;
inp[24356] = 1059937693;
inp[24357] = 0;
inp[24358] = 1059873002;
inp[24359] = 0;
inp[24360] = 1059808314;
inp[24361] = 0;
inp[24362] = 1059743630;
inp[24363] = 0;
inp[24364] = 1059678951;
inp[24365] = 0;
inp[24366] = 1059614275;
inp[24367] = 0;
inp[24368] = 1059549603;
inp[24369] = 0;
inp[24370] = 1059484936;
inp[24371] = 0;
inp[24372] = 1059420272;
inp[24373] = 0;
inp[24374] = 1059355612;
inp[24375] = 0;
inp[24376] = 1059290956;
inp[24377] = 0;
inp[24378] = 1059226304;
inp[24379] = 0;
inp[24380] = 1059161656;
inp[24381] = 0;
inp[24382] = 1059097012;
inp[24383] = 0;
inp[24384] = 1059032371;
inp[24385] = 0;
inp[24386] = 1058967735;
inp[24387] = 0;
inp[24388] = 1058903103;
inp[24389] = 0;
inp[24390] = 1058838475;
inp[24391] = 0;
inp[24392] = 1058773850;
inp[24393] = 0;
inp[24394] = 1058709230;
inp[24395] = 0;
inp[24396] = 1058644613;
inp[24397] = 0;
inp[24398] = 1058580001;
inp[24399] = 0;
inp[24400] = 1058515392;
inp[24401] = 0;
inp[24402] = 1058450787;
inp[24403] = 0;
inp[24404] = 1058386187;
inp[24405] = 0;
inp[24406] = 1058321590;
inp[24407] = 0;
inp[24408] = 1058256997;
inp[24409] = 0;
inp[24410] = 1058192408;
inp[24411] = 0;
inp[24412] = 1058127823;
inp[24413] = 0;
inp[24414] = 1058063242;
inp[24415] = 0;
inp[24416] = 1057998665;
inp[24417] = 0;
inp[24418] = 1057934092;
inp[24419] = 0;
inp[24420] = 1057869523;
inp[24421] = 0;
inp[24422] = 1057804957;
inp[24423] = 0;
inp[24424] = 1057740396;
inp[24425] = 0;
inp[24426] = 1057675839;
inp[24427] = 0;
inp[24428] = 1057611285;
inp[24429] = 0;
inp[24430] = 1057546736;
inp[24431] = 0;
inp[24432] = 1057482190;
inp[24433] = 0;
inp[24434] = 1057417649;
inp[24435] = 0;
inp[24436] = 1057353111;
inp[24437] = 0;
inp[24438] = 1057288577;
inp[24439] = 0;
inp[24440] = 1057224047;
inp[24441] = 0;
inp[24442] = 1057159521;
inp[24443] = 0;
inp[24444] = 1073741824;
inp[24445] = 1073741824;
inp[24446] = 1073709056;
inp[24447] = 0;
inp[24448] = 1073676289;
inp[24449] = 0;
inp[24450] = 1073643524;
inp[24451] = 0;
inp[24452] = 1073610759;
inp[24453] = 0;
inp[24454] = 1073577996;
inp[24455] = 0;
inp[24456] = 1073545233;
inp[24457] = 0;
inp[24458] = 1073512472;
inp[24459] = 0;
inp[24460] = 1073479711;
inp[24461] = 0;
inp[24462] = 1073446952;
inp[24463] = 0;
inp[24464] = 1073414193;
inp[24465] = 0;
inp[24466] = 1073381436;
inp[24467] = 0;
inp[24468] = 1073348679;
inp[24469] = 0;
inp[24470] = 1073315924;
inp[24471] = 0;
inp[24472] = 1073283169;
inp[24473] = 0;
inp[24474] = 1073250416;
inp[24475] = 0;
inp[24476] = 1073217663;
inp[24477] = 0;
inp[24478] = 1073184912;
inp[24479] = 0;
inp[24480] = 1073152161;
inp[24481] = 0;
inp[24482] = 1073119412;
inp[24483] = 0;
inp[24484] = 1073086663;
inp[24485] = 0;
inp[24486] = 1073053916;
inp[24487] = 0;
inp[24488] = 1073021169;
inp[24489] = 0;
inp[24490] = 1072988424;
inp[24491] = 0;
inp[24492] = 1072955679;
inp[24493] = 0;
inp[24494] = 1072922936;
inp[24495] = 0;
inp[24496] = 1072890193;
inp[24497] = 0;
inp[24498] = 1072857452;
inp[24499] = 0;
inp[24500] = 1072824711;
inp[24501] = 0;
inp[24502] = 1072791972;
inp[24503] = 0;
inp[24504] = 1072759233;
inp[24505] = 0;
inp[24506] = 1072726496;
inp[24507] = 0;
inp[24508] = 1072693759;
inp[24509] = 0;
inp[24510] = 1072661024;
inp[24511] = 0;
inp[24512] = 1072628289;
inp[24513] = 0;
inp[24514] = 1072595556;
inp[24515] = 0;
inp[24516] = 1072562823;
inp[24517] = 0;
inp[24518] = 1072530092;
inp[24519] = 0;
inp[24520] = 1072497361;
inp[24521] = 0;
inp[24522] = 1072464632;
inp[24523] = 0;
inp[24524] = 1072431903;
inp[24525] = 0;
inp[24526] = 1072399176;
inp[24527] = 0;
inp[24528] = 1072366449;
inp[24529] = 0;
inp[24530] = 1072333724;
inp[24531] = 0;
inp[24532] = 1072300999;
inp[24533] = 0;
inp[24534] = 1072268276;
inp[24535] = 0;
inp[24536] = 1072235553;
inp[24537] = 0;
inp[24538] = 1072202831;
inp[24539] = 0;
inp[24540] = 1072170111;
inp[24541] = 0;
inp[24542] = 1072137391;
inp[24543] = 0;
inp[24544] = 1072104673;
inp[24545] = 0;
inp[24546] = 1072071955;
inp[24547] = 0;
inp[24548] = 1072039239;
inp[24549] = 0;
inp[24550] = 1072006523;
inp[24551] = 0;
inp[24552] = 1071973809;
inp[24553] = 0;
inp[24554] = 1071941095;
inp[24555] = 0;
inp[24556] = 1071908383;
inp[24557] = 0;
inp[24558] = 1071875671;
inp[24559] = 0;
inp[24560] = 1071842961;
inp[24561] = 0;
inp[24562] = 1071810251;
inp[24563] = 0;
inp[24564] = 1071777542;
inp[24565] = 0;
inp[24566] = 1071744835;
inp[24567] = 0;
inp[24568] = 1071712128;
inp[24569] = 0;
inp[24570] = 1071679423;
inp[24571] = 0;
inp[24572] = 1071646718;
inp[24573] = 0;
inp[24574] = 1071614015;
inp[24575] = 0;
inp[24576] = 1071581312;
inp[24577] = 0;
inp[24578] = 1071548610;
inp[24579] = 0;
inp[24580] = 1071515910;
inp[24581] = 0;
inp[24582] = 1071483210;
inp[24583] = 0;
inp[24584] = 1071450512;
inp[24585] = 0;
inp[24586] = 1071417814;
inp[24587] = 0;
inp[24588] = 1071385118;
inp[24589] = 0;
inp[24590] = 1071352422;
inp[24591] = 0;
inp[24592] = 1071319727;
inp[24593] = 0;
inp[24594] = 1071287034;
inp[24595] = 0;
inp[24596] = 1071254341;
inp[24597] = 0;
inp[24598] = 1071221650;
inp[24599] = 0;
inp[24600] = 1071188959;
inp[24601] = 0;
inp[24602] = 1071156269;
inp[24603] = 0;
inp[24604] = 1071123581;
inp[24605] = 0;
inp[24606] = 1071090893;
inp[24607] = 0;
inp[24608] = 1071058207;
inp[24609] = 0;
inp[24610] = 1071025521;
inp[24611] = 0;
inp[24612] = 1070992836;
inp[24613] = 0;
inp[24614] = 1070960153;
inp[24615] = 0;
inp[24616] = 1070927470;
inp[24617] = 0;
inp[24618] = 1070894789;
inp[24619] = 0;
inp[24620] = 1070862108;
inp[24621] = 0;
inp[24622] = 1070829428;
inp[24623] = 0;
inp[24624] = 1070796750;
inp[24625] = 0;
inp[24626] = 1070764072;
inp[24627] = 0;
inp[24628] = 1070731396;
inp[24629] = 0;
inp[24630] = 1070698720;
inp[24631] = 0;
inp[24632] = 1070666045;
inp[24633] = 0;
inp[24634] = 1070633372;
inp[24635] = 0;
inp[24636] = 1070600699;
inp[24637] = 0;
inp[24638] = 1070568027;
inp[24639] = 0;
inp[24640] = 1070535357;
inp[24641] = 0;
inp[24642] = 1070502687;
inp[24643] = 0;
inp[24644] = 1070470018;
inp[24645] = 0;
inp[24646] = 1070437351;
inp[24647] = 0;
inp[24648] = 1070404684;
inp[24649] = 0;
inp[24650] = 1070372018;
inp[24651] = 0;
inp[24652] = 1070339354;
inp[24653] = 0;
inp[24654] = 1070306690;
inp[24655] = 0;
inp[24656] = 1070274027;
inp[24657] = 0;
inp[24658] = 1070241366;
inp[24659] = 0;
inp[24660] = 1070208705;
inp[24661] = 0;
inp[24662] = 1070176045;
inp[24663] = 0;
inp[24664] = 1070143387;
inp[24665] = 0;
inp[24666] = 1070110729;
inp[24667] = 0;
inp[24668] = 1070078072;
inp[24669] = 0;
inp[24670] = 1070045417;
inp[24671] = 0;
inp[24672] = 1070012762;
inp[24673] = 0;
inp[24674] = 1069980108;
inp[24675] = 0;
inp[24676] = 1069947456;
inp[24677] = 0;
inp[24678] = 1069914804;
inp[24679] = 0;
inp[24680] = 1069882153;
inp[24681] = 0;
inp[24682] = 1069849503;
inp[24683] = 0;
inp[24684] = 1069816855;
inp[24685] = 0;
inp[24686] = 1069784207;
inp[24687] = 0;
inp[24688] = 1069751560;
inp[24689] = 0;
inp[24690] = 1069718915;
inp[24691] = 0;
inp[24692] = 1069686270;
inp[24693] = 0;
inp[24694] = 1069653626;
inp[24695] = 0;
inp[24696] = 1069620983;
inp[24697] = 0;
inp[24698] = 1069588342;
inp[24699] = 0;
inp[24700] = 1069555701;
inp[24701] = 0;
inp[24702] = 1069523061;
inp[24703] = 0;
inp[24704] = 1069490422;
inp[24705] = 0;
inp[24706] = 1069457785;
inp[24707] = 0;
inp[24708] = 1069425148;
inp[24709] = 0;
inp[24710] = 1069392512;
inp[24711] = 0;
inp[24712] = 1069359877;
inp[24713] = 0;
inp[24714] = 1069327243;
inp[24715] = 0;
inp[24716] = 1069294611;
inp[24717] = 0;
inp[24718] = 1069261979;
inp[24719] = 0;
inp[24720] = 1069229348;
inp[24721] = 0;
inp[24722] = 1069196718;
inp[24723] = 0;
inp[24724] = 1069164090;
inp[24725] = 0;
inp[24726] = 1069131462;
inp[24727] = 0;
inp[24728] = 1069098835;
inp[24729] = 0;
inp[24730] = 1069066209;
inp[24731] = 0;
inp[24732] = 1069033584;
inp[24733] = 0;
inp[24734] = 1069000961;
inp[24735] = 0;
inp[24736] = 1068968338;
inp[24737] = 0;
inp[24738] = 1068935716;
inp[24739] = 0;
inp[24740] = 1068903095;
inp[24741] = 0;
inp[24742] = 1068870475;
inp[24743] = 0;
inp[24744] = 1068837856;
inp[24745] = 0;
inp[24746] = 1068805239;
inp[24747] = 0;
inp[24748] = 1068772622;
inp[24749] = 0;
inp[24750] = 1068740006;
inp[24751] = 0;
inp[24752] = 1068707391;
inp[24753] = 0;
inp[24754] = 1068674777;
inp[24755] = 0;
inp[24756] = 1068642164;
inp[24757] = 0;
inp[24758] = 1068609552;
inp[24759] = 0;
inp[24760] = 1068576941;
inp[24761] = 0;
inp[24762] = 1068544332;
inp[24763] = 0;
inp[24764] = 1068511723;
inp[24765] = 0;
inp[24766] = 1068479115;
inp[24767] = 0;
inp[24768] = 1068446508;
inp[24769] = 0;
inp[24770] = 1068413902;
inp[24771] = 0;
inp[24772] = 1068381297;
inp[24773] = 0;
inp[24774] = 1068348693;
inp[24775] = 0;
inp[24776] = 1068316090;
inp[24777] = 0;
inp[24778] = 1068283488;
inp[24779] = 0;
inp[24780] = 1068250887;
inp[24781] = 0;
inp[24782] = 1068218287;
inp[24783] = 0;
inp[24784] = 1068185689;
inp[24785] = 0;
inp[24786] = 1068153091;
inp[24787] = 0;
inp[24788] = 1068120494;
inp[24789] = 0;
inp[24790] = 1068087898;
inp[24791] = 0;
inp[24792] = 1068055303;
inp[24793] = 0;
inp[24794] = 1068022709;
inp[24795] = 0;
inp[24796] = 1067990116;
inp[24797] = 0;
inp[24798] = 1067957524;
inp[24799] = 0;
inp[24800] = 1067924933;
inp[24801] = 0;
inp[24802] = 1067892343;
inp[24803] = 0;
inp[24804] = 1067859754;
inp[24805] = 0;
inp[24806] = 1067827166;
inp[24807] = 0;
inp[24808] = 1067794579;
inp[24809] = 0;
inp[24810] = 1067761993;
inp[24811] = 0;
inp[24812] = 1067729408;
inp[24813] = 0;
inp[24814] = 1067696824;
inp[24815] = 0;
inp[24816] = 1067664241;
inp[24817] = 0;
inp[24818] = 1067631659;
inp[24819] = 0;
inp[24820] = 1067599078;
inp[24821] = 0;
inp[24822] = 1067566498;
inp[24823] = 0;
inp[24824] = 1067533919;
inp[24825] = 0;
inp[24826] = 1067501341;
inp[24827] = 0;
inp[24828] = 1067468764;
inp[24829] = 0;
inp[24830] = 1067436187;
inp[24831] = 0;
inp[24832] = 1067403612;
inp[24833] = 0;
inp[24834] = 1067371038;
inp[24835] = 0;
inp[24836] = 1067338465;
inp[24837] = 0;
inp[24838] = 1067305893;
inp[24839] = 0;
inp[24840] = 1067273322;
inp[24841] = 0;
inp[24842] = 1067240752;
inp[24843] = 0;
inp[24844] = 1067208183;
inp[24845] = 0;
inp[24846] = 1067175615;
inp[24847] = 0;
inp[24848] = 1067143048;
inp[24849] = 0;
inp[24850] = 1067110482;
inp[24851] = 0;
inp[24852] = 1067077916;
inp[24853] = 0;
inp[24854] = 1067045352;
inp[24855] = 0;
inp[24856] = 1067012789;
inp[24857] = 0;
inp[24858] = 1066980227;
inp[24859] = 0;
inp[24860] = 1066947666;
inp[24861] = 0;
inp[24862] = 1066915106;
inp[24863] = 0;
inp[24864] = 1066882546;
inp[24865] = 0;
inp[24866] = 1066849988;
inp[24867] = 0;
inp[24868] = 1066817431;
inp[24869] = 0;
inp[24870] = 1066784875;
inp[24871] = 0;
inp[24872] = 1066752320;
inp[24873] = 0;
inp[24874] = 1066719766;
inp[24875] = 0;
inp[24876] = 1066687212;
inp[24877] = 0;
inp[24878] = 1066654660;
inp[24879] = 0;
inp[24880] = 1066622109;
inp[24881] = 0;
inp[24882] = 1066589559;
inp[24883] = 0;
inp[24884] = 1066557009;
inp[24885] = 0;
inp[24886] = 1066524461;
inp[24887] = 0;
inp[24888] = 1066491914;
inp[24889] = 0;
inp[24890] = 1066459368;
inp[24891] = 0;
inp[24892] = 1066426822;
inp[24893] = 0;
inp[24894] = 1066394278;
inp[24895] = 0;
inp[24896] = 1066361735;
inp[24897] = 0;
inp[24898] = 1066329193;
inp[24899] = 0;
inp[24900] = 1066296651;
inp[24901] = 0;
inp[24902] = 1066264111;
inp[24903] = 0;
inp[24904] = 1066231572;
inp[24905] = 0;
inp[24906] = 1066199033;
inp[24907] = 0;
inp[24908] = 1066166496;
inp[24909] = 0;
inp[24910] = 1066133960;
inp[24911] = 0;
inp[24912] = 1066101424;
inp[24913] = 0;
inp[24914] = 1066068890;
inp[24915] = 0;
inp[24916] = 1066036357;
inp[24917] = 0;
inp[24918] = 1066003824;
inp[24919] = 0;
inp[24920] = 1065971293;
inp[24921] = 0;
inp[24922] = 1065938763;
inp[24923] = 0;
inp[24924] = 1065906233;
inp[24925] = 0;
inp[24926] = 1065873705;
inp[24927] = 0;
inp[24928] = 1065841178;
inp[24929] = 0;
inp[24930] = 1065808651;
inp[24931] = 0;
inp[24932] = 1065776126;
inp[24933] = 0;
inp[24934] = 1065743601;
inp[24935] = 0;
inp[24936] = 1065711078;
inp[24937] = 0;
inp[24938] = 1065678555;
inp[24939] = 0;
inp[24940] = 1065646034;
inp[24941] = 0;
inp[24942] = 1065613514;
inp[24943] = 0;
inp[24944] = 1065580994;
inp[24945] = 0;
inp[24946] = 1065548476;
inp[24947] = 0;
inp[24948] = 1065515958;
inp[24949] = 0;
inp[24950] = 1065483442;
inp[24951] = 0;
inp[24952] = 1065450926;
inp[24953] = 0;
inp[24954] = 1065418412;
inp[24955] = 0;
inp[24956] = 1073741824;
inp[24957] = 1073741824;
inp[24958] = 1073725440;
inp[24959] = 0;
inp[24960] = 1073709056;
inp[24961] = 0;
inp[24962] = 1073692673;
inp[24963] = 0;
inp[24964] = 1073676289;
inp[24965] = 0;
inp[24966] = 1073659907;
inp[24967] = 0;
inp[24968] = 1073643524;
inp[24969] = 0;
inp[24970] = 1073627142;
inp[24971] = 0;
inp[24972] = 1073610759;
inp[24973] = 0;
inp[24974] = 1073594378;
inp[24975] = 0;
inp[24976] = 1073577996;
inp[24977] = 0;
inp[24978] = 1073561615;
inp[24979] = 0;
inp[24980] = 1073545233;
inp[24981] = 0;
inp[24982] = 1073528853;
inp[24983] = 0;
inp[24984] = 1073512472;
inp[24985] = 0;
inp[24986] = 1073496092;
inp[24987] = 0;
inp[24988] = 1073479711;
inp[24989] = 0;
inp[24990] = 1073463332;
inp[24991] = 0;
inp[24992] = 1073446952;
inp[24993] = 0;
inp[24994] = 1073430573;
inp[24995] = 0;
inp[24996] = 1073414193;
inp[24997] = 0;
inp[24998] = 1073397815;
inp[24999] = 0;
inp[25000] = 1073381436;
inp[25001] = 0;
inp[25002] = 1073365058;
inp[25003] = 0;
inp[25004] = 1073348679;
inp[25005] = 0;
inp[25006] = 1073332302;
inp[25007] = 0;
inp[25008] = 1073315924;
inp[25009] = 0;
inp[25010] = 1073299547;
inp[25011] = 0;
inp[25012] = 1073283169;
inp[25013] = 0;
inp[25014] = 1073266793;
inp[25015] = 0;
inp[25016] = 1073250416;
inp[25017] = 0;
inp[25018] = 1073234040;
inp[25019] = 0;
inp[25020] = 1073217663;
inp[25021] = 0;
inp[25022] = 1073201288;
inp[25023] = 0;
inp[25024] = 1073184912;
inp[25025] = 0;
inp[25026] = 1073168537;
inp[25027] = 0;
inp[25028] = 1073152161;
inp[25029] = 0;
inp[25030] = 1073135787;
inp[25031] = 0;
inp[25032] = 1073119412;
inp[25033] = 0;
inp[25034] = 1073103038;
inp[25035] = 0;
inp[25036] = 1073086663;
inp[25037] = 0;
inp[25038] = 1073070290;
inp[25039] = 0;
inp[25040] = 1073053916;
inp[25041] = 0;
inp[25042] = 1073037543;
inp[25043] = 0;
inp[25044] = 1073021169;
inp[25045] = 0;
inp[25046] = 1073004797;
inp[25047] = 0;
inp[25048] = 1072988424;
inp[25049] = 0;
inp[25050] = 1072972052;
inp[25051] = 0;
inp[25052] = 1072955679;
inp[25053] = 0;
inp[25054] = 1072939308;
inp[25055] = 0;
inp[25056] = 1072922936;
inp[25057] = 0;
inp[25058] = 1072906565;
inp[25059] = 0;
inp[25060] = 1072890193;
inp[25061] = 0;
inp[25062] = 1072873823;
inp[25063] = 0;
inp[25064] = 1072857452;
inp[25065] = 0;
inp[25066] = 1072841082;
inp[25067] = 0;
inp[25068] = 1072824711;
inp[25069] = 0;
inp[25070] = 1072808342;
inp[25071] = 0;
inp[25072] = 1072791972;
inp[25073] = 0;
inp[25074] = 1072775602;
inp[25075] = 0;
inp[25076] = 1072759233;
inp[25077] = 0;
inp[25078] = 1072742864;
inp[25079] = 0;
inp[25080] = 1072726496;
inp[25081] = 0;
inp[25082] = 1072710127;
inp[25083] = 0;
inp[25084] = 1072693759;
inp[25085] = 0;
inp[25086] = 1072677391;
inp[25087] = 0;
inp[25088] = 1072661024;
inp[25089] = 0;
inp[25090] = 1072644656;
inp[25091] = 0;
inp[25092] = 1072628289;
inp[25093] = 0;
inp[25094] = 1072611922;
inp[25095] = 0;
inp[25096] = 1072595556;
inp[25097] = 0;
inp[25098] = 1072579189;
inp[25099] = 0;
inp[25100] = 1072562823;
inp[25101] = 0;
inp[25102] = 1072546457;
inp[25103] = 0;
inp[25104] = 1072530092;
inp[25105] = 0;
inp[25106] = 1072513726;
inp[25107] = 0;
inp[25108] = 1072497361;
inp[25109] = 0;
inp[25110] = 1072480996;
inp[25111] = 0;
inp[25112] = 1072464632;
inp[25113] = 0;
inp[25114] = 1072448267;
inp[25115] = 0;
inp[25116] = 1072431903;
inp[25117] = 0;
inp[25118] = 1072415539;
inp[25119] = 0;
inp[25120] = 1072399176;
inp[25121] = 0;
inp[25122] = 1072382812;
inp[25123] = 0;
inp[25124] = 1072366449;
inp[25125] = 0;
inp[25126] = 1072350086;
inp[25127] = 0;
inp[25128] = 1072333724;
inp[25129] = 0;
inp[25130] = 1072317361;
inp[25131] = 0;
inp[25132] = 1072300999;
inp[25133] = 0;
inp[25134] = 1072284637;
inp[25135] = 0;
inp[25136] = 1072268276;
inp[25137] = 0;
inp[25138] = 1072251914;
inp[25139] = 0;
inp[25140] = 1072235553;
inp[25141] = 0;
inp[25142] = 1072219192;
inp[25143] = 0;
inp[25144] = 1072202831;
inp[25145] = 0;
inp[25146] = 1072186471;
inp[25147] = 0;
inp[25148] = 1072170111;
inp[25149] = 0;
inp[25150] = 1072153751;
inp[25151] = 0;
inp[25152] = 1072137391;
inp[25153] = 0;
inp[25154] = 1072121032;
inp[25155] = 0;
inp[25156] = 1072104673;
inp[25157] = 0;
inp[25158] = 1072088314;
inp[25159] = 0;
inp[25160] = 1072071955;
inp[25161] = 0;
inp[25162] = 1072055597;
inp[25163] = 0;
inp[25164] = 1072039239;
inp[25165] = 0;
inp[25166] = 1072022881;
inp[25167] = 0;
inp[25168] = 1072006523;
inp[25169] = 0;
inp[25170] = 1071990166;
inp[25171] = 0;
inp[25172] = 1071973809;
inp[25173] = 0;
inp[25174] = 1071957452;
inp[25175] = 0;
inp[25176] = 1071941095;
inp[25177] = 0;
inp[25178] = 1071924739;
inp[25179] = 0;
inp[25180] = 1071908383;
inp[25181] = 0;
inp[25182] = 1071892027;
inp[25183] = 0;
inp[25184] = 1071875671;
inp[25185] = 0;
inp[25186] = 1071859316;
inp[25187] = 0;
inp[25188] = 1071842961;
inp[25189] = 0;
inp[25190] = 1071826606;
inp[25191] = 0;
inp[25192] = 1071810251;
inp[25193] = 0;
inp[25194] = 1071793897;
inp[25195] = 0;
inp[25196] = 1071777542;
inp[25197] = 0;
inp[25198] = 1071761188;
inp[25199] = 0;
inp[25200] = 1071744835;
inp[25201] = 0;
inp[25202] = 1071728481;
inp[25203] = 0;
inp[25204] = 1071712128;
inp[25205] = 0;
inp[25206] = 1071695775;
inp[25207] = 0;
inp[25208] = 1071679423;
inp[25209] = 0;
inp[25210] = 1071663070;
inp[25211] = 0;
inp[25212] = 1071646718;
inp[25213] = 0;
inp[25214] = 1071630366;
inp[25215] = 0;
inp[25216] = 1071614015;
inp[25217] = 0;
inp[25218] = 1071597663;
inp[25219] = 0;
inp[25220] = 1071581312;
inp[25221] = 0;
inp[25222] = 1071564961;
inp[25223] = 0;
inp[25224] = 1071548610;
inp[25225] = 0;
inp[25226] = 1071532260;
inp[25227] = 0;
inp[25228] = 1071515910;
inp[25229] = 0;
inp[25230] = 1071499560;
inp[25231] = 0;
inp[25232] = 1071483210;
inp[25233] = 0;
inp[25234] = 1071466861;
inp[25235] = 0;
inp[25236] = 1071450512;
inp[25237] = 0;
inp[25238] = 1071434163;
inp[25239] = 0;
inp[25240] = 1071417814;
inp[25241] = 0;
inp[25242] = 1071401466;
inp[25243] = 0;
inp[25244] = 1071385118;
inp[25245] = 0;
inp[25246] = 1071368770;
inp[25247] = 0;
inp[25248] = 1071352422;
inp[25249] = 0;
inp[25250] = 1071336075;
inp[25251] = 0;
inp[25252] = 1071319727;
inp[25253] = 0;
inp[25254] = 1071303381;
inp[25255] = 0;
inp[25256] = 1071287034;
inp[25257] = 0;
inp[25258] = 1071270687;
inp[25259] = 0;
inp[25260] = 1071254341;
inp[25261] = 0;
inp[25262] = 1071237995;
inp[25263] = 0;
inp[25264] = 1071221650;
inp[25265] = 0;
inp[25266] = 1071205304;
inp[25267] = 0;
inp[25268] = 1071188959;
inp[25269] = 0;
inp[25270] = 1071172614;
inp[25271] = 0;
inp[25272] = 1071156269;
inp[25273] = 0;
inp[25274] = 1071139925;
inp[25275] = 0;
inp[25276] = 1071123581;
inp[25277] = 0;
inp[25278] = 1071107237;
inp[25279] = 0;
inp[25280] = 1071090893;
inp[25281] = 0;
inp[25282] = 1071074550;
inp[25283] = 0;
inp[25284] = 1071058207;
inp[25285] = 0;
inp[25286] = 1071041864;
inp[25287] = 0;
inp[25288] = 1071025521;
inp[25289] = 0;
inp[25290] = 1071009179;
inp[25291] = 0;
inp[25292] = 1070992836;
inp[25293] = 0;
inp[25294] = 1070976495;
inp[25295] = 0;
inp[25296] = 1070960153;
inp[25297] = 0;
inp[25298] = 1070943811;
inp[25299] = 0;
inp[25300] = 1070927470;
inp[25301] = 0;
inp[25302] = 1070911129;
inp[25303] = 0;
inp[25304] = 1070894789;
inp[25305] = 0;
inp[25306] = 1070878448;
inp[25307] = 0;
inp[25308] = 1070862108;
inp[25309] = 0;
inp[25310] = 1070845768;
inp[25311] = 0;
inp[25312] = 1070829428;
inp[25313] = 0;
inp[25314] = 1070813089;
inp[25315] = 0;
inp[25316] = 1070796750;
inp[25317] = 0;
inp[25318] = 1070780411;
inp[25319] = 0;
inp[25320] = 1070764072;
inp[25321] = 0;
inp[25322] = 1070747734;
inp[25323] = 0;
inp[25324] = 1070731396;
inp[25325] = 0;
inp[25326] = 1070715058;
inp[25327] = 0;
inp[25328] = 1070698720;
inp[25329] = 0;
inp[25330] = 1070682382;
inp[25331] = 0;
inp[25332] = 1070666045;
inp[25333] = 0;
inp[25334] = 1070649708;
inp[25335] = 0;
inp[25336] = 1070633372;
inp[25337] = 0;
inp[25338] = 1070617035;
inp[25339] = 0;
inp[25340] = 1070600699;
inp[25341] = 0;
inp[25342] = 1070584363;
inp[25343] = 0;
inp[25344] = 1070568027;
inp[25345] = 0;
inp[25346] = 1070551692;
inp[25347] = 0;
inp[25348] = 1070535357;
inp[25349] = 0;
inp[25350] = 1070519022;
inp[25351] = 0;
inp[25352] = 1070502687;
inp[25353] = 0;
inp[25354] = 1070486353;
inp[25355] = 0;
inp[25356] = 1070470018;
inp[25357] = 0;
inp[25358] = 1070453684;
inp[25359] = 0;
inp[25360] = 1070437351;
inp[25361] = 0;
inp[25362] = 1070421017;
inp[25363] = 0;
inp[25364] = 1070404684;
inp[25365] = 0;
inp[25366] = 1070388351;
inp[25367] = 0;
inp[25368] = 1070372018;
inp[25369] = 0;
inp[25370] = 1070355686;
inp[25371] = 0;
inp[25372] = 1070339354;
inp[25373] = 0;
inp[25374] = 1070323022;
inp[25375] = 0;
inp[25376] = 1070306690;
inp[25377] = 0;
inp[25378] = 1070290359;
inp[25379] = 0;
inp[25380] = 1070274027;
inp[25381] = 0;
inp[25382] = 1070257696;
inp[25383] = 0;
inp[25384] = 1070241366;
inp[25385] = 0;
inp[25386] = 1070225035;
inp[25387] = 0;
inp[25388] = 1070208705;
inp[25389] = 0;
inp[25390] = 1070192375;
inp[25391] = 0;
inp[25392] = 1070176045;
inp[25393] = 0;
inp[25394] = 1070159716;
inp[25395] = 0;
inp[25396] = 1070143387;
inp[25397] = 0;
inp[25398] = 1070127058;
inp[25399] = 0;
inp[25400] = 1070110729;
inp[25401] = 0;
inp[25402] = 1070094401;
inp[25403] = 0;
inp[25404] = 1070078072;
inp[25405] = 0;
inp[25406] = 1070061744;
inp[25407] = 0;
inp[25408] = 1070045417;
inp[25409] = 0;
inp[25410] = 1070029089;
inp[25411] = 0;
inp[25412] = 1070012762;
inp[25413] = 0;
inp[25414] = 1069996435;
inp[25415] = 0;
inp[25416] = 1069980108;
inp[25417] = 0;
inp[25418] = 1069963782;
inp[25419] = 0;
inp[25420] = 1069947456;
inp[25421] = 0;
inp[25422] = 1069931130;
inp[25423] = 0;
inp[25424] = 1069914804;
inp[25425] = 0;
inp[25426] = 1069898478;
inp[25427] = 0;
inp[25428] = 1069882153;
inp[25429] = 0;
inp[25430] = 1069865828;
inp[25431] = 0;
inp[25432] = 1069849503;
inp[25433] = 0;
inp[25434] = 1069833179;
inp[25435] = 0;
inp[25436] = 1069816855;
inp[25437] = 0;
inp[25438] = 1069800531;
inp[25439] = 0;
inp[25440] = 1069784207;
inp[25441] = 0;
inp[25442] = 1069767884;
inp[25443] = 0;
inp[25444] = 1069751560;
inp[25445] = 0;
inp[25446] = 1069735237;
inp[25447] = 0;
inp[25448] = 1069718915;
inp[25449] = 0;
inp[25450] = 1069702592;
inp[25451] = 0;
inp[25452] = 1069686270;
inp[25453] = 0;
inp[25454] = 1069669948;
inp[25455] = 0;
inp[25456] = 1069653626;
inp[25457] = 0;
inp[25458] = 1069637305;
inp[25459] = 0;
inp[25460] = 1069620983;
inp[25461] = 0;
inp[25462] = 1069604662;
inp[25463] = 0;
inp[25464] = 1069588342;
inp[25465] = 0;
inp[25466] = 1069572021;
inp[25467] = 0;
inp[25468] = 1073741824;
inp[25469] = 1073741824;
inp[25470] = 1073733632;
inp[25471] = 0;
inp[25472] = 1073725440;
inp[25473] = 0;
inp[25474] = 1073717248;
inp[25475] = 0;
inp[25476] = 1073709056;
inp[25477] = 0;
inp[25478] = 1073700864;
inp[25479] = 0;
inp[25480] = 1073692673;
inp[25481] = 0;
inp[25482] = 1073684481;
inp[25483] = 0;
inp[25484] = 1073676289;
inp[25485] = 0;
inp[25486] = 1073668098;
inp[25487] = 0;
inp[25488] = 1073659907;
inp[25489] = 0;
inp[25490] = 1073651715;
inp[25491] = 0;
inp[25492] = 1073643524;
inp[25493] = 0;
inp[25494] = 1073635333;
inp[25495] = 0;
inp[25496] = 1073627142;
inp[25497] = 0;
inp[25498] = 1073618951;
inp[25499] = 0;
inp[25500] = 1073610759;
inp[25501] = 0;
inp[25502] = 1073602569;
inp[25503] = 0;
inp[25504] = 1073594378;
inp[25505] = 0;
inp[25506] = 1073586187;
inp[25507] = 0;
inp[25508] = 1073577996;
inp[25509] = 0;
inp[25510] = 1073569805;
inp[25511] = 0;
inp[25512] = 1073561615;
inp[25513] = 0;
inp[25514] = 1073553424;
inp[25515] = 0;
inp[25516] = 1073545233;
inp[25517] = 0;
inp[25518] = 1073537043;
inp[25519] = 0;
inp[25520] = 1073528853;
inp[25521] = 0;
inp[25522] = 1073520662;
inp[25523] = 0;
inp[25524] = 1073512472;
inp[25525] = 0;
inp[25526] = 1073504282;
inp[25527] = 0;
inp[25528] = 1073496092;
inp[25529] = 0;
inp[25530] = 1073487902;
inp[25531] = 0;
inp[25532] = 1073479711;
inp[25533] = 0;
inp[25534] = 1073471522;
inp[25535] = 0;
inp[25536] = 1073463332;
inp[25537] = 0;
inp[25538] = 1073455142;
inp[25539] = 0;
inp[25540] = 1073446952;
inp[25541] = 0;
inp[25542] = 1073438762;
inp[25543] = 0;
inp[25544] = 1073430573;
inp[25545] = 0;
inp[25546] = 1073422383;
inp[25547] = 0;
inp[25548] = 1073414193;
inp[25549] = 0;
inp[25550] = 1073406004;
inp[25551] = 0;
inp[25552] = 1073397815;
inp[25553] = 0;
inp[25554] = 1073389625;
inp[25555] = 0;
inp[25556] = 1073381436;
inp[25557] = 0;
inp[25558] = 1073373247;
inp[25559] = 0;
inp[25560] = 1073365058;
inp[25561] = 0;
inp[25562] = 1073356869;
inp[25563] = 0;
inp[25564] = 1073348679;
inp[25565] = 0;
inp[25566] = 1073340491;
inp[25567] = 0;
inp[25568] = 1073332302;
inp[25569] = 0;
inp[25570] = 1073324113;
inp[25571] = 0;
inp[25572] = 1073315924;
inp[25573] = 0;
inp[25574] = 1073307735;
inp[25575] = 0;
inp[25576] = 1073299547;
inp[25577] = 0;
inp[25578] = 1073291358;
inp[25579] = 0;
inp[25580] = 1073283169;
inp[25581] = 0;
inp[25582] = 1073274981;
inp[25583] = 0;
inp[25584] = 1073266793;
inp[25585] = 0;
inp[25586] = 1073258604;
inp[25587] = 0;
inp[25588] = 1073250416;
inp[25589] = 0;
inp[25590] = 1073242228;
inp[25591] = 0;
inp[25592] = 1073234040;
inp[25593] = 0;
inp[25594] = 1073225852;
inp[25595] = 0;
inp[25596] = 1073217663;
inp[25597] = 0;
inp[25598] = 1073209476;
inp[25599] = 0;
inp[25600] = 1073201288;
inp[25601] = 0;
inp[25602] = 1073193100;
inp[25603] = 0;
inp[25604] = 1073184912;
inp[25605] = 0;
inp[25606] = 1073176724;
inp[25607] = 0;
inp[25608] = 1073168537;
inp[25609] = 0;
inp[25610] = 1073160349;
inp[25611] = 0;
inp[25612] = 1073152161;
inp[25613] = 0;
inp[25614] = 1073143974;
inp[25615] = 0;
inp[25616] = 1073135787;
inp[25617] = 0;
inp[25618] = 1073127599;
inp[25619] = 0;
inp[25620] = 1073119412;
inp[25621] = 0;
inp[25622] = 1073111225;
inp[25623] = 0;
inp[25624] = 1073103038;
inp[25625] = 0;
inp[25626] = 1073094850;
inp[25627] = 0;
inp[25628] = 1073086663;
inp[25629] = 0;
inp[25630] = 1073078476;
inp[25631] = 0;
inp[25632] = 1073070290;
inp[25633] = 0;
inp[25634] = 1073062103;
inp[25635] = 0;
inp[25636] = 1073053916;
inp[25637] = 0;
inp[25638] = 1073045729;
inp[25639] = 0;
inp[25640] = 1073037543;
inp[25641] = 0;
inp[25642] = 1073029356;
inp[25643] = 0;
inp[25644] = 1073021169;
inp[25645] = 0;
inp[25646] = 1073012983;
inp[25647] = 0;
inp[25648] = 1073004797;
inp[25649] = 0;
inp[25650] = 1072996610;
inp[25651] = 0;
inp[25652] = 1072988424;
inp[25653] = 0;
inp[25654] = 1072980238;
inp[25655] = 0;
inp[25656] = 1072972052;
inp[25657] = 0;
inp[25658] = 1072963865;
inp[25659] = 0;
inp[25660] = 1072955679;
inp[25661] = 0;
inp[25662] = 1072947493;
inp[25663] = 0;
inp[25664] = 1072939308;
inp[25665] = 0;
inp[25666] = 1072931122;
inp[25667] = 0;
inp[25668] = 1072922936;
inp[25669] = 0;
inp[25670] = 1072914750;
inp[25671] = 0;
inp[25672] = 1072906565;
inp[25673] = 0;
inp[25674] = 1072898379;
inp[25675] = 0;
inp[25676] = 1072890193;
inp[25677] = 0;
inp[25678] = 1072882008;
inp[25679] = 0;
inp[25680] = 1072873823;
inp[25681] = 0;
inp[25682] = 1072865637;
inp[25683] = 0;
inp[25684] = 1072857452;
inp[25685] = 0;
inp[25686] = 1072849267;
inp[25687] = 0;
inp[25688] = 1072841082;
inp[25689] = 0;
inp[25690] = 1072832896;
inp[25691] = 0;
inp[25692] = 1072824711;
inp[25693] = 0;
inp[25694] = 1072816526;
inp[25695] = 0;
inp[25696] = 1072808342;
inp[25697] = 0;
inp[25698] = 1072800157;
inp[25699] = 0;
inp[25700] = 1072791972;
inp[25701] = 0;
inp[25702] = 1072783787;
inp[25703] = 0;
inp[25704] = 1072775602;
inp[25705] = 0;
inp[25706] = 1072767418;
inp[25707] = 0;
inp[25708] = 1072759233;
inp[25709] = 0;
inp[25710] = 1072751049;
inp[25711] = 0;
inp[25712] = 1072742864;
inp[25713] = 0;
inp[25714] = 1072734680;
inp[25715] = 0;
inp[25716] = 1072726496;
inp[25717] = 0;
inp[25718] = 1072718312;
inp[25719] = 0;
inp[25720] = 1072710127;
inp[25721] = 0;
inp[25722] = 1072701943;
inp[25723] = 0;
inp[25724] = 1072693759;
inp[25725] = 0;
inp[25726] = 1072685575;
inp[25727] = 0;
inp[25728] = 1072677391;
inp[25729] = 0;
inp[25730] = 1072669208;
inp[25731] = 0;
inp[25732] = 1072661024;
inp[25733] = 0;
inp[25734] = 1072652840;
inp[25735] = 0;
inp[25736] = 1072644656;
inp[25737] = 0;
inp[25738] = 1072636473;
inp[25739] = 0;
inp[25740] = 1072628289;
inp[25741] = 0;
inp[25742] = 1072620106;
inp[25743] = 0;
inp[25744] = 1072611922;
inp[25745] = 0;
inp[25746] = 1072603739;
inp[25747] = 0;
inp[25748] = 1072595556;
inp[25749] = 0;
inp[25750] = 1072587373;
inp[25751] = 0;
inp[25752] = 1072579189;
inp[25753] = 0;
inp[25754] = 1072571006;
inp[25755] = 0;
inp[25756] = 1072562823;
inp[25757] = 0;
inp[25758] = 1072554640;
inp[25759] = 0;
inp[25760] = 1072546457;
inp[25761] = 0;
inp[25762] = 1072538275;
inp[25763] = 0;
inp[25764] = 1072530092;
inp[25765] = 0;
inp[25766] = 1072521909;
inp[25767] = 0;
inp[25768] = 1072513726;
inp[25769] = 0;
inp[25770] = 1072505544;
inp[25771] = 0;
inp[25772] = 1072497361;
inp[25773] = 0;
inp[25774] = 1072489179;
inp[25775] = 0;
inp[25776] = 1072480996;
inp[25777] = 0;
inp[25778] = 1072472814;
inp[25779] = 0;
inp[25780] = 1072464632;
inp[25781] = 0;
inp[25782] = 1072456449;
inp[25783] = 0;
inp[25784] = 1072448267;
inp[25785] = 0;
inp[25786] = 1072440085;
inp[25787] = 0;
inp[25788] = 1072431903;
inp[25789] = 0;
inp[25790] = 1072423721;
inp[25791] = 0;
inp[25792] = 1072415539;
inp[25793] = 0;
inp[25794] = 1072407357;
inp[25795] = 0;
inp[25796] = 1072399176;
inp[25797] = 0;
inp[25798] = 1072390994;
inp[25799] = 0;
inp[25800] = 1072382812;
inp[25801] = 0;
inp[25802] = 1072374631;
inp[25803] = 0;
inp[25804] = 1072366449;
inp[25805] = 0;
inp[25806] = 1072358268;
inp[25807] = 0;
inp[25808] = 1072350086;
inp[25809] = 0;
inp[25810] = 1072341905;
inp[25811] = 0;
inp[25812] = 1072333724;
inp[25813] = 0;
inp[25814] = 1072325542;
inp[25815] = 0;
inp[25816] = 1072317361;
inp[25817] = 0;
inp[25818] = 1072309180;
inp[25819] = 0;
inp[25820] = 1072300999;
inp[25821] = 0;
inp[25822] = 1072292818;
inp[25823] = 0;
inp[25824] = 1072284637;
inp[25825] = 0;
inp[25826] = 1072276456;
inp[25827] = 0;
inp[25828] = 1072268276;
inp[25829] = 0;
inp[25830] = 1072260095;
inp[25831] = 0;
inp[25832] = 1072251914;
inp[25833] = 0;
inp[25834] = 1072243734;
inp[25835] = 0;
inp[25836] = 1072235553;
inp[25837] = 0;
inp[25838] = 1072227373;
inp[25839] = 0;
inp[25840] = 1072219192;
inp[25841] = 0;
inp[25842] = 1072211012;
inp[25843] = 0;
inp[25844] = 1072202831;
inp[25845] = 0;
inp[25846] = 1072194651;
inp[25847] = 0;
inp[25848] = 1072186471;
inp[25849] = 0;
inp[25850] = 1072178291;
inp[25851] = 0;
inp[25852] = 1072170111;
inp[25853] = 0;
inp[25854] = 1072161931;
inp[25855] = 0;
inp[25856] = 1072153751;
inp[25857] = 0;
inp[25858] = 1072145571;
inp[25859] = 0;
inp[25860] = 1072137391;
inp[25861] = 0;
inp[25862] = 1072129212;
inp[25863] = 0;
inp[25864] = 1072121032;
inp[25865] = 0;
inp[25866] = 1072112852;
inp[25867] = 0;
inp[25868] = 1072104673;
inp[25869] = 0;
inp[25870] = 1072096493;
inp[25871] = 0;
inp[25872] = 1072088314;
inp[25873] = 0;
inp[25874] = 1072080135;
inp[25875] = 0;
inp[25876] = 1072071955;
inp[25877] = 0;
inp[25878] = 1072063776;
inp[25879] = 0;
inp[25880] = 1072055597;
inp[25881] = 0;
inp[25882] = 1072047418;
inp[25883] = 0;
inp[25884] = 1072039239;
inp[25885] = 0;
inp[25886] = 1072031060;
inp[25887] = 0;
inp[25888] = 1072022881;
inp[25889] = 0;
inp[25890] = 1072014702;
inp[25891] = 0;
inp[25892] = 1072006523;
inp[25893] = 0;
inp[25894] = 1071998345;
inp[25895] = 0;
inp[25896] = 1071990166;
inp[25897] = 0;
inp[25898] = 1071981987;
inp[25899] = 0;
inp[25900] = 1071973809;
inp[25901] = 0;
inp[25902] = 1071965630;
inp[25903] = 0;
inp[25904] = 1071957452;
inp[25905] = 0;
inp[25906] = 1071949273;
inp[25907] = 0;
inp[25908] = 1071941095;
inp[25909] = 0;
inp[25910] = 1071932917;
inp[25911] = 0;
inp[25912] = 1071924739;
inp[25913] = 0;
inp[25914] = 1071916561;
inp[25915] = 0;
inp[25916] = 1071908383;
inp[25917] = 0;
inp[25918] = 1071900205;
inp[25919] = 0;
inp[25920] = 1071892027;
inp[25921] = 0;
inp[25922] = 1071883849;
inp[25923] = 0;
inp[25924] = 1071875671;
inp[25925] = 0;
inp[25926] = 1071867493;
inp[25927] = 0;
inp[25928] = 1071859316;
inp[25929] = 0;
inp[25930] = 1071851138;
inp[25931] = 0;
inp[25932] = 1071842961;
inp[25933] = 0;
inp[25934] = 1071834783;
inp[25935] = 0;
inp[25936] = 1071826606;
inp[25937] = 0;
inp[25938] = 1071818428;
inp[25939] = 0;
inp[25940] = 1071810251;
inp[25941] = 0;
inp[25942] = 1071802074;
inp[25943] = 0;
inp[25944] = 1071793897;
inp[25945] = 0;
inp[25946] = 1071785719;
inp[25947] = 0;
inp[25948] = 1071777542;
inp[25949] = 0;
inp[25950] = 1071769365;
inp[25951] = 0;
inp[25952] = 1071761188;
inp[25953] = 0;
inp[25954] = 1071753012;
inp[25955] = 0;
inp[25956] = 1071744835;
inp[25957] = 0;
inp[25958] = 1071736658;
inp[25959] = 0;
inp[25960] = 1071728481;
inp[25961] = 0;
inp[25962] = 1071720305;
inp[25963] = 0;
inp[25964] = 1071712128;
inp[25965] = 0;
inp[25966] = 1071703952;
inp[25967] = 0;
inp[25968] = 1071695775;
inp[25969] = 0;
inp[25970] = 1071687599;
inp[25971] = 0;
inp[25972] = 1071679423;
inp[25973] = 0;
inp[25974] = 1071671246;
inp[25975] = 0;
inp[25976] = 1071663070;
inp[25977] = 0;
inp[25978] = 1071654894;
inp[25979] = 0;
inp[25980] = 1073741824;
inp[25981] = 1073741824;
inp[25982] = 1073737728;
inp[25983] = 0;
inp[25984] = 1073733632;
inp[25985] = 0;
inp[25986] = 1073729536;
inp[25987] = 0;
inp[25988] = 1073725440;
inp[25989] = 0;
inp[25990] = 1073721344;
inp[25991] = 0;
inp[25992] = 1073717248;
inp[25993] = 0;
inp[25994] = 1073713152;
inp[25995] = 0;
inp[25996] = 1073709056;
inp[25997] = 0;
inp[25998] = 1073704960;
inp[25999] = 0;
inp[26000] = 1073700864;
inp[26001] = 0;
inp[26002] = 1073696768;
inp[26003] = 0;
inp[26004] = 1073692673;
inp[26005] = 0;
inp[26006] = 1073688577;
inp[26007] = 0;
inp[26008] = 1073684481;
inp[26009] = 0;
inp[26010] = 1073680385;
inp[26011] = 0;
inp[26012] = 1073676289;
inp[26013] = 0;
inp[26014] = 1073672194;
inp[26015] = 0;
inp[26016] = 1073668098;
inp[26017] = 0;
inp[26018] = 1073664002;
inp[26019] = 0;
inp[26020] = 1073659907;
inp[26021] = 0;
inp[26022] = 1073655811;
inp[26023] = 0;
inp[26024] = 1073651715;
inp[26025] = 0;
inp[26026] = 1073647620;
inp[26027] = 0;
inp[26028] = 1073643524;
inp[26029] = 0;
inp[26030] = 1073639428;
inp[26031] = 0;
inp[26032] = 1073635333;
inp[26033] = 0;
inp[26034] = 1073631237;
inp[26035] = 0;
inp[26036] = 1073627142;
inp[26037] = 0;
inp[26038] = 1073623046;
inp[26039] = 0;
inp[26040] = 1073618951;
inp[26041] = 0;
inp[26042] = 1073614855;
inp[26043] = 0;
inp[26044] = 1073610759;
inp[26045] = 0;
inp[26046] = 1073606664;
inp[26047] = 0;
inp[26048] = 1073602569;
inp[26049] = 0;
inp[26050] = 1073598473;
inp[26051] = 0;
inp[26052] = 1073594378;
inp[26053] = 0;
inp[26054] = 1073590282;
inp[26055] = 0;
inp[26056] = 1073586187;
inp[26057] = 0;
inp[26058] = 1073582091;
inp[26059] = 0;
inp[26060] = 1073577996;
inp[26061] = 0;
inp[26062] = 1073573901;
inp[26063] = 0;
inp[26064] = 1073569805;
inp[26065] = 0;
inp[26066] = 1073565710;
inp[26067] = 0;
inp[26068] = 1073561615;
inp[26069] = 0;
inp[26070] = 1073557519;
inp[26071] = 0;
inp[26072] = 1073553424;
inp[26073] = 0;
inp[26074] = 1073549329;
inp[26075] = 0;
inp[26076] = 1073545233;
inp[26077] = 0;
inp[26078] = 1073541138;
inp[26079] = 0;
inp[26080] = 1073537043;
inp[26081] = 0;
inp[26082] = 1073532948;
inp[26083] = 0;
inp[26084] = 1073528853;
inp[26085] = 0;
inp[26086] = 1073524757;
inp[26087] = 0;
inp[26088] = 1073520662;
inp[26089] = 0;
inp[26090] = 1073516567;
inp[26091] = 0;
inp[26092] = 1073512472;
inp[26093] = 0;
inp[26094] = 1073508377;
inp[26095] = 0;
inp[26096] = 1073504282;
inp[26097] = 0;
inp[26098] = 1073500187;
inp[26099] = 0;
inp[26100] = 1073496092;
inp[26101] = 0;
inp[26102] = 1073491997;
inp[26103] = 0;
inp[26104] = 1073487902;
inp[26105] = 0;
inp[26106] = 1073483807;
inp[26107] = 0;
inp[26108] = 1073479711;
inp[26109] = 0;
inp[26110] = 1073475617;
inp[26111] = 0;
inp[26112] = 1073471522;
inp[26113] = 0;
inp[26114] = 1073467427;
inp[26115] = 0;
inp[26116] = 1073463332;
inp[26117] = 0;
inp[26118] = 1073459237;
inp[26119] = 0;
inp[26120] = 1073455142;
inp[26121] = 0;
inp[26122] = 1073451047;
inp[26123] = 0;
inp[26124] = 1073446952;
inp[26125] = 0;
inp[26126] = 1073442857;
inp[26127] = 0;
inp[26128] = 1073438762;
inp[26129] = 0;
inp[26130] = 1073434667;
inp[26131] = 0;
inp[26132] = 1073430573;
inp[26133] = 0;
inp[26134] = 1073426478;
inp[26135] = 0;
inp[26136] = 1073422383;
inp[26137] = 0;
inp[26138] = 1073418288;
inp[26139] = 0;
inp[26140] = 1073414193;
inp[26141] = 0;
inp[26142] = 1073410099;
inp[26143] = 0;
inp[26144] = 1073406004;
inp[26145] = 0;
inp[26146] = 1073401909;
inp[26147] = 0;
inp[26148] = 1073397815;
inp[26149] = 0;
inp[26150] = 1073393720;
inp[26151] = 0;
inp[26152] = 1073389625;
inp[26153] = 0;
inp[26154] = 1073385531;
inp[26155] = 0;
inp[26156] = 1073381436;
inp[26157] = 0;
inp[26158] = 1073377341;
inp[26159] = 0;
inp[26160] = 1073373247;
inp[26161] = 0;
inp[26162] = 1073369152;
inp[26163] = 0;
inp[26164] = 1073365058;
inp[26165] = 0;
inp[26166] = 1073360963;
inp[26167] = 0;
inp[26168] = 1073356869;
inp[26169] = 0;
inp[26170] = 1073352774;
inp[26171] = 0;
inp[26172] = 1073348679;
inp[26173] = 0;
inp[26174] = 1073344585;
inp[26175] = 0;
inp[26176] = 1073340491;
inp[26177] = 0;
inp[26178] = 1073336396;
inp[26179] = 0;
inp[26180] = 1073332302;
inp[26181] = 0;
inp[26182] = 1073328207;
inp[26183] = 0;
inp[26184] = 1073324113;
inp[26185] = 0;
inp[26186] = 1073320018;
inp[26187] = 0;
inp[26188] = 1073315924;
inp[26189] = 0;
inp[26190] = 1073311830;
inp[26191] = 0;
inp[26192] = 1073307735;
inp[26193] = 0;
inp[26194] = 1073303641;
inp[26195] = 0;
inp[26196] = 1073299547;
inp[26197] = 0;
inp[26198] = 1073295452;
inp[26199] = 0;
inp[26200] = 1073291358;
inp[26201] = 0;
inp[26202] = 1073287264;
inp[26203] = 0;
inp[26204] = 1073283169;
inp[26205] = 0;
inp[26206] = 1073279075;
inp[26207] = 0;
inp[26208] = 1073274981;
inp[26209] = 0;
inp[26210] = 1073270887;
inp[26211] = 0;
inp[26212] = 1073266793;
inp[26213] = 0;
inp[26214] = 1073262698;
inp[26215] = 0;
inp[26216] = 1073258604;
inp[26217] = 0;
inp[26218] = 1073254510;
inp[26219] = 0;
inp[26220] = 1073250416;
inp[26221] = 0;
inp[26222] = 1073246322;
inp[26223] = 0;
inp[26224] = 1073242228;
inp[26225] = 0;
inp[26226] = 1073238134;
inp[26227] = 0;
inp[26228] = 1073234040;
inp[26229] = 0;
inp[26230] = 1073229946;
inp[26231] = 0;
inp[26232] = 1073225852;
inp[26233] = 0;
inp[26234] = 1073221757;
inp[26235] = 0;
inp[26236] = 1073217663;
inp[26237] = 0;
inp[26238] = 1073213569;
inp[26239] = 0;
inp[26240] = 1073209476;
inp[26241] = 0;
inp[26242] = 1073205382;
inp[26243] = 0;
inp[26244] = 1073201288;
inp[26245] = 0;
inp[26246] = 1073197194;
inp[26247] = 0;
inp[26248] = 1073193100;
inp[26249] = 0;
inp[26250] = 1073189006;
inp[26251] = 0;
inp[26252] = 1073184912;
inp[26253] = 0;
inp[26254] = 1073180818;
inp[26255] = 0;
inp[26256] = 1073176724;
inp[26257] = 0;
inp[26258] = 1073172630;
inp[26259] = 0;
inp[26260] = 1073168537;
inp[26261] = 0;
inp[26262] = 1073164443;
inp[26263] = 0;
inp[26264] = 1073160349;
inp[26265] = 0;
inp[26266] = 1073156255;
inp[26267] = 0;
inp[26268] = 1073152161;
inp[26269] = 0;
inp[26270] = 1073148068;
inp[26271] = 0;
inp[26272] = 1073143974;
inp[26273] = 0;
inp[26274] = 1073139880;
inp[26275] = 0;
inp[26276] = 1073135787;
inp[26277] = 0;
inp[26278] = 1073131693;
inp[26279] = 0;
inp[26280] = 1073127599;
inp[26281] = 0;
inp[26282] = 1073123506;
inp[26283] = 0;
inp[26284] = 1073119412;
inp[26285] = 0;
inp[26286] = 1073115318;
inp[26287] = 0;
inp[26288] = 1073111225;
inp[26289] = 0;
inp[26290] = 1073107131;
inp[26291] = 0;
inp[26292] = 1073103038;
inp[26293] = 0;
inp[26294] = 1073098944;
inp[26295] = 0;
inp[26296] = 1073094850;
inp[26297] = 0;
inp[26298] = 1073090757;
inp[26299] = 0;
inp[26300] = 1073086663;
inp[26301] = 0;
inp[26302] = 1073082570;
inp[26303] = 0;
inp[26304] = 1073078476;
inp[26305] = 0;
inp[26306] = 1073074383;
inp[26307] = 0;
inp[26308] = 1073070290;
inp[26309] = 0;
inp[26310] = 1073066196;
inp[26311] = 0;
inp[26312] = 1073062103;
inp[26313] = 0;
inp[26314] = 1073058009;
inp[26315] = 0;
inp[26316] = 1073053916;
inp[26317] = 0;
inp[26318] = 1073049823;
inp[26319] = 0;
inp[26320] = 1073045729;
inp[26321] = 0;
inp[26322] = 1073041636;
inp[26323] = 0;
inp[26324] = 1073037543;
inp[26325] = 0;
inp[26326] = 1073033449;
inp[26327] = 0;
inp[26328] = 1073029356;
inp[26329] = 0;
inp[26330] = 1073025263;
inp[26331] = 0;
inp[26332] = 1073021169;
inp[26333] = 0;
inp[26334] = 1073017076;
inp[26335] = 0;
inp[26336] = 1073012983;
inp[26337] = 0;
inp[26338] = 1073008890;
inp[26339] = 0;
inp[26340] = 1073004797;
inp[26341] = 0;
inp[26342] = 1073000703;
inp[26343] = 0;
inp[26344] = 1072996610;
inp[26345] = 0;
inp[26346] = 1072992517;
inp[26347] = 0;
inp[26348] = 1072988424;
inp[26349] = 0;
inp[26350] = 1072984331;
inp[26351] = 0;
inp[26352] = 1072980238;
inp[26353] = 0;
inp[26354] = 1072976145;
inp[26355] = 0;
inp[26356] = 1072972052;
inp[26357] = 0;
inp[26358] = 1072967959;
inp[26359] = 0;
inp[26360] = 1072963865;
inp[26361] = 0;
inp[26362] = 1072959772;
inp[26363] = 0;
inp[26364] = 1072955679;
inp[26365] = 0;
inp[26366] = 1072951586;
inp[26367] = 0;
inp[26368] = 1072947493;
inp[26369] = 0;
inp[26370] = 1072943400;
inp[26371] = 0;
inp[26372] = 1072939308;
inp[26373] = 0;
inp[26374] = 1072935215;
inp[26375] = 0;
inp[26376] = 1072931122;
inp[26377] = 0;
inp[26378] = 1072927029;
inp[26379] = 0;
inp[26380] = 1072922936;
inp[26381] = 0;
inp[26382] = 1072918843;
inp[26383] = 0;
inp[26384] = 1072914750;
inp[26385] = 0;
inp[26386] = 1072910657;
inp[26387] = 0;
inp[26388] = 1072906565;
inp[26389] = 0;
inp[26390] = 1072902472;
inp[26391] = 0;
inp[26392] = 1072898379;
inp[26393] = 0;
inp[26394] = 1072894286;
inp[26395] = 0;
inp[26396] = 1072890193;
inp[26397] = 0;
inp[26398] = 1072886101;
inp[26399] = 0;
inp[26400] = 1072882008;
inp[26401] = 0;
inp[26402] = 1072877915;
inp[26403] = 0;
inp[26404] = 1072873823;
inp[26405] = 0;
inp[26406] = 1072869730;
inp[26407] = 0;
inp[26408] = 1072865637;
inp[26409] = 0;
inp[26410] = 1072861545;
inp[26411] = 0;
inp[26412] = 1072857452;
inp[26413] = 0;
inp[26414] = 1072853359;
inp[26415] = 0;
inp[26416] = 1072849267;
inp[26417] = 0;
inp[26418] = 1072845174;
inp[26419] = 0;
inp[26420] = 1072841082;
inp[26421] = 0;
inp[26422] = 1072836989;
inp[26423] = 0;
inp[26424] = 1072832896;
inp[26425] = 0;
inp[26426] = 1072828804;
inp[26427] = 0;
inp[26428] = 1072824711;
inp[26429] = 0;
inp[26430] = 1072820619;
inp[26431] = 0;
inp[26432] = 1072816526;
inp[26433] = 0;
inp[26434] = 1072812434;
inp[26435] = 0;
inp[26436] = 1072808342;
inp[26437] = 0;
inp[26438] = 1072804249;
inp[26439] = 0;
inp[26440] = 1072800157;
inp[26441] = 0;
inp[26442] = 1072796064;
inp[26443] = 0;
inp[26444] = 1072791972;
inp[26445] = 0;
inp[26446] = 1072787880;
inp[26447] = 0;
inp[26448] = 1072783787;
inp[26449] = 0;
inp[26450] = 1072779695;
inp[26451] = 0;
inp[26452] = 1072775602;
inp[26453] = 0;
inp[26454] = 1072771510;
inp[26455] = 0;
inp[26456] = 1072767418;
inp[26457] = 0;
inp[26458] = 1072763326;
inp[26459] = 0;
inp[26460] = 1072759233;
inp[26461] = 0;
inp[26462] = 1072755141;
inp[26463] = 0;
inp[26464] = 1072751049;
inp[26465] = 0;
inp[26466] = 1072746957;
inp[26467] = 0;
inp[26468] = 1072742864;
inp[26469] = 0;
inp[26470] = 1072738772;
inp[26471] = 0;
inp[26472] = 1072734680;
inp[26473] = 0;
inp[26474] = 1072730588;
inp[26475] = 0;
inp[26476] = 1072726496;
inp[26477] = 0;
inp[26478] = 1072722404;
inp[26479] = 0;
inp[26480] = 1072718312;
inp[26481] = 0;
inp[26482] = 1072714220;
inp[26483] = 0;
inp[26484] = 1072710127;
inp[26485] = 0;
inp[26486] = 1072706035;
inp[26487] = 0;
inp[26488] = 1072701943;
inp[26489] = 0;
inp[26490] = 1072697851;
inp[26491] = 0;
inp[26492] = 1073741824;
inp[26493] = 1073741824;
inp[26494] = 1073739776;
inp[26495] = 0;
inp[26496] = 1073737728;
inp[26497] = 0;
inp[26498] = 1073735680;
inp[26499] = 0;
inp[26500] = 1073733632;
inp[26501] = 0;
inp[26502] = 1073731584;
inp[26503] = 0;
inp[26504] = 1073729536;
inp[26505] = 0;
inp[26506] = 1073727488;
inp[26507] = 0;
inp[26508] = 1073725440;
inp[26509] = 0;
inp[26510] = 1073723392;
inp[26511] = 0;
inp[26512] = 1073721344;
inp[26513] = 0;
inp[26514] = 1073719296;
inp[26515] = 0;
inp[26516] = 1073717248;
inp[26517] = 0;
inp[26518] = 1073715200;
inp[26519] = 0;
inp[26520] = 1073713152;
inp[26521] = 0;
inp[26522] = 1073711104;
inp[26523] = 0;
inp[26524] = 1073709056;
inp[26525] = 0;
inp[26526] = 1073707008;
inp[26527] = 0;
inp[26528] = 1073704960;
inp[26529] = 0;
inp[26530] = 1073702912;
inp[26531] = 0;
inp[26532] = 1073700864;
inp[26533] = 0;
inp[26534] = 1073698816;
inp[26535] = 0;
inp[26536] = 1073696768;
inp[26537] = 0;
inp[26538] = 1073694721;
inp[26539] = 0;
inp[26540] = 1073692673;
inp[26541] = 0;
inp[26542] = 1073690625;
inp[26543] = 0;
inp[26544] = 1073688577;
inp[26545] = 0;
inp[26546] = 1073686529;
inp[26547] = 0;
inp[26548] = 1073684481;
inp[26549] = 0;
inp[26550] = 1073682433;
inp[26551] = 0;
inp[26552] = 1073680385;
inp[26553] = 0;
inp[26554] = 1073678337;
inp[26555] = 0;
inp[26556] = 1073676289;
inp[26557] = 0;
inp[26558] = 1073674242;
inp[26559] = 0;
inp[26560] = 1073672194;
inp[26561] = 0;
inp[26562] = 1073670146;
inp[26563] = 0;
inp[26564] = 1073668098;
inp[26565] = 0;
inp[26566] = 1073666050;
inp[26567] = 0;
inp[26568] = 1073664002;
inp[26569] = 0;
inp[26570] = 1073661954;
inp[26571] = 0;
inp[26572] = 1073659907;
inp[26573] = 0;
inp[26574] = 1073657859;
inp[26575] = 0;
inp[26576] = 1073655811;
inp[26577] = 0;
inp[26578] = 1073653763;
inp[26579] = 0;
inp[26580] = 1073651715;
inp[26581] = 0;
inp[26582] = 1073649667;
inp[26583] = 0;
inp[26584] = 1073647620;
inp[26585] = 0;
inp[26586] = 1073645572;
inp[26587] = 0;
inp[26588] = 1073643524;
inp[26589] = 0;
inp[26590] = 1073641476;
inp[26591] = 0;
inp[26592] = 1073639428;
inp[26593] = 0;
inp[26594] = 1073637381;
inp[26595] = 0;
inp[26596] = 1073635333;
inp[26597] = 0;
inp[26598] = 1073633285;
inp[26599] = 0;
inp[26600] = 1073631237;
inp[26601] = 0;
inp[26602] = 1073629189;
inp[26603] = 0;
inp[26604] = 1073627142;
inp[26605] = 0;
inp[26606] = 1073625094;
inp[26607] = 0;
inp[26608] = 1073623046;
inp[26609] = 0;
inp[26610] = 1073620998;
inp[26611] = 0;
inp[26612] = 1073618951;
inp[26613] = 0;
inp[26614] = 1073616903;
inp[26615] = 0;
inp[26616] = 1073614855;
inp[26617] = 0;
inp[26618] = 1073612807;
inp[26619] = 0;
inp[26620] = 1073610759;
inp[26621] = 0;
inp[26622] = 1073608712;
inp[26623] = 0;
inp[26624] = 1073606664;
inp[26625] = 0;
inp[26626] = 1073604616;
inp[26627] = 0;
inp[26628] = 1073602569;
inp[26629] = 0;
inp[26630] = 1073600521;
inp[26631] = 0;
inp[26632] = 1073598473;
inp[26633] = 0;
inp[26634] = 1073596425;
inp[26635] = 0;
inp[26636] = 1073594378;
inp[26637] = 0;
inp[26638] = 1073592330;
inp[26639] = 0;
inp[26640] = 1073590282;
inp[26641] = 0;
inp[26642] = 1073588234;
inp[26643] = 0;
inp[26644] = 1073586187;
inp[26645] = 0;
inp[26646] = 1073584139;
inp[26647] = 0;
inp[26648] = 1073582091;
inp[26649] = 0;
inp[26650] = 1073580044;
inp[26651] = 0;
inp[26652] = 1073577996;
inp[26653] = 0;
inp[26654] = 1073575948;
inp[26655] = 0;
inp[26656] = 1073573901;
inp[26657] = 0;
inp[26658] = 1073571853;
inp[26659] = 0;
inp[26660] = 1073569805;
inp[26661] = 0;
inp[26662] = 1073567758;
inp[26663] = 0;
inp[26664] = 1073565710;
inp[26665] = 0;
inp[26666] = 1073563662;
inp[26667] = 0;
inp[26668] = 1073561615;
inp[26669] = 0;
inp[26670] = 1073559567;
inp[26671] = 0;
inp[26672] = 1073557519;
inp[26673] = 0;
inp[26674] = 1073555472;
inp[26675] = 0;
inp[26676] = 1073553424;
inp[26677] = 0;
inp[26678] = 1073551376;
inp[26679] = 0;
inp[26680] = 1073549329;
inp[26681] = 0;
inp[26682] = 1073547281;
inp[26683] = 0;
inp[26684] = 1073545233;
inp[26685] = 0;
inp[26686] = 1073543186;
inp[26687] = 0;
inp[26688] = 1073541138;
inp[26689] = 0;
inp[26690] = 1073539091;
inp[26691] = 0;
inp[26692] = 1073537043;
inp[26693] = 0;
inp[26694] = 1073534995;
inp[26695] = 0;
inp[26696] = 1073532948;
inp[26697] = 0;
inp[26698] = 1073530900;
inp[26699] = 0;
inp[26700] = 1073528853;
inp[26701] = 0;
inp[26702] = 1073526805;
inp[26703] = 0;
inp[26704] = 1073524757;
inp[26705] = 0;
inp[26706] = 1073522710;
inp[26707] = 0;
inp[26708] = 1073520662;
inp[26709] = 0;
inp[26710] = 1073518615;
inp[26711] = 0;
inp[26712] = 1073516567;
inp[26713] = 0;
inp[26714] = 1073514520;
inp[26715] = 0;
inp[26716] = 1073512472;
inp[26717] = 0;
inp[26718] = 1073510424;
inp[26719] = 0;
inp[26720] = 1073508377;
inp[26721] = 0;
inp[26722] = 1073506329;
inp[26723] = 0;
inp[26724] = 1073504282;
inp[26725] = 0;
inp[26726] = 1073502234;
inp[26727] = 0;
inp[26728] = 1073500187;
inp[26729] = 0;
inp[26730] = 1073498139;
inp[26731] = 0;
inp[26732] = 1073496092;
inp[26733] = 0;
inp[26734] = 1073494044;
inp[26735] = 0;
inp[26736] = 1073491997;
inp[26737] = 0;
inp[26738] = 1073489949;
inp[26739] = 0;
inp[26740] = 1073487902;
inp[26741] = 0;
inp[26742] = 1073485854;
inp[26743] = 0;
inp[26744] = 1073483807;
inp[26745] = 0;
inp[26746] = 1073481759;
inp[26747] = 0;
inp[26748] = 1073479711;
inp[26749] = 0;
inp[26750] = 1073477664;
inp[26751] = 0;
inp[26752] = 1073475617;
inp[26753] = 0;
inp[26754] = 1073473569;
inp[26755] = 0;
inp[26756] = 1073471522;
inp[26757] = 0;
inp[26758] = 1073469474;
inp[26759] = 0;
inp[26760] = 1073467427;
inp[26761] = 0;
inp[26762] = 1073465379;
inp[26763] = 0;
inp[26764] = 1073463332;
inp[26765] = 0;
inp[26766] = 1073461284;
inp[26767] = 0;
inp[26768] = 1073459237;
inp[26769] = 0;
inp[26770] = 1073457189;
inp[26771] = 0;
inp[26772] = 1073455142;
inp[26773] = 0;
inp[26774] = 1073453094;
inp[26775] = 0;
inp[26776] = 1073451047;
inp[26777] = 0;
inp[26778] = 1073448999;
inp[26779] = 0;
inp[26780] = 1073446952;
inp[26781] = 0;
inp[26782] = 1073444905;
inp[26783] = 0;
inp[26784] = 1073442857;
inp[26785] = 0;
inp[26786] = 1073440810;
inp[26787] = 0;
inp[26788] = 1073438762;
inp[26789] = 0;
inp[26790] = 1073436715;
inp[26791] = 0;
inp[26792] = 1073434667;
inp[26793] = 0;
inp[26794] = 1073432620;
inp[26795] = 0;
inp[26796] = 1073430573;
inp[26797] = 0;
inp[26798] = 1073428525;
inp[26799] = 0;
inp[26800] = 1073426478;
inp[26801] = 0;
inp[26802] = 1073424430;
inp[26803] = 0;
inp[26804] = 1073422383;
inp[26805] = 0;
inp[26806] = 1073420336;
inp[26807] = 0;
inp[26808] = 1073418288;
inp[26809] = 0;
inp[26810] = 1073416241;
inp[26811] = 0;
inp[26812] = 1073414193;
inp[26813] = 0;
inp[26814] = 1073412146;
inp[26815] = 0;
inp[26816] = 1073410099;
inp[26817] = 0;
inp[26818] = 1073408051;
inp[26819] = 0;
inp[26820] = 1073406004;
inp[26821] = 0;
inp[26822] = 1073403957;
inp[26823] = 0;
inp[26824] = 1073401909;
inp[26825] = 0;
inp[26826] = 1073399862;
inp[26827] = 0;
inp[26828] = 1073397815;
inp[26829] = 0;
inp[26830] = 1073395767;
inp[26831] = 0;
inp[26832] = 1073393720;
inp[26833] = 0;
inp[26834] = 1073391673;
inp[26835] = 0;
inp[26836] = 1073389625;
inp[26837] = 0;
inp[26838] = 1073387578;
inp[26839] = 0;
inp[26840] = 1073385531;
inp[26841] = 0;
inp[26842] = 1073383483;
inp[26843] = 0;
inp[26844] = 1073381436;
inp[26845] = 0;
inp[26846] = 1073379389;
inp[26847] = 0;
inp[26848] = 1073377341;
inp[26849] = 0;
inp[26850] = 1073375294;
inp[26851] = 0;
inp[26852] = 1073373247;
inp[26853] = 0;
inp[26854] = 1073371199;
inp[26855] = 0;
inp[26856] = 1073369152;
inp[26857] = 0;
inp[26858] = 1073367105;
inp[26859] = 0;
inp[26860] = 1073365058;
inp[26861] = 0;
inp[26862] = 1073363010;
inp[26863] = 0;
inp[26864] = 1073360963;
inp[26865] = 0;
inp[26866] = 1073358916;
inp[26867] = 0;
inp[26868] = 1073356869;
inp[26869] = 0;
inp[26870] = 1073354821;
inp[26871] = 0;
inp[26872] = 1073352774;
inp[26873] = 0;
inp[26874] = 1073350727;
inp[26875] = 0;
inp[26876] = 1073348679;
inp[26877] = 0;
inp[26878] = 1073346632;
inp[26879] = 0;
inp[26880] = 1073344585;
inp[26881] = 0;
inp[26882] = 1073342538;
inp[26883] = 0;
inp[26884] = 1073340491;
inp[26885] = 0;
inp[26886] = 1073338443;
inp[26887] = 0;
inp[26888] = 1073336396;
inp[26889] = 0;
inp[26890] = 1073334349;
inp[26891] = 0;
inp[26892] = 1073332302;
inp[26893] = 0;
inp[26894] = 1073330254;
inp[26895] = 0;
inp[26896] = 1073328207;
inp[26897] = 0;
inp[26898] = 1073326160;
inp[26899] = 0;
inp[26900] = 1073324113;
inp[26901] = 0;
inp[26902] = 1073322066;
inp[26903] = 0;
inp[26904] = 1073320018;
inp[26905] = 0;
inp[26906] = 1073317971;
inp[26907] = 0;
inp[26908] = 1073315924;
inp[26909] = 0;
inp[26910] = 1073313877;
inp[26911] = 0;
inp[26912] = 1073311830;
inp[26913] = 0;
inp[26914] = 1073309782;
inp[26915] = 0;
inp[26916] = 1073307735;
inp[26917] = 0;
inp[26918] = 1073305688;
inp[26919] = 0;
inp[26920] = 1073303641;
inp[26921] = 0;
inp[26922] = 1073301594;
inp[26923] = 0;
inp[26924] = 1073299547;
inp[26925] = 0;
inp[26926] = 1073297499;
inp[26927] = 0;
inp[26928] = 1073295452;
inp[26929] = 0;
inp[26930] = 1073293405;
inp[26931] = 0;
inp[26932] = 1073291358;
inp[26933] = 0;
inp[26934] = 1073289311;
inp[26935] = 0;
inp[26936] = 1073287264;
inp[26937] = 0;
inp[26938] = 1073285217;
inp[26939] = 0;
inp[26940] = 1073283169;
inp[26941] = 0;
inp[26942] = 1073281122;
inp[26943] = 0;
inp[26944] = 1073279075;
inp[26945] = 0;
inp[26946] = 1073277028;
inp[26947] = 0;
inp[26948] = 1073274981;
inp[26949] = 0;
inp[26950] = 1073272934;
inp[26951] = 0;
inp[26952] = 1073270887;
inp[26953] = 0;
inp[26954] = 1073268840;
inp[26955] = 0;
inp[26956] = 1073266793;
inp[26957] = 0;
inp[26958] = 1073264746;
inp[26959] = 0;
inp[26960] = 1073262698;
inp[26961] = 0;
inp[26962] = 1073260651;
inp[26963] = 0;
inp[26964] = 1073258604;
inp[26965] = 0;
inp[26966] = 1073256557;
inp[26967] = 0;
inp[26968] = 1073254510;
inp[26969] = 0;
inp[26970] = 1073252463;
inp[26971] = 0;
inp[26972] = 1073250416;
inp[26973] = 0;
inp[26974] = 1073248369;
inp[26975] = 0;
inp[26976] = 1073246322;
inp[26977] = 0;
inp[26978] = 1073244275;
inp[26979] = 0;
inp[26980] = 1073242228;
inp[26981] = 0;
inp[26982] = 1073240181;
inp[26983] = 0;
inp[26984] = 1073238134;
inp[26985] = 0;
inp[26986] = 1073236087;
inp[26987] = 0;
inp[26988] = 1073234040;
inp[26989] = 0;
inp[26990] = 1073231993;
inp[26991] = 0;
inp[26992] = 1073229946;
inp[26993] = 0;
inp[26994] = 1073227899;
inp[26995] = 0;
inp[26996] = 1073225852;
inp[26997] = 0;
inp[26998] = 1073223804;
inp[26999] = 0;
inp[27000] = 1073221757;
inp[27001] = 0;
inp[27002] = 1073219710;
inp[27003] = 0;
inp[27004] = 1073741824;
inp[27005] = 1073741824;
inp[27006] = 1073740800;
inp[27007] = 0;
inp[27008] = 1073739776;
inp[27009] = 0;
inp[27010] = 1073738752;
inp[27011] = 0;
inp[27012] = 1073737728;
inp[27013] = 0;
inp[27014] = 1073736704;
inp[27015] = 0;
inp[27016] = 1073735680;
inp[27017] = 0;
inp[27018] = 1073734656;
inp[27019] = 0;
inp[27020] = 1073733632;
inp[27021] = 0;
inp[27022] = 1073732608;
inp[27023] = 0;
inp[27024] = 1073731584;
inp[27025] = 0;
inp[27026] = 1073730560;
inp[27027] = 0;
inp[27028] = 1073729536;
inp[27029] = 0;
inp[27030] = 1073728512;
inp[27031] = 0;
inp[27032] = 1073727488;
inp[27033] = 0;
inp[27034] = 1073726464;
inp[27035] = 0;
inp[27036] = 1073725440;
inp[27037] = 0;
inp[27038] = 1073724416;
inp[27039] = 0;
inp[27040] = 1073723392;
inp[27041] = 0;
inp[27042] = 1073722368;
inp[27043] = 0;
inp[27044] = 1073721344;
inp[27045] = 0;
inp[27046] = 1073720320;
inp[27047] = 0;
inp[27048] = 1073719296;
inp[27049] = 0;
inp[27050] = 1073718272;
inp[27051] = 0;
inp[27052] = 1073717248;
inp[27053] = 0;
inp[27054] = 1073716224;
inp[27055] = 0;
inp[27056] = 1073715200;
inp[27057] = 0;
inp[27058] = 1073714176;
inp[27059] = 0;
inp[27060] = 1073713152;
inp[27061] = 0;
inp[27062] = 1073712128;
inp[27063] = 0;
inp[27064] = 1073711104;
inp[27065] = 0;
inp[27066] = 1073710080;
inp[27067] = 0;
inp[27068] = 1073709056;
inp[27069] = 0;
inp[27070] = 1073708032;
inp[27071] = 0;
inp[27072] = 1073707008;
inp[27073] = 0;
inp[27074] = 1073705984;
inp[27075] = 0;
inp[27076] = 1073704960;
inp[27077] = 0;
inp[27078] = 1073703936;
inp[27079] = 0;
inp[27080] = 1073702912;
inp[27081] = 0;
inp[27082] = 1073701888;
inp[27083] = 0;
inp[27084] = 1073700864;
inp[27085] = 0;
inp[27086] = 1073699840;
inp[27087] = 0;
inp[27088] = 1073698816;
inp[27089] = 0;
inp[27090] = 1073697792;
inp[27091] = 0;
inp[27092] = 1073696768;
inp[27093] = 0;
inp[27094] = 1073695744;
inp[27095] = 0;
inp[27096] = 1073694721;
inp[27097] = 0;
inp[27098] = 1073693697;
inp[27099] = 0;
inp[27100] = 1073692673;
inp[27101] = 0;
inp[27102] = 1073691649;
inp[27103] = 0;
inp[27104] = 1073690625;
inp[27105] = 0;
inp[27106] = 1073689601;
inp[27107] = 0;
inp[27108] = 1073688577;
inp[27109] = 0;
inp[27110] = 1073687553;
inp[27111] = 0;
inp[27112] = 1073686529;
inp[27113] = 0;
inp[27114] = 1073685505;
inp[27115] = 0;
inp[27116] = 1073684481;
inp[27117] = 0;
inp[27118] = 1073683457;
inp[27119] = 0;
inp[27120] = 1073682433;
inp[27121] = 0;
inp[27122] = 1073681409;
inp[27123] = 0;
inp[27124] = 1073680385;
inp[27125] = 0;
inp[27126] = 1073679361;
inp[27127] = 0;
inp[27128] = 1073678337;
inp[27129] = 0;
inp[27130] = 1073677313;
inp[27131] = 0;
inp[27132] = 1073676289;
inp[27133] = 0;
inp[27134] = 1073675266;
inp[27135] = 0;
inp[27136] = 1073674242;
inp[27137] = 0;
inp[27138] = 1073673218;
inp[27139] = 0;
inp[27140] = 1073672194;
inp[27141] = 0;
inp[27142] = 1073671170;
inp[27143] = 0;
inp[27144] = 1073670146;
inp[27145] = 0;
inp[27146] = 1073669122;
inp[27147] = 0;
inp[27148] = 1073668098;
inp[27149] = 0;
inp[27150] = 1073667074;
inp[27151] = 0;
inp[27152] = 1073666050;
inp[27153] = 0;
inp[27154] = 1073665026;
inp[27155] = 0;
inp[27156] = 1073664002;
inp[27157] = 0;
inp[27158] = 1073662978;
inp[27159] = 0;
inp[27160] = 1073661954;
inp[27161] = 0;
inp[27162] = 1073660931;
inp[27163] = 0;
inp[27164] = 1073659907;
inp[27165] = 0;
inp[27166] = 1073658883;
inp[27167] = 0;
inp[27168] = 1073657859;
inp[27169] = 0;
inp[27170] = 1073656835;
inp[27171] = 0;
inp[27172] = 1073655811;
inp[27173] = 0;
inp[27174] = 1073654787;
inp[27175] = 0;
inp[27176] = 1073653763;
inp[27177] = 0;
inp[27178] = 1073652739;
inp[27179] = 0;
inp[27180] = 1073651715;
inp[27181] = 0;
inp[27182] = 1073650691;
inp[27183] = 0;
inp[27184] = 1073649667;
inp[27185] = 0;
inp[27186] = 1073648644;
inp[27187] = 0;
inp[27188] = 1073647620;
inp[27189] = 0;
inp[27190] = 1073646596;
inp[27191] = 0;
inp[27192] = 1073645572;
inp[27193] = 0;
inp[27194] = 1073644548;
inp[27195] = 0;
inp[27196] = 1073643524;
inp[27197] = 0;
inp[27198] = 1073642500;
inp[27199] = 0;
inp[27200] = 1073641476;
inp[27201] = 0;
inp[27202] = 1073640452;
inp[27203] = 0;
inp[27204] = 1073639428;
inp[27205] = 0;
inp[27206] = 1073638404;
inp[27207] = 0;
inp[27208] = 1073637381;
inp[27209] = 0;
inp[27210] = 1073636357;
inp[27211] = 0;
inp[27212] = 1073635333;
inp[27213] = 0;
inp[27214] = 1073634309;
inp[27215] = 0;
inp[27216] = 1073633285;
inp[27217] = 0;
inp[27218] = 1073632261;
inp[27219] = 0;
inp[27220] = 1073631237;
inp[27221] = 0;
inp[27222] = 1073630213;
inp[27223] = 0;
inp[27224] = 1073629189;
inp[27225] = 0;
inp[27226] = 1073628166;
inp[27227] = 0;
inp[27228] = 1073627142;
inp[27229] = 0;
inp[27230] = 1073626118;
inp[27231] = 0;
inp[27232] = 1073625094;
inp[27233] = 0;
inp[27234] = 1073624070;
inp[27235] = 0;
inp[27236] = 1073623046;
inp[27237] = 0;
inp[27238] = 1073622022;
inp[27239] = 0;
inp[27240] = 1073620998;
inp[27241] = 0;
inp[27242] = 1073619974;
inp[27243] = 0;
inp[27244] = 1073618951;
inp[27245] = 0;
inp[27246] = 1073617927;
inp[27247] = 0;
inp[27248] = 1073616903;
inp[27249] = 0;
inp[27250] = 1073615879;
inp[27251] = 0;
inp[27252] = 1073614855;
inp[27253] = 0;
inp[27254] = 1073613831;
inp[27255] = 0;
inp[27256] = 1073612807;
inp[27257] = 0;
inp[27258] = 1073611783;
inp[27259] = 0;
inp[27260] = 1073610759;
inp[27261] = 0;
inp[27262] = 1073609736;
inp[27263] = 0;
inp[27264] = 1073608712;
inp[27265] = 0;
inp[27266] = 1073607688;
inp[27267] = 0;
inp[27268] = 1073606664;
inp[27269] = 0;
inp[27270] = 1073605640;
inp[27271] = 0;
inp[27272] = 1073604616;
inp[27273] = 0;
inp[27274] = 1073603592;
inp[27275] = 0;
inp[27276] = 1073602569;
inp[27277] = 0;
inp[27278] = 1073601545;
inp[27279] = 0;
inp[27280] = 1073600521;
inp[27281] = 0;
inp[27282] = 1073599497;
inp[27283] = 0;
inp[27284] = 1073598473;
inp[27285] = 0;
inp[27286] = 1073597449;
inp[27287] = 0;
inp[27288] = 1073596425;
inp[27289] = 0;
inp[27290] = 1073595401;
inp[27291] = 0;
inp[27292] = 1073594378;
inp[27293] = 0;
inp[27294] = 1073593354;
inp[27295] = 0;
inp[27296] = 1073592330;
inp[27297] = 0;
inp[27298] = 1073591306;
inp[27299] = 0;
inp[27300] = 1073590282;
inp[27301] = 0;
inp[27302] = 1073589258;
inp[27303] = 0;
inp[27304] = 1073588234;
inp[27305] = 0;
inp[27306] = 1073587211;
inp[27307] = 0;
inp[27308] = 1073586187;
inp[27309] = 0;
inp[27310] = 1073585163;
inp[27311] = 0;
inp[27312] = 1073584139;
inp[27313] = 0;
inp[27314] = 1073583115;
inp[27315] = 0;
inp[27316] = 1073582091;
inp[27317] = 0;
inp[27318] = 1073581068;
inp[27319] = 0;
inp[27320] = 1073580044;
inp[27321] = 0;
inp[27322] = 1073579020;
inp[27323] = 0;
inp[27324] = 1073577996;
inp[27325] = 0;
inp[27326] = 1073576972;
inp[27327] = 0;
inp[27328] = 1073575948;
inp[27329] = 0;
inp[27330] = 1073574924;
inp[27331] = 0;
inp[27332] = 1073573901;
inp[27333] = 0;
inp[27334] = 1073572877;
inp[27335] = 0;
inp[27336] = 1073571853;
inp[27337] = 0;
inp[27338] = 1073570829;
inp[27339] = 0;
inp[27340] = 1073569805;
inp[27341] = 0;
inp[27342] = 1073568781;
inp[27343] = 0;
inp[27344] = 1073567758;
inp[27345] = 0;
inp[27346] = 1073566734;
inp[27347] = 0;
inp[27348] = 1073565710;
inp[27349] = 0;
inp[27350] = 1073564686;
inp[27351] = 0;
inp[27352] = 1073563662;
inp[27353] = 0;
inp[27354] = 1073562638;
inp[27355] = 0;
inp[27356] = 1073561615;
inp[27357] = 0;
inp[27358] = 1073560591;
inp[27359] = 0;
inp[27360] = 1073559567;
inp[27361] = 0;
inp[27362] = 1073558543;
inp[27363] = 0;
inp[27364] = 1073557519;
inp[27365] = 0;
inp[27366] = 1073556495;
inp[27367] = 0;
inp[27368] = 1073555472;
inp[27369] = 0;
inp[27370] = 1073554448;
inp[27371] = 0;
inp[27372] = 1073553424;
inp[27373] = 0;
inp[27374] = 1073552400;
inp[27375] = 0;
inp[27376] = 1073551376;
inp[27377] = 0;
inp[27378] = 1073550353;
inp[27379] = 0;
inp[27380] = 1073549329;
inp[27381] = 0;
inp[27382] = 1073548305;
inp[27383] = 0;
inp[27384] = 1073547281;
inp[27385] = 0;
inp[27386] = 1073546257;
inp[27387] = 0;
inp[27388] = 1073545233;
inp[27389] = 0;
inp[27390] = 1073544210;
inp[27391] = 0;
inp[27392] = 1073543186;
inp[27393] = 0;
inp[27394] = 1073542162;
inp[27395] = 0;
inp[27396] = 1073541138;
inp[27397] = 0;
inp[27398] = 1073540114;
inp[27399] = 0;
inp[27400] = 1073539091;
inp[27401] = 0;
inp[27402] = 1073538067;
inp[27403] = 0;
inp[27404] = 1073537043;
inp[27405] = 0;
inp[27406] = 1073536019;
inp[27407] = 0;
inp[27408] = 1073534995;
inp[27409] = 0;
inp[27410] = 1073533972;
inp[27411] = 0;
inp[27412] = 1073532948;
inp[27413] = 0;
inp[27414] = 1073531924;
inp[27415] = 0;
inp[27416] = 1073530900;
inp[27417] = 0;
inp[27418] = 1073529876;
inp[27419] = 0;
inp[27420] = 1073528853;
inp[27421] = 0;
inp[27422] = 1073527829;
inp[27423] = 0;
inp[27424] = 1073526805;
inp[27425] = 0;
inp[27426] = 1073525781;
inp[27427] = 0;
inp[27428] = 1073524757;
inp[27429] = 0;
inp[27430] = 1073523734;
inp[27431] = 0;
inp[27432] = 1073522710;
inp[27433] = 0;
inp[27434] = 1073521686;
inp[27435] = 0;
inp[27436] = 1073520662;
inp[27437] = 0;
inp[27438] = 1073519638;
inp[27439] = 0;
inp[27440] = 1073518615;
inp[27441] = 0;
inp[27442] = 1073517591;
inp[27443] = 0;
inp[27444] = 1073516567;
inp[27445] = 0;
inp[27446] = 1073515543;
inp[27447] = 0;
inp[27448] = 1073514520;
inp[27449] = 0;
inp[27450] = 1073513496;
inp[27451] = 0;
inp[27452] = 1073512472;
inp[27453] = 0;
inp[27454] = 1073511448;
inp[27455] = 0;
inp[27456] = 1073510424;
inp[27457] = 0;
inp[27458] = 1073509401;
inp[27459] = 0;
inp[27460] = 1073508377;
inp[27461] = 0;
inp[27462] = 1073507353;
inp[27463] = 0;
inp[27464] = 1073506329;
inp[27465] = 0;
inp[27466] = 1073505306;
inp[27467] = 0;
inp[27468] = 1073504282;
inp[27469] = 0;
inp[27470] = 1073503258;
inp[27471] = 0;
inp[27472] = 1073502234;
inp[27473] = 0;
inp[27474] = 1073501210;
inp[27475] = 0;
inp[27476] = 1073500187;
inp[27477] = 0;
inp[27478] = 1073499163;
inp[27479] = 0;
inp[27480] = 1073498139;
inp[27481] = 0;
inp[27482] = 1073497115;
inp[27483] = 0;
inp[27484] = 1073496092;
inp[27485] = 0;
inp[27486] = 1073495068;
inp[27487] = 0;
inp[27488] = 1073494044;
inp[27489] = 0;
inp[27490] = 1073493020;
inp[27491] = 0;
inp[27492] = 1073491997;
inp[27493] = 0;
inp[27494] = 1073490973;
inp[27495] = 0;
inp[27496] = 1073489949;
inp[27497] = 0;
inp[27498] = 1073488925;
inp[27499] = 0;
inp[27500] = 1073487902;
inp[27501] = 0;
inp[27502] = 1073486878;
inp[27503] = 0;
inp[27504] = 1073485854;
inp[27505] = 0;
inp[27506] = 1073484830;
inp[27507] = 0;
inp[27508] = 1073483807;
inp[27509] = 0;
inp[27510] = 1073482783;
inp[27511] = 0;
inp[27512] = 1073481759;
inp[27513] = 0;
inp[27514] = 1073480735;
inp[27515] = 0;
inp[27516] = 1073741824;
inp[27517] = 1073741824;
inp[27518] = 1073741312;
inp[27519] = 0;
inp[27520] = 1073740800;
inp[27521] = 0;
inp[27522] = 1073740288;
inp[27523] = 0;
inp[27524] = 1073739776;
inp[27525] = 0;
inp[27526] = 1073739264;
inp[27527] = 0;
inp[27528] = 1073738752;
inp[27529] = 0;
inp[27530] = 1073738240;
inp[27531] = 0;
inp[27532] = 1073737728;
inp[27533] = 0;
inp[27534] = 1073737216;
inp[27535] = 0;
inp[27536] = 1073736704;
inp[27537] = 0;
inp[27538] = 1073736192;
inp[27539] = 0;
inp[27540] = 1073735680;
inp[27541] = 0;
inp[27542] = 1073735168;
inp[27543] = 0;
inp[27544] = 1073734656;
inp[27545] = 0;
inp[27546] = 1073734144;
inp[27547] = 0;
inp[27548] = 1073733632;
inp[27549] = 0;
inp[27550] = 1073733120;
inp[27551] = 0;
inp[27552] = 1073732608;
inp[27553] = 0;
inp[27554] = 1073732096;
inp[27555] = 0;
inp[27556] = 1073731584;
inp[27557] = 0;
inp[27558] = 1073731072;
inp[27559] = 0;
inp[27560] = 1073730560;
inp[27561] = 0;
inp[27562] = 1073730048;
inp[27563] = 0;
inp[27564] = 1073729536;
inp[27565] = 0;
inp[27566] = 1073729024;
inp[27567] = 0;
inp[27568] = 1073728512;
inp[27569] = 0;
inp[27570] = 1073728000;
inp[27571] = 0;
inp[27572] = 1073727488;
inp[27573] = 0;
inp[27574] = 1073726976;
inp[27575] = 0;
inp[27576] = 1073726464;
inp[27577] = 0;
inp[27578] = 1073725952;
inp[27579] = 0;
inp[27580] = 1073725440;
inp[27581] = 0;
inp[27582] = 1073724928;
inp[27583] = 0;
inp[27584] = 1073724416;
inp[27585] = 0;
inp[27586] = 1073723904;
inp[27587] = 0;
inp[27588] = 1073723392;
inp[27589] = 0;
inp[27590] = 1073722880;
inp[27591] = 0;
inp[27592] = 1073722368;
inp[27593] = 0;
inp[27594] = 1073721856;
inp[27595] = 0;
inp[27596] = 1073721344;
inp[27597] = 0;
inp[27598] = 1073720832;
inp[27599] = 0;
inp[27600] = 1073720320;
inp[27601] = 0;
inp[27602] = 1073719808;
inp[27603] = 0;
inp[27604] = 1073719296;
inp[27605] = 0;
inp[27606] = 1073718784;
inp[27607] = 0;
inp[27608] = 1073718272;
inp[27609] = 0;
inp[27610] = 1073717760;
inp[27611] = 0;
inp[27612] = 1073717248;
inp[27613] = 0;
inp[27614] = 1073716736;
inp[27615] = 0;
inp[27616] = 1073716224;
inp[27617] = 0;
inp[27618] = 1073715712;
inp[27619] = 0;
inp[27620] = 1073715200;
inp[27621] = 0;
inp[27622] = 1073714688;
inp[27623] = 0;
inp[27624] = 1073714176;
inp[27625] = 0;
inp[27626] = 1073713664;
inp[27627] = 0;
inp[27628] = 1073713152;
inp[27629] = 0;
inp[27630] = 1073712640;
inp[27631] = 0;
inp[27632] = 1073712128;
inp[27633] = 0;
inp[27634] = 1073711616;
inp[27635] = 0;
inp[27636] = 1073711104;
inp[27637] = 0;
inp[27638] = 1073710592;
inp[27639] = 0;
inp[27640] = 1073710080;
inp[27641] = 0;
inp[27642] = 1073709568;
inp[27643] = 0;
inp[27644] = 1073709056;
inp[27645] = 0;
inp[27646] = 1073708544;
inp[27647] = 0;
inp[27648] = 1073708032;
inp[27649] = 0;
inp[27650] = 1073707520;
inp[27651] = 0;
inp[27652] = 1073707008;
inp[27653] = 0;
inp[27654] = 1073706496;
inp[27655] = 0;
inp[27656] = 1073705984;
inp[27657] = 0;
inp[27658] = 1073705472;
inp[27659] = 0;
inp[27660] = 1073704960;
inp[27661] = 0;
inp[27662] = 1073704448;
inp[27663] = 0;
inp[27664] = 1073703936;
inp[27665] = 0;
inp[27666] = 1073703424;
inp[27667] = 0;
inp[27668] = 1073702912;
inp[27669] = 0;
inp[27670] = 1073702400;
inp[27671] = 0;
inp[27672] = 1073701888;
inp[27673] = 0;
inp[27674] = 1073701376;
inp[27675] = 0;
inp[27676] = 1073700864;
inp[27677] = 0;
inp[27678] = 1073700352;
inp[27679] = 0;
inp[27680] = 1073699840;
inp[27681] = 0;
inp[27682] = 1073699328;
inp[27683] = 0;
inp[27684] = 1073698816;
inp[27685] = 0;
inp[27686] = 1073698304;
inp[27687] = 0;
inp[27688] = 1073697792;
inp[27689] = 0;
inp[27690] = 1073697280;
inp[27691] = 0;
inp[27692] = 1073696768;
inp[27693] = 0;
inp[27694] = 1073696256;
inp[27695] = 0;
inp[27696] = 1073695744;
inp[27697] = 0;
inp[27698] = 1073695233;
inp[27699] = 0;
inp[27700] = 1073694721;
inp[27701] = 0;
inp[27702] = 1073694209;
inp[27703] = 0;
inp[27704] = 1073693697;
inp[27705] = 0;
inp[27706] = 1073693185;
inp[27707] = 0;
inp[27708] = 1073692673;
inp[27709] = 0;
inp[27710] = 1073692161;
inp[27711] = 0;
inp[27712] = 1073691649;
inp[27713] = 0;
inp[27714] = 1073691137;
inp[27715] = 0;
inp[27716] = 1073690625;
inp[27717] = 0;
inp[27718] = 1073690113;
inp[27719] = 0;
inp[27720] = 1073689601;
inp[27721] = 0;
inp[27722] = 1073689089;
inp[27723] = 0;
inp[27724] = 1073688577;
inp[27725] = 0;
inp[27726] = 1073688065;
inp[27727] = 0;
inp[27728] = 1073687553;
inp[27729] = 0;
inp[27730] = 1073687041;
inp[27731] = 0;
inp[27732] = 1073686529;
inp[27733] = 0;
inp[27734] = 1073686017;
inp[27735] = 0;
inp[27736] = 1073685505;
inp[27737] = 0;
inp[27738] = 1073684993;
inp[27739] = 0;
inp[27740] = 1073684481;
inp[27741] = 0;
inp[27742] = 1073683969;
inp[27743] = 0;
inp[27744] = 1073683457;
inp[27745] = 0;
inp[27746] = 1073682945;
inp[27747] = 0;
inp[27748] = 1073682433;
inp[27749] = 0;
inp[27750] = 1073681921;
inp[27751] = 0;
inp[27752] = 1073681409;
inp[27753] = 0;
inp[27754] = 1073680897;
inp[27755] = 0;
inp[27756] = 1073680385;
inp[27757] = 0;
inp[27758] = 1073679873;
inp[27759] = 0;
inp[27760] = 1073679361;
inp[27761] = 0;
inp[27762] = 1073678849;
inp[27763] = 0;
inp[27764] = 1073678337;
inp[27765] = 0;
inp[27766] = 1073677825;
inp[27767] = 0;
inp[27768] = 1073677313;
inp[27769] = 0;
inp[27770] = 1073676801;
inp[27771] = 0;
inp[27772] = 1073676289;
inp[27773] = 0;
inp[27774] = 1073675778;
inp[27775] = 0;
inp[27776] = 1073675266;
inp[27777] = 0;
inp[27778] = 1073674754;
inp[27779] = 0;
inp[27780] = 1073674242;
inp[27781] = 0;
inp[27782] = 1073673730;
inp[27783] = 0;
inp[27784] = 1073673218;
inp[27785] = 0;
inp[27786] = 1073672706;
inp[27787] = 0;
inp[27788] = 1073672194;
inp[27789] = 0;
inp[27790] = 1073671682;
inp[27791] = 0;
inp[27792] = 1073671170;
inp[27793] = 0;
inp[27794] = 1073670658;
inp[27795] = 0;
inp[27796] = 1073670146;
inp[27797] = 0;
inp[27798] = 1073669634;
inp[27799] = 0;
inp[27800] = 1073669122;
inp[27801] = 0;
inp[27802] = 1073668610;
inp[27803] = 0;
inp[27804] = 1073668098;
inp[27805] = 0;
inp[27806] = 1073667586;
inp[27807] = 0;
inp[27808] = 1073667074;
inp[27809] = 0;
inp[27810] = 1073666562;
inp[27811] = 0;
inp[27812] = 1073666050;
inp[27813] = 0;
inp[27814] = 1073665538;
inp[27815] = 0;
inp[27816] = 1073665026;
inp[27817] = 0;
inp[27818] = 1073664514;
inp[27819] = 0;
inp[27820] = 1073664002;
inp[27821] = 0;
inp[27822] = 1073663490;
inp[27823] = 0;
inp[27824] = 1073662978;
inp[27825] = 0;
inp[27826] = 1073662466;
inp[27827] = 0;
inp[27828] = 1073661954;
inp[27829] = 0;
inp[27830] = 1073661443;
inp[27831] = 0;
inp[27832] = 1073660931;
inp[27833] = 0;
inp[27834] = 1073660419;
inp[27835] = 0;
inp[27836] = 1073659907;
inp[27837] = 0;
inp[27838] = 1073659395;
inp[27839] = 0;
inp[27840] = 1073658883;
inp[27841] = 0;
inp[27842] = 1073658371;
inp[27843] = 0;
inp[27844] = 1073657859;
inp[27845] = 0;
inp[27846] = 1073657347;
inp[27847] = 0;
inp[27848] = 1073656835;
inp[27849] = 0;
inp[27850] = 1073656323;
inp[27851] = 0;
inp[27852] = 1073655811;
inp[27853] = 0;
inp[27854] = 1073655299;
inp[27855] = 0;
inp[27856] = 1073654787;
inp[27857] = 0;
inp[27858] = 1073654275;
inp[27859] = 0;
inp[27860] = 1073653763;
inp[27861] = 0;
inp[27862] = 1073653251;
inp[27863] = 0;
inp[27864] = 1073652739;
inp[27865] = 0;
inp[27866] = 1073652227;
inp[27867] = 0;
inp[27868] = 1073651715;
inp[27869] = 0;
inp[27870] = 1073651203;
inp[27871] = 0;
inp[27872] = 1073650691;
inp[27873] = 0;
inp[27874] = 1073650179;
inp[27875] = 0;
inp[27876] = 1073649667;
inp[27877] = 0;
inp[27878] = 1073649155;
inp[27879] = 0;
inp[27880] = 1073648644;
inp[27881] = 0;
inp[27882] = 1073648132;
inp[27883] = 0;
inp[27884] = 1073647620;
inp[27885] = 0;
inp[27886] = 1073647108;
inp[27887] = 0;
inp[27888] = 1073646596;
inp[27889] = 0;
inp[27890] = 1073646084;
inp[27891] = 0;
inp[27892] = 1073645572;
inp[27893] = 0;
inp[27894] = 1073645060;
inp[27895] = 0;
inp[27896] = 1073644548;
inp[27897] = 0;
inp[27898] = 1073644036;
inp[27899] = 0;
inp[27900] = 1073643524;
inp[27901] = 0;
inp[27902] = 1073643012;
inp[27903] = 0;
inp[27904] = 1073642500;
inp[27905] = 0;
inp[27906] = 1073641988;
inp[27907] = 0;
inp[27908] = 1073641476;
inp[27909] = 0;
inp[27910] = 1073640964;
inp[27911] = 0;
inp[27912] = 1073640452;
inp[27913] = 0;
inp[27914] = 1073639940;
inp[27915] = 0;
inp[27916] = 1073639428;
inp[27917] = 0;
inp[27918] = 1073638916;
inp[27919] = 0;
inp[27920] = 1073638404;
inp[27921] = 0;
inp[27922] = 1073637893;
inp[27923] = 0;
inp[27924] = 1073637381;
inp[27925] = 0;
inp[27926] = 1073636869;
inp[27927] = 0;
inp[27928] = 1073636357;
inp[27929] = 0;
inp[27930] = 1073635845;
inp[27931] = 0;
inp[27932] = 1073635333;
inp[27933] = 0;
inp[27934] = 1073634821;
inp[27935] = 0;
inp[27936] = 1073634309;
inp[27937] = 0;
inp[27938] = 1073633797;
inp[27939] = 0;
inp[27940] = 1073633285;
inp[27941] = 0;
inp[27942] = 1073632773;
inp[27943] = 0;
inp[27944] = 1073632261;
inp[27945] = 0;
inp[27946] = 1073631749;
inp[27947] = 0;
inp[27948] = 1073631237;
inp[27949] = 0;
inp[27950] = 1073630725;
inp[27951] = 0;
inp[27952] = 1073630213;
inp[27953] = 0;
inp[27954] = 1073629701;
inp[27955] = 0;
inp[27956] = 1073629189;
inp[27957] = 0;
inp[27958] = 1073628677;
inp[27959] = 0;
inp[27960] = 1073628166;
inp[27961] = 0;
inp[27962] = 1073627654;
inp[27963] = 0;
inp[27964] = 1073627142;
inp[27965] = 0;
inp[27966] = 1073626630;
inp[27967] = 0;
inp[27968] = 1073626118;
inp[27969] = 0;
inp[27970] = 1073625606;
inp[27971] = 0;
inp[27972] = 1073625094;
inp[27973] = 0;
inp[27974] = 1073624582;
inp[27975] = 0;
inp[27976] = 1073624070;
inp[27977] = 0;
inp[27978] = 1073623558;
inp[27979] = 0;
inp[27980] = 1073623046;
inp[27981] = 0;
inp[27982] = 1073622534;
inp[27983] = 0;
inp[27984] = 1073622022;
inp[27985] = 0;
inp[27986] = 1073621510;
inp[27987] = 0;
inp[27988] = 1073620998;
inp[27989] = 0;
inp[27990] = 1073620486;
inp[27991] = 0;
inp[27992] = 1073619974;
inp[27993] = 0;
inp[27994] = 1073619462;
inp[27995] = 0;
inp[27996] = 1073618951;
inp[27997] = 0;
inp[27998] = 1073618439;
inp[27999] = 0;
inp[28000] = 1073617927;
inp[28001] = 0;
inp[28002] = 1073617415;
inp[28003] = 0;
inp[28004] = 1073616903;
inp[28005] = 0;
inp[28006] = 1073616391;
inp[28007] = 0;
inp[28008] = 1073615879;
inp[28009] = 0;
inp[28010] = 1073615367;
inp[28011] = 0;
inp[28012] = 1073614855;
inp[28013] = 0;
inp[28014] = 1073614343;
inp[28015] = 0;
inp[28016] = 1073613831;
inp[28017] = 0;
inp[28018] = 1073613319;
inp[28019] = 0;
inp[28020] = 1073612807;
inp[28021] = 0;
inp[28022] = 1073612295;
inp[28023] = 0;
inp[28024] = 1073611783;
inp[28025] = 0;
inp[28026] = 1073611271;
inp[28027] = 0;
inp[28028] = 1073741824;
inp[28029] = 1073741824;
inp[28030] = 1073741568;
inp[28031] = 0;
inp[28032] = 1073741312;
inp[28033] = 0;
inp[28034] = 1073741056;
inp[28035] = 0;
inp[28036] = 1073740800;
inp[28037] = 0;
inp[28038] = 1073740544;
inp[28039] = 0;
inp[28040] = 1073740288;
inp[28041] = 0;
inp[28042] = 1073740032;
inp[28043] = 0;
inp[28044] = 1073739776;
inp[28045] = 0;
inp[28046] = 1073739520;
inp[28047] = 0;
inp[28048] = 1073739264;
inp[28049] = 0;
inp[28050] = 1073739008;
inp[28051] = 0;
inp[28052] = 1073738752;
inp[28053] = 0;
inp[28054] = 1073738496;
inp[28055] = 0;
inp[28056] = 1073738240;
inp[28057] = 0;
inp[28058] = 1073737984;
inp[28059] = 0;
inp[28060] = 1073737728;
inp[28061] = 0;
inp[28062] = 1073737472;
inp[28063] = 0;
inp[28064] = 1073737216;
inp[28065] = 0;
inp[28066] = 1073736960;
inp[28067] = 0;
inp[28068] = 1073736704;
inp[28069] = 0;
inp[28070] = 1073736448;
inp[28071] = 0;
inp[28072] = 1073736192;
inp[28073] = 0;
inp[28074] = 1073735936;
inp[28075] = 0;
inp[28076] = 1073735680;
inp[28077] = 0;
inp[28078] = 1073735424;
inp[28079] = 0;
inp[28080] = 1073735168;
inp[28081] = 0;
inp[28082] = 1073734912;
inp[28083] = 0;
inp[28084] = 1073734656;
inp[28085] = 0;
inp[28086] = 1073734400;
inp[28087] = 0;
inp[28088] = 1073734144;
inp[28089] = 0;
inp[28090] = 1073733888;
inp[28091] = 0;
inp[28092] = 1073733632;
inp[28093] = 0;
inp[28094] = 1073733376;
inp[28095] = 0;
inp[28096] = 1073733120;
inp[28097] = 0;
inp[28098] = 1073732864;
inp[28099] = 0;
inp[28100] = 1073732608;
inp[28101] = 0;
inp[28102] = 1073732352;
inp[28103] = 0;
inp[28104] = 1073732096;
inp[28105] = 0;
inp[28106] = 1073731840;
inp[28107] = 0;
inp[28108] = 1073731584;
inp[28109] = 0;
inp[28110] = 1073731328;
inp[28111] = 0;
inp[28112] = 1073731072;
inp[28113] = 0;
inp[28114] = 1073730816;
inp[28115] = 0;
inp[28116] = 1073730560;
inp[28117] = 0;
inp[28118] = 1073730304;
inp[28119] = 0;
inp[28120] = 1073730048;
inp[28121] = 0;
inp[28122] = 1073729792;
inp[28123] = 0;
inp[28124] = 1073729536;
inp[28125] = 0;
inp[28126] = 1073729280;
inp[28127] = 0;
inp[28128] = 1073729024;
inp[28129] = 0;
inp[28130] = 1073728768;
inp[28131] = 0;
inp[28132] = 1073728512;
inp[28133] = 0;
inp[28134] = 1073728256;
inp[28135] = 0;
inp[28136] = 1073728000;
inp[28137] = 0;
inp[28138] = 1073727744;
inp[28139] = 0;
inp[28140] = 1073727488;
inp[28141] = 0;
inp[28142] = 1073727232;
inp[28143] = 0;
inp[28144] = 1073726976;
inp[28145] = 0;
inp[28146] = 1073726720;
inp[28147] = 0;
inp[28148] = 1073726464;
inp[28149] = 0;
inp[28150] = 1073726208;
inp[28151] = 0;
inp[28152] = 1073725952;
inp[28153] = 0;
inp[28154] = 1073725696;
inp[28155] = 0;
inp[28156] = 1073725440;
inp[28157] = 0;
inp[28158] = 1073725184;
inp[28159] = 0;
inp[28160] = 1073724928;
inp[28161] = 0;
inp[28162] = 1073724672;
inp[28163] = 0;
inp[28164] = 1073724416;
inp[28165] = 0;
inp[28166] = 1073724160;
inp[28167] = 0;
inp[28168] = 1073723904;
inp[28169] = 0;
inp[28170] = 1073723648;
inp[28171] = 0;
inp[28172] = 1073723392;
inp[28173] = 0;
inp[28174] = 1073723136;
inp[28175] = 0;
inp[28176] = 1073722880;
inp[28177] = 0;
inp[28178] = 1073722624;
inp[28179] = 0;
inp[28180] = 1073722368;
inp[28181] = 0;
inp[28182] = 1073722112;
inp[28183] = 0;
inp[28184] = 1073721856;
inp[28185] = 0;
inp[28186] = 1073721600;
inp[28187] = 0;
inp[28188] = 1073721344;
inp[28189] = 0;
inp[28190] = 1073721088;
inp[28191] = 0;
inp[28192] = 1073720832;
inp[28193] = 0;
inp[28194] = 1073720576;
inp[28195] = 0;
inp[28196] = 1073720320;
inp[28197] = 0;
inp[28198] = 1073720064;
inp[28199] = 0;
inp[28200] = 1073719808;
inp[28201] = 0;
inp[28202] = 1073719552;
inp[28203] = 0;
inp[28204] = 1073719296;
inp[28205] = 0;
inp[28206] = 1073719040;
inp[28207] = 0;
inp[28208] = 1073718784;
inp[28209] = 0;
inp[28210] = 1073718528;
inp[28211] = 0;
inp[28212] = 1073718272;
inp[28213] = 0;
inp[28214] = 1073718016;
inp[28215] = 0;
inp[28216] = 1073717760;
inp[28217] = 0;
inp[28218] = 1073717504;
inp[28219] = 0;
inp[28220] = 1073717248;
inp[28221] = 0;
inp[28222] = 1073716992;
inp[28223] = 0;
inp[28224] = 1073716736;
inp[28225] = 0;
inp[28226] = 1073716480;
inp[28227] = 0;
inp[28228] = 1073716224;
inp[28229] = 0;
inp[28230] = 1073715968;
inp[28231] = 0;
inp[28232] = 1073715712;
inp[28233] = 0;
inp[28234] = 1073715456;
inp[28235] = 0;
inp[28236] = 1073715200;
inp[28237] = 0;
inp[28238] = 1073714944;
inp[28239] = 0;
inp[28240] = 1073714688;
inp[28241] = 0;
inp[28242] = 1073714432;
inp[28243] = 0;
inp[28244] = 1073714176;
inp[28245] = 0;
inp[28246] = 1073713920;
inp[28247] = 0;
inp[28248] = 1073713664;
inp[28249] = 0;
inp[28250] = 1073713408;
inp[28251] = 0;
inp[28252] = 1073713152;
inp[28253] = 0;
inp[28254] = 1073712896;
inp[28255] = 0;
inp[28256] = 1073712640;
inp[28257] = 0;
inp[28258] = 1073712384;
inp[28259] = 0;
inp[28260] = 1073712128;
inp[28261] = 0;
inp[28262] = 1073711872;
inp[28263] = 0;
inp[28264] = 1073711616;
inp[28265] = 0;
inp[28266] = 1073711360;
inp[28267] = 0;
inp[28268] = 1073711104;
inp[28269] = 0;
inp[28270] = 1073710848;
inp[28271] = 0;
inp[28272] = 1073710592;
inp[28273] = 0;
inp[28274] = 1073710336;
inp[28275] = 0;
inp[28276] = 1073710080;
inp[28277] = 0;
inp[28278] = 1073709824;
inp[28279] = 0;
inp[28280] = 1073709568;
inp[28281] = 0;
inp[28282] = 1073709312;
inp[28283] = 0;
inp[28284] = 1073709056;
inp[28285] = 0;
inp[28286] = 1073708800;
inp[28287] = 0;
inp[28288] = 1073708544;
inp[28289] = 0;
inp[28290] = 1073708288;
inp[28291] = 0;
inp[28292] = 1073708032;
inp[28293] = 0;
inp[28294] = 1073707776;
inp[28295] = 0;
inp[28296] = 1073707520;
inp[28297] = 0;
inp[28298] = 1073707264;
inp[28299] = 0;
inp[28300] = 1073707008;
inp[28301] = 0;
inp[28302] = 1073706752;
inp[28303] = 0;
inp[28304] = 1073706496;
inp[28305] = 0;
inp[28306] = 1073706240;
inp[28307] = 0;
inp[28308] = 1073705984;
inp[28309] = 0;
inp[28310] = 1073705728;
inp[28311] = 0;
inp[28312] = 1073705472;
inp[28313] = 0;
inp[28314] = 1073705216;
inp[28315] = 0;
inp[28316] = 1073704960;
inp[28317] = 0;
inp[28318] = 1073704704;
inp[28319] = 0;
inp[28320] = 1073704448;
inp[28321] = 0;
inp[28322] = 1073704192;
inp[28323] = 0;
inp[28324] = 1073703936;
inp[28325] = 0;
inp[28326] = 1073703680;
inp[28327] = 0;
inp[28328] = 1073703424;
inp[28329] = 0;
inp[28330] = 1073703168;
inp[28331] = 0;
inp[28332] = 1073702912;
inp[28333] = 0;
inp[28334] = 1073702656;
inp[28335] = 0;
inp[28336] = 1073702400;
inp[28337] = 0;
inp[28338] = 1073702144;
inp[28339] = 0;
inp[28340] = 1073701888;
inp[28341] = 0;
inp[28342] = 1073701632;
inp[28343] = 0;
inp[28344] = 1073701376;
inp[28345] = 0;
inp[28346] = 1073701120;
inp[28347] = 0;
inp[28348] = 1073700864;
inp[28349] = 0;
inp[28350] = 1073700608;
inp[28351] = 0;
inp[28352] = 1073700352;
inp[28353] = 0;
inp[28354] = 1073700096;
inp[28355] = 0;
inp[28356] = 1073699840;
inp[28357] = 0;
inp[28358] = 1073699584;
inp[28359] = 0;
inp[28360] = 1073699328;
inp[28361] = 0;
inp[28362] = 1073699072;
inp[28363] = 0;
inp[28364] = 1073698816;
inp[28365] = 0;
inp[28366] = 1073698560;
inp[28367] = 0;
inp[28368] = 1073698304;
inp[28369] = 0;
inp[28370] = 1073698048;
inp[28371] = 0;
inp[28372] = 1073697792;
inp[28373] = 0;
inp[28374] = 1073697536;
inp[28375] = 0;
inp[28376] = 1073697280;
inp[28377] = 0;
inp[28378] = 1073697024;
inp[28379] = 0;
inp[28380] = 1073696768;
inp[28381] = 0;
inp[28382] = 1073696512;
inp[28383] = 0;
inp[28384] = 1073696256;
inp[28385] = 0;
inp[28386] = 1073696000;
inp[28387] = 0;
inp[28388] = 1073695744;
inp[28389] = 0;
inp[28390] = 1073695488;
inp[28391] = 0;
inp[28392] = 1073695233;
inp[28393] = 0;
inp[28394] = 1073694977;
inp[28395] = 0;
inp[28396] = 1073694721;
inp[28397] = 0;
inp[28398] = 1073694465;
inp[28399] = 0;
inp[28400] = 1073694209;
inp[28401] = 0;
inp[28402] = 1073693953;
inp[28403] = 0;
inp[28404] = 1073693697;
inp[28405] = 0;
inp[28406] = 1073693441;
inp[28407] = 0;
inp[28408] = 1073693185;
inp[28409] = 0;
inp[28410] = 1073692929;
inp[28411] = 0;
inp[28412] = 1073692673;
inp[28413] = 0;
inp[28414] = 1073692417;
inp[28415] = 0;
inp[28416] = 1073692161;
inp[28417] = 0;
inp[28418] = 1073691905;
inp[28419] = 0;
inp[28420] = 1073691649;
inp[28421] = 0;
inp[28422] = 1073691393;
inp[28423] = 0;
inp[28424] = 1073691137;
inp[28425] = 0;
inp[28426] = 1073690881;
inp[28427] = 0;
inp[28428] = 1073690625;
inp[28429] = 0;
inp[28430] = 1073690369;
inp[28431] = 0;
inp[28432] = 1073690113;
inp[28433] = 0;
inp[28434] = 1073689857;
inp[28435] = 0;
inp[28436] = 1073689601;
inp[28437] = 0;
inp[28438] = 1073689345;
inp[28439] = 0;
inp[28440] = 1073689089;
inp[28441] = 0;
inp[28442] = 1073688833;
inp[28443] = 0;
inp[28444] = 1073688577;
inp[28445] = 0;
inp[28446] = 1073688321;
inp[28447] = 0;
inp[28448] = 1073688065;
inp[28449] = 0;
inp[28450] = 1073687809;
inp[28451] = 0;
inp[28452] = 1073687553;
inp[28453] = 0;
inp[28454] = 1073687297;
inp[28455] = 0;
inp[28456] = 1073687041;
inp[28457] = 0;
inp[28458] = 1073686785;
inp[28459] = 0;
inp[28460] = 1073686529;
inp[28461] = 0;
inp[28462] = 1073686273;
inp[28463] = 0;
inp[28464] = 1073686017;
inp[28465] = 0;
inp[28466] = 1073685761;
inp[28467] = 0;
inp[28468] = 1073685505;
inp[28469] = 0;
inp[28470] = 1073685249;
inp[28471] = 0;
inp[28472] = 1073684993;
inp[28473] = 0;
inp[28474] = 1073684737;
inp[28475] = 0;
inp[28476] = 1073684481;
inp[28477] = 0;
inp[28478] = 1073684225;
inp[28479] = 0;
inp[28480] = 1073683969;
inp[28481] = 0;
inp[28482] = 1073683713;
inp[28483] = 0;
inp[28484] = 1073683457;
inp[28485] = 0;
inp[28486] = 1073683201;
inp[28487] = 0;
inp[28488] = 1073682945;
inp[28489] = 0;
inp[28490] = 1073682689;
inp[28491] = 0;
inp[28492] = 1073682433;
inp[28493] = 0;
inp[28494] = 1073682177;
inp[28495] = 0;
inp[28496] = 1073681921;
inp[28497] = 0;
inp[28498] = 1073681665;
inp[28499] = 0;
inp[28500] = 1073681409;
inp[28501] = 0;
inp[28502] = 1073681153;
inp[28503] = 0;
inp[28504] = 1073680897;
inp[28505] = 0;
inp[28506] = 1073680641;
inp[28507] = 0;
inp[28508] = 1073680385;
inp[28509] = 0;
inp[28510] = 1073680129;
inp[28511] = 0;
inp[28512] = 1073679873;
inp[28513] = 0;
inp[28514] = 1073679617;
inp[28515] = 0;
inp[28516] = 1073679361;
inp[28517] = 0;
inp[28518] = 1073679105;
inp[28519] = 0;
inp[28520] = 1073678849;
inp[28521] = 0;
inp[28522] = 1073678593;
inp[28523] = 0;
inp[28524] = 1073678337;
inp[28525] = 0;
inp[28526] = 1073678081;
inp[28527] = 0;
inp[28528] = 1073677825;
inp[28529] = 0;
inp[28530] = 1073677569;
inp[28531] = 0;
inp[28532] = 1073677313;
inp[28533] = 0;
inp[28534] = 1073677057;
inp[28535] = 0;
inp[28536] = 1073676801;
inp[28537] = 0;
inp[28538] = 1073676545;
inp[28539] = 0;
inp[28540] = 1073741824;
inp[28541] = 1073741824;
inp[28542] = 1073741696;
inp[28543] = 0;
inp[28544] = 1073741568;
inp[28545] = 0;
inp[28546] = 1073741440;
inp[28547] = 0;
inp[28548] = 1073741312;
inp[28549] = 0;
inp[28550] = 1073741184;
inp[28551] = 0;
inp[28552] = 1073741056;
inp[28553] = 0;
inp[28554] = 1073740928;
inp[28555] = 0;
inp[28556] = 1073740800;
inp[28557] = 0;
inp[28558] = 1073740672;
inp[28559] = 0;
inp[28560] = 1073740544;
inp[28561] = 0;
inp[28562] = 1073740416;
inp[28563] = 0;
inp[28564] = 1073740288;
inp[28565] = 0;
inp[28566] = 1073740160;
inp[28567] = 0;
inp[28568] = 1073740032;
inp[28569] = 0;
inp[28570] = 1073739904;
inp[28571] = 0;
inp[28572] = 1073739776;
inp[28573] = 0;
inp[28574] = 1073739648;
inp[28575] = 0;
inp[28576] = 1073739520;
inp[28577] = 0;
inp[28578] = 1073739392;
inp[28579] = 0;
inp[28580] = 1073739264;
inp[28581] = 0;
inp[28582] = 1073739136;
inp[28583] = 0;
inp[28584] = 1073739008;
inp[28585] = 0;
inp[28586] = 1073738880;
inp[28587] = 0;
inp[28588] = 1073738752;
inp[28589] = 0;
inp[28590] = 1073738624;
inp[28591] = 0;
inp[28592] = 1073738496;
inp[28593] = 0;
inp[28594] = 1073738368;
inp[28595] = 0;
inp[28596] = 1073738240;
inp[28597] = 0;
inp[28598] = 1073738112;
inp[28599] = 0;
inp[28600] = 1073737984;
inp[28601] = 0;
inp[28602] = 1073737856;
inp[28603] = 0;
inp[28604] = 1073737728;
inp[28605] = 0;
inp[28606] = 1073737600;
inp[28607] = 0;
inp[28608] = 1073737472;
inp[28609] = 0;
inp[28610] = 1073737344;
inp[28611] = 0;
inp[28612] = 1073737216;
inp[28613] = 0;
inp[28614] = 1073737088;
inp[28615] = 0;
inp[28616] = 1073736960;
inp[28617] = 0;
inp[28618] = 1073736832;
inp[28619] = 0;
inp[28620] = 1073736704;
inp[28621] = 0;
inp[28622] = 1073736576;
inp[28623] = 0;
inp[28624] = 1073736448;
inp[28625] = 0;
inp[28626] = 1073736320;
inp[28627] = 0;
inp[28628] = 1073736192;
inp[28629] = 0;
inp[28630] = 1073736064;
inp[28631] = 0;
inp[28632] = 1073735936;
inp[28633] = 0;
inp[28634] = 1073735808;
inp[28635] = 0;
inp[28636] = 1073735680;
inp[28637] = 0;
inp[28638] = 1073735552;
inp[28639] = 0;
inp[28640] = 1073735424;
inp[28641] = 0;
inp[28642] = 1073735296;
inp[28643] = 0;
inp[28644] = 1073735168;
inp[28645] = 0;
inp[28646] = 1073735040;
inp[28647] = 0;
inp[28648] = 1073734912;
inp[28649] = 0;
inp[28650] = 1073734784;
inp[28651] = 0;
inp[28652] = 1073734656;
inp[28653] = 0;
inp[28654] = 1073734528;
inp[28655] = 0;
inp[28656] = 1073734400;
inp[28657] = 0;
inp[28658] = 1073734272;
inp[28659] = 0;
inp[28660] = 1073734144;
inp[28661] = 0;
inp[28662] = 1073734016;
inp[28663] = 0;
inp[28664] = 1073733888;
inp[28665] = 0;
inp[28666] = 1073733760;
inp[28667] = 0;
inp[28668] = 1073733632;
inp[28669] = 0;
inp[28670] = 1073733504;
inp[28671] = 0;
inp[28672] = 1073733376;
inp[28673] = 0;
inp[28674] = 1073733248;
inp[28675] = 0;
inp[28676] = 1073733120;
inp[28677] = 0;
inp[28678] = 1073732992;
inp[28679] = 0;
inp[28680] = 1073732864;
inp[28681] = 0;
inp[28682] = 1073732736;
inp[28683] = 0;
inp[28684] = 1073732608;
inp[28685] = 0;
inp[28686] = 1073732480;
inp[28687] = 0;
inp[28688] = 1073732352;
inp[28689] = 0;
inp[28690] = 1073732224;
inp[28691] = 0;
inp[28692] = 1073732096;
inp[28693] = 0;
inp[28694] = 1073731968;
inp[28695] = 0;
inp[28696] = 1073731840;
inp[28697] = 0;
inp[28698] = 1073731712;
inp[28699] = 0;
inp[28700] = 1073731584;
inp[28701] = 0;
inp[28702] = 1073731456;
inp[28703] = 0;
inp[28704] = 1073731328;
inp[28705] = 0;
inp[28706] = 1073731200;
inp[28707] = 0;
inp[28708] = 1073731072;
inp[28709] = 0;
inp[28710] = 1073730944;
inp[28711] = 0;
inp[28712] = 1073730816;
inp[28713] = 0;
inp[28714] = 1073730688;
inp[28715] = 0;
inp[28716] = 1073730560;
inp[28717] = 0;
inp[28718] = 1073730432;
inp[28719] = 0;
inp[28720] = 1073730304;
inp[28721] = 0;
inp[28722] = 1073730176;
inp[28723] = 0;
inp[28724] = 1073730048;
inp[28725] = 0;
inp[28726] = 1073729920;
inp[28727] = 0;
inp[28728] = 1073729792;
inp[28729] = 0;
inp[28730] = 1073729664;
inp[28731] = 0;
inp[28732] = 1073729536;
inp[28733] = 0;
inp[28734] = 1073729408;
inp[28735] = 0;
inp[28736] = 1073729280;
inp[28737] = 0;
inp[28738] = 1073729152;
inp[28739] = 0;
inp[28740] = 1073729024;
inp[28741] = 0;
inp[28742] = 1073728896;
inp[28743] = 0;
inp[28744] = 1073728768;
inp[28745] = 0;
inp[28746] = 1073728640;
inp[28747] = 0;
inp[28748] = 1073728512;
inp[28749] = 0;
inp[28750] = 1073728384;
inp[28751] = 0;
inp[28752] = 1073728256;
inp[28753] = 0;
inp[28754] = 1073728128;
inp[28755] = 0;
inp[28756] = 1073728000;
inp[28757] = 0;
inp[28758] = 1073727872;
inp[28759] = 0;
inp[28760] = 1073727744;
inp[28761] = 0;
inp[28762] = 1073727616;
inp[28763] = 0;
inp[28764] = 1073727488;
inp[28765] = 0;
inp[28766] = 1073727360;
inp[28767] = 0;
inp[28768] = 1073727232;
inp[28769] = 0;
inp[28770] = 1073727104;
inp[28771] = 0;
inp[28772] = 1073726976;
inp[28773] = 0;
inp[28774] = 1073726848;
inp[28775] = 0;
inp[28776] = 1073726720;
inp[28777] = 0;
inp[28778] = 1073726592;
inp[28779] = 0;
inp[28780] = 1073726464;
inp[28781] = 0;
inp[28782] = 1073726336;
inp[28783] = 0;
inp[28784] = 1073726208;
inp[28785] = 0;
inp[28786] = 1073726080;
inp[28787] = 0;
inp[28788] = 1073725952;
inp[28789] = 0;
inp[28790] = 1073725824;
inp[28791] = 0;
inp[28792] = 1073725696;
inp[28793] = 0;
inp[28794] = 1073725568;
inp[28795] = 0;
inp[28796] = 1073725440;
inp[28797] = 0;
inp[28798] = 1073725312;
inp[28799] = 0;
inp[28800] = 1073725184;
inp[28801] = 0;
inp[28802] = 1073725056;
inp[28803] = 0;
inp[28804] = 1073724928;
inp[28805] = 0;
inp[28806] = 1073724800;
inp[28807] = 0;
inp[28808] = 1073724672;
inp[28809] = 0;
inp[28810] = 1073724544;
inp[28811] = 0;
inp[28812] = 1073724416;
inp[28813] = 0;
inp[28814] = 1073724288;
inp[28815] = 0;
inp[28816] = 1073724160;
inp[28817] = 0;
inp[28818] = 1073724032;
inp[28819] = 0;
inp[28820] = 1073723904;
inp[28821] = 0;
inp[28822] = 1073723776;
inp[28823] = 0;
inp[28824] = 1073723648;
inp[28825] = 0;
inp[28826] = 1073723520;
inp[28827] = 0;
inp[28828] = 1073723392;
inp[28829] = 0;
inp[28830] = 1073723264;
inp[28831] = 0;
inp[28832] = 1073723136;
inp[28833] = 0;
inp[28834] = 1073723008;
inp[28835] = 0;
inp[28836] = 1073722880;
inp[28837] = 0;
inp[28838] = 1073722752;
inp[28839] = 0;
inp[28840] = 1073722624;
inp[28841] = 0;
inp[28842] = 1073722496;
inp[28843] = 0;
inp[28844] = 1073722368;
inp[28845] = 0;
inp[28846] = 1073722240;
inp[28847] = 0;
inp[28848] = 1073722112;
inp[28849] = 0;
inp[28850] = 1073721984;
inp[28851] = 0;
inp[28852] = 1073721856;
inp[28853] = 0;
inp[28854] = 1073721728;
inp[28855] = 0;
inp[28856] = 1073721600;
inp[28857] = 0;
inp[28858] = 1073721472;
inp[28859] = 0;
inp[28860] = 1073721344;
inp[28861] = 0;
inp[28862] = 1073721216;
inp[28863] = 0;
inp[28864] = 1073721088;
inp[28865] = 0;
inp[28866] = 1073720960;
inp[28867] = 0;
inp[28868] = 1073720832;
inp[28869] = 0;
inp[28870] = 1073720704;
inp[28871] = 0;
inp[28872] = 1073720576;
inp[28873] = 0;
inp[28874] = 1073720448;
inp[28875] = 0;
inp[28876] = 1073720320;
inp[28877] = 0;
inp[28878] = 1073720192;
inp[28879] = 0;
inp[28880] = 1073720064;
inp[28881] = 0;
inp[28882] = 1073719936;
inp[28883] = 0;
inp[28884] = 1073719808;
inp[28885] = 0;
inp[28886] = 1073719680;
inp[28887] = 0;
inp[28888] = 1073719552;
inp[28889] = 0;
inp[28890] = 1073719424;
inp[28891] = 0;
inp[28892] = 1073719296;
inp[28893] = 0;
inp[28894] = 1073719168;
inp[28895] = 0;
inp[28896] = 1073719040;
inp[28897] = 0;
inp[28898] = 1073718912;
inp[28899] = 0;
inp[28900] = 1073718784;
inp[28901] = 0;
inp[28902] = 1073718656;
inp[28903] = 0;
inp[28904] = 1073718528;
inp[28905] = 0;
inp[28906] = 1073718400;
inp[28907] = 0;
inp[28908] = 1073718272;
inp[28909] = 0;
inp[28910] = 1073718144;
inp[28911] = 0;
inp[28912] = 1073718016;
inp[28913] = 0;
inp[28914] = 1073717888;
inp[28915] = 0;
inp[28916] = 1073717760;
inp[28917] = 0;
inp[28918] = 1073717632;
inp[28919] = 0;
inp[28920] = 1073717504;
inp[28921] = 0;
inp[28922] = 1073717376;
inp[28923] = 0;
inp[28924] = 1073717248;
inp[28925] = 0;
inp[28926] = 1073717120;
inp[28927] = 0;
inp[28928] = 1073716992;
inp[28929] = 0;
inp[28930] = 1073716864;
inp[28931] = 0;
inp[28932] = 1073716736;
inp[28933] = 0;
inp[28934] = 1073716608;
inp[28935] = 0;
inp[28936] = 1073716480;
inp[28937] = 0;
inp[28938] = 1073716352;
inp[28939] = 0;
inp[28940] = 1073716224;
inp[28941] = 0;
inp[28942] = 1073716096;
inp[28943] = 0;
inp[28944] = 1073715968;
inp[28945] = 0;
inp[28946] = 1073715840;
inp[28947] = 0;
inp[28948] = 1073715712;
inp[28949] = 0;
inp[28950] = 1073715584;
inp[28951] = 0;
inp[28952] = 1073715456;
inp[28953] = 0;
inp[28954] = 1073715328;
inp[28955] = 0;
inp[28956] = 1073715200;
inp[28957] = 0;
inp[28958] = 1073715072;
inp[28959] = 0;
inp[28960] = 1073714944;
inp[28961] = 0;
inp[28962] = 1073714816;
inp[28963] = 0;
inp[28964] = 1073714688;
inp[28965] = 0;
inp[28966] = 1073714560;
inp[28967] = 0;
inp[28968] = 1073714432;
inp[28969] = 0;
inp[28970] = 1073714304;
inp[28971] = 0;
inp[28972] = 1073714176;
inp[28973] = 0;
inp[28974] = 1073714048;
inp[28975] = 0;
inp[28976] = 1073713920;
inp[28977] = 0;
inp[28978] = 1073713792;
inp[28979] = 0;
inp[28980] = 1073713664;
inp[28981] = 0;
inp[28982] = 1073713536;
inp[28983] = 0;
inp[28984] = 1073713408;
inp[28985] = 0;
inp[28986] = 1073713280;
inp[28987] = 0;
inp[28988] = 1073713152;
inp[28989] = 0;
inp[28990] = 1073713024;
inp[28991] = 0;
inp[28992] = 1073712896;
inp[28993] = 0;
inp[28994] = 1073712768;
inp[28995] = 0;
inp[28996] = 1073712640;
inp[28997] = 0;
inp[28998] = 1073712512;
inp[28999] = 0;
inp[29000] = 1073712384;
inp[29001] = 0;
inp[29002] = 1073712256;
inp[29003] = 0;
inp[29004] = 1073712128;
inp[29005] = 0;
inp[29006] = 1073712000;
inp[29007] = 0;
inp[29008] = 1073711872;
inp[29009] = 0;
inp[29010] = 1073711744;
inp[29011] = 0;
inp[29012] = 1073711616;
inp[29013] = 0;
inp[29014] = 1073711488;
inp[29015] = 0;
inp[29016] = 1073711360;
inp[29017] = 0;
inp[29018] = 1073711232;
inp[29019] = 0;
inp[29020] = 1073711104;
inp[29021] = 0;
inp[29022] = 1073710976;
inp[29023] = 0;
inp[29024] = 1073710848;
inp[29025] = 0;
inp[29026] = 1073710720;
inp[29027] = 0;
inp[29028] = 1073710592;
inp[29029] = 0;
inp[29030] = 1073710464;
inp[29031] = 0;
inp[29032] = 1073710336;
inp[29033] = 0;
inp[29034] = 1073710208;
inp[29035] = 0;
inp[29036] = 1073710080;
inp[29037] = 0;
inp[29038] = 1073709952;
inp[29039] = 0;
inp[29040] = 1073709824;
inp[29041] = 0;
inp[29042] = 1073709696;
inp[29043] = 0;
inp[29044] = 1073709568;
inp[29045] = 0;
inp[29046] = 1073709440;
inp[29047] = 0;
inp[29048] = 1073709312;
inp[29049] = 0;
inp[29050] = 1073709184;
inp[29051] = 0;
inp[29052] = 1073741824;
inp[29053] = 1073741824;
inp[29054] = 1073741760;
inp[29055] = 0;
inp[29056] = 1073741696;
inp[29057] = 0;
inp[29058] = 1073741632;
inp[29059] = 0;
inp[29060] = 1073741568;
inp[29061] = 0;
inp[29062] = 1073741504;
inp[29063] = 0;
inp[29064] = 1073741440;
inp[29065] = 0;
inp[29066] = 1073741376;
inp[29067] = 0;
inp[29068] = 1073741312;
inp[29069] = 0;
inp[29070] = 1073741248;
inp[29071] = 0;
inp[29072] = 1073741184;
inp[29073] = 0;
inp[29074] = 1073741120;
inp[29075] = 0;
inp[29076] = 1073741056;
inp[29077] = 0;
inp[29078] = 1073740992;
inp[29079] = 0;
inp[29080] = 1073740928;
inp[29081] = 0;
inp[29082] = 1073740864;
inp[29083] = 0;
inp[29084] = 1073740800;
inp[29085] = 0;
inp[29086] = 1073740736;
inp[29087] = 0;
inp[29088] = 1073740672;
inp[29089] = 0;
inp[29090] = 1073740608;
inp[29091] = 0;
inp[29092] = 1073740544;
inp[29093] = 0;
inp[29094] = 1073740480;
inp[29095] = 0;
inp[29096] = 1073740416;
inp[29097] = 0;
inp[29098] = 1073740352;
inp[29099] = 0;
inp[29100] = 1073740288;
inp[29101] = 0;
inp[29102] = 1073740224;
inp[29103] = 0;
inp[29104] = 1073740160;
inp[29105] = 0;
inp[29106] = 1073740096;
inp[29107] = 0;
inp[29108] = 1073740032;
inp[29109] = 0;
inp[29110] = 1073739968;
inp[29111] = 0;
inp[29112] = 1073739904;
inp[29113] = 0;
inp[29114] = 1073739840;
inp[29115] = 0;
inp[29116] = 1073739776;
inp[29117] = 0;
inp[29118] = 1073739712;
inp[29119] = 0;
inp[29120] = 1073739648;
inp[29121] = 0;
inp[29122] = 1073739584;
inp[29123] = 0;
inp[29124] = 1073739520;
inp[29125] = 0;
inp[29126] = 1073739456;
inp[29127] = 0;
inp[29128] = 1073739392;
inp[29129] = 0;
inp[29130] = 1073739328;
inp[29131] = 0;
inp[29132] = 1073739264;
inp[29133] = 0;
inp[29134] = 1073739200;
inp[29135] = 0;
inp[29136] = 1073739136;
inp[29137] = 0;
inp[29138] = 1073739072;
inp[29139] = 0;
inp[29140] = 1073739008;
inp[29141] = 0;
inp[29142] = 1073738944;
inp[29143] = 0;
inp[29144] = 1073738880;
inp[29145] = 0;
inp[29146] = 1073738816;
inp[29147] = 0;
inp[29148] = 1073738752;
inp[29149] = 0;
inp[29150] = 1073738688;
inp[29151] = 0;
inp[29152] = 1073738624;
inp[29153] = 0;
inp[29154] = 1073738560;
inp[29155] = 0;
inp[29156] = 1073738496;
inp[29157] = 0;
inp[29158] = 1073738432;
inp[29159] = 0;
inp[29160] = 1073738368;
inp[29161] = 0;
inp[29162] = 1073738304;
inp[29163] = 0;
inp[29164] = 1073738240;
inp[29165] = 0;
inp[29166] = 1073738176;
inp[29167] = 0;
inp[29168] = 1073738112;
inp[29169] = 0;
inp[29170] = 1073738048;
inp[29171] = 0;
inp[29172] = 1073737984;
inp[29173] = 0;
inp[29174] = 1073737920;
inp[29175] = 0;
inp[29176] = 1073737856;
inp[29177] = 0;
inp[29178] = 1073737792;
inp[29179] = 0;
inp[29180] = 1073737728;
inp[29181] = 0;
inp[29182] = 1073737664;
inp[29183] = 0;
inp[29184] = 1073737600;
inp[29185] = 0;
inp[29186] = 1073737536;
inp[29187] = 0;
inp[29188] = 1073737472;
inp[29189] = 0;
inp[29190] = 1073737408;
inp[29191] = 0;
inp[29192] = 1073737344;
inp[29193] = 0;
inp[29194] = 1073737280;
inp[29195] = 0;
inp[29196] = 1073737216;
inp[29197] = 0;
inp[29198] = 1073737152;
inp[29199] = 0;
inp[29200] = 1073737088;
inp[29201] = 0;
inp[29202] = 1073737024;
inp[29203] = 0;
inp[29204] = 1073736960;
inp[29205] = 0;
inp[29206] = 1073736896;
inp[29207] = 0;
inp[29208] = 1073736832;
inp[29209] = 0;
inp[29210] = 1073736768;
inp[29211] = 0;
inp[29212] = 1073736704;
inp[29213] = 0;
inp[29214] = 1073736640;
inp[29215] = 0;
inp[29216] = 1073736576;
inp[29217] = 0;
inp[29218] = 1073736512;
inp[29219] = 0;
inp[29220] = 1073736448;
inp[29221] = 0;
inp[29222] = 1073736384;
inp[29223] = 0;
inp[29224] = 1073736320;
inp[29225] = 0;
inp[29226] = 1073736256;
inp[29227] = 0;
inp[29228] = 1073736192;
inp[29229] = 0;
inp[29230] = 1073736128;
inp[29231] = 0;
inp[29232] = 1073736064;
inp[29233] = 0;
inp[29234] = 1073736000;
inp[29235] = 0;
inp[29236] = 1073735936;
inp[29237] = 0;
inp[29238] = 1073735872;
inp[29239] = 0;
inp[29240] = 1073735808;
inp[29241] = 0;
inp[29242] = 1073735744;
inp[29243] = 0;
inp[29244] = 1073735680;
inp[29245] = 0;
inp[29246] = 1073735616;
inp[29247] = 0;
inp[29248] = 1073735552;
inp[29249] = 0;
inp[29250] = 1073735488;
inp[29251] = 0;
inp[29252] = 1073735424;
inp[29253] = 0;
inp[29254] = 1073735360;
inp[29255] = 0;
inp[29256] = 1073735296;
inp[29257] = 0;
inp[29258] = 1073735232;
inp[29259] = 0;
inp[29260] = 1073735168;
inp[29261] = 0;
inp[29262] = 1073735104;
inp[29263] = 0;
inp[29264] = 1073735040;
inp[29265] = 0;
inp[29266] = 1073734976;
inp[29267] = 0;
inp[29268] = 1073734912;
inp[29269] = 0;
inp[29270] = 1073734848;
inp[29271] = 0;
inp[29272] = 1073734784;
inp[29273] = 0;
inp[29274] = 1073734720;
inp[29275] = 0;
inp[29276] = 1073734656;
inp[29277] = 0;
inp[29278] = 1073734592;
inp[29279] = 0;
inp[29280] = 1073734528;
inp[29281] = 0;
inp[29282] = 1073734464;
inp[29283] = 0;
inp[29284] = 1073734400;
inp[29285] = 0;
inp[29286] = 1073734336;
inp[29287] = 0;
inp[29288] = 1073734272;
inp[29289] = 0;
inp[29290] = 1073734208;
inp[29291] = 0;
inp[29292] = 1073734144;
inp[29293] = 0;
inp[29294] = 1073734080;
inp[29295] = 0;
inp[29296] = 1073734016;
inp[29297] = 0;
inp[29298] = 1073733952;
inp[29299] = 0;
inp[29300] = 1073733888;
inp[29301] = 0;
inp[29302] = 1073733824;
inp[29303] = 0;
inp[29304] = 1073733760;
inp[29305] = 0;
inp[29306] = 1073733696;
inp[29307] = 0;
inp[29308] = 1073733632;
inp[29309] = 0;
inp[29310] = 1073733568;
inp[29311] = 0;
inp[29312] = 1073733504;
inp[29313] = 0;
inp[29314] = 1073733440;
inp[29315] = 0;
inp[29316] = 1073733376;
inp[29317] = 0;
inp[29318] = 1073733312;
inp[29319] = 0;
inp[29320] = 1073733248;
inp[29321] = 0;
inp[29322] = 1073733184;
inp[29323] = 0;
inp[29324] = 1073733120;
inp[29325] = 0;
inp[29326] = 1073733056;
inp[29327] = 0;
inp[29328] = 1073732992;
inp[29329] = 0;
inp[29330] = 1073732928;
inp[29331] = 0;
inp[29332] = 1073732864;
inp[29333] = 0;
inp[29334] = 1073732800;
inp[29335] = 0;
inp[29336] = 1073732736;
inp[29337] = 0;
inp[29338] = 1073732672;
inp[29339] = 0;
inp[29340] = 1073732608;
inp[29341] = 0;
inp[29342] = 1073732544;
inp[29343] = 0;
inp[29344] = 1073732480;
inp[29345] = 0;
inp[29346] = 1073732416;
inp[29347] = 0;
inp[29348] = 1073732352;
inp[29349] = 0;
inp[29350] = 1073732288;
inp[29351] = 0;
inp[29352] = 1073732224;
inp[29353] = 0;
inp[29354] = 1073732160;
inp[29355] = 0;
inp[29356] = 1073732096;
inp[29357] = 0;
inp[29358] = 1073732032;
inp[29359] = 0;
inp[29360] = 1073731968;
inp[29361] = 0;
inp[29362] = 1073731904;
inp[29363] = 0;
inp[29364] = 1073731840;
inp[29365] = 0;
inp[29366] = 1073731776;
inp[29367] = 0;
inp[29368] = 1073731712;
inp[29369] = 0;
inp[29370] = 1073731648;
inp[29371] = 0;
inp[29372] = 1073731584;
inp[29373] = 0;
inp[29374] = 1073731520;
inp[29375] = 0;
inp[29376] = 1073731456;
inp[29377] = 0;
inp[29378] = 1073731392;
inp[29379] = 0;
inp[29380] = 1073731328;
inp[29381] = 0;
inp[29382] = 1073731264;
inp[29383] = 0;
inp[29384] = 1073731200;
inp[29385] = 0;
inp[29386] = 1073731136;
inp[29387] = 0;
inp[29388] = 1073731072;
inp[29389] = 0;
inp[29390] = 1073731008;
inp[29391] = 0;
inp[29392] = 1073730944;
inp[29393] = 0;
inp[29394] = 1073730880;
inp[29395] = 0;
inp[29396] = 1073730816;
inp[29397] = 0;
inp[29398] = 1073730752;
inp[29399] = 0;
inp[29400] = 1073730688;
inp[29401] = 0;
inp[29402] = 1073730624;
inp[29403] = 0;
inp[29404] = 1073730560;
inp[29405] = 0;
inp[29406] = 1073730496;
inp[29407] = 0;
inp[29408] = 1073730432;
inp[29409] = 0;
inp[29410] = 1073730368;
inp[29411] = 0;
inp[29412] = 1073730304;
inp[29413] = 0;
inp[29414] = 1073730240;
inp[29415] = 0;
inp[29416] = 1073730176;
inp[29417] = 0;
inp[29418] = 1073730112;
inp[29419] = 0;
inp[29420] = 1073730048;
inp[29421] = 0;
inp[29422] = 1073729984;
inp[29423] = 0;
inp[29424] = 1073729920;
inp[29425] = 0;
inp[29426] = 1073729856;
inp[29427] = 0;
inp[29428] = 1073729792;
inp[29429] = 0;
inp[29430] = 1073729728;
inp[29431] = 0;
inp[29432] = 1073729664;
inp[29433] = 0;
inp[29434] = 1073729600;
inp[29435] = 0;
inp[29436] = 1073729536;
inp[29437] = 0;
inp[29438] = 1073729472;
inp[29439] = 0;
inp[29440] = 1073729408;
inp[29441] = 0;
inp[29442] = 1073729344;
inp[29443] = 0;
inp[29444] = 1073729280;
inp[29445] = 0;
inp[29446] = 1073729216;
inp[29447] = 0;
inp[29448] = 1073729152;
inp[29449] = 0;
inp[29450] = 1073729088;
inp[29451] = 0;
inp[29452] = 1073729024;
inp[29453] = 0;
inp[29454] = 1073728960;
inp[29455] = 0;
inp[29456] = 1073728896;
inp[29457] = 0;
inp[29458] = 1073728832;
inp[29459] = 0;
inp[29460] = 1073728768;
inp[29461] = 0;
inp[29462] = 1073728704;
inp[29463] = 0;
inp[29464] = 1073728640;
inp[29465] = 0;
inp[29466] = 1073728576;
inp[29467] = 0;
inp[29468] = 1073728512;
inp[29469] = 0;
inp[29470] = 1073728448;
inp[29471] = 0;
inp[29472] = 1073728384;
inp[29473] = 0;
inp[29474] = 1073728320;
inp[29475] = 0;
inp[29476] = 1073728256;
inp[29477] = 0;
inp[29478] = 1073728192;
inp[29479] = 0;
inp[29480] = 1073728128;
inp[29481] = 0;
inp[29482] = 1073728064;
inp[29483] = 0;
inp[29484] = 1073728000;
inp[29485] = 0;
inp[29486] = 1073727936;
inp[29487] = 0;
inp[29488] = 1073727872;
inp[29489] = 0;
inp[29490] = 1073727808;
inp[29491] = 0;
inp[29492] = 1073727744;
inp[29493] = 0;
inp[29494] = 1073727680;
inp[29495] = 0;
inp[29496] = 1073727616;
inp[29497] = 0;
inp[29498] = 1073727552;
inp[29499] = 0;
inp[29500] = 1073727488;
inp[29501] = 0;
inp[29502] = 1073727424;
inp[29503] = 0;
inp[29504] = 1073727360;
inp[29505] = 0;
inp[29506] = 1073727296;
inp[29507] = 0;
inp[29508] = 1073727232;
inp[29509] = 0;
inp[29510] = 1073727168;
inp[29511] = 0;
inp[29512] = 1073727104;
inp[29513] = 0;
inp[29514] = 1073727040;
inp[29515] = 0;
inp[29516] = 1073726976;
inp[29517] = 0;
inp[29518] = 1073726912;
inp[29519] = 0;
inp[29520] = 1073726848;
inp[29521] = 0;
inp[29522] = 1073726784;
inp[29523] = 0;
inp[29524] = 1073726720;
inp[29525] = 0;
inp[29526] = 1073726656;
inp[29527] = 0;
inp[29528] = 1073726592;
inp[29529] = 0;
inp[29530] = 1073726528;
inp[29531] = 0;
inp[29532] = 1073726464;
inp[29533] = 0;
inp[29534] = 1073726400;
inp[29535] = 0;
inp[29536] = 1073726336;
inp[29537] = 0;
inp[29538] = 1073726272;
inp[29539] = 0;
inp[29540] = 1073726208;
inp[29541] = 0;
inp[29542] = 1073726144;
inp[29543] = 0;
inp[29544] = 1073726080;
inp[29545] = 0;
inp[29546] = 1073726016;
inp[29547] = 0;
inp[29548] = 1073725952;
inp[29549] = 0;
inp[29550] = 1073725888;
inp[29551] = 0;
inp[29552] = 1073725824;
inp[29553] = 0;
inp[29554] = 1073725760;
inp[29555] = 0;
inp[29556] = 1073725696;
inp[29557] = 0;
inp[29558] = 1073725632;
inp[29559] = 0;
inp[29560] = 1073725568;
inp[29561] = 0;
inp[29562] = 1073725504;
inp[29563] = 0;
inp[29564] = 1073741824;
inp[29565] = 1073741824;
inp[29566] = 1073741792;
inp[29567] = 0;
inp[29568] = 1073741760;
inp[29569] = 0;
inp[29570] = 1073741728;
inp[29571] = 0;
inp[29572] = 1073741696;
inp[29573] = 0;
inp[29574] = 1073741664;
inp[29575] = 0;
inp[29576] = 1073741632;
inp[29577] = 0;
inp[29578] = 1073741600;
inp[29579] = 0;
inp[29580] = 1073741568;
inp[29581] = 0;
inp[29582] = 1073741536;
inp[29583] = 0;
inp[29584] = 1073741504;
inp[29585] = 0;
inp[29586] = 1073741472;
inp[29587] = 0;
inp[29588] = 1073741440;
inp[29589] = 0;
inp[29590] = 1073741408;
inp[29591] = 0;
inp[29592] = 1073741376;
inp[29593] = 0;
inp[29594] = 1073741344;
inp[29595] = 0;
inp[29596] = 1073741312;
inp[29597] = 0;
inp[29598] = 1073741280;
inp[29599] = 0;
inp[29600] = 1073741248;
inp[29601] = 0;
inp[29602] = 1073741216;
inp[29603] = 0;
inp[29604] = 1073741184;
inp[29605] = 0;
inp[29606] = 1073741152;
inp[29607] = 0;
inp[29608] = 1073741120;
inp[29609] = 0;
inp[29610] = 1073741088;
inp[29611] = 0;
inp[29612] = 1073741056;
inp[29613] = 0;
inp[29614] = 1073741024;
inp[29615] = 0;
inp[29616] = 1073740992;
inp[29617] = 0;
inp[29618] = 1073740960;
inp[29619] = 0;
inp[29620] = 1073740928;
inp[29621] = 0;
inp[29622] = 1073740896;
inp[29623] = 0;
inp[29624] = 1073740864;
inp[29625] = 0;
inp[29626] = 1073740832;
inp[29627] = 0;
inp[29628] = 1073740800;
inp[29629] = 0;
inp[29630] = 1073740768;
inp[29631] = 0;
inp[29632] = 1073740736;
inp[29633] = 0;
inp[29634] = 1073740704;
inp[29635] = 0;
inp[29636] = 1073740672;
inp[29637] = 0;
inp[29638] = 1073740640;
inp[29639] = 0;
inp[29640] = 1073740608;
inp[29641] = 0;
inp[29642] = 1073740576;
inp[29643] = 0;
inp[29644] = 1073740544;
inp[29645] = 0;
inp[29646] = 1073740512;
inp[29647] = 0;
inp[29648] = 1073740480;
inp[29649] = 0;
inp[29650] = 1073740448;
inp[29651] = 0;
inp[29652] = 1073740416;
inp[29653] = 0;
inp[29654] = 1073740384;
inp[29655] = 0;
inp[29656] = 1073740352;
inp[29657] = 0;
inp[29658] = 1073740320;
inp[29659] = 0;
inp[29660] = 1073740288;
inp[29661] = 0;
inp[29662] = 1073740256;
inp[29663] = 0;
inp[29664] = 1073740224;
inp[29665] = 0;
inp[29666] = 1073740192;
inp[29667] = 0;
inp[29668] = 1073740160;
inp[29669] = 0;
inp[29670] = 1073740128;
inp[29671] = 0;
inp[29672] = 1073740096;
inp[29673] = 0;
inp[29674] = 1073740064;
inp[29675] = 0;
inp[29676] = 1073740032;
inp[29677] = 0;
inp[29678] = 1073740000;
inp[29679] = 0;
inp[29680] = 1073739968;
inp[29681] = 0;
inp[29682] = 1073739936;
inp[29683] = 0;
inp[29684] = 1073739904;
inp[29685] = 0;
inp[29686] = 1073739872;
inp[29687] = 0;
inp[29688] = 1073739840;
inp[29689] = 0;
inp[29690] = 1073739808;
inp[29691] = 0;
inp[29692] = 1073739776;
inp[29693] = 0;
inp[29694] = 1073739744;
inp[29695] = 0;
inp[29696] = 1073739712;
inp[29697] = 0;
inp[29698] = 1073739680;
inp[29699] = 0;
inp[29700] = 1073739648;
inp[29701] = 0;
inp[29702] = 1073739616;
inp[29703] = 0;
inp[29704] = 1073739584;
inp[29705] = 0;
inp[29706] = 1073739552;
inp[29707] = 0;
inp[29708] = 1073739520;
inp[29709] = 0;
inp[29710] = 1073739488;
inp[29711] = 0;
inp[29712] = 1073739456;
inp[29713] = 0;
inp[29714] = 1073739424;
inp[29715] = 0;
inp[29716] = 1073739392;
inp[29717] = 0;
inp[29718] = 1073739360;
inp[29719] = 0;
inp[29720] = 1073739328;
inp[29721] = 0;
inp[29722] = 1073739296;
inp[29723] = 0;
inp[29724] = 1073739264;
inp[29725] = 0;
inp[29726] = 1073739232;
inp[29727] = 0;
inp[29728] = 1073739200;
inp[29729] = 0;
inp[29730] = 1073739168;
inp[29731] = 0;
inp[29732] = 1073739136;
inp[29733] = 0;
inp[29734] = 1073739104;
inp[29735] = 0;
inp[29736] = 1073739072;
inp[29737] = 0;
inp[29738] = 1073739040;
inp[29739] = 0;
inp[29740] = 1073739008;
inp[29741] = 0;
inp[29742] = 1073738976;
inp[29743] = 0;
inp[29744] = 1073738944;
inp[29745] = 0;
inp[29746] = 1073738912;
inp[29747] = 0;
inp[29748] = 1073738880;
inp[29749] = 0;
inp[29750] = 1073738848;
inp[29751] = 0;
inp[29752] = 1073738816;
inp[29753] = 0;
inp[29754] = 1073738784;
inp[29755] = 0;
inp[29756] = 1073738752;
inp[29757] = 0;
inp[29758] = 1073738720;
inp[29759] = 0;
inp[29760] = 1073738688;
inp[29761] = 0;
inp[29762] = 1073738656;
inp[29763] = 0;
inp[29764] = 1073738624;
inp[29765] = 0;
inp[29766] = 1073738592;
inp[29767] = 0;
inp[29768] = 1073738560;
inp[29769] = 0;
inp[29770] = 1073738528;
inp[29771] = 0;
inp[29772] = 1073738496;
inp[29773] = 0;
inp[29774] = 1073738464;
inp[29775] = 0;
inp[29776] = 1073738432;
inp[29777] = 0;
inp[29778] = 1073738400;
inp[29779] = 0;
inp[29780] = 1073738368;
inp[29781] = 0;
inp[29782] = 1073738336;
inp[29783] = 0;
inp[29784] = 1073738304;
inp[29785] = 0;
inp[29786] = 1073738272;
inp[29787] = 0;
inp[29788] = 1073738240;
inp[29789] = 0;
inp[29790] = 1073738208;
inp[29791] = 0;
inp[29792] = 1073738176;
inp[29793] = 0;
inp[29794] = 1073738144;
inp[29795] = 0;
inp[29796] = 1073738112;
inp[29797] = 0;
inp[29798] = 1073738080;
inp[29799] = 0;
inp[29800] = 1073738048;
inp[29801] = 0;
inp[29802] = 1073738016;
inp[29803] = 0;
inp[29804] = 1073737984;
inp[29805] = 0;
inp[29806] = 1073737952;
inp[29807] = 0;
inp[29808] = 1073737920;
inp[29809] = 0;
inp[29810] = 1073737888;
inp[29811] = 0;
inp[29812] = 1073737856;
inp[29813] = 0;
inp[29814] = 1073737824;
inp[29815] = 0;
inp[29816] = 1073737792;
inp[29817] = 0;
inp[29818] = 1073737760;
inp[29819] = 0;
inp[29820] = 1073737728;
inp[29821] = 0;
inp[29822] = 1073737696;
inp[29823] = 0;
inp[29824] = 1073737664;
inp[29825] = 0;
inp[29826] = 1073737632;
inp[29827] = 0;
inp[29828] = 1073737600;
inp[29829] = 0;
inp[29830] = 1073737568;
inp[29831] = 0;
inp[29832] = 1073737536;
inp[29833] = 0;
inp[29834] = 1073737504;
inp[29835] = 0;
inp[29836] = 1073737472;
inp[29837] = 0;
inp[29838] = 1073737440;
inp[29839] = 0;
inp[29840] = 1073737408;
inp[29841] = 0;
inp[29842] = 1073737376;
inp[29843] = 0;
inp[29844] = 1073737344;
inp[29845] = 0;
inp[29846] = 1073737312;
inp[29847] = 0;
inp[29848] = 1073737280;
inp[29849] = 0;
inp[29850] = 1073737248;
inp[29851] = 0;
inp[29852] = 1073737216;
inp[29853] = 0;
inp[29854] = 1073737184;
inp[29855] = 0;
inp[29856] = 1073737152;
inp[29857] = 0;
inp[29858] = 1073737120;
inp[29859] = 0;
inp[29860] = 1073737088;
inp[29861] = 0;
inp[29862] = 1073737056;
inp[29863] = 0;
inp[29864] = 1073737024;
inp[29865] = 0;
inp[29866] = 1073736992;
inp[29867] = 0;
inp[29868] = 1073736960;
inp[29869] = 0;
inp[29870] = 1073736928;
inp[29871] = 0;
inp[29872] = 1073736896;
inp[29873] = 0;
inp[29874] = 1073736864;
inp[29875] = 0;
inp[29876] = 1073736832;
inp[29877] = 0;
inp[29878] = 1073736800;
inp[29879] = 0;
inp[29880] = 1073736768;
inp[29881] = 0;
inp[29882] = 1073736736;
inp[29883] = 0;
inp[29884] = 1073736704;
inp[29885] = 0;
inp[29886] = 1073736672;
inp[29887] = 0;
inp[29888] = 1073736640;
inp[29889] = 0;
inp[29890] = 1073736608;
inp[29891] = 0;
inp[29892] = 1073736576;
inp[29893] = 0;
inp[29894] = 1073736544;
inp[29895] = 0;
inp[29896] = 1073736512;
inp[29897] = 0;
inp[29898] = 1073736480;
inp[29899] = 0;
inp[29900] = 1073736448;
inp[29901] = 0;
inp[29902] = 1073736416;
inp[29903] = 0;
inp[29904] = 1073736384;
inp[29905] = 0;
inp[29906] = 1073736352;
inp[29907] = 0;
inp[29908] = 1073736320;
inp[29909] = 0;
inp[29910] = 1073736288;
inp[29911] = 0;
inp[29912] = 1073736256;
inp[29913] = 0;
inp[29914] = 1073736224;
inp[29915] = 0;
inp[29916] = 1073736192;
inp[29917] = 0;
inp[29918] = 1073736160;
inp[29919] = 0;
inp[29920] = 1073736128;
inp[29921] = 0;
inp[29922] = 1073736096;
inp[29923] = 0;
inp[29924] = 1073736064;
inp[29925] = 0;
inp[29926] = 1073736032;
inp[29927] = 0;
inp[29928] = 1073736000;
inp[29929] = 0;
inp[29930] = 1073735968;
inp[29931] = 0;
inp[29932] = 1073735936;
inp[29933] = 0;
inp[29934] = 1073735904;
inp[29935] = 0;
inp[29936] = 1073735872;
inp[29937] = 0;
inp[29938] = 1073735840;
inp[29939] = 0;
inp[29940] = 1073735808;
inp[29941] = 0;
inp[29942] = 1073735776;
inp[29943] = 0;
inp[29944] = 1073735744;
inp[29945] = 0;
inp[29946] = 1073735712;
inp[29947] = 0;
inp[29948] = 1073735680;
inp[29949] = 0;
inp[29950] = 1073735648;
inp[29951] = 0;
inp[29952] = 1073735616;
inp[29953] = 0;
inp[29954] = 1073735584;
inp[29955] = 0;
inp[29956] = 1073735552;
inp[29957] = 0;
inp[29958] = 1073735520;
inp[29959] = 0;
inp[29960] = 1073735488;
inp[29961] = 0;
inp[29962] = 1073735456;
inp[29963] = 0;
inp[29964] = 1073735424;
inp[29965] = 0;
inp[29966] = 1073735392;
inp[29967] = 0;
inp[29968] = 1073735360;
inp[29969] = 0;
inp[29970] = 1073735328;
inp[29971] = 0;
inp[29972] = 1073735296;
inp[29973] = 0;
inp[29974] = 1073735264;
inp[29975] = 0;
inp[29976] = 1073735232;
inp[29977] = 0;
inp[29978] = 1073735200;
inp[29979] = 0;
inp[29980] = 1073735168;
inp[29981] = 0;
inp[29982] = 1073735136;
inp[29983] = 0;
inp[29984] = 1073735104;
inp[29985] = 0;
inp[29986] = 1073735072;
inp[29987] = 0;
inp[29988] = 1073735040;
inp[29989] = 0;
inp[29990] = 1073735008;
inp[29991] = 0;
inp[29992] = 1073734976;
inp[29993] = 0;
inp[29994] = 1073734944;
inp[29995] = 0;
inp[29996] = 1073734912;
inp[29997] = 0;
inp[29998] = 1073734880;
inp[29999] = 0;
inp[30000] = 1073734848;
inp[30001] = 0;
inp[30002] = 1073734816;
inp[30003] = 0;
inp[30004] = 1073734784;
inp[30005] = 0;
inp[30006] = 1073734752;
inp[30007] = 0;
inp[30008] = 1073734720;
inp[30009] = 0;
inp[30010] = 1073734688;
inp[30011] = 0;
inp[30012] = 1073734656;
inp[30013] = 0;
inp[30014] = 1073734624;
inp[30015] = 0;
inp[30016] = 1073734592;
inp[30017] = 0;
inp[30018] = 1073734560;
inp[30019] = 0;
inp[30020] = 1073734528;
inp[30021] = 0;
inp[30022] = 1073734496;
inp[30023] = 0;
inp[30024] = 1073734464;
inp[30025] = 0;
inp[30026] = 1073734432;
inp[30027] = 0;
inp[30028] = 1073734400;
inp[30029] = 0;
inp[30030] = 1073734368;
inp[30031] = 0;
inp[30032] = 1073734336;
inp[30033] = 0;
inp[30034] = 1073734304;
inp[30035] = 0;
inp[30036] = 1073734272;
inp[30037] = 0;
inp[30038] = 1073734240;
inp[30039] = 0;
inp[30040] = 1073734208;
inp[30041] = 0;
inp[30042] = 1073734176;
inp[30043] = 0;
inp[30044] = 1073734144;
inp[30045] = 0;
inp[30046] = 1073734112;
inp[30047] = 0;
inp[30048] = 1073734080;
inp[30049] = 0;
inp[30050] = 1073734048;
inp[30051] = 0;
inp[30052] = 1073734016;
inp[30053] = 0;
inp[30054] = 1073733984;
inp[30055] = 0;
inp[30056] = 1073733952;
inp[30057] = 0;
inp[30058] = 1073733920;
inp[30059] = 0;
inp[30060] = 1073733888;
inp[30061] = 0;
inp[30062] = 1073733856;
inp[30063] = 0;
inp[30064] = 1073733824;
inp[30065] = 0;
inp[30066] = 1073733792;
inp[30067] = 0;
inp[30068] = 1073733760;
inp[30069] = 0;
inp[30070] = 1073733728;
inp[30071] = 0;
inp[30072] = 1073733696;
inp[30073] = 0;
inp[30074] = 1073733664;
inp[30075] = 0;
inp[30076] = 1073741824;
inp[30077] = 1073741824;
inp[30078] = 1073741808;
inp[30079] = 0;
inp[30080] = 1073741792;
inp[30081] = 0;
inp[30082] = 1073741776;
inp[30083] = 0;
inp[30084] = 1073741760;
inp[30085] = 0;
inp[30086] = 1073741744;
inp[30087] = 0;
inp[30088] = 1073741728;
inp[30089] = 0;
inp[30090] = 1073741712;
inp[30091] = 0;
inp[30092] = 1073741696;
inp[30093] = 0;
inp[30094] = 1073741680;
inp[30095] = 0;
inp[30096] = 1073741664;
inp[30097] = 0;
inp[30098] = 1073741648;
inp[30099] = 0;
inp[30100] = 1073741632;
inp[30101] = 0;
inp[30102] = 1073741616;
inp[30103] = 0;
inp[30104] = 1073741600;
inp[30105] = 0;
inp[30106] = 1073741584;
inp[30107] = 0;
inp[30108] = 1073741568;
inp[30109] = 0;
inp[30110] = 1073741552;
inp[30111] = 0;
inp[30112] = 1073741536;
inp[30113] = 0;
inp[30114] = 1073741520;
inp[30115] = 0;
inp[30116] = 1073741504;
inp[30117] = 0;
inp[30118] = 1073741488;
inp[30119] = 0;
inp[30120] = 1073741472;
inp[30121] = 0;
inp[30122] = 1073741456;
inp[30123] = 0;
inp[30124] = 1073741440;
inp[30125] = 0;
inp[30126] = 1073741424;
inp[30127] = 0;
inp[30128] = 1073741408;
inp[30129] = 0;
inp[30130] = 1073741392;
inp[30131] = 0;
inp[30132] = 1073741376;
inp[30133] = 0;
inp[30134] = 1073741360;
inp[30135] = 0;
inp[30136] = 1073741344;
inp[30137] = 0;
inp[30138] = 1073741328;
inp[30139] = 0;
inp[30140] = 1073741312;
inp[30141] = 0;
inp[30142] = 1073741296;
inp[30143] = 0;
inp[30144] = 1073741280;
inp[30145] = 0;
inp[30146] = 1073741264;
inp[30147] = 0;
inp[30148] = 1073741248;
inp[30149] = 0;
inp[30150] = 1073741232;
inp[30151] = 0;
inp[30152] = 1073741216;
inp[30153] = 0;
inp[30154] = 1073741200;
inp[30155] = 0;
inp[30156] = 1073741184;
inp[30157] = 0;
inp[30158] = 1073741168;
inp[30159] = 0;
inp[30160] = 1073741152;
inp[30161] = 0;
inp[30162] = 1073741136;
inp[30163] = 0;
inp[30164] = 1073741120;
inp[30165] = 0;
inp[30166] = 1073741104;
inp[30167] = 0;
inp[30168] = 1073741088;
inp[30169] = 0;
inp[30170] = 1073741072;
inp[30171] = 0;
inp[30172] = 1073741056;
inp[30173] = 0;
inp[30174] = 1073741040;
inp[30175] = 0;
inp[30176] = 1073741024;
inp[30177] = 0;
inp[30178] = 1073741008;
inp[30179] = 0;
inp[30180] = 1073740992;
inp[30181] = 0;
inp[30182] = 1073740976;
inp[30183] = 0;
inp[30184] = 1073740960;
inp[30185] = 0;
inp[30186] = 1073740944;
inp[30187] = 0;
inp[30188] = 1073740928;
inp[30189] = 0;
inp[30190] = 1073740912;
inp[30191] = 0;
inp[30192] = 1073740896;
inp[30193] = 0;
inp[30194] = 1073740880;
inp[30195] = 0;
inp[30196] = 1073740864;
inp[30197] = 0;
inp[30198] = 1073740848;
inp[30199] = 0;
inp[30200] = 1073740832;
inp[30201] = 0;
inp[30202] = 1073740816;
inp[30203] = 0;
inp[30204] = 1073740800;
inp[30205] = 0;
inp[30206] = 1073740784;
inp[30207] = 0;
inp[30208] = 1073740768;
inp[30209] = 0;
inp[30210] = 1073740752;
inp[30211] = 0;
inp[30212] = 1073740736;
inp[30213] = 0;
inp[30214] = 1073740720;
inp[30215] = 0;
inp[30216] = 1073740704;
inp[30217] = 0;
inp[30218] = 1073740688;
inp[30219] = 0;
inp[30220] = 1073740672;
inp[30221] = 0;
inp[30222] = 1073740656;
inp[30223] = 0;
inp[30224] = 1073740640;
inp[30225] = 0;
inp[30226] = 1073740624;
inp[30227] = 0;
inp[30228] = 1073740608;
inp[30229] = 0;
inp[30230] = 1073740592;
inp[30231] = 0;
inp[30232] = 1073740576;
inp[30233] = 0;
inp[30234] = 1073740560;
inp[30235] = 0;
inp[30236] = 1073740544;
inp[30237] = 0;
inp[30238] = 1073740528;
inp[30239] = 0;
inp[30240] = 1073740512;
inp[30241] = 0;
inp[30242] = 1073740496;
inp[30243] = 0;
inp[30244] = 1073740480;
inp[30245] = 0;
inp[30246] = 1073740464;
inp[30247] = 0;
inp[30248] = 1073740448;
inp[30249] = 0;
inp[30250] = 1073740432;
inp[30251] = 0;
inp[30252] = 1073740416;
inp[30253] = 0;
inp[30254] = 1073740400;
inp[30255] = 0;
inp[30256] = 1073740384;
inp[30257] = 0;
inp[30258] = 1073740368;
inp[30259] = 0;
inp[30260] = 1073740352;
inp[30261] = 0;
inp[30262] = 1073740336;
inp[30263] = 0;
inp[30264] = 1073740320;
inp[30265] = 0;
inp[30266] = 1073740304;
inp[30267] = 0;
inp[30268] = 1073740288;
inp[30269] = 0;
inp[30270] = 1073740272;
inp[30271] = 0;
inp[30272] = 1073740256;
inp[30273] = 0;
inp[30274] = 1073740240;
inp[30275] = 0;
inp[30276] = 1073740224;
inp[30277] = 0;
inp[30278] = 1073740208;
inp[30279] = 0;
inp[30280] = 1073740192;
inp[30281] = 0;
inp[30282] = 1073740176;
inp[30283] = 0;
inp[30284] = 1073740160;
inp[30285] = 0;
inp[30286] = 1073740144;
inp[30287] = 0;
inp[30288] = 1073740128;
inp[30289] = 0;
inp[30290] = 1073740112;
inp[30291] = 0;
inp[30292] = 1073740096;
inp[30293] = 0;
inp[30294] = 1073740080;
inp[30295] = 0;
inp[30296] = 1073740064;
inp[30297] = 0;
inp[30298] = 1073740048;
inp[30299] = 0;
inp[30300] = 1073740032;
inp[30301] = 0;
inp[30302] = 1073740016;
inp[30303] = 0;
inp[30304] = 1073740000;
inp[30305] = 0;
inp[30306] = 1073739984;
inp[30307] = 0;
inp[30308] = 1073739968;
inp[30309] = 0;
inp[30310] = 1073739952;
inp[30311] = 0;
inp[30312] = 1073739936;
inp[30313] = 0;
inp[30314] = 1073739920;
inp[30315] = 0;
inp[30316] = 1073739904;
inp[30317] = 0;
inp[30318] = 1073739888;
inp[30319] = 0;
inp[30320] = 1073739872;
inp[30321] = 0;
inp[30322] = 1073739856;
inp[30323] = 0;
inp[30324] = 1073739840;
inp[30325] = 0;
inp[30326] = 1073739824;
inp[30327] = 0;
inp[30328] = 1073739808;
inp[30329] = 0;
inp[30330] = 1073739792;
inp[30331] = 0;
inp[30332] = 1073739776;
inp[30333] = 0;
inp[30334] = 1073739760;
inp[30335] = 0;
inp[30336] = 1073739744;
inp[30337] = 0;
inp[30338] = 1073739728;
inp[30339] = 0;
inp[30340] = 1073739712;
inp[30341] = 0;
inp[30342] = 1073739696;
inp[30343] = 0;
inp[30344] = 1073739680;
inp[30345] = 0;
inp[30346] = 1073739664;
inp[30347] = 0;
inp[30348] = 1073739648;
inp[30349] = 0;
inp[30350] = 1073739632;
inp[30351] = 0;
inp[30352] = 1073739616;
inp[30353] = 0;
inp[30354] = 1073739600;
inp[30355] = 0;
inp[30356] = 1073739584;
inp[30357] = 0;
inp[30358] = 1073739568;
inp[30359] = 0;
inp[30360] = 1073739552;
inp[30361] = 0;
inp[30362] = 1073739536;
inp[30363] = 0;
inp[30364] = 1073739520;
inp[30365] = 0;
inp[30366] = 1073739504;
inp[30367] = 0;
inp[30368] = 1073739488;
inp[30369] = 0;
inp[30370] = 1073739472;
inp[30371] = 0;
inp[30372] = 1073739456;
inp[30373] = 0;
inp[30374] = 1073739440;
inp[30375] = 0;
inp[30376] = 1073739424;
inp[30377] = 0;
inp[30378] = 1073739408;
inp[30379] = 0;
inp[30380] = 1073739392;
inp[30381] = 0;
inp[30382] = 1073739376;
inp[30383] = 0;
inp[30384] = 1073739360;
inp[30385] = 0;
inp[30386] = 1073739344;
inp[30387] = 0;
inp[30388] = 1073739328;
inp[30389] = 0;
inp[30390] = 1073739312;
inp[30391] = 0;
inp[30392] = 1073739296;
inp[30393] = 0;
inp[30394] = 1073739280;
inp[30395] = 0;
inp[30396] = 1073739264;
inp[30397] = 0;
inp[30398] = 1073739248;
inp[30399] = 0;
inp[30400] = 1073739232;
inp[30401] = 0;
inp[30402] = 1073739216;
inp[30403] = 0;
inp[30404] = 1073739200;
inp[30405] = 0;
inp[30406] = 1073739184;
inp[30407] = 0;
inp[30408] = 1073739168;
inp[30409] = 0;
inp[30410] = 1073739152;
inp[30411] = 0;
inp[30412] = 1073739136;
inp[30413] = 0;
inp[30414] = 1073739120;
inp[30415] = 0;
inp[30416] = 1073739104;
inp[30417] = 0;
inp[30418] = 1073739088;
inp[30419] = 0;
inp[30420] = 1073739072;
inp[30421] = 0;
inp[30422] = 1073739056;
inp[30423] = 0;
inp[30424] = 1073739040;
inp[30425] = 0;
inp[30426] = 1073739024;
inp[30427] = 0;
inp[30428] = 1073739008;
inp[30429] = 0;
inp[30430] = 1073738992;
inp[30431] = 0;
inp[30432] = 1073738976;
inp[30433] = 0;
inp[30434] = 1073738960;
inp[30435] = 0;
inp[30436] = 1073738944;
inp[30437] = 0;
inp[30438] = 1073738928;
inp[30439] = 0;
inp[30440] = 1073738912;
inp[30441] = 0;
inp[30442] = 1073738896;
inp[30443] = 0;
inp[30444] = 1073738880;
inp[30445] = 0;
inp[30446] = 1073738864;
inp[30447] = 0;
inp[30448] = 1073738848;
inp[30449] = 0;
inp[30450] = 1073738832;
inp[30451] = 0;
inp[30452] = 1073738816;
inp[30453] = 0;
inp[30454] = 1073738800;
inp[30455] = 0;
inp[30456] = 1073738784;
inp[30457] = 0;
inp[30458] = 1073738768;
inp[30459] = 0;
inp[30460] = 1073738752;
inp[30461] = 0;
inp[30462] = 1073738736;
inp[30463] = 0;
inp[30464] = 1073738720;
inp[30465] = 0;
inp[30466] = 1073738704;
inp[30467] = 0;
inp[30468] = 1073738688;
inp[30469] = 0;
inp[30470] = 1073738672;
inp[30471] = 0;
inp[30472] = 1073738656;
inp[30473] = 0;
inp[30474] = 1073738640;
inp[30475] = 0;
inp[30476] = 1073738624;
inp[30477] = 0;
inp[30478] = 1073738608;
inp[30479] = 0;
inp[30480] = 1073738592;
inp[30481] = 0;
inp[30482] = 1073738576;
inp[30483] = 0;
inp[30484] = 1073738560;
inp[30485] = 0;
inp[30486] = 1073738544;
inp[30487] = 0;
inp[30488] = 1073738528;
inp[30489] = 0;
inp[30490] = 1073738512;
inp[30491] = 0;
inp[30492] = 1073738496;
inp[30493] = 0;
inp[30494] = 1073738480;
inp[30495] = 0;
inp[30496] = 1073738464;
inp[30497] = 0;
inp[30498] = 1073738448;
inp[30499] = 0;
inp[30500] = 1073738432;
inp[30501] = 0;
inp[30502] = 1073738416;
inp[30503] = 0;
inp[30504] = 1073738400;
inp[30505] = 0;
inp[30506] = 1073738384;
inp[30507] = 0;
inp[30508] = 1073738368;
inp[30509] = 0;
inp[30510] = 1073738352;
inp[30511] = 0;
inp[30512] = 1073738336;
inp[30513] = 0;
inp[30514] = 1073738320;
inp[30515] = 0;
inp[30516] = 1073738304;
inp[30517] = 0;
inp[30518] = 1073738288;
inp[30519] = 0;
inp[30520] = 1073738272;
inp[30521] = 0;
inp[30522] = 1073738256;
inp[30523] = 0;
inp[30524] = 1073738240;
inp[30525] = 0;
inp[30526] = 1073738224;
inp[30527] = 0;
inp[30528] = 1073738208;
inp[30529] = 0;
inp[30530] = 1073738192;
inp[30531] = 0;
inp[30532] = 1073738176;
inp[30533] = 0;
inp[30534] = 1073738160;
inp[30535] = 0;
inp[30536] = 1073738144;
inp[30537] = 0;
inp[30538] = 1073738128;
inp[30539] = 0;
inp[30540] = 1073738112;
inp[30541] = 0;
inp[30542] = 1073738096;
inp[30543] = 0;
inp[30544] = 1073738080;
inp[30545] = 0;
inp[30546] = 1073738064;
inp[30547] = 0;
inp[30548] = 1073738048;
inp[30549] = 0;
inp[30550] = 1073738032;
inp[30551] = 0;
inp[30552] = 1073738016;
inp[30553] = 0;
inp[30554] = 1073738000;
inp[30555] = 0;
inp[30556] = 1073737984;
inp[30557] = 0;
inp[30558] = 1073737968;
inp[30559] = 0;
inp[30560] = 1073737952;
inp[30561] = 0;
inp[30562] = 1073737936;
inp[30563] = 0;
inp[30564] = 1073737920;
inp[30565] = 0;
inp[30566] = 1073737904;
inp[30567] = 0;
inp[30568] = 1073737888;
inp[30569] = 0;
inp[30570] = 1073737872;
inp[30571] = 0;
inp[30572] = 1073737856;
inp[30573] = 0;
inp[30574] = 1073737840;
inp[30575] = 0;
inp[30576] = 1073737824;
inp[30577] = 0;
inp[30578] = 1073737808;
inp[30579] = 0;
inp[30580] = 1073737792;
inp[30581] = 0;
inp[30582] = 1073737776;
inp[30583] = 0;
inp[30584] = 1073737760;
inp[30585] = 0;
inp[30586] = 1073737744;
inp[30587] = 0;
inp[30588] = 1073741824;
inp[30589] = 1073741824;
inp[30590] = 1073741816;
inp[30591] = 0;
inp[30592] = 1073741808;
inp[30593] = 0;
inp[30594] = 1073741800;
inp[30595] = 0;
inp[30596] = 1073741792;
inp[30597] = 0;
inp[30598] = 1073741784;
inp[30599] = 0;
inp[30600] = 1073741776;
inp[30601] = 0;
inp[30602] = 1073741768;
inp[30603] = 0;
inp[30604] = 1073741760;
inp[30605] = 0;
inp[30606] = 1073741752;
inp[30607] = 0;
inp[30608] = 1073741744;
inp[30609] = 0;
inp[30610] = 1073741736;
inp[30611] = 0;
inp[30612] = 1073741728;
inp[30613] = 0;
inp[30614] = 1073741720;
inp[30615] = 0;
inp[30616] = 1073741712;
inp[30617] = 0;
inp[30618] = 1073741704;
inp[30619] = 0;
inp[30620] = 1073741696;
inp[30621] = 0;
inp[30622] = 1073741688;
inp[30623] = 0;
inp[30624] = 1073741680;
inp[30625] = 0;
inp[30626] = 1073741672;
inp[30627] = 0;
inp[30628] = 1073741664;
inp[30629] = 0;
inp[30630] = 1073741656;
inp[30631] = 0;
inp[30632] = 1073741648;
inp[30633] = 0;
inp[30634] = 1073741640;
inp[30635] = 0;
inp[30636] = 1073741632;
inp[30637] = 0;
inp[30638] = 1073741624;
inp[30639] = 0;
inp[30640] = 1073741616;
inp[30641] = 0;
inp[30642] = 1073741608;
inp[30643] = 0;
inp[30644] = 1073741600;
inp[30645] = 0;
inp[30646] = 1073741592;
inp[30647] = 0;
inp[30648] = 1073741584;
inp[30649] = 0;
inp[30650] = 1073741576;
inp[30651] = 0;
inp[30652] = 1073741568;
inp[30653] = 0;
inp[30654] = 1073741560;
inp[30655] = 0;
inp[30656] = 1073741552;
inp[30657] = 0;
inp[30658] = 1073741544;
inp[30659] = 0;
inp[30660] = 1073741536;
inp[30661] = 0;
inp[30662] = 1073741528;
inp[30663] = 0;
inp[30664] = 1073741520;
inp[30665] = 0;
inp[30666] = 1073741512;
inp[30667] = 0;
inp[30668] = 1073741504;
inp[30669] = 0;
inp[30670] = 1073741496;
inp[30671] = 0;
inp[30672] = 1073741488;
inp[30673] = 0;
inp[30674] = 1073741480;
inp[30675] = 0;
inp[30676] = 1073741472;
inp[30677] = 0;
inp[30678] = 1073741464;
inp[30679] = 0;
inp[30680] = 1073741456;
inp[30681] = 0;
inp[30682] = 1073741448;
inp[30683] = 0;
inp[30684] = 1073741440;
inp[30685] = 0;
inp[30686] = 1073741432;
inp[30687] = 0;
inp[30688] = 1073741424;
inp[30689] = 0;
inp[30690] = 1073741416;
inp[30691] = 0;
inp[30692] = 1073741408;
inp[30693] = 0;
inp[30694] = 1073741400;
inp[30695] = 0;
inp[30696] = 1073741392;
inp[30697] = 0;
inp[30698] = 1073741384;
inp[30699] = 0;
inp[30700] = 1073741376;
inp[30701] = 0;
inp[30702] = 1073741368;
inp[30703] = 0;
inp[30704] = 1073741360;
inp[30705] = 0;
inp[30706] = 1073741352;
inp[30707] = 0;
inp[30708] = 1073741344;
inp[30709] = 0;
inp[30710] = 1073741336;
inp[30711] = 0;
inp[30712] = 1073741328;
inp[30713] = 0;
inp[30714] = 1073741320;
inp[30715] = 0;
inp[30716] = 1073741312;
inp[30717] = 0;
inp[30718] = 1073741304;
inp[30719] = 0;
inp[30720] = 1073741296;
inp[30721] = 0;
inp[30722] = 1073741288;
inp[30723] = 0;
inp[30724] = 1073741280;
inp[30725] = 0;
inp[30726] = 1073741272;
inp[30727] = 0;
inp[30728] = 1073741264;
inp[30729] = 0;
inp[30730] = 1073741256;
inp[30731] = 0;
inp[30732] = 1073741248;
inp[30733] = 0;
inp[30734] = 1073741240;
inp[30735] = 0;
inp[30736] = 1073741232;
inp[30737] = 0;
inp[30738] = 1073741224;
inp[30739] = 0;
inp[30740] = 1073741216;
inp[30741] = 0;
inp[30742] = 1073741208;
inp[30743] = 0;
inp[30744] = 1073741200;
inp[30745] = 0;
inp[30746] = 1073741192;
inp[30747] = 0;
inp[30748] = 1073741184;
inp[30749] = 0;
inp[30750] = 1073741176;
inp[30751] = 0;
inp[30752] = 1073741168;
inp[30753] = 0;
inp[30754] = 1073741160;
inp[30755] = 0;
inp[30756] = 1073741152;
inp[30757] = 0;
inp[30758] = 1073741144;
inp[30759] = 0;
inp[30760] = 1073741136;
inp[30761] = 0;
inp[30762] = 1073741128;
inp[30763] = 0;
inp[30764] = 1073741120;
inp[30765] = 0;
inp[30766] = 1073741112;
inp[30767] = 0;
inp[30768] = 1073741104;
inp[30769] = 0;
inp[30770] = 1073741096;
inp[30771] = 0;
inp[30772] = 1073741088;
inp[30773] = 0;
inp[30774] = 1073741080;
inp[30775] = 0;
inp[30776] = 1073741072;
inp[30777] = 0;
inp[30778] = 1073741064;
inp[30779] = 0;
inp[30780] = 1073741056;
inp[30781] = 0;
inp[30782] = 1073741048;
inp[30783] = 0;
inp[30784] = 1073741040;
inp[30785] = 0;
inp[30786] = 1073741032;
inp[30787] = 0;
inp[30788] = 1073741024;
inp[30789] = 0;
inp[30790] = 1073741016;
inp[30791] = 0;
inp[30792] = 1073741008;
inp[30793] = 0;
inp[30794] = 1073741000;
inp[30795] = 0;
inp[30796] = 1073740992;
inp[30797] = 0;
inp[30798] = 1073740984;
inp[30799] = 0;
inp[30800] = 1073740976;
inp[30801] = 0;
inp[30802] = 1073740968;
inp[30803] = 0;
inp[30804] = 1073740960;
inp[30805] = 0;
inp[30806] = 1073740952;
inp[30807] = 0;
inp[30808] = 1073740944;
inp[30809] = 0;
inp[30810] = 1073740936;
inp[30811] = 0;
inp[30812] = 1073740928;
inp[30813] = 0;
inp[30814] = 1073740920;
inp[30815] = 0;
inp[30816] = 1073740912;
inp[30817] = 0;
inp[30818] = 1073740904;
inp[30819] = 0;
inp[30820] = 1073740896;
inp[30821] = 0;
inp[30822] = 1073740888;
inp[30823] = 0;
inp[30824] = 1073740880;
inp[30825] = 0;
inp[30826] = 1073740872;
inp[30827] = 0;
inp[30828] = 1073740864;
inp[30829] = 0;
inp[30830] = 1073740856;
inp[30831] = 0;
inp[30832] = 1073740848;
inp[30833] = 0;
inp[30834] = 1073740840;
inp[30835] = 0;
inp[30836] = 1073740832;
inp[30837] = 0;
inp[30838] = 1073740824;
inp[30839] = 0;
inp[30840] = 1073740816;
inp[30841] = 0;
inp[30842] = 1073740808;
inp[30843] = 0;
inp[30844] = 1073740800;
inp[30845] = 0;
inp[30846] = 1073740792;
inp[30847] = 0;
inp[30848] = 1073740784;
inp[30849] = 0;
inp[30850] = 1073740776;
inp[30851] = 0;
inp[30852] = 1073740768;
inp[30853] = 0;
inp[30854] = 1073740760;
inp[30855] = 0;
inp[30856] = 1073740752;
inp[30857] = 0;
inp[30858] = 1073740744;
inp[30859] = 0;
inp[30860] = 1073740736;
inp[30861] = 0;
inp[30862] = 1073740728;
inp[30863] = 0;
inp[30864] = 1073740720;
inp[30865] = 0;
inp[30866] = 1073740712;
inp[30867] = 0;
inp[30868] = 1073740704;
inp[30869] = 0;
inp[30870] = 1073740696;
inp[30871] = 0;
inp[30872] = 1073740688;
inp[30873] = 0;
inp[30874] = 1073740680;
inp[30875] = 0;
inp[30876] = 1073740672;
inp[30877] = 0;
inp[30878] = 1073740664;
inp[30879] = 0;
inp[30880] = 1073740656;
inp[30881] = 0;
inp[30882] = 1073740648;
inp[30883] = 0;
inp[30884] = 1073740640;
inp[30885] = 0;
inp[30886] = 1073740632;
inp[30887] = 0;
inp[30888] = 1073740624;
inp[30889] = 0;
inp[30890] = 1073740616;
inp[30891] = 0;
inp[30892] = 1073740608;
inp[30893] = 0;
inp[30894] = 1073740600;
inp[30895] = 0;
inp[30896] = 1073740592;
inp[30897] = 0;
inp[30898] = 1073740584;
inp[30899] = 0;
inp[30900] = 1073740576;
inp[30901] = 0;
inp[30902] = 1073740568;
inp[30903] = 0;
inp[30904] = 1073740560;
inp[30905] = 0;
inp[30906] = 1073740552;
inp[30907] = 0;
inp[30908] = 1073740544;
inp[30909] = 0;
inp[30910] = 1073740536;
inp[30911] = 0;
inp[30912] = 1073740528;
inp[30913] = 0;
inp[30914] = 1073740520;
inp[30915] = 0;
inp[30916] = 1073740512;
inp[30917] = 0;
inp[30918] = 1073740504;
inp[30919] = 0;
inp[30920] = 1073740496;
inp[30921] = 0;
inp[30922] = 1073740488;
inp[30923] = 0;
inp[30924] = 1073740480;
inp[30925] = 0;
inp[30926] = 1073740472;
inp[30927] = 0;
inp[30928] = 1073740464;
inp[30929] = 0;
inp[30930] = 1073740456;
inp[30931] = 0;
inp[30932] = 1073740448;
inp[30933] = 0;
inp[30934] = 1073740440;
inp[30935] = 0;
inp[30936] = 1073740432;
inp[30937] = 0;
inp[30938] = 1073740424;
inp[30939] = 0;
inp[30940] = 1073740416;
inp[30941] = 0;
inp[30942] = 1073740408;
inp[30943] = 0;
inp[30944] = 1073740400;
inp[30945] = 0;
inp[30946] = 1073740392;
inp[30947] = 0;
inp[30948] = 1073740384;
inp[30949] = 0;
inp[30950] = 1073740376;
inp[30951] = 0;
inp[30952] = 1073740368;
inp[30953] = 0;
inp[30954] = 1073740360;
inp[30955] = 0;
inp[30956] = 1073740352;
inp[30957] = 0;
inp[30958] = 1073740344;
inp[30959] = 0;
inp[30960] = 1073740336;
inp[30961] = 0;
inp[30962] = 1073740328;
inp[30963] = 0;
inp[30964] = 1073740320;
inp[30965] = 0;
inp[30966] = 1073740312;
inp[30967] = 0;
inp[30968] = 1073740304;
inp[30969] = 0;
inp[30970] = 1073740296;
inp[30971] = 0;
inp[30972] = 1073740288;
inp[30973] = 0;
inp[30974] = 1073740280;
inp[30975] = 0;
inp[30976] = 1073740272;
inp[30977] = 0;
inp[30978] = 1073740264;
inp[30979] = 0;
inp[30980] = 1073740256;
inp[30981] = 0;
inp[30982] = 1073740248;
inp[30983] = 0;
inp[30984] = 1073740240;
inp[30985] = 0;
inp[30986] = 1073740232;
inp[30987] = 0;
inp[30988] = 1073740224;
inp[30989] = 0;
inp[30990] = 1073740216;
inp[30991] = 0;
inp[30992] = 1073740208;
inp[30993] = 0;
inp[30994] = 1073740200;
inp[30995] = 0;
inp[30996] = 1073740192;
inp[30997] = 0;
inp[30998] = 1073740184;
inp[30999] = 0;
inp[31000] = 1073740176;
inp[31001] = 0;
inp[31002] = 1073740168;
inp[31003] = 0;
inp[31004] = 1073740160;
inp[31005] = 0;
inp[31006] = 1073740152;
inp[31007] = 0;
inp[31008] = 1073740144;
inp[31009] = 0;
inp[31010] = 1073740136;
inp[31011] = 0;
inp[31012] = 1073740128;
inp[31013] = 0;
inp[31014] = 1073740120;
inp[31015] = 0;
inp[31016] = 1073740112;
inp[31017] = 0;
inp[31018] = 1073740104;
inp[31019] = 0;
inp[31020] = 1073740096;
inp[31021] = 0;
inp[31022] = 1073740088;
inp[31023] = 0;
inp[31024] = 1073740080;
inp[31025] = 0;
inp[31026] = 1073740072;
inp[31027] = 0;
inp[31028] = 1073740064;
inp[31029] = 0;
inp[31030] = 1073740056;
inp[31031] = 0;
inp[31032] = 1073740048;
inp[31033] = 0;
inp[31034] = 1073740040;
inp[31035] = 0;
inp[31036] = 1073740032;
inp[31037] = 0;
inp[31038] = 1073740024;
inp[31039] = 0;
inp[31040] = 1073740016;
inp[31041] = 0;
inp[31042] = 1073740008;
inp[31043] = 0;
inp[31044] = 1073740000;
inp[31045] = 0;
inp[31046] = 1073739992;
inp[31047] = 0;
inp[31048] = 1073739984;
inp[31049] = 0;
inp[31050] = 1073739976;
inp[31051] = 0;
inp[31052] = 1073739968;
inp[31053] = 0;
inp[31054] = 1073739960;
inp[31055] = 0;
inp[31056] = 1073739952;
inp[31057] = 0;
inp[31058] = 1073739944;
inp[31059] = 0;
inp[31060] = 1073739936;
inp[31061] = 0;
inp[31062] = 1073739928;
inp[31063] = 0;
inp[31064] = 1073739920;
inp[31065] = 0;
inp[31066] = 1073739912;
inp[31067] = 0;
inp[31068] = 1073739904;
inp[31069] = 0;
inp[31070] = 1073739896;
inp[31071] = 0;
inp[31072] = 1073739888;
inp[31073] = 0;
inp[31074] = 1073739880;
inp[31075] = 0;
inp[31076] = 1073739872;
inp[31077] = 0;
inp[31078] = 1073739864;
inp[31079] = 0;
inp[31080] = 1073739856;
inp[31081] = 0;
inp[31082] = 1073739848;
inp[31083] = 0;
inp[31084] = 1073739840;
inp[31085] = 0;
inp[31086] = 1073739832;
inp[31087] = 0;
inp[31088] = 1073739824;
inp[31089] = 0;
inp[31090] = 1073739816;
inp[31091] = 0;
inp[31092] = 1073739808;
inp[31093] = 0;
inp[31094] = 1073739800;
inp[31095] = 0;
inp[31096] = 1073739792;
inp[31097] = 0;
inp[31098] = 1073739784;
inp[31099] = 0;
inp[31100] = 1073741824;
inp[31101] = 1073741824;
inp[31102] = 1073741820;
inp[31103] = 0;
inp[31104] = 1073741816;
inp[31105] = 0;
inp[31106] = 1073741812;
inp[31107] = 0;
inp[31108] = 1073741808;
inp[31109] = 0;
inp[31110] = 1073741804;
inp[31111] = 0;
inp[31112] = 1073741800;
inp[31113] = 0;
inp[31114] = 1073741796;
inp[31115] = 0;
inp[31116] = 1073741792;
inp[31117] = 0;
inp[31118] = 1073741788;
inp[31119] = 0;
inp[31120] = 1073741784;
inp[31121] = 0;
inp[31122] = 1073741780;
inp[31123] = 0;
inp[31124] = 1073741776;
inp[31125] = 0;
inp[31126] = 1073741772;
inp[31127] = 0;
inp[31128] = 1073741768;
inp[31129] = 0;
inp[31130] = 1073741764;
inp[31131] = 0;
inp[31132] = 1073741760;
inp[31133] = 0;
inp[31134] = 1073741756;
inp[31135] = 0;
inp[31136] = 1073741752;
inp[31137] = 0;
inp[31138] = 1073741748;
inp[31139] = 0;
inp[31140] = 1073741744;
inp[31141] = 0;
inp[31142] = 1073741740;
inp[31143] = 0;
inp[31144] = 1073741736;
inp[31145] = 0;
inp[31146] = 1073741732;
inp[31147] = 0;
inp[31148] = 1073741728;
inp[31149] = 0;
inp[31150] = 1073741724;
inp[31151] = 0;
inp[31152] = 1073741720;
inp[31153] = 0;
inp[31154] = 1073741716;
inp[31155] = 0;
inp[31156] = 1073741712;
inp[31157] = 0;
inp[31158] = 1073741708;
inp[31159] = 0;
inp[31160] = 1073741704;
inp[31161] = 0;
inp[31162] = 1073741700;
inp[31163] = 0;
inp[31164] = 1073741696;
inp[31165] = 0;
inp[31166] = 1073741692;
inp[31167] = 0;
inp[31168] = 1073741688;
inp[31169] = 0;
inp[31170] = 1073741684;
inp[31171] = 0;
inp[31172] = 1073741680;
inp[31173] = 0;
inp[31174] = 1073741676;
inp[31175] = 0;
inp[31176] = 1073741672;
inp[31177] = 0;
inp[31178] = 1073741668;
inp[31179] = 0;
inp[31180] = 1073741664;
inp[31181] = 0;
inp[31182] = 1073741660;
inp[31183] = 0;
inp[31184] = 1073741656;
inp[31185] = 0;
inp[31186] = 1073741652;
inp[31187] = 0;
inp[31188] = 1073741648;
inp[31189] = 0;
inp[31190] = 1073741644;
inp[31191] = 0;
inp[31192] = 1073741640;
inp[31193] = 0;
inp[31194] = 1073741636;
inp[31195] = 0;
inp[31196] = 1073741632;
inp[31197] = 0;
inp[31198] = 1073741628;
inp[31199] = 0;
inp[31200] = 1073741624;
inp[31201] = 0;
inp[31202] = 1073741620;
inp[31203] = 0;
inp[31204] = 1073741616;
inp[31205] = 0;
inp[31206] = 1073741612;
inp[31207] = 0;
inp[31208] = 1073741608;
inp[31209] = 0;
inp[31210] = 1073741604;
inp[31211] = 0;
inp[31212] = 1073741600;
inp[31213] = 0;
inp[31214] = 1073741596;
inp[31215] = 0;
inp[31216] = 1073741592;
inp[31217] = 0;
inp[31218] = 1073741588;
inp[31219] = 0;
inp[31220] = 1073741584;
inp[31221] = 0;
inp[31222] = 1073741580;
inp[31223] = 0;
inp[31224] = 1073741576;
inp[31225] = 0;
inp[31226] = 1073741572;
inp[31227] = 0;
inp[31228] = 1073741568;
inp[31229] = 0;
inp[31230] = 1073741564;
inp[31231] = 0;
inp[31232] = 1073741560;
inp[31233] = 0;
inp[31234] = 1073741556;
inp[31235] = 0;
inp[31236] = 1073741552;
inp[31237] = 0;
inp[31238] = 1073741548;
inp[31239] = 0;
inp[31240] = 1073741544;
inp[31241] = 0;
inp[31242] = 1073741540;
inp[31243] = 0;
inp[31244] = 1073741536;
inp[31245] = 0;
inp[31246] = 1073741532;
inp[31247] = 0;
inp[31248] = 1073741528;
inp[31249] = 0;
inp[31250] = 1073741524;
inp[31251] = 0;
inp[31252] = 1073741520;
inp[31253] = 0;
inp[31254] = 1073741516;
inp[31255] = 0;
inp[31256] = 1073741512;
inp[31257] = 0;
inp[31258] = 1073741508;
inp[31259] = 0;
inp[31260] = 1073741504;
inp[31261] = 0;
inp[31262] = 1073741500;
inp[31263] = 0;
inp[31264] = 1073741496;
inp[31265] = 0;
inp[31266] = 1073741492;
inp[31267] = 0;
inp[31268] = 1073741488;
inp[31269] = 0;
inp[31270] = 1073741484;
inp[31271] = 0;
inp[31272] = 1073741480;
inp[31273] = 0;
inp[31274] = 1073741476;
inp[31275] = 0;
inp[31276] = 1073741472;
inp[31277] = 0;
inp[31278] = 1073741468;
inp[31279] = 0;
inp[31280] = 1073741464;
inp[31281] = 0;
inp[31282] = 1073741460;
inp[31283] = 0;
inp[31284] = 1073741456;
inp[31285] = 0;
inp[31286] = 1073741452;
inp[31287] = 0;
inp[31288] = 1073741448;
inp[31289] = 0;
inp[31290] = 1073741444;
inp[31291] = 0;
inp[31292] = 1073741440;
inp[31293] = 0;
inp[31294] = 1073741436;
inp[31295] = 0;
inp[31296] = 1073741432;
inp[31297] = 0;
inp[31298] = 1073741428;
inp[31299] = 0;
inp[31300] = 1073741424;
inp[31301] = 0;
inp[31302] = 1073741420;
inp[31303] = 0;
inp[31304] = 1073741416;
inp[31305] = 0;
inp[31306] = 1073741412;
inp[31307] = 0;
inp[31308] = 1073741408;
inp[31309] = 0;
inp[31310] = 1073741404;
inp[31311] = 0;
inp[31312] = 1073741400;
inp[31313] = 0;
inp[31314] = 1073741396;
inp[31315] = 0;
inp[31316] = 1073741392;
inp[31317] = 0;
inp[31318] = 1073741388;
inp[31319] = 0;
inp[31320] = 1073741384;
inp[31321] = 0;
inp[31322] = 1073741380;
inp[31323] = 0;
inp[31324] = 1073741376;
inp[31325] = 0;
inp[31326] = 1073741372;
inp[31327] = 0;
inp[31328] = 1073741368;
inp[31329] = 0;
inp[31330] = 1073741364;
inp[31331] = 0;
inp[31332] = 1073741360;
inp[31333] = 0;
inp[31334] = 1073741356;
inp[31335] = 0;
inp[31336] = 1073741352;
inp[31337] = 0;
inp[31338] = 1073741348;
inp[31339] = 0;
inp[31340] = 1073741344;
inp[31341] = 0;
inp[31342] = 1073741340;
inp[31343] = 0;
inp[31344] = 1073741336;
inp[31345] = 0;
inp[31346] = 1073741332;
inp[31347] = 0;
inp[31348] = 1073741328;
inp[31349] = 0;
inp[31350] = 1073741324;
inp[31351] = 0;
inp[31352] = 1073741320;
inp[31353] = 0;
inp[31354] = 1073741316;
inp[31355] = 0;
inp[31356] = 1073741312;
inp[31357] = 0;
inp[31358] = 1073741308;
inp[31359] = 0;
inp[31360] = 1073741304;
inp[31361] = 0;
inp[31362] = 1073741300;
inp[31363] = 0;
inp[31364] = 1073741296;
inp[31365] = 0;
inp[31366] = 1073741292;
inp[31367] = 0;
inp[31368] = 1073741288;
inp[31369] = 0;
inp[31370] = 1073741284;
inp[31371] = 0;
inp[31372] = 1073741280;
inp[31373] = 0;
inp[31374] = 1073741276;
inp[31375] = 0;
inp[31376] = 1073741272;
inp[31377] = 0;
inp[31378] = 1073741268;
inp[31379] = 0;
inp[31380] = 1073741264;
inp[31381] = 0;
inp[31382] = 1073741260;
inp[31383] = 0;
inp[31384] = 1073741256;
inp[31385] = 0;
inp[31386] = 1073741252;
inp[31387] = 0;
inp[31388] = 1073741248;
inp[31389] = 0;
inp[31390] = 1073741244;
inp[31391] = 0;
inp[31392] = 1073741240;
inp[31393] = 0;
inp[31394] = 1073741236;
inp[31395] = 0;
inp[31396] = 1073741232;
inp[31397] = 0;
inp[31398] = 1073741228;
inp[31399] = 0;
inp[31400] = 1073741224;
inp[31401] = 0;
inp[31402] = 1073741220;
inp[31403] = 0;
inp[31404] = 1073741216;
inp[31405] = 0;
inp[31406] = 1073741212;
inp[31407] = 0;
inp[31408] = 1073741208;
inp[31409] = 0;
inp[31410] = 1073741204;
inp[31411] = 0;
inp[31412] = 1073741200;
inp[31413] = 0;
inp[31414] = 1073741196;
inp[31415] = 0;
inp[31416] = 1073741192;
inp[31417] = 0;
inp[31418] = 1073741188;
inp[31419] = 0;
inp[31420] = 1073741184;
inp[31421] = 0;
inp[31422] = 1073741180;
inp[31423] = 0;
inp[31424] = 1073741176;
inp[31425] = 0;
inp[31426] = 1073741172;
inp[31427] = 0;
inp[31428] = 1073741168;
inp[31429] = 0;
inp[31430] = 1073741164;
inp[31431] = 0;
inp[31432] = 1073741160;
inp[31433] = 0;
inp[31434] = 1073741156;
inp[31435] = 0;
inp[31436] = 1073741152;
inp[31437] = 0;
inp[31438] = 1073741148;
inp[31439] = 0;
inp[31440] = 1073741144;
inp[31441] = 0;
inp[31442] = 1073741140;
inp[31443] = 0;
inp[31444] = 1073741136;
inp[31445] = 0;
inp[31446] = 1073741132;
inp[31447] = 0;
inp[31448] = 1073741128;
inp[31449] = 0;
inp[31450] = 1073741124;
inp[31451] = 0;
inp[31452] = 1073741120;
inp[31453] = 0;
inp[31454] = 1073741116;
inp[31455] = 0;
inp[31456] = 1073741112;
inp[31457] = 0;
inp[31458] = 1073741108;
inp[31459] = 0;
inp[31460] = 1073741104;
inp[31461] = 0;
inp[31462] = 1073741100;
inp[31463] = 0;
inp[31464] = 1073741096;
inp[31465] = 0;
inp[31466] = 1073741092;
inp[31467] = 0;
inp[31468] = 1073741088;
inp[31469] = 0;
inp[31470] = 1073741084;
inp[31471] = 0;
inp[31472] = 1073741080;
inp[31473] = 0;
inp[31474] = 1073741076;
inp[31475] = 0;
inp[31476] = 1073741072;
inp[31477] = 0;
inp[31478] = 1073741068;
inp[31479] = 0;
inp[31480] = 1073741064;
inp[31481] = 0;
inp[31482] = 1073741060;
inp[31483] = 0;
inp[31484] = 1073741056;
inp[31485] = 0;
inp[31486] = 1073741052;
inp[31487] = 0;
inp[31488] = 1073741048;
inp[31489] = 0;
inp[31490] = 1073741044;
inp[31491] = 0;
inp[31492] = 1073741040;
inp[31493] = 0;
inp[31494] = 1073741036;
inp[31495] = 0;
inp[31496] = 1073741032;
inp[31497] = 0;
inp[31498] = 1073741028;
inp[31499] = 0;
inp[31500] = 1073741024;
inp[31501] = 0;
inp[31502] = 1073741020;
inp[31503] = 0;
inp[31504] = 1073741016;
inp[31505] = 0;
inp[31506] = 1073741012;
inp[31507] = 0;
inp[31508] = 1073741008;
inp[31509] = 0;
inp[31510] = 1073741004;
inp[31511] = 0;
inp[31512] = 1073741000;
inp[31513] = 0;
inp[31514] = 1073740996;
inp[31515] = 0;
inp[31516] = 1073740992;
inp[31517] = 0;
inp[31518] = 1073740988;
inp[31519] = 0;
inp[31520] = 1073740984;
inp[31521] = 0;
inp[31522] = 1073740980;
inp[31523] = 0;
inp[31524] = 1073740976;
inp[31525] = 0;
inp[31526] = 1073740972;
inp[31527] = 0;
inp[31528] = 1073740968;
inp[31529] = 0;
inp[31530] = 1073740964;
inp[31531] = 0;
inp[31532] = 1073740960;
inp[31533] = 0;
inp[31534] = 1073740956;
inp[31535] = 0;
inp[31536] = 1073740952;
inp[31537] = 0;
inp[31538] = 1073740948;
inp[31539] = 0;
inp[31540] = 1073740944;
inp[31541] = 0;
inp[31542] = 1073740940;
inp[31543] = 0;
inp[31544] = 1073740936;
inp[31545] = 0;
inp[31546] = 1073740932;
inp[31547] = 0;
inp[31548] = 1073740928;
inp[31549] = 0;
inp[31550] = 1073740924;
inp[31551] = 0;
inp[31552] = 1073740920;
inp[31553] = 0;
inp[31554] = 1073740916;
inp[31555] = 0;
inp[31556] = 1073740912;
inp[31557] = 0;
inp[31558] = 1073740908;
inp[31559] = 0;
inp[31560] = 1073740904;
inp[31561] = 0;
inp[31562] = 1073740900;
inp[31563] = 0;
inp[31564] = 1073740896;
inp[31565] = 0;
inp[31566] = 1073740892;
inp[31567] = 0;
inp[31568] = 1073740888;
inp[31569] = 0;
inp[31570] = 1073740884;
inp[31571] = 0;
inp[31572] = 1073740880;
inp[31573] = 0;
inp[31574] = 1073740876;
inp[31575] = 0;
inp[31576] = 1073740872;
inp[31577] = 0;
inp[31578] = 1073740868;
inp[31579] = 0;
inp[31580] = 1073740864;
inp[31581] = 0;
inp[31582] = 1073740860;
inp[31583] = 0;
inp[31584] = 1073740856;
inp[31585] = 0;
inp[31586] = 1073740852;
inp[31587] = 0;
inp[31588] = 1073740848;
inp[31589] = 0;
inp[31590] = 1073740844;
inp[31591] = 0;
inp[31592] = 1073740840;
inp[31593] = 0;
inp[31594] = 1073740836;
inp[31595] = 0;
inp[31596] = 1073740832;
inp[31597] = 0;
inp[31598] = 1073740828;
inp[31599] = 0;
inp[31600] = 1073740824;
inp[31601] = 0;
inp[31602] = 1073740820;
inp[31603] = 0;
inp[31604] = 1073740816;
inp[31605] = 0;
inp[31606] = 1073740812;
inp[31607] = 0;
inp[31608] = 1073740808;
inp[31609] = 0;
inp[31610] = 1073740804;
inp[31611] = 0;
inp[31612] = 1073741824;
inp[31613] = 1073741824;
inp[31614] = 1073741822;
inp[31615] = 0;
inp[31616] = 1073741820;
inp[31617] = 0;
inp[31618] = 1073741818;
inp[31619] = 0;
inp[31620] = 1073741816;
inp[31621] = 0;
inp[31622] = 1073741814;
inp[31623] = 0;
inp[31624] = 1073741812;
inp[31625] = 0;
inp[31626] = 1073741810;
inp[31627] = 0;
inp[31628] = 1073741808;
inp[31629] = 0;
inp[31630] = 1073741806;
inp[31631] = 0;
inp[31632] = 1073741804;
inp[31633] = 0;
inp[31634] = 1073741802;
inp[31635] = 0;
inp[31636] = 1073741800;
inp[31637] = 0;
inp[31638] = 1073741798;
inp[31639] = 0;
inp[31640] = 1073741796;
inp[31641] = 0;
inp[31642] = 1073741794;
inp[31643] = 0;
inp[31644] = 1073741792;
inp[31645] = 0;
inp[31646] = 1073741790;
inp[31647] = 0;
inp[31648] = 1073741788;
inp[31649] = 0;
inp[31650] = 1073741786;
inp[31651] = 0;
inp[31652] = 1073741784;
inp[31653] = 0;
inp[31654] = 1073741782;
inp[31655] = 0;
inp[31656] = 1073741780;
inp[31657] = 0;
inp[31658] = 1073741778;
inp[31659] = 0;
inp[31660] = 1073741776;
inp[31661] = 0;
inp[31662] = 1073741774;
inp[31663] = 0;
inp[31664] = 1073741772;
inp[31665] = 0;
inp[31666] = 1073741770;
inp[31667] = 0;
inp[31668] = 1073741768;
inp[31669] = 0;
inp[31670] = 1073741766;
inp[31671] = 0;
inp[31672] = 1073741764;
inp[31673] = 0;
inp[31674] = 1073741762;
inp[31675] = 0;
inp[31676] = 1073741760;
inp[31677] = 0;
inp[31678] = 1073741758;
inp[31679] = 0;
inp[31680] = 1073741756;
inp[31681] = 0;
inp[31682] = 1073741754;
inp[31683] = 0;
inp[31684] = 1073741752;
inp[31685] = 0;
inp[31686] = 1073741750;
inp[31687] = 0;
inp[31688] = 1073741748;
inp[31689] = 0;
inp[31690] = 1073741746;
inp[31691] = 0;
inp[31692] = 1073741744;
inp[31693] = 0;
inp[31694] = 1073741742;
inp[31695] = 0;
inp[31696] = 1073741740;
inp[31697] = 0;
inp[31698] = 1073741738;
inp[31699] = 0;
inp[31700] = 1073741736;
inp[31701] = 0;
inp[31702] = 1073741734;
inp[31703] = 0;
inp[31704] = 1073741732;
inp[31705] = 0;
inp[31706] = 1073741730;
inp[31707] = 0;
inp[31708] = 1073741728;
inp[31709] = 0;
inp[31710] = 1073741726;
inp[31711] = 0;
inp[31712] = 1073741724;
inp[31713] = 0;
inp[31714] = 1073741722;
inp[31715] = 0;
inp[31716] = 1073741720;
inp[31717] = 0;
inp[31718] = 1073741718;
inp[31719] = 0;
inp[31720] = 1073741716;
inp[31721] = 0;
inp[31722] = 1073741714;
inp[31723] = 0;
inp[31724] = 1073741712;
inp[31725] = 0;
inp[31726] = 1073741710;
inp[31727] = 0;
inp[31728] = 1073741708;
inp[31729] = 0;
inp[31730] = 1073741706;
inp[31731] = 0;
inp[31732] = 1073741704;
inp[31733] = 0;
inp[31734] = 1073741702;
inp[31735] = 0;
inp[31736] = 1073741700;
inp[31737] = 0;
inp[31738] = 1073741698;
inp[31739] = 0;
inp[31740] = 1073741696;
inp[31741] = 0;
inp[31742] = 1073741694;
inp[31743] = 0;
inp[31744] = 1073741692;
inp[31745] = 0;
inp[31746] = 1073741690;
inp[31747] = 0;
inp[31748] = 1073741688;
inp[31749] = 0;
inp[31750] = 1073741686;
inp[31751] = 0;
inp[31752] = 1073741684;
inp[31753] = 0;
inp[31754] = 1073741682;
inp[31755] = 0;
inp[31756] = 1073741680;
inp[31757] = 0;
inp[31758] = 1073741678;
inp[31759] = 0;
inp[31760] = 1073741676;
inp[31761] = 0;
inp[31762] = 1073741674;
inp[31763] = 0;
inp[31764] = 1073741672;
inp[31765] = 0;
inp[31766] = 1073741670;
inp[31767] = 0;
inp[31768] = 1073741668;
inp[31769] = 0;
inp[31770] = 1073741666;
inp[31771] = 0;
inp[31772] = 1073741664;
inp[31773] = 0;
inp[31774] = 1073741662;
inp[31775] = 0;
inp[31776] = 1073741660;
inp[31777] = 0;
inp[31778] = 1073741658;
inp[31779] = 0;
inp[31780] = 1073741656;
inp[31781] = 0;
inp[31782] = 1073741654;
inp[31783] = 0;
inp[31784] = 1073741652;
inp[31785] = 0;
inp[31786] = 1073741650;
inp[31787] = 0;
inp[31788] = 1073741648;
inp[31789] = 0;
inp[31790] = 1073741646;
inp[31791] = 0;
inp[31792] = 1073741644;
inp[31793] = 0;
inp[31794] = 1073741642;
inp[31795] = 0;
inp[31796] = 1073741640;
inp[31797] = 0;
inp[31798] = 1073741638;
inp[31799] = 0;
inp[31800] = 1073741636;
inp[31801] = 0;
inp[31802] = 1073741634;
inp[31803] = 0;
inp[31804] = 1073741632;
inp[31805] = 0;
inp[31806] = 1073741630;
inp[31807] = 0;
inp[31808] = 1073741628;
inp[31809] = 0;
inp[31810] = 1073741626;
inp[31811] = 0;
inp[31812] = 1073741624;
inp[31813] = 0;
inp[31814] = 1073741622;
inp[31815] = 0;
inp[31816] = 1073741620;
inp[31817] = 0;
inp[31818] = 1073741618;
inp[31819] = 0;
inp[31820] = 1073741616;
inp[31821] = 0;
inp[31822] = 1073741614;
inp[31823] = 0;
inp[31824] = 1073741612;
inp[31825] = 0;
inp[31826] = 1073741610;
inp[31827] = 0;
inp[31828] = 1073741608;
inp[31829] = 0;
inp[31830] = 1073741606;
inp[31831] = 0;
inp[31832] = 1073741604;
inp[31833] = 0;
inp[31834] = 1073741602;
inp[31835] = 0;
inp[31836] = 1073741600;
inp[31837] = 0;
inp[31838] = 1073741598;
inp[31839] = 0;
inp[31840] = 1073741596;
inp[31841] = 0;
inp[31842] = 1073741594;
inp[31843] = 0;
inp[31844] = 1073741592;
inp[31845] = 0;
inp[31846] = 1073741590;
inp[31847] = 0;
inp[31848] = 1073741588;
inp[31849] = 0;
inp[31850] = 1073741586;
inp[31851] = 0;
inp[31852] = 1073741584;
inp[31853] = 0;
inp[31854] = 1073741582;
inp[31855] = 0;
inp[31856] = 1073741580;
inp[31857] = 0;
inp[31858] = 1073741578;
inp[31859] = 0;
inp[31860] = 1073741576;
inp[31861] = 0;
inp[31862] = 1073741574;
inp[31863] = 0;
inp[31864] = 1073741572;
inp[31865] = 0;
inp[31866] = 1073741570;
inp[31867] = 0;
inp[31868] = 1073741568;
inp[31869] = 0;
inp[31870] = 1073741566;
inp[31871] = 0;
inp[31872] = 1073741564;
inp[31873] = 0;
inp[31874] = 1073741562;
inp[31875] = 0;
inp[31876] = 1073741560;
inp[31877] = 0;
inp[31878] = 1073741558;
inp[31879] = 0;
inp[31880] = 1073741556;
inp[31881] = 0;
inp[31882] = 1073741554;
inp[31883] = 0;
inp[31884] = 1073741552;
inp[31885] = 0;
inp[31886] = 1073741550;
inp[31887] = 0;
inp[31888] = 1073741548;
inp[31889] = 0;
inp[31890] = 1073741546;
inp[31891] = 0;
inp[31892] = 1073741544;
inp[31893] = 0;
inp[31894] = 1073741542;
inp[31895] = 0;
inp[31896] = 1073741540;
inp[31897] = 0;
inp[31898] = 1073741538;
inp[31899] = 0;
inp[31900] = 1073741536;
inp[31901] = 0;
inp[31902] = 1073741534;
inp[31903] = 0;
inp[31904] = 1073741532;
inp[31905] = 0;
inp[31906] = 1073741530;
inp[31907] = 0;
inp[31908] = 1073741528;
inp[31909] = 0;
inp[31910] = 1073741526;
inp[31911] = 0;
inp[31912] = 1073741524;
inp[31913] = 0;
inp[31914] = 1073741522;
inp[31915] = 0;
inp[31916] = 1073741520;
inp[31917] = 0;
inp[31918] = 1073741518;
inp[31919] = 0;
inp[31920] = 1073741516;
inp[31921] = 0;
inp[31922] = 1073741514;
inp[31923] = 0;
inp[31924] = 1073741512;
inp[31925] = 0;
inp[31926] = 1073741510;
inp[31927] = 0;
inp[31928] = 1073741508;
inp[31929] = 0;
inp[31930] = 1073741506;
inp[31931] = 0;
inp[31932] = 1073741504;
inp[31933] = 0;
inp[31934] = 1073741502;
inp[31935] = 0;
inp[31936] = 1073741500;
inp[31937] = 0;
inp[31938] = 1073741498;
inp[31939] = 0;
inp[31940] = 1073741496;
inp[31941] = 0;
inp[31942] = 1073741494;
inp[31943] = 0;
inp[31944] = 1073741492;
inp[31945] = 0;
inp[31946] = 1073741490;
inp[31947] = 0;
inp[31948] = 1073741488;
inp[31949] = 0;
inp[31950] = 1073741486;
inp[31951] = 0;
inp[31952] = 1073741484;
inp[31953] = 0;
inp[31954] = 1073741482;
inp[31955] = 0;
inp[31956] = 1073741480;
inp[31957] = 0;
inp[31958] = 1073741478;
inp[31959] = 0;
inp[31960] = 1073741476;
inp[31961] = 0;
inp[31962] = 1073741474;
inp[31963] = 0;
inp[31964] = 1073741472;
inp[31965] = 0;
inp[31966] = 1073741470;
inp[31967] = 0;
inp[31968] = 1073741468;
inp[31969] = 0;
inp[31970] = 1073741466;
inp[31971] = 0;
inp[31972] = 1073741464;
inp[31973] = 0;
inp[31974] = 1073741462;
inp[31975] = 0;
inp[31976] = 1073741460;
inp[31977] = 0;
inp[31978] = 1073741458;
inp[31979] = 0;
inp[31980] = 1073741456;
inp[31981] = 0;
inp[31982] = 1073741454;
inp[31983] = 0;
inp[31984] = 1073741452;
inp[31985] = 0;
inp[31986] = 1073741450;
inp[31987] = 0;
inp[31988] = 1073741448;
inp[31989] = 0;
inp[31990] = 1073741446;
inp[31991] = 0;
inp[31992] = 1073741444;
inp[31993] = 0;
inp[31994] = 1073741442;
inp[31995] = 0;
inp[31996] = 1073741440;
inp[31997] = 0;
inp[31998] = 1073741438;
inp[31999] = 0;
inp[32000] = 1073741436;
inp[32001] = 0;
inp[32002] = 1073741434;
inp[32003] = 0;
inp[32004] = 1073741432;
inp[32005] = 0;
inp[32006] = 1073741430;
inp[32007] = 0;
inp[32008] = 1073741428;
inp[32009] = 0;
inp[32010] = 1073741426;
inp[32011] = 0;
inp[32012] = 1073741424;
inp[32013] = 0;
inp[32014] = 1073741422;
inp[32015] = 0;
inp[32016] = 1073741420;
inp[32017] = 0;
inp[32018] = 1073741418;
inp[32019] = 0;
inp[32020] = 1073741416;
inp[32021] = 0;
inp[32022] = 1073741414;
inp[32023] = 0;
inp[32024] = 1073741412;
inp[32025] = 0;
inp[32026] = 1073741410;
inp[32027] = 0;
inp[32028] = 1073741408;
inp[32029] = 0;
inp[32030] = 1073741406;
inp[32031] = 0;
inp[32032] = 1073741404;
inp[32033] = 0;
inp[32034] = 1073741402;
inp[32035] = 0;
inp[32036] = 1073741400;
inp[32037] = 0;
inp[32038] = 1073741398;
inp[32039] = 0;
inp[32040] = 1073741396;
inp[32041] = 0;
inp[32042] = 1073741394;
inp[32043] = 0;
inp[32044] = 1073741392;
inp[32045] = 0;
inp[32046] = 1073741390;
inp[32047] = 0;
inp[32048] = 1073741388;
inp[32049] = 0;
inp[32050] = 1073741386;
inp[32051] = 0;
inp[32052] = 1073741384;
inp[32053] = 0;
inp[32054] = 1073741382;
inp[32055] = 0;
inp[32056] = 1073741380;
inp[32057] = 0;
inp[32058] = 1073741378;
inp[32059] = 0;
inp[32060] = 1073741376;
inp[32061] = 0;
inp[32062] = 1073741374;
inp[32063] = 0;
inp[32064] = 1073741372;
inp[32065] = 0;
inp[32066] = 1073741370;
inp[32067] = 0;
inp[32068] = 1073741368;
inp[32069] = 0;
inp[32070] = 1073741366;
inp[32071] = 0;
inp[32072] = 1073741364;
inp[32073] = 0;
inp[32074] = 1073741362;
inp[32075] = 0;
inp[32076] = 1073741360;
inp[32077] = 0;
inp[32078] = 1073741358;
inp[32079] = 0;
inp[32080] = 1073741356;
inp[32081] = 0;
inp[32082] = 1073741354;
inp[32083] = 0;
inp[32084] = 1073741352;
inp[32085] = 0;
inp[32086] = 1073741350;
inp[32087] = 0;
inp[32088] = 1073741348;
inp[32089] = 0;
inp[32090] = 1073741346;
inp[32091] = 0;
inp[32092] = 1073741344;
inp[32093] = 0;
inp[32094] = 1073741342;
inp[32095] = 0;
inp[32096] = 1073741340;
inp[32097] = 0;
inp[32098] = 1073741338;
inp[32099] = 0;
inp[32100] = 1073741336;
inp[32101] = 0;
inp[32102] = 1073741334;
inp[32103] = 0;
inp[32104] = 1073741332;
inp[32105] = 0;
inp[32106] = 1073741330;
inp[32107] = 0;
inp[32108] = 1073741328;
inp[32109] = 0;
inp[32110] = 1073741326;
inp[32111] = 0;
inp[32112] = 1073741324;
inp[32113] = 0;
inp[32114] = 1073741322;
inp[32115] = 0;
inp[32116] = 1073741320;
inp[32117] = 0;
inp[32118] = 1073741318;
inp[32119] = 0;
inp[32120] = 1073741316;
inp[32121] = 0;
inp[32122] = 1073741314;
inp[32123] = 0;
inp[32124] = 1073741824;
inp[32125] = 1073741824;
inp[32126] = 1073741823;
inp[32127] = 0;
inp[32128] = 1073741822;
inp[32129] = 0;
inp[32130] = 1073741821;
inp[32131] = 0;
inp[32132] = 1073741820;
inp[32133] = 0;
inp[32134] = 1073741819;
inp[32135] = 0;
inp[32136] = 1073741818;
inp[32137] = 0;
inp[32138] = 1073741817;
inp[32139] = 0;
inp[32140] = 1073741816;
inp[32141] = 0;
inp[32142] = 1073741815;
inp[32143] = 0;
inp[32144] = 1073741814;
inp[32145] = 0;
inp[32146] = 1073741813;
inp[32147] = 0;
inp[32148] = 1073741812;
inp[32149] = 0;
inp[32150] = 1073741811;
inp[32151] = 0;
inp[32152] = 1073741810;
inp[32153] = 0;
inp[32154] = 1073741809;
inp[32155] = 0;
inp[32156] = 1073741808;
inp[32157] = 0;
inp[32158] = 1073741807;
inp[32159] = 0;
inp[32160] = 1073741806;
inp[32161] = 0;
inp[32162] = 1073741805;
inp[32163] = 0;
inp[32164] = 1073741804;
inp[32165] = 0;
inp[32166] = 1073741803;
inp[32167] = 0;
inp[32168] = 1073741802;
inp[32169] = 0;
inp[32170] = 1073741801;
inp[32171] = 0;
inp[32172] = 1073741800;
inp[32173] = 0;
inp[32174] = 1073741799;
inp[32175] = 0;
inp[32176] = 1073741798;
inp[32177] = 0;
inp[32178] = 1073741797;
inp[32179] = 0;
inp[32180] = 1073741796;
inp[32181] = 0;
inp[32182] = 1073741795;
inp[32183] = 0;
inp[32184] = 1073741794;
inp[32185] = 0;
inp[32186] = 1073741793;
inp[32187] = 0;
inp[32188] = 1073741792;
inp[32189] = 0;
inp[32190] = 1073741791;
inp[32191] = 0;
inp[32192] = 1073741790;
inp[32193] = 0;
inp[32194] = 1073741789;
inp[32195] = 0;
inp[32196] = 1073741788;
inp[32197] = 0;
inp[32198] = 1073741787;
inp[32199] = 0;
inp[32200] = 1073741786;
inp[32201] = 0;
inp[32202] = 1073741785;
inp[32203] = 0;
inp[32204] = 1073741784;
inp[32205] = 0;
inp[32206] = 1073741783;
inp[32207] = 0;
inp[32208] = 1073741782;
inp[32209] = 0;
inp[32210] = 1073741781;
inp[32211] = 0;
inp[32212] = 1073741780;
inp[32213] = 0;
inp[32214] = 1073741779;
inp[32215] = 0;
inp[32216] = 1073741778;
inp[32217] = 0;
inp[32218] = 1073741777;
inp[32219] = 0;
inp[32220] = 1073741776;
inp[32221] = 0;
inp[32222] = 1073741775;
inp[32223] = 0;
inp[32224] = 1073741774;
inp[32225] = 0;
inp[32226] = 1073741773;
inp[32227] = 0;
inp[32228] = 1073741772;
inp[32229] = 0;
inp[32230] = 1073741771;
inp[32231] = 0;
inp[32232] = 1073741770;
inp[32233] = 0;
inp[32234] = 1073741769;
inp[32235] = 0;
inp[32236] = 1073741768;
inp[32237] = 0;
inp[32238] = 1073741767;
inp[32239] = 0;
inp[32240] = 1073741766;
inp[32241] = 0;
inp[32242] = 1073741765;
inp[32243] = 0;
inp[32244] = 1073741764;
inp[32245] = 0;
inp[32246] = 1073741763;
inp[32247] = 0;
inp[32248] = 1073741762;
inp[32249] = 0;
inp[32250] = 1073741761;
inp[32251] = 0;
inp[32252] = 1073741760;
inp[32253] = 0;
inp[32254] = 1073741759;
inp[32255] = 0;
inp[32256] = 1073741758;
inp[32257] = 0;
inp[32258] = 1073741757;
inp[32259] = 0;
inp[32260] = 1073741756;
inp[32261] = 0;
inp[32262] = 1073741755;
inp[32263] = 0;
inp[32264] = 1073741754;
inp[32265] = 0;
inp[32266] = 1073741753;
inp[32267] = 0;
inp[32268] = 1073741752;
inp[32269] = 0;
inp[32270] = 1073741751;
inp[32271] = 0;
inp[32272] = 1073741750;
inp[32273] = 0;
inp[32274] = 1073741749;
inp[32275] = 0;
inp[32276] = 1073741748;
inp[32277] = 0;
inp[32278] = 1073741747;
inp[32279] = 0;
inp[32280] = 1073741746;
inp[32281] = 0;
inp[32282] = 1073741745;
inp[32283] = 0;
inp[32284] = 1073741744;
inp[32285] = 0;
inp[32286] = 1073741743;
inp[32287] = 0;
inp[32288] = 1073741742;
inp[32289] = 0;
inp[32290] = 1073741741;
inp[32291] = 0;
inp[32292] = 1073741740;
inp[32293] = 0;
inp[32294] = 1073741739;
inp[32295] = 0;
inp[32296] = 1073741738;
inp[32297] = 0;
inp[32298] = 1073741737;
inp[32299] = 0;
inp[32300] = 1073741736;
inp[32301] = 0;
inp[32302] = 1073741735;
inp[32303] = 0;
inp[32304] = 1073741734;
inp[32305] = 0;
inp[32306] = 1073741733;
inp[32307] = 0;
inp[32308] = 1073741732;
inp[32309] = 0;
inp[32310] = 1073741731;
inp[32311] = 0;
inp[32312] = 1073741730;
inp[32313] = 0;
inp[32314] = 1073741729;
inp[32315] = 0;
inp[32316] = 1073741728;
inp[32317] = 0;
inp[32318] = 1073741727;
inp[32319] = 0;
inp[32320] = 1073741726;
inp[32321] = 0;
inp[32322] = 1073741725;
inp[32323] = 0;
inp[32324] = 1073741724;
inp[32325] = 0;
inp[32326] = 1073741723;
inp[32327] = 0;
inp[32328] = 1073741722;
inp[32329] = 0;
inp[32330] = 1073741721;
inp[32331] = 0;
inp[32332] = 1073741720;
inp[32333] = 0;
inp[32334] = 1073741719;
inp[32335] = 0;
inp[32336] = 1073741718;
inp[32337] = 0;
inp[32338] = 1073741717;
inp[32339] = 0;
inp[32340] = 1073741716;
inp[32341] = 0;
inp[32342] = 1073741715;
inp[32343] = 0;
inp[32344] = 1073741714;
inp[32345] = 0;
inp[32346] = 1073741713;
inp[32347] = 0;
inp[32348] = 1073741712;
inp[32349] = 0;
inp[32350] = 1073741711;
inp[32351] = 0;
inp[32352] = 1073741710;
inp[32353] = 0;
inp[32354] = 1073741709;
inp[32355] = 0;
inp[32356] = 1073741708;
inp[32357] = 0;
inp[32358] = 1073741707;
inp[32359] = 0;
inp[32360] = 1073741706;
inp[32361] = 0;
inp[32362] = 1073741705;
inp[32363] = 0;
inp[32364] = 1073741704;
inp[32365] = 0;
inp[32366] = 1073741703;
inp[32367] = 0;
inp[32368] = 1073741702;
inp[32369] = 0;
inp[32370] = 1073741701;
inp[32371] = 0;
inp[32372] = 1073741700;
inp[32373] = 0;
inp[32374] = 1073741699;
inp[32375] = 0;
inp[32376] = 1073741698;
inp[32377] = 0;
inp[32378] = 1073741697;
inp[32379] = 0;
inp[32380] = 1073741696;
inp[32381] = 0;
inp[32382] = 1073741695;
inp[32383] = 0;
inp[32384] = 1073741694;
inp[32385] = 0;
inp[32386] = 1073741693;
inp[32387] = 0;
inp[32388] = 1073741692;
inp[32389] = 0;
inp[32390] = 1073741691;
inp[32391] = 0;
inp[32392] = 1073741690;
inp[32393] = 0;
inp[32394] = 1073741689;
inp[32395] = 0;
inp[32396] = 1073741688;
inp[32397] = 0;
inp[32398] = 1073741687;
inp[32399] = 0;
inp[32400] = 1073741686;
inp[32401] = 0;
inp[32402] = 1073741685;
inp[32403] = 0;
inp[32404] = 1073741684;
inp[32405] = 0;
inp[32406] = 1073741683;
inp[32407] = 0;
inp[32408] = 1073741682;
inp[32409] = 0;
inp[32410] = 1073741681;
inp[32411] = 0;
inp[32412] = 1073741680;
inp[32413] = 0;
inp[32414] = 1073741679;
inp[32415] = 0;
inp[32416] = 1073741678;
inp[32417] = 0;
inp[32418] = 1073741677;
inp[32419] = 0;
inp[32420] = 1073741676;
inp[32421] = 0;
inp[32422] = 1073741675;
inp[32423] = 0;
inp[32424] = 1073741674;
inp[32425] = 0;
inp[32426] = 1073741673;
inp[32427] = 0;
inp[32428] = 1073741672;
inp[32429] = 0;
inp[32430] = 1073741671;
inp[32431] = 0;
inp[32432] = 1073741670;
inp[32433] = 0;
inp[32434] = 1073741669;
inp[32435] = 0;
inp[32436] = 1073741668;
inp[32437] = 0;
inp[32438] = 1073741667;
inp[32439] = 0;
inp[32440] = 1073741666;
inp[32441] = 0;
inp[32442] = 1073741665;
inp[32443] = 0;
inp[32444] = 1073741664;
inp[32445] = 0;
inp[32446] = 1073741663;
inp[32447] = 0;
inp[32448] = 1073741662;
inp[32449] = 0;
inp[32450] = 1073741661;
inp[32451] = 0;
inp[32452] = 1073741660;
inp[32453] = 0;
inp[32454] = 1073741659;
inp[32455] = 0;
inp[32456] = 1073741658;
inp[32457] = 0;
inp[32458] = 1073741657;
inp[32459] = 0;
inp[32460] = 1073741656;
inp[32461] = 0;
inp[32462] = 1073741655;
inp[32463] = 0;
inp[32464] = 1073741654;
inp[32465] = 0;
inp[32466] = 1073741653;
inp[32467] = 0;
inp[32468] = 1073741652;
inp[32469] = 0;
inp[32470] = 1073741651;
inp[32471] = 0;
inp[32472] = 1073741650;
inp[32473] = 0;
inp[32474] = 1073741649;
inp[32475] = 0;
inp[32476] = 1073741648;
inp[32477] = 0;
inp[32478] = 1073741647;
inp[32479] = 0;
inp[32480] = 1073741646;
inp[32481] = 0;
inp[32482] = 1073741645;
inp[32483] = 0;
inp[32484] = 1073741644;
inp[32485] = 0;
inp[32486] = 1073741643;
inp[32487] = 0;
inp[32488] = 1073741642;
inp[32489] = 0;
inp[32490] = 1073741641;
inp[32491] = 0;
inp[32492] = 1073741640;
inp[32493] = 0;
inp[32494] = 1073741639;
inp[32495] = 0;
inp[32496] = 1073741638;
inp[32497] = 0;
inp[32498] = 1073741637;
inp[32499] = 0;
inp[32500] = 1073741636;
inp[32501] = 0;
inp[32502] = 1073741635;
inp[32503] = 0;
inp[32504] = 1073741634;
inp[32505] = 0;
inp[32506] = 1073741633;
inp[32507] = 0;
inp[32508] = 1073741632;
inp[32509] = 0;
inp[32510] = 1073741631;
inp[32511] = 0;
inp[32512] = 1073741630;
inp[32513] = 0;
inp[32514] = 1073741629;
inp[32515] = 0;
inp[32516] = 1073741628;
inp[32517] = 0;
inp[32518] = 1073741627;
inp[32519] = 0;
inp[32520] = 1073741626;
inp[32521] = 0;
inp[32522] = 1073741625;
inp[32523] = 0;
inp[32524] = 1073741624;
inp[32525] = 0;
inp[32526] = 1073741623;
inp[32527] = 0;
inp[32528] = 1073741622;
inp[32529] = 0;
inp[32530] = 1073741621;
inp[32531] = 0;
inp[32532] = 1073741620;
inp[32533] = 0;
inp[32534] = 1073741619;
inp[32535] = 0;
inp[32536] = 1073741618;
inp[32537] = 0;
inp[32538] = 1073741617;
inp[32539] = 0;
inp[32540] = 1073741616;
inp[32541] = 0;
inp[32542] = 1073741615;
inp[32543] = 0;
inp[32544] = 1073741614;
inp[32545] = 0;
inp[32546] = 1073741613;
inp[32547] = 0;
inp[32548] = 1073741612;
inp[32549] = 0;
inp[32550] = 1073741611;
inp[32551] = 0;
inp[32552] = 1073741610;
inp[32553] = 0;
inp[32554] = 1073741609;
inp[32555] = 0;
inp[32556] = 1073741608;
inp[32557] = 0;
inp[32558] = 1073741607;
inp[32559] = 0;
inp[32560] = 1073741606;
inp[32561] = 0;
inp[32562] = 1073741605;
inp[32563] = 0;
inp[32564] = 1073741604;
inp[32565] = 0;
inp[32566] = 1073741603;
inp[32567] = 0;
inp[32568] = 1073741602;
inp[32569] = 0;
inp[32570] = 1073741601;
inp[32571] = 0;
inp[32572] = 1073741600;
inp[32573] = 0;
inp[32574] = 1073741599;
inp[32575] = 0;
inp[32576] = 1073741598;
inp[32577] = 0;
inp[32578] = 1073741597;
inp[32579] = 0;
inp[32580] = 1073741596;
inp[32581] = 0;
inp[32582] = 1073741595;
inp[32583] = 0;
inp[32584] = 1073741594;
inp[32585] = 0;
inp[32586] = 1073741593;
inp[32587] = 0;
inp[32588] = 1073741592;
inp[32589] = 0;
inp[32590] = 1073741591;
inp[32591] = 0;
inp[32592] = 1073741590;
inp[32593] = 0;
inp[32594] = 1073741589;
inp[32595] = 0;
inp[32596] = 1073741588;
inp[32597] = 0;
inp[32598] = 1073741587;
inp[32599] = 0;
inp[32600] = 1073741586;
inp[32601] = 0;
inp[32602] = 1073741585;
inp[32603] = 0;
inp[32604] = 1073741584;
inp[32605] = 0;
inp[32606] = 1073741583;
inp[32607] = 0;
inp[32608] = 1073741582;
inp[32609] = 0;
inp[32610] = 1073741581;
inp[32611] = 0;
inp[32612] = 1073741580;
inp[32613] = 0;
inp[32614] = 1073741579;
inp[32615] = 0;
inp[32616] = 1073741578;
inp[32617] = 0;
inp[32618] = 1073741577;
inp[32619] = 0;
inp[32620] = 1073741576;
inp[32621] = 0;
inp[32622] = 1073741575;
inp[32623] = 0;
inp[32624] = 1073741574;
inp[32625] = 0;
inp[32626] = 1073741573;
inp[32627] = 0;
inp[32628] = 1073741572;
inp[32629] = 0;
inp[32630] = 1073741571;
inp[32631] = 0;
inp[32632] = 1073741570;
inp[32633] = 0;
inp[32634] = 1073741569;
inp[32635] = 0;
inp[32636] = 1073741824;
inp[32637] = 1073741824;
inp[32638] = 1073741823;
inp[32639] = 0;
inp[32640] = 1073741823;
inp[32641] = 0;
inp[32642] = 1073741822;
inp[32643] = 0;
inp[32644] = 1073741822;
inp[32645] = 0;
inp[32646] = 1073741821;
inp[32647] = 0;
inp[32648] = 1073741821;
inp[32649] = 0;
inp[32650] = 1073741820;
inp[32651] = 0;
inp[32652] = 1073741820;
inp[32653] = 0;
inp[32654] = 1073741819;
inp[32655] = 0;
inp[32656] = 1073741819;
inp[32657] = 0;
inp[32658] = 1073741818;
inp[32659] = 0;
inp[32660] = 1073741818;
inp[32661] = 0;
inp[32662] = 1073741817;
inp[32663] = 0;
inp[32664] = 1073741817;
inp[32665] = 0;
inp[32666] = 1073741816;
inp[32667] = 0;
inp[32668] = 1073741816;
inp[32669] = 0;
inp[32670] = 1073741815;
inp[32671] = 0;
inp[32672] = 1073741815;
inp[32673] = 0;
inp[32674] = 1073741814;
inp[32675] = 0;
inp[32676] = 1073741814;
inp[32677] = 0;
inp[32678] = 1073741813;
inp[32679] = 0;
inp[32680] = 1073741813;
inp[32681] = 0;
inp[32682] = 1073741812;
inp[32683] = 0;
inp[32684] = 1073741812;
inp[32685] = 0;
inp[32686] = 1073741811;
inp[32687] = 0;
inp[32688] = 1073741811;
inp[32689] = 0;
inp[32690] = 1073741810;
inp[32691] = 0;
inp[32692] = 1073741810;
inp[32693] = 0;
inp[32694] = 1073741809;
inp[32695] = 0;
inp[32696] = 1073741809;
inp[32697] = 0;
inp[32698] = 1073741808;
inp[32699] = 0;
inp[32700] = 1073741808;
inp[32701] = 0;
inp[32702] = 1073741807;
inp[32703] = 0;
inp[32704] = 1073741807;
inp[32705] = 0;
inp[32706] = 1073741806;
inp[32707] = 0;
inp[32708] = 1073741806;
inp[32709] = 0;
inp[32710] = 1073741805;
inp[32711] = 0;
inp[32712] = 1073741805;
inp[32713] = 0;
inp[32714] = 1073741804;
inp[32715] = 0;
inp[32716] = 1073741804;
inp[32717] = 0;
inp[32718] = 1073741803;
inp[32719] = 0;
inp[32720] = 1073741803;
inp[32721] = 0;
inp[32722] = 1073741802;
inp[32723] = 0;
inp[32724] = 1073741802;
inp[32725] = 0;
inp[32726] = 1073741801;
inp[32727] = 0;
inp[32728] = 1073741801;
inp[32729] = 0;
inp[32730] = 1073741800;
inp[32731] = 0;
inp[32732] = 1073741800;
inp[32733] = 0;
inp[32734] = 1073741799;
inp[32735] = 0;
inp[32736] = 1073741799;
inp[32737] = 0;
inp[32738] = 1073741798;
inp[32739] = 0;
inp[32740] = 1073741798;
inp[32741] = 0;
inp[32742] = 1073741797;
inp[32743] = 0;
inp[32744] = 1073741797;
inp[32745] = 0;
inp[32746] = 1073741796;
inp[32747] = 0;
inp[32748] = 1073741796;
inp[32749] = 0;
inp[32750] = 1073741795;
inp[32751] = 0;
inp[32752] = 1073741795;
inp[32753] = 0;
inp[32754] = 1073741794;
inp[32755] = 0;
inp[32756] = 1073741794;
inp[32757] = 0;
inp[32758] = 1073741793;
inp[32759] = 0;
inp[32760] = 1073741793;
inp[32761] = 0;
inp[32762] = 1073741792;
inp[32763] = 0;
inp[32764] = 1073741792;
inp[32765] = 0;
inp[32766] = 1073741791;
inp[32767] = 0;
inp[32768] = 1073741791;
inp[32769] = 0;
inp[32770] = 1073741790;
inp[32771] = 0;
inp[32772] = 1073741790;
inp[32773] = 0;
inp[32774] = 1073741789;
inp[32775] = 0;
inp[32776] = 1073741789;
inp[32777] = 0;
inp[32778] = 1073741788;
inp[32779] = 0;
inp[32780] = 1073741788;
inp[32781] = 0;
inp[32782] = 1073741787;
inp[32783] = 0;
inp[32784] = 1073741787;
inp[32785] = 0;
inp[32786] = 1073741786;
inp[32787] = 0;
inp[32788] = 1073741786;
inp[32789] = 0;
inp[32790] = 1073741785;
inp[32791] = 0;
inp[32792] = 1073741785;
inp[32793] = 0;
inp[32794] = 1073741784;
inp[32795] = 0;
inp[32796] = 1073741784;
inp[32797] = 0;
inp[32798] = 1073741783;
inp[32799] = 0;
inp[32800] = 1073741783;
inp[32801] = 0;
inp[32802] = 1073741782;
inp[32803] = 0;
inp[32804] = 1073741782;
inp[32805] = 0;
inp[32806] = 1073741781;
inp[32807] = 0;
inp[32808] = 1073741781;
inp[32809] = 0;
inp[32810] = 1073741780;
inp[32811] = 0;
inp[32812] = 1073741780;
inp[32813] = 0;
inp[32814] = 1073741779;
inp[32815] = 0;
inp[32816] = 1073741779;
inp[32817] = 0;
inp[32818] = 1073741778;
inp[32819] = 0;
inp[32820] = 1073741778;
inp[32821] = 0;
inp[32822] = 1073741777;
inp[32823] = 0;
inp[32824] = 1073741777;
inp[32825] = 0;
inp[32826] = 1073741776;
inp[32827] = 0;
inp[32828] = 1073741776;
inp[32829] = 0;
inp[32830] = 1073741775;
inp[32831] = 0;
inp[32832] = 1073741775;
inp[32833] = 0;
inp[32834] = 1073741774;
inp[32835] = 0;
inp[32836] = 1073741774;
inp[32837] = 0;
inp[32838] = 1073741773;
inp[32839] = 0;
inp[32840] = 1073741773;
inp[32841] = 0;
inp[32842] = 1073741772;
inp[32843] = 0;
inp[32844] = 1073741772;
inp[32845] = 0;
inp[32846] = 1073741771;
inp[32847] = 0;
inp[32848] = 1073741771;
inp[32849] = 0;
inp[32850] = 1073741770;
inp[32851] = 0;
inp[32852] = 1073741770;
inp[32853] = 0;
inp[32854] = 1073741769;
inp[32855] = 0;
inp[32856] = 1073741769;
inp[32857] = 0;
inp[32858] = 1073741768;
inp[32859] = 0;
inp[32860] = 1073741768;
inp[32861] = 0;
inp[32862] = 1073741767;
inp[32863] = 0;
inp[32864] = 1073741767;
inp[32865] = 0;
inp[32866] = 1073741766;
inp[32867] = 0;
inp[32868] = 1073741766;
inp[32869] = 0;
inp[32870] = 1073741765;
inp[32871] = 0;
inp[32872] = 1073741765;
inp[32873] = 0;
inp[32874] = 1073741764;
inp[32875] = 0;
inp[32876] = 1073741764;
inp[32877] = 0;
inp[32878] = 1073741763;
inp[32879] = 0;
inp[32880] = 1073741763;
inp[32881] = 0;
inp[32882] = 1073741762;
inp[32883] = 0;
inp[32884] = 1073741762;
inp[32885] = 0;
inp[32886] = 1073741761;
inp[32887] = 0;
inp[32888] = 1073741761;
inp[32889] = 0;
inp[32890] = 1073741760;
inp[32891] = 0;
inp[32892] = 1073741760;
inp[32893] = 0;
inp[32894] = 1073741759;
inp[32895] = 0;
inp[32896] = 1073741759;
inp[32897] = 0;
inp[32898] = 1073741758;
inp[32899] = 0;
inp[32900] = 1073741758;
inp[32901] = 0;
inp[32902] = 1073741757;
inp[32903] = 0;
inp[32904] = 1073741757;
inp[32905] = 0;
inp[32906] = 1073741756;
inp[32907] = 0;
inp[32908] = 1073741756;
inp[32909] = 0;
inp[32910] = 1073741755;
inp[32911] = 0;
inp[32912] = 1073741755;
inp[32913] = 0;
inp[32914] = 1073741754;
inp[32915] = 0;
inp[32916] = 1073741754;
inp[32917] = 0;
inp[32918] = 1073741753;
inp[32919] = 0;
inp[32920] = 1073741753;
inp[32921] = 0;
inp[32922] = 1073741752;
inp[32923] = 0;
inp[32924] = 1073741752;
inp[32925] = 0;
inp[32926] = 1073741751;
inp[32927] = 0;
inp[32928] = 1073741751;
inp[32929] = 0;
inp[32930] = 1073741750;
inp[32931] = 0;
inp[32932] = 1073741750;
inp[32933] = 0;
inp[32934] = 1073741749;
inp[32935] = 0;
inp[32936] = 1073741749;
inp[32937] = 0;
inp[32938] = 1073741748;
inp[32939] = 0;
inp[32940] = 1073741748;
inp[32941] = 0;
inp[32942] = 1073741747;
inp[32943] = 0;
inp[32944] = 1073741747;
inp[32945] = 0;
inp[32946] = 1073741746;
inp[32947] = 0;
inp[32948] = 1073741746;
inp[32949] = 0;
inp[32950] = 1073741745;
inp[32951] = 0;
inp[32952] = 1073741745;
inp[32953] = 0;
inp[32954] = 1073741744;
inp[32955] = 0;
inp[32956] = 1073741744;
inp[32957] = 0;
inp[32958] = 1073741743;
inp[32959] = 0;
inp[32960] = 1073741743;
inp[32961] = 0;
inp[32962] = 1073741742;
inp[32963] = 0;
inp[32964] = 1073741742;
inp[32965] = 0;
inp[32966] = 1073741741;
inp[32967] = 0;
inp[32968] = 1073741741;
inp[32969] = 0;
inp[32970] = 1073741740;
inp[32971] = 0;
inp[32972] = 1073741740;
inp[32973] = 0;
inp[32974] = 1073741739;
inp[32975] = 0;
inp[32976] = 1073741739;
inp[32977] = 0;
inp[32978] = 1073741738;
inp[32979] = 0;
inp[32980] = 1073741738;
inp[32981] = 0;
inp[32982] = 1073741737;
inp[32983] = 0;
inp[32984] = 1073741737;
inp[32985] = 0;
inp[32986] = 1073741736;
inp[32987] = 0;
inp[32988] = 1073741736;
inp[32989] = 0;
inp[32990] = 1073741735;
inp[32991] = 0;
inp[32992] = 1073741735;
inp[32993] = 0;
inp[32994] = 1073741734;
inp[32995] = 0;
inp[32996] = 1073741734;
inp[32997] = 0;
inp[32998] = 1073741733;
inp[32999] = 0;
inp[33000] = 1073741733;
inp[33001] = 0;
inp[33002] = 1073741732;
inp[33003] = 0;
inp[33004] = 1073741732;
inp[33005] = 0;
inp[33006] = 1073741731;
inp[33007] = 0;
inp[33008] = 1073741731;
inp[33009] = 0;
inp[33010] = 1073741730;
inp[33011] = 0;
inp[33012] = 1073741730;
inp[33013] = 0;
inp[33014] = 1073741729;
inp[33015] = 0;
inp[33016] = 1073741729;
inp[33017] = 0;
inp[33018] = 1073741728;
inp[33019] = 0;
inp[33020] = 1073741728;
inp[33021] = 0;
inp[33022] = 1073741727;
inp[33023] = 0;
inp[33024] = 1073741727;
inp[33025] = 0;
inp[33026] = 1073741726;
inp[33027] = 0;
inp[33028] = 1073741726;
inp[33029] = 0;
inp[33030] = 1073741725;
inp[33031] = 0;
inp[33032] = 1073741725;
inp[33033] = 0;
inp[33034] = 1073741724;
inp[33035] = 0;
inp[33036] = 1073741724;
inp[33037] = 0;
inp[33038] = 1073741723;
inp[33039] = 0;
inp[33040] = 1073741723;
inp[33041] = 0;
inp[33042] = 1073741722;
inp[33043] = 0;
inp[33044] = 1073741722;
inp[33045] = 0;
inp[33046] = 1073741721;
inp[33047] = 0;
inp[33048] = 1073741721;
inp[33049] = 0;
inp[33050] = 1073741720;
inp[33051] = 0;
inp[33052] = 1073741720;
inp[33053] = 0;
inp[33054] = 1073741719;
inp[33055] = 0;
inp[33056] = 1073741719;
inp[33057] = 0;
inp[33058] = 1073741718;
inp[33059] = 0;
inp[33060] = 1073741718;
inp[33061] = 0;
inp[33062] = 1073741717;
inp[33063] = 0;
inp[33064] = 1073741717;
inp[33065] = 0;
inp[33066] = 1073741716;
inp[33067] = 0;
inp[33068] = 1073741716;
inp[33069] = 0;
inp[33070] = 1073741715;
inp[33071] = 0;
inp[33072] = 1073741715;
inp[33073] = 0;
inp[33074] = 1073741714;
inp[33075] = 0;
inp[33076] = 1073741714;
inp[33077] = 0;
inp[33078] = 1073741713;
inp[33079] = 0;
inp[33080] = 1073741713;
inp[33081] = 0;
inp[33082] = 1073741712;
inp[33083] = 0;
inp[33084] = 1073741712;
inp[33085] = 0;
inp[33086] = 1073741711;
inp[33087] = 0;
inp[33088] = 1073741711;
inp[33089] = 0;
inp[33090] = 1073741710;
inp[33091] = 0;
inp[33092] = 1073741710;
inp[33093] = 0;
inp[33094] = 1073741709;
inp[33095] = 0;
inp[33096] = 1073741709;
inp[33097] = 0;
inp[33098] = 1073741708;
inp[33099] = 0;
inp[33100] = 1073741708;
inp[33101] = 0;
inp[33102] = 1073741707;
inp[33103] = 0;
inp[33104] = 1073741707;
inp[33105] = 0;
inp[33106] = 1073741706;
inp[33107] = 0;
inp[33108] = 1073741706;
inp[33109] = 0;
inp[33110] = 1073741705;
inp[33111] = 0;
inp[33112] = 1073741705;
inp[33113] = 0;
inp[33114] = 1073741704;
inp[33115] = 0;
inp[33116] = 1073741704;
inp[33117] = 0;
inp[33118] = 1073741703;
inp[33119] = 0;
inp[33120] = 1073741703;
inp[33121] = 0;
inp[33122] = 1073741702;
inp[33123] = 0;
inp[33124] = 1073741702;
inp[33125] = 0;
inp[33126] = 1073741701;
inp[33127] = 0;
inp[33128] = 1073741701;
inp[33129] = 0;
inp[33130] = 1073741700;
inp[33131] = 0;
inp[33132] = 1073741700;
inp[33133] = 0;
inp[33134] = 1073741699;
inp[33135] = 0;
inp[33136] = 1073741699;
inp[33137] = 0;
inp[33138] = 1073741698;
inp[33139] = 0;
inp[33140] = 1073741698;
inp[33141] = 0;
inp[33142] = 1073741697;
inp[33143] = 0;
inp[33144] = 1073741697;
inp[33145] = 0;
inp[33146] = 1073741696;
inp[33147] = 0;
inp[33148] = 1073741824;
inp[33149] = 1073741824;
inp[33150] = 1073741823;
inp[33151] = 0;
inp[33152] = 1073741823;
inp[33153] = 0;
inp[33154] = 1073741823;
inp[33155] = 0;
inp[33156] = 1073741823;
inp[33157] = 0;
inp[33158] = 1073741822;
inp[33159] = 0;
inp[33160] = 1073741822;
inp[33161] = 0;
inp[33162] = 1073741822;
inp[33163] = 0;
inp[33164] = 1073741822;
inp[33165] = 0;
inp[33166] = 1073741821;
inp[33167] = 0;
inp[33168] = 1073741821;
inp[33169] = 0;
inp[33170] = 1073741821;
inp[33171] = 0;
inp[33172] = 1073741821;
inp[33173] = 0;
inp[33174] = 1073741820;
inp[33175] = 0;
inp[33176] = 1073741820;
inp[33177] = 0;
inp[33178] = 1073741820;
inp[33179] = 0;
inp[33180] = 1073741820;
inp[33181] = 0;
inp[33182] = 1073741819;
inp[33183] = 0;
inp[33184] = 1073741819;
inp[33185] = 0;
inp[33186] = 1073741819;
inp[33187] = 0;
inp[33188] = 1073741819;
inp[33189] = 0;
inp[33190] = 1073741818;
inp[33191] = 0;
inp[33192] = 1073741818;
inp[33193] = 0;
inp[33194] = 1073741818;
inp[33195] = 0;
inp[33196] = 1073741818;
inp[33197] = 0;
inp[33198] = 1073741817;
inp[33199] = 0;
inp[33200] = 1073741817;
inp[33201] = 0;
inp[33202] = 1073741817;
inp[33203] = 0;
inp[33204] = 1073741817;
inp[33205] = 0;
inp[33206] = 1073741816;
inp[33207] = 0;
inp[33208] = 1073741816;
inp[33209] = 0;
inp[33210] = 1073741816;
inp[33211] = 0;
inp[33212] = 1073741816;
inp[33213] = 0;
inp[33214] = 1073741815;
inp[33215] = 0;
inp[33216] = 1073741815;
inp[33217] = 0;
inp[33218] = 1073741815;
inp[33219] = 0;
inp[33220] = 1073741815;
inp[33221] = 0;
inp[33222] = 1073741814;
inp[33223] = 0;
inp[33224] = 1073741814;
inp[33225] = 0;
inp[33226] = 1073741814;
inp[33227] = 0;
inp[33228] = 1073741814;
inp[33229] = 0;
inp[33230] = 1073741813;
inp[33231] = 0;
inp[33232] = 1073741813;
inp[33233] = 0;
inp[33234] = 1073741813;
inp[33235] = 0;
inp[33236] = 1073741813;
inp[33237] = 0;
inp[33238] = 1073741812;
inp[33239] = 0;
inp[33240] = 1073741812;
inp[33241] = 0;
inp[33242] = 1073741812;
inp[33243] = 0;
inp[33244] = 1073741812;
inp[33245] = 0;
inp[33246] = 1073741811;
inp[33247] = 0;
inp[33248] = 1073741811;
inp[33249] = 0;
inp[33250] = 1073741811;
inp[33251] = 0;
inp[33252] = 1073741811;
inp[33253] = 0;
inp[33254] = 1073741810;
inp[33255] = 0;
inp[33256] = 1073741810;
inp[33257] = 0;
inp[33258] = 1073741810;
inp[33259] = 0;
inp[33260] = 1073741810;
inp[33261] = 0;
inp[33262] = 1073741809;
inp[33263] = 0;
inp[33264] = 1073741809;
inp[33265] = 0;
inp[33266] = 1073741809;
inp[33267] = 0;
inp[33268] = 1073741809;
inp[33269] = 0;
inp[33270] = 1073741808;
inp[33271] = 0;
inp[33272] = 1073741808;
inp[33273] = 0;
inp[33274] = 1073741808;
inp[33275] = 0;
inp[33276] = 1073741808;
inp[33277] = 0;
inp[33278] = 1073741807;
inp[33279] = 0;
inp[33280] = 1073741807;
inp[33281] = 0;
inp[33282] = 1073741807;
inp[33283] = 0;
inp[33284] = 1073741807;
inp[33285] = 0;
inp[33286] = 1073741806;
inp[33287] = 0;
inp[33288] = 1073741806;
inp[33289] = 0;
inp[33290] = 1073741806;
inp[33291] = 0;
inp[33292] = 1073741806;
inp[33293] = 0;
inp[33294] = 1073741805;
inp[33295] = 0;
inp[33296] = 1073741805;
inp[33297] = 0;
inp[33298] = 1073741805;
inp[33299] = 0;
inp[33300] = 1073741805;
inp[33301] = 0;
inp[33302] = 1073741804;
inp[33303] = 0;
inp[33304] = 1073741804;
inp[33305] = 0;
inp[33306] = 1073741804;
inp[33307] = 0;
inp[33308] = 1073741804;
inp[33309] = 0;
inp[33310] = 1073741803;
inp[33311] = 0;
inp[33312] = 1073741803;
inp[33313] = 0;
inp[33314] = 1073741803;
inp[33315] = 0;
inp[33316] = 1073741803;
inp[33317] = 0;
inp[33318] = 1073741802;
inp[33319] = 0;
inp[33320] = 1073741802;
inp[33321] = 0;
inp[33322] = 1073741802;
inp[33323] = 0;
inp[33324] = 1073741802;
inp[33325] = 0;
inp[33326] = 1073741801;
inp[33327] = 0;
inp[33328] = 1073741801;
inp[33329] = 0;
inp[33330] = 1073741801;
inp[33331] = 0;
inp[33332] = 1073741801;
inp[33333] = 0;
inp[33334] = 1073741800;
inp[33335] = 0;
inp[33336] = 1073741800;
inp[33337] = 0;
inp[33338] = 1073741800;
inp[33339] = 0;
inp[33340] = 1073741800;
inp[33341] = 0;
inp[33342] = 1073741799;
inp[33343] = 0;
inp[33344] = 1073741799;
inp[33345] = 0;
inp[33346] = 1073741799;
inp[33347] = 0;
inp[33348] = 1073741799;
inp[33349] = 0;
inp[33350] = 1073741798;
inp[33351] = 0;
inp[33352] = 1073741798;
inp[33353] = 0;
inp[33354] = 1073741798;
inp[33355] = 0;
inp[33356] = 1073741798;
inp[33357] = 0;
inp[33358] = 1073741797;
inp[33359] = 0;
inp[33360] = 1073741797;
inp[33361] = 0;
inp[33362] = 1073741797;
inp[33363] = 0;
inp[33364] = 1073741797;
inp[33365] = 0;
inp[33366] = 1073741796;
inp[33367] = 0;
inp[33368] = 1073741796;
inp[33369] = 0;
inp[33370] = 1073741796;
inp[33371] = 0;
inp[33372] = 1073741796;
inp[33373] = 0;
inp[33374] = 1073741795;
inp[33375] = 0;
inp[33376] = 1073741795;
inp[33377] = 0;
inp[33378] = 1073741795;
inp[33379] = 0;
inp[33380] = 1073741795;
inp[33381] = 0;
inp[33382] = 1073741794;
inp[33383] = 0;
inp[33384] = 1073741794;
inp[33385] = 0;
inp[33386] = 1073741794;
inp[33387] = 0;
inp[33388] = 1073741794;
inp[33389] = 0;
inp[33390] = 1073741793;
inp[33391] = 0;
inp[33392] = 1073741793;
inp[33393] = 0;
inp[33394] = 1073741793;
inp[33395] = 0;
inp[33396] = 1073741793;
inp[33397] = 0;
inp[33398] = 1073741792;
inp[33399] = 0;
inp[33400] = 1073741792;
inp[33401] = 0;
inp[33402] = 1073741792;
inp[33403] = 0;
inp[33404] = 1073741792;
inp[33405] = 0;
inp[33406] = 1073741791;
inp[33407] = 0;
inp[33408] = 1073741791;
inp[33409] = 0;
inp[33410] = 1073741791;
inp[33411] = 0;
inp[33412] = 1073741791;
inp[33413] = 0;
inp[33414] = 1073741790;
inp[33415] = 0;
inp[33416] = 1073741790;
inp[33417] = 0;
inp[33418] = 1073741790;
inp[33419] = 0;
inp[33420] = 1073741790;
inp[33421] = 0;
inp[33422] = 1073741789;
inp[33423] = 0;
inp[33424] = 1073741789;
inp[33425] = 0;
inp[33426] = 1073741789;
inp[33427] = 0;
inp[33428] = 1073741789;
inp[33429] = 0;
inp[33430] = 1073741788;
inp[33431] = 0;
inp[33432] = 1073741788;
inp[33433] = 0;
inp[33434] = 1073741788;
inp[33435] = 0;
inp[33436] = 1073741788;
inp[33437] = 0;
inp[33438] = 1073741787;
inp[33439] = 0;
inp[33440] = 1073741787;
inp[33441] = 0;
inp[33442] = 1073741787;
inp[33443] = 0;
inp[33444] = 1073741787;
inp[33445] = 0;
inp[33446] = 1073741786;
inp[33447] = 0;
inp[33448] = 1073741786;
inp[33449] = 0;
inp[33450] = 1073741786;
inp[33451] = 0;
inp[33452] = 1073741786;
inp[33453] = 0;
inp[33454] = 1073741785;
inp[33455] = 0;
inp[33456] = 1073741785;
inp[33457] = 0;
inp[33458] = 1073741785;
inp[33459] = 0;
inp[33460] = 1073741785;
inp[33461] = 0;
inp[33462] = 1073741784;
inp[33463] = 0;
inp[33464] = 1073741784;
inp[33465] = 0;
inp[33466] = 1073741784;
inp[33467] = 0;
inp[33468] = 1073741784;
inp[33469] = 0;
inp[33470] = 1073741783;
inp[33471] = 0;
inp[33472] = 1073741783;
inp[33473] = 0;
inp[33474] = 1073741783;
inp[33475] = 0;
inp[33476] = 1073741783;
inp[33477] = 0;
inp[33478] = 1073741782;
inp[33479] = 0;
inp[33480] = 1073741782;
inp[33481] = 0;
inp[33482] = 1073741782;
inp[33483] = 0;
inp[33484] = 1073741782;
inp[33485] = 0;
inp[33486] = 1073741781;
inp[33487] = 0;
inp[33488] = 1073741781;
inp[33489] = 0;
inp[33490] = 1073741781;
inp[33491] = 0;
inp[33492] = 1073741781;
inp[33493] = 0;
inp[33494] = 1073741780;
inp[33495] = 0;
inp[33496] = 1073741780;
inp[33497] = 0;
inp[33498] = 1073741780;
inp[33499] = 0;
inp[33500] = 1073741780;
inp[33501] = 0;
inp[33502] = 1073741779;
inp[33503] = 0;
inp[33504] = 1073741779;
inp[33505] = 0;
inp[33506] = 1073741779;
inp[33507] = 0;
inp[33508] = 1073741779;
inp[33509] = 0;
inp[33510] = 1073741778;
inp[33511] = 0;
inp[33512] = 1073741778;
inp[33513] = 0;
inp[33514] = 1073741778;
inp[33515] = 0;
inp[33516] = 1073741778;
inp[33517] = 0;
inp[33518] = 1073741777;
inp[33519] = 0;
inp[33520] = 1073741777;
inp[33521] = 0;
inp[33522] = 1073741777;
inp[33523] = 0;
inp[33524] = 1073741777;
inp[33525] = 0;
inp[33526] = 1073741776;
inp[33527] = 0;
inp[33528] = 1073741776;
inp[33529] = 0;
inp[33530] = 1073741776;
inp[33531] = 0;
inp[33532] = 1073741776;
inp[33533] = 0;
inp[33534] = 1073741775;
inp[33535] = 0;
inp[33536] = 1073741775;
inp[33537] = 0;
inp[33538] = 1073741775;
inp[33539] = 0;
inp[33540] = 1073741775;
inp[33541] = 0;
inp[33542] = 1073741774;
inp[33543] = 0;
inp[33544] = 1073741774;
inp[33545] = 0;
inp[33546] = 1073741774;
inp[33547] = 0;
inp[33548] = 1073741774;
inp[33549] = 0;
inp[33550] = 1073741773;
inp[33551] = 0;
inp[33552] = 1073741773;
inp[33553] = 0;
inp[33554] = 1073741773;
inp[33555] = 0;
inp[33556] = 1073741773;
inp[33557] = 0;
inp[33558] = 1073741772;
inp[33559] = 0;
inp[33560] = 1073741772;
inp[33561] = 0;
inp[33562] = 1073741772;
inp[33563] = 0;
inp[33564] = 1073741772;
inp[33565] = 0;
inp[33566] = 1073741771;
inp[33567] = 0;
inp[33568] = 1073741771;
inp[33569] = 0;
inp[33570] = 1073741771;
inp[33571] = 0;
inp[33572] = 1073741771;
inp[33573] = 0;
inp[33574] = 1073741770;
inp[33575] = 0;
inp[33576] = 1073741770;
inp[33577] = 0;
inp[33578] = 1073741770;
inp[33579] = 0;
inp[33580] = 1073741770;
inp[33581] = 0;
inp[33582] = 1073741769;
inp[33583] = 0;
inp[33584] = 1073741769;
inp[33585] = 0;
inp[33586] = 1073741769;
inp[33587] = 0;
inp[33588] = 1073741769;
inp[33589] = 0;
inp[33590] = 1073741768;
inp[33591] = 0;
inp[33592] = 1073741768;
inp[33593] = 0;
inp[33594] = 1073741768;
inp[33595] = 0;
inp[33596] = 1073741768;
inp[33597] = 0;
inp[33598] = 1073741767;
inp[33599] = 0;
inp[33600] = 1073741767;
inp[33601] = 0;
inp[33602] = 1073741767;
inp[33603] = 0;
inp[33604] = 1073741767;
inp[33605] = 0;
inp[33606] = 1073741766;
inp[33607] = 0;
inp[33608] = 1073741766;
inp[33609] = 0;
inp[33610] = 1073741766;
inp[33611] = 0;
inp[33612] = 1073741766;
inp[33613] = 0;
inp[33614] = 1073741765;
inp[33615] = 0;
inp[33616] = 1073741765;
inp[33617] = 0;
inp[33618] = 1073741765;
inp[33619] = 0;
inp[33620] = 1073741765;
inp[33621] = 0;
inp[33622] = 1073741764;
inp[33623] = 0;
inp[33624] = 1073741764;
inp[33625] = 0;
inp[33626] = 1073741764;
inp[33627] = 0;
inp[33628] = 1073741764;
inp[33629] = 0;
inp[33630] = 1073741763;
inp[33631] = 0;
inp[33632] = 1073741763;
inp[33633] = 0;
inp[33634] = 1073741763;
inp[33635] = 0;
inp[33636] = 1073741763;
inp[33637] = 0;
inp[33638] = 1073741762;
inp[33639] = 0;
inp[33640] = 1073741762;
inp[33641] = 0;
inp[33642] = 1073741762;
inp[33643] = 0;
inp[33644] = 1073741762;
inp[33645] = 0;
inp[33646] = 1073741761;
inp[33647] = 0;
inp[33648] = 1073741761;
inp[33649] = 0;
inp[33650] = 1073741761;
inp[33651] = 0;
inp[33652] = 1073741761;
inp[33653] = 0;
inp[33654] = 1073741760;
inp[33655] = 0;
inp[33656] = 1073741760;
inp[33657] = 0;
inp[33658] = 1073741760;
inp[33659] = 0;
}

(* <><><><><><> Auto-generated code end <><><><><><> *)

(* <><><><><><><><>< *)
(* Library functions *)
(* <><><><><><><><>< *)

(* All secret variables will have type int64_al and all public ones will be int32_pl. bwA will be bitwidth of variable A which is substitution *)
(* of TypeA and so on for B and C. bwTemp is the bitwidth of intermediate computation and is substitute for TypeTemp. *)

(* x should be a power of 2 *)
def int32_pl log(int32_pl x)
{
   for i=[0:64]
   {
        if ((1L << i) == x)
        {
            return i;
        };
   };
}

def int32_pl ceillog(int32_pl x)
{
   for i=[0:65]
   {
        if ((1L << i) >= x)
        {
            return i;
        };
   };
}

def int32_pl ceildiv(int32_pl a, int32_pl b)
{
    int32_pl rem = a % b;
    int32_pl ret = a / b;
    if (((2*rem)/b) >= 1)
    {
        ret = ret + 1;
    };
    return ret;
}

(* If number from MSB to LSB is 00110001, then output can be 00100000 as a one-hot vector *)
def void msnzbgetvec(int32_pl NUMBITS, int32_pl batch, int64_al[batch] inp, int64_al[batch*NUMBITS] out)
{
    int64_al left;
    int64_al right;
    int64_al temp;

    for i=[0:batch]
    {
        out[i] = 0L;
        for j=[0:NUMBITS]
        {
            left = (1L<<(NUMBITS-1-j));
            right = ((1L<<(NUMBITS-j)) - 1L);
            temp = inp[i];
            out[i*NUMBITS + j] = ((temp >= left) && (temp <= right))?(1L):0L;
        }; 
    };
}

(* If number from MSB to LSB is 00110001, then output is 5 *)
def void msnzb(int32_pl NUMBITS, int32_pl batch, int64_al[batch] inp, int64_al[batch] out)
{
    int64_al left;
    int64_al right;
    int64_al temp;

    for i=[0:batch]
    {
        out[i] = 0L;
        for j=[0:NUMBITS]
        {
            left = (1L<<j);
            right = ((1L<<(j+1)) - 1L);
            temp = inp[i];
            out[i] = ((temp >= left) && (temp <= right))?(j+0L):(out[i]);
        }; 
    };
}

(* MSB to LSB. MSB at index 0 *)
def void BitDecompose(int32_pl NUMBITS, int32_pl batch, int64_al[batch] inp, int64_al[batch*NUMBITS] outBits)
{
    bool_bl muxCondition;
    for i=[0:batch]
    {
        for j=[0:NUMBITS]
        {
            muxCondition = ((inp[i] & (1L<<(NUMBITS-1-j))) == (1L<<(NUMBITS-1-j)));
            outBits[i*NUMBITS + j] = (muxCondition)?1L:0L;
        };
    };
}

(* Input a linear array of 2^LUTBITS elements *)
def void LookUpTableArithmeticMUX(int32_pl LUTBITS, int32_pl batch, int32_pl[1<<LUTBITS] LUT, int64_al[batch] inp, int64_al[batch] out)
{
    int64_al monomial;
    int64_al[batch*LUTBITS] inpBits;
    int32_pl[LUTBITS] iteratorBits;
    
    BitDecompose(LUTBITS, batch, inp, inpBits); 
     
    for i=[0:batch]
    {
        out[i] = 0L;
        for j=[0:(1<<LUTBITS)]
        {
            monomial = LUT[j]+0L;
            for k=[0:LUTBITS]
            {
                (* MSB to LSB. MSB at index 0 *)
                iteratorBits[k] = ((j & (1<<(LUTBITS-1-k))) == (1<<(LUTBITS-1-k)))?1:0;
            };
            
            for k=[0:LUTBITS]
            {
                (* monomial = monomial * (((1 - iteratorBits[k])*(1 - inpBits[i*LUTBITS + k])) + (iteratorBits[k] * inpBits[i*LUTBITS + k])); *)
                monomial = monomial * (1L - ((iteratorBits[k]+0L) + inpBits[i*LUTBITS + k] - (2L*((iteratorBits[k]+0L) * inpBits[i*LUTBITS + k]))));
            };
            out[i] = out[i] + monomial;
        };
    };
} 

def void SqrtImpl(int32_pl LUTBITS, int32_pl size, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, bool_pl inverse, int64_al[size] A, int64_al[size] B)
{
    int32_pl oldsB = sB;
    int32_pl oldbwB = bwB;
    int32_pl temp;
    int32_pl m;
    int32_pl iter;
    int64_al[size*bwA] msnzbvals;
    int64_al msnzbcur;    

    (* Get MSNZB values *)
    msnzbgetvec(bwA, (size), A, msnzbvals); 

    
    if (sB <= 14)
    {
        m = ceildiv(sB, 2); 
        iter = 1;
    }
    else
    {
        temp = ceildiv(sB, 2); 
        m = ceildiv(temp, 2);
        iter = 2;
    }; 

    int64_pl mMask = (1L << m) - 1;
    int64_pl bMask = (1L << bwB) - 1;
    int64_al adjust;
    (* To make the secret truncation at the end as multiplied followed by truncation by public value *)
    int32_pl sqrtAdjustScale = ((sA + 1)/2);
    if(inverse){
        sqrtAdjustScale = ((bwA - 1 - sA)/2);
    };
    int64_al sqrtAdjust;
    int64_al expParity;
    int64_al shiftedA;
    int64_al[1] Am;
    int64_al Y;
    int64_al YCur;
    int64_al YPrev;
    int64_al YSquare;
    int64_al[1] YPar0;
    int64_al[1] YPar1;
    int64_al X;
    int64_al XPrev;
    int64_al XCur;
    int64_al BPrev;
    int64_al BCur;
     
    bool_bl muxCondition;    

    (* Assumption: LUTBITS >= m *)
    int32_pl[1<<(LUTBITS+2)] LUT;
    int32_pl[1<<m] LUTPar0;
    int32_pl[1<<m] LUTPar1;
    int32_pl LUTOffset = 2*((1<<m)-2);
    fillLUTINVSQRT(LUT);
    
    for i=[0:(1<<m)]
    {
        LUTPar0[i] = LUT[LUTOffset+(2*i)];
        LUTPar1[i] = LUT[LUTOffset+((2*i)+1)];
    };
    
    for i=[0:(size)]
    {
        adjust = 0L;
        sqrtAdjust = 0L;
        expParity = 0L;
        (* Error prone part *)
        for j=[0:bwA]
        {
            (* To make the input of the form sign||1||... and scale is now bwA-2 *)
            adjust = adjust + ((1L<<(bwA-2-(bwA-1-j)))*msnzbvals[(i*bwA) + j]);
            (* Multipy the result in the end with this value *)
            if(inverse){
                sqrtAdjust = sqrtAdjust + ((1L<<(((sA-(bwA-1-j)+1)/2) + sqrtAdjustScale))*msnzbvals[(i*bwA) + j]);
            }
            else{
                sqrtAdjust = sqrtAdjust + ((1L<<((((bwA-1-j)-sA)/2) + sqrtAdjustScale))*msnzbvals[(i*bwA) + j]);
            };
            (* Take care of parity of the extra term being multiplied to x. If the extra term power is odd, then a root 2 is included with x itself. *)
            expParity = expParity + ((((bwA-1-j)-sA) & 1L)*msnzbvals[(i*bwA) + j]);
        };
        shiftedA = A[i] * adjust;
        Am[0] = ((shiftedA >> (bwA - 2 - m)) & mMask);
        (* TODO call the batched version instead *)
        LookUpTableArithmeticMUX(m, 1, LUTPar0, Am, YPar0); 
        LookUpTableArithmeticMUX(m, 1, LUTPar1, Am, YPar1); 
        muxCondition = (expParity == 1L);
        Y = muxCondition?YPar1[0]:YPar0[0];
        X = muxCondition?(2L * shiftedA):(shiftedA);
        (* Scale of XPrev is: (bwA - 2) + (m + 1) = bwA + m - 1 *)

        if(inverse){
            XPrev = Y;
        }
        else{
            XPrev = (X * Y);
            (* make scale = sB *)
            if ((bwA + m - 1) > sB)
            {
                XPrev = XPrev >> (bwA + m - 1 - sB);
            }
            else
            {
                XPrev = XPrev << (-1*(bwA + m - 1 - sB));
            };
        };
        
        BPrev = X;
        (* make scale = sB *)
        if ((bwA - 2) > sB)
        {
            BPrev = BPrev >> (bwA - 2 - sB);
        }
        else
        {
            BPrev = BPrev << (-1*(bwA - 2 - sB));
        };
        
        (* scale = m + 1 *)
        YPrev = Y;
        
        (* Run iterations now *)
        for j=[0:iter]
        {
            YSquare = YPrev * YPrev;
            if (j == 0)
            {
                BCur = (YSquare * BPrev);
                BCur = BCur >> ((2*m) + 2);
            }
            else
            {
                YSquare = YSquare >> (sB + 2);
                BCur = BPrev * YSquare;
                BCur = BCur >> sB;
            };
            YCur = (((1L << (sB+1))*3)/2) - BCur;
            XCur = XPrev * YCur;
            if(inverse && (j == 0)){
                XCur = XCur >> (m + 2);
            }
            else{
                XCur = XCur >> (sB + 1);
            };
            XPrev = XCur;
            BPrev = BCur;
            YPrev = YCur;
        };
        if((iter > 0) || (!inverse)){
            B[i] = (XCur * sqrtAdjust); 
            B[i] = ((B[i]) >> sqrtAdjustScale);
        }
        else{
            B[i] = (XCur * sqrtAdjust); 
            B[i] = ((B[i]) >> (sqrtAdjustScale + 1));
        };
        B[i] = ((B[i]) >> (oldsB - sB)) & bMask;     
    };
}

def void div(int32_pl LUTBITS, int32_pl size, int32_pl sA, int32_pl sB, int32_pl sC, int32_pl bwA, int32_pl bwB, int32_pl bwC, int64_al[size] A, int64_al[size] B, int64_al[size] C)
{
    int32_pl m;
    int32_pl temp;
    int32_pl iter;

    if (sC <= 18)
    {
        m = ceildiv((sC-2), 2); 
        iter = 1;
    }
    else
    {
        temp = ceildiv(sC, 2); 
        m = ceildiv((temp-2), 2);
        iter = 2;
    }; 
    
    int64_pl mMask = (1L << m) - 1;
    int64_pl cMask = (1L << bwC) - 1;
    int64_pl sMinusmMask = (1L << (sB-m)) - 1;
   
    (* Assumption: LUTBITS >= m *)
    int32_pl[1<<(LUTBITS+2)] LUT;
    int32_pl[1<<m] LUTA0;
    int32_pl[1<<m] LUTA1;
    int32_pl LUTOffset = 2*((1<<m)-2);
    fillLUTDIV(LUT);
    
    for i=[0:(1<<m)]
    {
        LUTA0[i] = LUT[LUTOffset+(2*i)];
        LUTA1[i] = LUT[LUTOffset+((2*i)+1)];
    };
 
    int64_al[1] Bm;
    int64_al[1] A0;
    int64_al[1] A1;
    int64_al Q;
    int64_al A0Q;
    int64_al Y;
    int64_al e;
    int64_al e0;
    int64_al a0;

    for i=[0:(size)]
    {
        Bm[0] = (B[i] >> (sB - m)) & mMask;
        
        (* A0 scale = m+3 *)
        (* A1 scale = 2m+2 *)
        (* TODO call the batched version instead *)
        LookUpTableArithmeticMUX(m, 1, LUTA0, Bm, A0); 
        LookUpTableArithmeticMUX(m, 1, LUTA1, Bm, A1); 
        
        (* Q scale = sB *)
        Q = B[i] & sMinusmMask;
        
        (* A0Q scale = m+3+sB *)
        A0Q = (A0[0]) * Q;

        (* Reciprocal Approximation of B with precision sC *)
        (* First make scale of A1 same as A0Q *)
        Y = (((A1[0]) << (sB + 1 - m)) -_al A0Q) >> (sB + m + 3 - sC);
        
        e = (B[i] * Y) >> sB;
        (* e0 = 2-e *)
        e0 = (1L << (sC + 1)) - e;
        a0 = (A[i] * Y) >> sA;
        C[i] = (a0 * e0) >> sC;
        C[i] = (C[i]) & cMask;
    };
}

def void exp(int32_pl LUTBITS, int32_pl size, int32_pl sA, int32_pl sB, int32_pl demote, int32_pl bwA, int32_pl bwB, int64_al[size] A, int64_al[size] B)
{
    int32_pl sDemote = log(demote);
    int32_pl digitSize = LUTBITS;
    int32_pl numDigits = ceildiv(bwA, digitSize);
    int32_pl lastDigitSize = bwA % digitSize;
    int64_pl digitMask;
    int32_pl m = digitSize;
    int32_pl maxScale = 32;
    (* Assumption: LUTBITS >= m *)
    int32_pl LUTOffset = 0;
    for i=[1:m]
    {
        LUTOffset = LUTOffset + ((maxScale+1)*(1<<i)*2);
    };
    int32_pl[LUTOffset + ((maxScale+1)*(1<<m)*2) + 10] LUT;
    int32_pl[1<<m] LUTA;
    
    fillLUTNEGEXP(LUT);
    
    if (digitSize == 64){
        digitMask = -1; 
    }
    else{
        digitMask = (1 << digitSize) -1;
    };
    int64_pl bMask = (1L << bwB) - 1;
    int64_al[numDigits] Adigits;
    int64_al[1] Adigit;
    int64_al[1] A0;
    int64_al negA;
    int32_pl curScale;
    int32_pl negScale;
 
    for i=[0:(size)]
    {
        negA = -1L*A[i]; 
        
        for j=[0:numDigits]
        {   
            Adigits[j] = (negA >> (j*digitSize)) & digitMask;
            Adigit[0] = Adigits[j];
            curScale = sA - (digitSize*j);
            if (curScale < 0){
                negScale = 1;
            } 
            else{
                negScale = 0;
            };
            for k=[0:(1<<m)]
            {
                (* Output Scale is 31 *)
                LUTA[k] = LUT[LUTOffset + (curScale*(1<<(m+1))) + (2*k) + negScale];
                LUTA[k] = LUTA[k] >> (30-sB); 
            };
              
            (* TODO call the batched version instead *)
            LookUpTableArithmeticMUX(m, 1, LUTA, Adigit, A0); 
            Adigits[j] = A0[0];
        };

        int32_pl jvar = 1;
        int32_pl kvar = 0;

        for j=[1:numDigits]
        {
            if (jvar < numDigits)
            {
                kvar = 0; 
                for k=[0:numDigits]
                {
                    if ((kvar+jvar) < numDigits)
                    {
                        if ((kvar) < numDigits)
                        {
                            Adigits[kvar] = (Adigits[kvar+jvar] * Adigits[kvar]) >> sB; 
                        };
                    };
                    if ((kvar) < numDigits)
                    {
                        kvar = kvar + (2*jvar);
                    };
                };
                jvar = jvar*2;
            };
        };
        B[i] = Adigits[0] >> sDemote; 
        B[i] = (B[i]) & bMask;
        
    };
 
}

def void SigmoidImpl(int32_pl LUTBITS, int32_pl size, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int64_al[size] A, int64_al[size] B)
{
    int64_al[size] negA;
    int64_al[size] expNegA;
    int64_al[size] sigNegA;
    int64_al[size] den;
    int64_al[size] all1;
    for i=[0:(size)]
    {
        negA[i] = ((A[i])<0L)?_bl(A[i]):((-1L)*(A[i]));
    };
    
    exp(LUTBITS, size, sA, sB, 1, bwA, 32, negA, expNegA);
    
    for i=[0:(size)]
    {
        den[i] = ((expNegA[i]) == (1L<<sB))?_bl((expNegA[i]) + (1L << sB) - 1L):((expNegA[i]) + (1L << sB));
        all1[i] = 1L;
    };
    div(LUTBITS, size, 0, sB, sB, bwA, bwB, 32, all1, den, sigNegA);
    for i=[0:(size)]
    {
        B[i] = ((A[i]) >= 0L)?_bl(sigNegA[i]):(((expNegA[i]) * (sigNegA[i])) >> sB);
    };
}

def void TanhImpl(int32_pl LUTBITS, int32_pl size, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int64_al[size] A, int64_al[size] B)
{
    int64_al[size] negA;
    int64_al[size] expNeg2A;
    int64_al[size] tanhNegA;
    int64_al[size] den;
    int64_al[size] num;

    for i=[0:(size)]
    {
        negA[i] = ((A[i])<0L)?_bl(A[i]):((-1L)*(A[i]));
    };
    
    exp(LUTBITS, size, sA - 1, sB, 1, bwA, bwB, negA, expNeg2A);
    
    for i=[0:(size)]
    {
        den[i] = ((expNeg2A[i]) == (1L<<sB))?_bl((expNeg2A[i]) + (1L << sB) - 1L):((expNeg2A[i]) + (1L << sB));
        num[i] = (1L << sB) - expNeg2A[i];
    };

    div(LUTBITS, size, sB, sB, sB, bwA, bwB, 32, num, den, tanhNegA);
    
    for i=[0:(size)]
    {
        B[i] = ((A[i]) >= 0L)?_bl(tanhNegA[i]):((-1L) * (tanhNegA[i]));
    };
}

(* <><><><><><><><>< *)
(* Lib functions end *)
(* <><><><><><><><>< *)



(**************************)
def void ScaleDown(int32_pl s1, int64_al[s1] arr, int32_pl sf){
	for i1=[0:s1]{
		arr[i1] = arr[i1] >> sf;
	};
}

(**************************)
def void ClearMemSecret1(int32_pl s1, int64_al[s1] arr)
{
	return;
}

def void ClearMemSecret2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr)
{
	return;
}

def void ClearMemSecret3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] arr)
{
	return;
}

def void ClearMemSecret4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr)
{
	return;
}

def void ClearMemSecret5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr)
{
	return;
}

def void ClearMemPublic(int32_pl x)
{
	return;	
}

def void ClearMemPublic1(int32_pl s, int32_pl[s] x)
{
	return;	
}

def void ClearMemPublic2(int32_pl s1, int32_pl s2, int32_pl[s1][s2] arr)
{
	return;	
}

def void ClearMemPublic3(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl[s1][s2][s3] arr)
{
	return;	
}

def void ClearMemPublic4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl[s1][s2][s3][s4] arr)
{
	return;	
}

def void ClearMemPublic5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl[s1][s2][s3][s4][s5] arr)
{
	return;	
}

(**************************)
def void StartComputation()
{
	return;
}

def void EndComputation()
{
	return;
}
(*

Authors: Nishant Kumar.

Copyright:
Copyright (c) 2020 Microsoft Research
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*)

(**************************)
def void MatAddBroadCast2(int32_pl a1, int32_pl a2, int32_pl b1, int32_pl s1, int32_pl s2, int64_al[s1][s2] A, int64_al[s2] B, int64_al[s1][s2] outArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			outArr[i1][i2] = A[i1][i2] + B[i2];
		};
	};
}

def void MatAdd2(int32_pl a1, int32_pl a2, int32_pl b1, int32_pl b2, int32_pl s1, int32_pl s2, int64_al[a1][a2] A, int64_al[b1][b2] B, int64_al[s1][s2] outArr){
	int32_pl aIdx1 = 0;
	int32_pl aIdx2 = 0;
	int32_pl bIdx1 = 0;
	int32_pl bIdx2 = 0;
	for i1=[0:s1]{
		aIdx1 = ((a1 == 1) ? 0 : i1);
		bIdx1 = ((b1 == 1) ? 0 : i1);
		for i2=[0:s2]{
			aIdx2 = ((a2 == 1) ? 0 : i2);
			bIdx2 = ((b2 == 1) ? 0 : i2);
			outArr[i1][i2] = A[aIdx1][aIdx2] + B[bIdx1][bIdx2];
		};
	};
}

def void MatAddBroadCast4(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl b1, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] A, int64_al[s4] B, int64_al[s1][s2][s3][s4] outArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					outArr[i1][i2][i3][i4] = A[i1][i2][i3][i4] + B[i4];
				};
			};
		};
	};
}


def void MatAddBroadCast5(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl a5, int32_pl b1, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] A, int64_al[s5] B, int64_al[s1][s2][s3][s4][s5] outArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						outArr[i1][i2][i3][i4][i5] = A[i1][i2][i3][i4][i5] + B[i5];
					};
				};
			};
		};
	};
}

def void MatAdd4(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl b1, int32_pl b2, int32_pl b3, int32_pl b4, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[a1][a2][a3][a4] A, int64_al[b1][b2][b3][b4] B, int64_al[s1][s2][s3][s4] outArr){
	int32_pl aIdx1 = 0;
	int32_pl aIdx2 = 0;
	int32_pl aIdx3 = 0;
	int32_pl aIdx4 = 0;
	int32_pl bIdx1 = 0;
	int32_pl bIdx2 = 0;
	int32_pl bIdx3 = 0;
	int32_pl bIdx4 = 0;
	for i1=[0:s1]{
		aIdx1 = ((a1 == 1) ? 0 : i1);
		bIdx1 = ((b1 == 1) ? 0 : i1);
		for i2=[0:s2]{
			aIdx2 = ((a2 == 1) ? 0 : i2);
			bIdx2 = ((b2 == 1) ? 0 : i2);
			for i3=[0:s3]{
				aIdx3 = ((a3 == 1) ? 0 : i3);
				bIdx3 = ((b3 == 1) ? 0 : i3);
				for i4=[0:s4]{
					aIdx4 = ((a4 == 1) ? 0 : i4);
					bIdx4 = ((b4 == 1) ? 0 : i4);
					outArr[i1][i2][i3][i4] = A[aIdx1][aIdx2][aIdx3][aIdx4] + B[bIdx1][bIdx2][bIdx3][bIdx4];
				};
			};
		};
	};
}

def void MatAdd5(int32_pl a1, int32_pl a2, int32_pl a3, int32_pl a4, int32_pl a5, int32_pl b1, int32_pl b2, int32_pl b3, int32_pl b4, int32_pl b5, int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[a1][a2][a3][a4][a5] A, int64_al[b1][b2][b3][b4][b5] B, int64_al[s1][s2][s3][s4][s5] outArr){
	int32_pl aIdx1 = 0;
	int32_pl aIdx2 = 0;
	int32_pl aIdx3 = 0;
	int32_pl aIdx4 = 0;
	int32_pl aIdx5 = 0;
	int32_pl bIdx1 = 0;
	int32_pl bIdx2 = 0;
	int32_pl bIdx3 = 0;
	int32_pl bIdx4 = 0;
	int32_pl bIdx5 = 0;
	for i1=[0:s1]{
		aIdx1 = ((a1 == 1) ? 0 : i1);
		bIdx1 = ((b1 == 1) ? 0 : i1);
		for i2=[0:s2]{
			aIdx2 = ((a2 == 1) ? 0 : i2);
			bIdx2 = ((b2 == 1) ? 0 : i2);
			for i3=[0:s3]{
				aIdx3 = ((a3 == 1) ? 0 : i3);
				bIdx3 = ((b3 == 1) ? 0 : i3);
				for i4=[0:s4]{
					aIdx4 = ((a4 == 1) ? 0 : i4);
					bIdx4 = ((b4 == 1) ? 0 : i4);
					for i5=[0:s5]{
						aIdx5 = ((a5 == 1) ? 0 : i5);
						bIdx5 = ((b5 == 1) ? 0 : i5);
						outArr[i1][i2][i3][i4][i5] = A[aIdx1][aIdx2][aIdx3][aIdx4][aIdx5] + B[bIdx1][bIdx2][bIdx3][bIdx4][bIdx5];
					};
				};
			};
		};
	};
}
(**************************)
def void CreateTensor1(int32_pl s1, int64_pl val, int64_pl[s1] arr){
	for i1=[0:s1]{
		arr[i1] = val;
	};
}

def void CreateTensor2(int32_pl s1, int32_pl s2, int64_pl val, int64_pl[s1][s2] arr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			arr[i1][i2] = val;
		};
	};
}

def void CreateTensor3(int32_pl s1, int32_pl s2, int32_pl s3, int64_pl val, int64_pl[s1][s2][s3] arr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				arr[i1][i2][i3] = val;
			};
		};
	};
}

def void CreateTensor4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_pl val, int64_pl[s1][s2][s3][s4] arr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					arr[i1][i2][i3][i4] = val;
				};
			};
		};
	};
}

def void CreateTensor5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_pl val, int64_pl[s1][s2][s3][s4][s5] arr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						arr[i1][i2][i3][i4][i5] = val;
					};
				};
			};
		};
	};
}

(**************************)
def void CopyTensor1(int32_pl s1, int64_al[s1] targetArr, int64_al[s1] fromArr, int64_al[s1] ignore){
	for i1=[0:s1]{
		targetArr[i1] = fromArr[i1];
	};
}

def void CopyTensor2(int32_pl s1, int32_pl s2, int64_al[s1][s2] targetArr, int64_al[s1][s2] fromArr, int64_al[s1][s2] ignore){
	for i1=[0:s1]{
		for i2=[0:s2]{
			targetArr[i1][i2] = fromArr[i1][i2];
		};
	};
}

def void CopyTensor3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] targetArr, int64_al[s1][s2][s3] fromArr, int64_al[s1][s2][s3] ignore){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				targetArr[i1][i2][i3] = fromArr[i1][i2][i3];
			};
		};
	};
}

def void CopyTensor4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] targetArr, int64_al[s1][s2][s3][s4] fromArr, int64_al[s1][s2][s3][s4] ignore){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					targetArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
				};
			};
		};
	};
}

(**************************)
def void CreateIdentity11(int32_pl s1, int64_al[s1] fromArr, int64_al[s1] newArr){
	for i1=[0:s1]{
		newArr[i1] = fromArr[i1];
	};
}

def void CreateIdentity22(int32_pl s1, int32_pl s2, int64_al[s1][s2] fromArr, int64_al[s1][s2] newArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			newArr[i1][i2] = fromArr[i1][i2];
		};
	};
}

def void CreateIdentity33(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] fromArr, int64_al[s1][s2][s3] newArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				newArr[i1][i2][i3] = fromArr[i1][i2][i3];
			};
		};
	};
}

def void CreateIdentity44(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] fromArr, int64_al[s1][s2][s3][s4] newArr){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					newArr[i1][i2][i3][i4] = fromArr[i1][i2][i3][i4];
				};
			};
		};
	};
}

(**************************)
def void CreateCopy2211(int32_pl s1, int32_pl s2, int32_pl inps1, int32_pl inps2, int64_al[inps1][inps2] inArr, int32_pl perDimSize, int32_pl[perDimSize] beginIdx, int32_pl[perDimSize] sizeIdx, int64_al[s1][s2] outArr){
	for i=[0:s1]{
		for j=[0:s2]{
			outArr[i][j] = inArr[beginIdx[0]+i][beginIdx[1]+j];
		};
	};
}

def void CreateCopy5511(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int32_pl inps5, int64_al[inps1][inps2][inps3][inps4][inps5] inArr, int32_pl perDimSize, int32_pl[perDimSize] beginIdx, int32_pl[perDimSize] sizeIdx, int64_al[s1][s2][s3][s4][s5] outArr){
	for i=[0:s1]{
		for j=[0:s2]{
			for k=[0:s3]{
				for l=[0:s4]{
					for m=[0:s5]{
						outArr[i][j][k][l][m] = inArr[beginIdx[0]+i][beginIdx[1]+j][beginIdx[2]+k][beginIdx[3]+l][beginIdx[4]+m];
					};
				};
			};
		};
	};
}

(**************************)

def void Concat1T44(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
				};
			};
		};
	};
}


def void Concat2T222(int32_pl s1, int32_pl s2, int32_pl inp1s1, int32_pl inp1s2, int64_al[inp1s1][inp1s2] inp1, int32_pl inp2s1, int32_pl inp2s2, int64_al[inp2s1][inp2s2] inp2, int32_pl axis, int64_al[s1][s2] outp){
	for i1=[0:s1]{
		for i2=[0:s2]{
			if (axis==0){
				if (i1 < inp1s1){
					outp[i1][i2] = inp1[i1][i2];
				}
				else{
					outp[i1][i2] = inp2[i1-inp1s1][i2];
				};
			}
			else{
				if (i2 < inp1s2){
					outp[i1][i2] = inp1[i1][i2];
				}
				else{
					outp[i1][i2] = inp2[i1][i2-inp1s2];
				};
			};
		};
	};
}

def void Concat2T444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					if (axis==0){
						if (i1 < inp1s1){
							outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
						}
						else{
							outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
						};
					}
					else{
						if (axis==1){
							if (i2 < inp1s2){
								outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
							}
							else{
								outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
							};
						}
						else{
							if (axis==2){
								if (i3 < inp1s3){
									outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
								}
								else{
									outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
								};
							}
							else{
								(* axis = 3 *)
								if (i4 < inp1s4){
									outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
								}
								else{
									outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4 - inp1s4];
								};
							};
						};
					};
				};
			};
		};
	};
}

def void Concat3T4444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat4T44444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat5T444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat6T4444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat7T44444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat8T444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat9T4444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat10T44444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat11T444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat12T4444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat13T44444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat14T444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat15T4444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat16T44444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat17T444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat18T4444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat19T44444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat20T444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat21T4444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1)) {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        outp[i1][i2][i3][i4] = inp21[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1][i2][i3][i4];
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2)) {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            outp[i1][i2][i3][i4] = inp21[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2][i3][i4];
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3][i4];
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                            }
                                                                                                            else {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4];
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat22T44444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1)) {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1)) {
                                                                                                            outp[i1][i2][i3][i4] = inp21[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1][i2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            outp[i1][i2][i3][i4] = inp22[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1][i2][i3][i4];
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2)) {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2)) {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                outp[i1][i2][i3][i4] = inp22[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2][i3][i4];
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    outp[i1][i2][i3][i4] = inp22[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3][i4];
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    outp[i1][i2][i3][i4] = inp22[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4];
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat23T444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int64_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1)) {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1)) {
                                                                                                            outp[i1][i2][i3][i4] = inp21[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1][i2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1)) {
                                                                                                                outp[i1][i2][i3][i4] = inp22[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1][i2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                outp[i1][i2][i3][i4] = inp23[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1][i2][i3][i4];
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2)) {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2)) {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp22[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2][i3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    outp[i1][i2][i3][i4] = inp23[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2][i3][i4];
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        outp[i1][i2][i3][i4] = inp23[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3][i4];
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        outp[i1][i2][i3][i4] = inp23[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4];
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat24T4444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int64_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl inp24s1, int32_pl inp24s2, int32_pl inp24s3, int32_pl inp24s4, int64_al[inp24s1][inp24s2][inp24s3][inp24s4] inp24, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1)) {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1)) {
                                                                                                            outp[i1][i2][i3][i4] = inp21[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1][i2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1)) {
                                                                                                                outp[i1][i2][i3][i4] = inp22[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1][i2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1 + inp23s1)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp23[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1][i2][i3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    outp[i1][i2][i3][i4] = inp24[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1-inp23s1][i2][i3][i4];
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2)) {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2)) {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp22[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2][i3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2 + inp23s2)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp23[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2][i3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        outp[i1][i2][i3][i4] = inp24[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2-inp23s2][i3][i4];
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3 + inp23s3)) {
                                                                                                                            outp[i1][i2][i3][i4] = inp23[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3][i4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            outp[i1][i2][i3][i4] = inp24[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3-inp23s3][i4];
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4 + inp23s4)) {
                                                                                                                            outp[i1][i2][i3][i4] = inp23[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            outp[i1][i2][i3][i4] = inp24[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4-inp23s4];
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}

def void Concat25T44444444444444444444444444(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inp1s1, int32_pl inp1s2, int32_pl inp1s3, int32_pl inp1s4, int64_al[inp1s1][inp1s2][inp1s3][inp1s4] inp1, int32_pl inp2s1, int32_pl inp2s2, int32_pl inp2s3, int32_pl inp2s4, int64_al[inp2s1][inp2s2][inp2s3][inp2s4] inp2, int32_pl inp3s1, int32_pl inp3s2, int32_pl inp3s3, int32_pl inp3s4, int64_al[inp3s1][inp3s2][inp3s3][inp3s4] inp3, int32_pl inp4s1, int32_pl inp4s2, int32_pl inp4s3, int32_pl inp4s4, int64_al[inp4s1][inp4s2][inp4s3][inp4s4] inp4, int32_pl inp5s1, int32_pl inp5s2, int32_pl inp5s3, int32_pl inp5s4, int64_al[inp5s1][inp5s2][inp5s3][inp5s4] inp5, int32_pl inp6s1, int32_pl inp6s2, int32_pl inp6s3, int32_pl inp6s4, int64_al[inp6s1][inp6s2][inp6s3][inp6s4] inp6, int32_pl inp7s1, int32_pl inp7s2, int32_pl inp7s3, int32_pl inp7s4, int64_al[inp7s1][inp7s2][inp7s3][inp7s4] inp7, int32_pl inp8s1, int32_pl inp8s2, int32_pl inp8s3, int32_pl inp8s4, int64_al[inp8s1][inp8s2][inp8s3][inp8s4] inp8, int32_pl inp9s1, int32_pl inp9s2, int32_pl inp9s3, int32_pl inp9s4, int64_al[inp9s1][inp9s2][inp9s3][inp9s4] inp9, int32_pl inp10s1, int32_pl inp10s2, int32_pl inp10s3, int32_pl inp10s4, int64_al[inp10s1][inp10s2][inp10s3][inp10s4] inp10, int32_pl inp11s1, int32_pl inp11s2, int32_pl inp11s3, int32_pl inp11s4, int64_al[inp11s1][inp11s2][inp11s3][inp11s4] inp11, int32_pl inp12s1, int32_pl inp12s2, int32_pl inp12s3, int32_pl inp12s4, int64_al[inp12s1][inp12s2][inp12s3][inp12s4] inp12, int32_pl inp13s1, int32_pl inp13s2, int32_pl inp13s3, int32_pl inp13s4, int64_al[inp13s1][inp13s2][inp13s3][inp13s4] inp13, int32_pl inp14s1, int32_pl inp14s2, int32_pl inp14s3, int32_pl inp14s4, int64_al[inp14s1][inp14s2][inp14s3][inp14s4] inp14, int32_pl inp15s1, int32_pl inp15s2, int32_pl inp15s3, int32_pl inp15s4, int64_al[inp15s1][inp15s2][inp15s3][inp15s4] inp15, int32_pl inp16s1, int32_pl inp16s2, int32_pl inp16s3, int32_pl inp16s4, int64_al[inp16s1][inp16s2][inp16s3][inp16s4] inp16, int32_pl inp17s1, int32_pl inp17s2, int32_pl inp17s3, int32_pl inp17s4, int64_al[inp17s1][inp17s2][inp17s3][inp17s4] inp17, int32_pl inp18s1, int32_pl inp18s2, int32_pl inp18s3, int32_pl inp18s4, int64_al[inp18s1][inp18s2][inp18s3][inp18s4] inp18, int32_pl inp19s1, int32_pl inp19s2, int32_pl inp19s3, int32_pl inp19s4, int64_al[inp19s1][inp19s2][inp19s3][inp19s4] inp19, int32_pl inp20s1, int32_pl inp20s2, int32_pl inp20s3, int32_pl inp20s4, int64_al[inp20s1][inp20s2][inp20s3][inp20s4] inp20, int32_pl inp21s1, int32_pl inp21s2, int32_pl inp21s3, int32_pl inp21s4, int64_al[inp21s1][inp21s2][inp21s3][inp21s4] inp21, int32_pl inp22s1, int32_pl inp22s2, int32_pl inp22s3, int32_pl inp22s4, int64_al[inp22s1][inp22s2][inp22s3][inp22s4] inp22, int32_pl inp23s1, int32_pl inp23s2, int32_pl inp23s3, int32_pl inp23s4, int64_al[inp23s1][inp23s2][inp23s3][inp23s4] inp23, int32_pl inp24s1, int32_pl inp24s2, int32_pl inp24s3, int32_pl inp24s4, int64_al[inp24s1][inp24s2][inp24s3][inp24s4] inp24, int32_pl inp25s1, int32_pl inp25s2, int32_pl inp25s3, int32_pl inp25s4, int64_al[inp25s1][inp25s2][inp25s3][inp25s4] inp25, int32_pl axis, int64_al[s1][s2][s3][s4] outp){
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                    if (axis == 0){
                        if (i1 < (inp1s1)) {
                            outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                        }
                        else {
                            if (i1 < (inp1s1 + inp2s1)) {
                                outp[i1][i2][i3][i4] = inp2[i1-inp1s1][i2][i3][i4];
                            }
                            else {
                                if (i1 < (inp1s1 + inp2s1 + inp3s1)) {
                                    outp[i1][i2][i3][i4] = inp3[i1-inp1s1-inp2s1][i2][i3][i4];
                                }
                                else {
                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1)) {
                                        outp[i1][i2][i3][i4] = inp4[i1-inp1s1-inp2s1-inp3s1][i2][i3][i4];
                                    }
                                    else {
                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1)) {
                                            outp[i1][i2][i3][i4] = inp5[i1-inp1s1-inp2s1-inp3s1-inp4s1][i2][i3][i4];
                                        }
                                        else {
                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1)) {
                                                outp[i1][i2][i3][i4] = inp6[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1][i2][i3][i4];
                                            }
                                            else {
                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1)) {
                                                    outp[i1][i2][i3][i4] = inp7[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1][i2][i3][i4];
                                                }
                                                else {
                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1)) {
                                                        outp[i1][i2][i3][i4] = inp8[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1][i2][i3][i4];
                                                    }
                                                    else {
                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1)) {
                                                            outp[i1][i2][i3][i4] = inp9[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1][i2][i3][i4];
                                                        }
                                                        else {
                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1)) {
                                                                outp[i1][i2][i3][i4] = inp10[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1][i2][i3][i4];
                                                            }
                                                            else {
                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1)) {
                                                                    outp[i1][i2][i3][i4] = inp11[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1][i2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1)) {
                                                                        outp[i1][i2][i3][i4] = inp12[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1][i2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1)) {
                                                                            outp[i1][i2][i3][i4] = inp13[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1][i2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1)) {
                                                                                outp[i1][i2][i3][i4] = inp14[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1][i2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1)) {
                                                                                    outp[i1][i2][i3][i4] = inp15[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1][i2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1)) {
                                                                                        outp[i1][i2][i3][i4] = inp16[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1][i2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1)) {
                                                                                            outp[i1][i2][i3][i4] = inp17[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1][i2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1)) {
                                                                                                outp[i1][i2][i3][i4] = inp18[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1][i2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1)) {
                                                                                                    outp[i1][i2][i3][i4] = inp19[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1][i2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1)) {
                                                                                                        outp[i1][i2][i3][i4] = inp20[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1][i2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1)) {
                                                                                                            outp[i1][i2][i3][i4] = inp21[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1][i2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1)) {
                                                                                                                outp[i1][i2][i3][i4] = inp22[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1][i2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1 + inp23s1)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp23[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1][i2][i3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i1 < (inp1s1 + inp2s1 + inp3s1 + inp4s1 + inp5s1 + inp6s1 + inp7s1 + inp8s1 + inp9s1 + inp10s1 + inp11s1 + inp12s1 + inp13s1 + inp14s1 + inp15s1 + inp16s1 + inp17s1 + inp18s1 + inp19s1 + inp20s1 + inp21s1 + inp22s1 + inp23s1 + inp24s1)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp24[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1-inp23s1][i2][i3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        outp[i1][i2][i3][i4] = inp25[i1-inp1s1-inp2s1-inp3s1-inp4s1-inp5s1-inp6s1-inp7s1-inp8s1-inp9s1-inp10s1-inp11s1-inp12s1-inp13s1-inp14s1-inp15s1-inp16s1-inp17s1-inp18s1-inp19s1-inp20s1-inp21s1-inp22s1-inp23s1-inp24s1][i2][i3][i4];
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    }
                    else {
                        if (axis == 1){
                            if (i2 < (inp1s2)) {
                                outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                            }
                            else {
                                if (i2 < (inp1s2 + inp2s2)) {
                                    outp[i1][i2][i3][i4] = inp2[i1][i2-inp1s2][i3][i4];
                                }
                                else {
                                    if (i2 < (inp1s2 + inp2s2 + inp3s2)) {
                                        outp[i1][i2][i3][i4] = inp3[i1][i2-inp1s2-inp2s2][i3][i4];
                                    }
                                    else {
                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2)) {
                                            outp[i1][i2][i3][i4] = inp4[i1][i2-inp1s2-inp2s2-inp3s2][i3][i4];
                                        }
                                        else {
                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2)) {
                                                outp[i1][i2][i3][i4] = inp5[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2][i3][i4];
                                            }
                                            else {
                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2)) {
                                                    outp[i1][i2][i3][i4] = inp6[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2][i3][i4];
                                                }
                                                else {
                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2)) {
                                                        outp[i1][i2][i3][i4] = inp7[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2][i3][i4];
                                                    }
                                                    else {
                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2)) {
                                                            outp[i1][i2][i3][i4] = inp8[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2][i3][i4];
                                                        }
                                                        else {
                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2)) {
                                                                outp[i1][i2][i3][i4] = inp9[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2][i3][i4];
                                                            }
                                                            else {
                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2)) {
                                                                    outp[i1][i2][i3][i4] = inp10[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2][i3][i4];
                                                                }
                                                                else {
                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2)) {
                                                                        outp[i1][i2][i3][i4] = inp11[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2][i3][i4];
                                                                    }
                                                                    else {
                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2)) {
                                                                            outp[i1][i2][i3][i4] = inp12[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2][i3][i4];
                                                                        }
                                                                        else {
                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2)) {
                                                                                outp[i1][i2][i3][i4] = inp13[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2][i3][i4];
                                                                            }
                                                                            else {
                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2)) {
                                                                                    outp[i1][i2][i3][i4] = inp14[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2][i3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2)) {
                                                                                        outp[i1][i2][i3][i4] = inp15[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2][i3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2)) {
                                                                                            outp[i1][i2][i3][i4] = inp16[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2][i3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2)) {
                                                                                                outp[i1][i2][i3][i4] = inp17[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2][i3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2)) {
                                                                                                    outp[i1][i2][i3][i4] = inp18[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2][i3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2)) {
                                                                                                        outp[i1][i2][i3][i4] = inp19[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2][i3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2)) {
                                                                                                            outp[i1][i2][i3][i4] = inp20[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2][i3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2)) {
                                                                                                                outp[i1][i2][i3][i4] = inp21[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2][i3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp22[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2][i3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2 + inp23s2)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp23[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2][i3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (i2 < (inp1s2 + inp2s2 + inp3s2 + inp4s2 + inp5s2 + inp6s2 + inp7s2 + inp8s2 + inp9s2 + inp10s2 + inp11s2 + inp12s2 + inp13s2 + inp14s2 + inp15s2 + inp16s2 + inp17s2 + inp18s2 + inp19s2 + inp20s2 + inp21s2 + inp22s2 + inp23s2 + inp24s2)) {
                                                                                                                            outp[i1][i2][i3][i4] = inp24[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2-inp23s2][i3][i4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            outp[i1][i2][i3][i4] = inp25[i1][i2-inp1s2-inp2s2-inp3s2-inp4s2-inp5s2-inp6s2-inp7s2-inp8s2-inp9s2-inp10s2-inp11s2-inp12s2-inp13s2-inp14s2-inp15s2-inp16s2-inp17s2-inp18s2-inp19s2-inp20s2-inp21s2-inp22s2-inp23s2-inp24s2][i3][i4];
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        }
                        else {
                            if (axis == 2){
                                if (i3 < (inp1s3)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i3 < (inp1s3 + inp2s3)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3-inp1s3][i4];
                                    }
                                    else {
                                        if (i3 < (inp1s3 + inp2s3 + inp3s3)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3-inp1s3-inp2s3][i4];
                                        }
                                        else {
                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3-inp1s3-inp2s3-inp3s3][i4];
                                            }
                                            else {
                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3][i4];
                                                }
                                                else {
                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3][i4];
                                                    }
                                                    else {
                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3][i4];
                                                        }
                                                        else {
                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3][i4];
                                                            }
                                                            else {
                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3][i4];
                                                                }
                                                                else {
                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3][i4];
                                                                    }
                                                                    else {
                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3][i4];
                                                                        }
                                                                        else {
                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3][i4];
                                                                            }
                                                                            else {
                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3][i4];
                                                                                }
                                                                                else {
                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3][i4];
                                                                                    }
                                                                                    else {
                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3][i4];
                                                                                        }
                                                                                        else {
                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3][i4];
                                                                                            }
                                                                                            else {
                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3][i4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3][i4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3][i4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3][i4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3][i4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3][i4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3 + inp23s3)) {
                                                                                                                            outp[i1][i2][i3][i4] = inp23[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3][i4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if (i3 < (inp1s3 + inp2s3 + inp3s3 + inp4s3 + inp5s3 + inp6s3 + inp7s3 + inp8s3 + inp9s3 + inp10s3 + inp11s3 + inp12s3 + inp13s3 + inp14s3 + inp15s3 + inp16s3 + inp17s3 + inp18s3 + inp19s3 + inp20s3 + inp21s3 + inp22s3 + inp23s3 + inp24s3)) {
                                                                                                                                outp[i1][i2][i3][i4] = inp24[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3-inp23s3][i4];
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                outp[i1][i2][i3][i4] = inp25[i1][i2][i3-inp1s3-inp2s3-inp3s3-inp4s3-inp5s3-inp6s3-inp7s3-inp8s3-inp9s3-inp10s3-inp11s3-inp12s3-inp13s3-inp14s3-inp15s3-inp16s3-inp17s3-inp18s3-inp19s3-inp20s3-inp21s3-inp22s3-inp23s3-inp24s3][i4];
                                                                                                                            };
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            }
                            else {
                                if (i4 < (inp1s4)) {
                                    outp[i1][i2][i3][i4] = inp1[i1][i2][i3][i4];
                                }
                                else {
                                    if (i4 < (inp1s4 + inp2s4)) {
                                        outp[i1][i2][i3][i4] = inp2[i1][i2][i3][i4-inp1s4];
                                    }
                                    else {
                                        if (i4 < (inp1s4 + inp2s4 + inp3s4)) {
                                            outp[i1][i2][i3][i4] = inp3[i1][i2][i3][i4-inp1s4-inp2s4];
                                        }
                                        else {
                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4)) {
                                                outp[i1][i2][i3][i4] = inp4[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4];
                                            }
                                            else {
                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4)) {
                                                    outp[i1][i2][i3][i4] = inp5[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4];
                                                }
                                                else {
                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4)) {
                                                        outp[i1][i2][i3][i4] = inp6[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4];
                                                    }
                                                    else {
                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4)) {
                                                            outp[i1][i2][i3][i4] = inp7[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4];
                                                        }
                                                        else {
                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4)) {
                                                                outp[i1][i2][i3][i4] = inp8[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4];
                                                            }
                                                            else {
                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4)) {
                                                                    outp[i1][i2][i3][i4] = inp9[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4];
                                                                }
                                                                else {
                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4)) {
                                                                        outp[i1][i2][i3][i4] = inp10[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4];
                                                                    }
                                                                    else {
                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4)) {
                                                                            outp[i1][i2][i3][i4] = inp11[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4];
                                                                        }
                                                                        else {
                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4)) {
                                                                                outp[i1][i2][i3][i4] = inp12[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4];
                                                                            }
                                                                            else {
                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4)) {
                                                                                    outp[i1][i2][i3][i4] = inp13[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4];
                                                                                }
                                                                                else {
                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4)) {
                                                                                        outp[i1][i2][i3][i4] = inp14[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4];
                                                                                    }
                                                                                    else {
                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4)) {
                                                                                            outp[i1][i2][i3][i4] = inp15[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4];
                                                                                        }
                                                                                        else {
                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4)) {
                                                                                                outp[i1][i2][i3][i4] = inp16[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4];
                                                                                            }
                                                                                            else {
                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4)) {
                                                                                                    outp[i1][i2][i3][i4] = inp17[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4];
                                                                                                }
                                                                                                else {
                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4)) {
                                                                                                        outp[i1][i2][i3][i4] = inp18[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4];
                                                                                                    }
                                                                                                    else {
                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4)) {
                                                                                                            outp[i1][i2][i3][i4] = inp19[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4];
                                                                                                        }
                                                                                                        else {
                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4)) {
                                                                                                                outp[i1][i2][i3][i4] = inp20[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4];
                                                                                                            }
                                                                                                            else {
                                                                                                                if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4)) {
                                                                                                                    outp[i1][i2][i3][i4] = inp21[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4];
                                                                                                                }
                                                                                                                else {
                                                                                                                    if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4)) {
                                                                                                                        outp[i1][i2][i3][i4] = inp22[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4];
                                                                                                                    }
                                                                                                                    else {
                                                                                                                        if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4 + inp23s4)) {
                                                                                                                            outp[i1][i2][i3][i4] = inp23[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4];
                                                                                                                        }
                                                                                                                        else {
                                                                                                                            if (i4 < (inp1s4 + inp2s4 + inp3s4 + inp4s4 + inp5s4 + inp6s4 + inp7s4 + inp8s4 + inp9s4 + inp10s4 + inp11s4 + inp12s4 + inp13s4 + inp14s4 + inp15s4 + inp16s4 + inp17s4 + inp18s4 + inp19s4 + inp20s4 + inp21s4 + inp22s4 + inp23s4 + inp24s4)) {
                                                                                                                                outp[i1][i2][i3][i4] = inp24[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4-inp23s4];
                                                                                                                            }
                                                                                                                            else {
                                                                                                                                outp[i1][i2][i3][i4] = inp25[i1][i2][i3][i4-inp1s4-inp2s4-inp3s4-inp4s4-inp5s4-inp6s4-inp7s4-inp8s4-inp9s4-inp10s4-inp11s4-inp12s4-inp13s4-inp14s4-inp15s4-inp16s4-inp17s4-inp18s4-inp19s4-inp20s4-inp21s4-inp22s4-inp23s4-inp24s4];
                                                                                                                            };
                                                                                                                        };
                                                                                                                    };
                                                                                                                };
                                                                                                            };
                                                                                                        };
                                                                                                    };
                                                                                                };
                                                                                            };
                                                                                        };
                                                                                    };
                                                                                };
                                                                            };
                                                                        };
                                                                    };
                                                                };
                                                            };
                                                        };
                                                    };
                                                };
                                            };
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
    };
}



(**************************)
def void Split44(int32_pl O1, int32_pl O2, int32_pl O3, int32_pl O4, int32_pl I1, int32_pl I2, int32_pl I3, int32_pl I4, int64_al[I1][I2][I3][I4] inp, int32_pl axis, int32_pl curCount, int32_pl total, int64_al[O1][O2][O3][O4] out){
	for o1=[0:O1]{
		for o2=[0:O2]{
			for o3=[0:O3]{
				for o4=[0:O4]{
					
					int32_pl i1 = o1;
					int32_pl i2 = o2;
					int32_pl i3 = o3;
					int32_pl i4 = o4;

					if(axis == 0){
						i1 = (I1/total)*curCount+o1;
					};
					if(axis == 1){
						i2 = (I2/total)*curCount+o2;
					};
					if(axis == 2){
						i3 = (I3/total)*curCount+o3;
					};
					if(axis == 3){
						i4 = (I4/total)*curCount+o4;
					};

					out[o1][o2][o3][o4] = inp[i1][i2][i3][i4];
				};
			};
		};
	};
}

(**************************)
(* Generic implementation of Conv2D *)

def void Conv2DReshapeFilter(int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int64_al[FH][FW][CI][CO] inputArr, int64_al[CO][FH*FW*CI] outputArr){
	for co=[0:CO]{
		for fh=[0:FH]{
			for fw=[0:FW]{
				for ci=[0:CI]{
					int32_pl linIdx = (fh*FW*CI) + (fw*CI) + ci;
					outputArr[co][linIdx] = inputArr[fh][fw][ci][co];
				};
			};
		};
	};
}

def void Conv2DReshapeMatMulOP(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int64_al[CO][N*finalH*finalW] inputArr, int64_al[N][finalH][finalW][CO] outputArr){
	for co=[0:CO]{
		for n=[0:N]{
			for h=[0:finalH]{
				for w=[0:finalW]{
					outputArr[n][h][w][co] = inputArr[co][(n*finalH*finalW) + (h*finalW) + w];
				};
			};
		};
	};
}

def void Conv2DReshapeInput(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][H][W][CI] inputArr, int64_al[RRows][RCols] outputArr){
	int32_pl linIdxFilterMult = 0;
	for n=[0:N]{
		int32_pl leftTopCornerH = 0 - zPadHLeft;
		int32_pl extremeRightBottomCornerH = H - 1 + zPadHRight;
		while((leftTopCornerH + FH - 1) <= extremeRightBottomCornerH){
			int32_pl leftTopCornerW = 0 - zPadWLeft;
			int32_pl extremeRightBottomCornerW = W - 1 + zPadWRight;
			while((leftTopCornerW + FW - 1) <= extremeRightBottomCornerW){

				for fh=[0:FH]{
					for fw=[0:FW]{
						int32_pl curPosH = leftTopCornerH + fh;
						int32_pl curPosW = leftTopCornerW + fw;
						int64_al val = 0L;
						for ci=[0:CI]{
							if ((((curPosH < 0) || (curPosH >= H)) || ((curPosW < 0) || (curPosW >= W)))){
								val = 0L;
							}
							else{
								val = inputArr[n][curPosH][curPosW][ci];
							};
							outputArr[(fh*FW*CI) + (fw*CI) + ci][linIdxFilterMult] = val;
						};
					};
				};

				linIdxFilterMult = linIdxFilterMult + 1;
				leftTopCornerW = leftTopCornerW + strideW;
			};

			leftTopCornerH = leftTopCornerH + strideH;
		};
	};
}

(* int64_al[N][H][W][CI] inputArr, 
   int64_al[FH][FW][CI][CO] filterArr, 
   int64_al[N][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
def void Conv2D(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, 
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	
	int32_pl reshapedFilterRows = CO;
	int32_pl reshapedFilterCols = FH*FW*CI;
	int32_pl reshapedIPRows = FH*FW*CI;
	int32_pl newH = (((H + (zPadHLeft+zPadHRight) - FH)/strideH) + 1);
	int32_pl newW = (((W + (zPadWLeft+zPadWRight) - FW)/strideW) + 1);
	int32_pl reshapedIPCols = N * newH * newW;

	int64_al[reshapedFilterRows][reshapedFilterCols] filterReshaped;
	int64_al[reshapedIPRows][reshapedIPCols] inputReshaped;
	int64_al[reshapedFilterRows][reshapedIPCols] matmulOP;

	Conv2DReshapeFilter(FH, FW, CI, CO, filterArr, filterReshaped);
	Conv2DReshapeInput(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);

	MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, true);

	Conv2DReshapeMatMulOP(N, newH, newW, CO, matmulOP, outArr);

	ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
	ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
	ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

(**************************)
(* Loop-based implementation of Conv2D *)
(* These loop implementations of convolution run faster with multithreading *)

def void Conv2DLoopInner(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int32_pl outH, int32_pl outW, int32_pl G,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI/G][CO] filterArr,
				   int64_al[N][outH][outW][CO] outArr)
{
	int32_pl GIS = CI/G;
	int32_pl GOS = CO/G; 				   

	for n=[0:N]{
		for cog=[0:GOS]{
			for cig=[0:GIS]{
				for g=[0:G]{
					for h=[0:outH]{
						for w=[0:outW]{
							
							int64_al val = 0L;
							int32_pl ci = GIS*g + cig;
							int32_pl co = GOS*g + cog;
							int32_pl curPosH = strideH*h-zPadHLeft;

							for fh=[0:FH]{
								int32_pl curPosW = strideW*w-zPadWLeft;

								for fw=[0:FW]{
										if( (curPosH >= 0) && (curPosW >= 0) && (curPosH < H) && (curPosW < W)){
											val = val +_al (inputArr[n][curPosH][curPosW][ci]*filterArr[fh][fw][(ci/G)][co]);
										};	

										curPosW = curPosW + 1;
									};
									curPosH = curPosH + 1;
								};
								
								outArr[n][h][w][co] = outArr[n][h][w][co] + val;		
							};	
						};
					};
			};
		};
	};					   
}

(* int64_al[N][H][W][CI] inputArr, 
   int64_al[FH][FW][CI][CO] filterArr, 
   int64_al[N][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
def void Conv2DLoop(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G, 
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	int32_pl outH = ((H-FH+(zPadHLeft+zPadHRight))/strideH)+1;
	int32_pl outW = ((W-FW+(zPadWLeft+zPadWRight))/strideW)+1;

	Conv2DLoopInner(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, outH, outW, G, inputArr, filterArr, outArr);
}

(**************************)
(* Generic implementation of Conv2D with Groups *)

def void Conv2DReshapeFilterGroup(int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int32_pl g, int32_pl G, int64_al[FH][FW][CI/G][CO] inputArr, int64_al[CO/G][FH*FW*(CI/G)] outputArr){
	
	int32_pl CIG = CI/G;
	int32_pl COG = CO/G;
	int32_pl startCO = g*COG;

	for co=[0:COG]{
		for fh=[0:FH]{
			for fw=[0:FW]{
				for ci=[0:CIG]{
					int32_pl linIdx = (fh*FW*CIG) + (fw*CIG) + ci;
					outputArr[co][linIdx] = inputArr[fh][fw][ci][co+startCO];
				};
			};
		};
	};
}

def void Conv2DReshapeMatMulOPGroup(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int32_pl g, int32_pl G, int64_al[CO/G][N*finalH*finalW] inputArr, int64_al[N][finalH][finalW][CO] outputArr){
	
	int32_pl COG = CO/G;
	int32_pl startCO = g*COG;

	for co=[0:COG]{
		for n=[0:N]{
			for h=[0:finalH]{
				for w=[0:finalW]{
					outputArr[n][h][w][co+startCO] = inputArr[co][(n*finalH*finalW) + (h*finalW) + w];
				};
			};
		};
	};
}

def void Conv2DReshapeInputGroup(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideH, int32_pl strideW, int32_pl g, int32_pl G, int32_pl RRows, int32_pl RCols, int64_al[N][H][W][CI] inputArr, int64_al[RRows][RCols] outputArr){
	int32_pl linIdxFilterMult = 0;
	int32_pl CIG = CI/G;

	for n=[0:N]{
		int32_pl leftTopCornerH = 0 - zPadHLeft;
		int32_pl extremeRightBottomCornerH = H - 1 + zPadHRight;
		while((leftTopCornerH + FH - 1) <= extremeRightBottomCornerH){
			int32_pl leftTopCornerW = 0 - zPadWLeft;
			int32_pl extremeRightBottomCornerW = W - 1 + zPadWRight;
			while((leftTopCornerW + FW - 1) <= extremeRightBottomCornerW){

				for fh=[0:FH]{
					for fw=[0:FW]{
						int32_pl curPosH = leftTopCornerH + fh;
						int32_pl curPosW = leftTopCornerW + fw;
						int64_al val = 0L;

						int32_pl startCI = g*CIG;

						for ci=[0:CIG]{
							if ((((curPosH < 0) || (curPosH >= H)) || ((curPosW < 0) || (curPosW >= W)))){
								val = 0L;
							}
							else{
								val = inputArr[n][curPosH][curPosW][ci+startCI];
							};
							outputArr[(fh*FW*CIG) + (fw*CIG) + ci][linIdxFilterMult] = val;
						};
					};
				};

				linIdxFilterMult = linIdxFilterMult + 1;
				leftTopCornerW = leftTopCornerW + strideW;
			};

			leftTopCornerH = leftTopCornerH + strideH;
		};
	};
}

(* int64_al[N][H][W][CI] inputArr, 
   int64_al[FH][FW][CI][CO] filterArr, 
   int64_al[N][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
def void Conv2DGroup(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI/G][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	int32_pl CIG = CI/G;	
	int32_pl reshapedFilterRows = CO/G;
	int32_pl reshapedFilterCols = FH*FW*CIG;
	int32_pl reshapedIPRows = FH*FW*CIG;
	int32_pl outH = (((H + (zPadHLeft+zPadHRight) - FH)/strideH) + 1);
	int32_pl outW = (((W + (zPadWLeft+zPadWRight) - FW)/strideW) + 1);
	int32_pl reshapedIPCols = N * outH * outW;


	for g=[0:G]{
		int64_al[reshapedIPRows][reshapedIPCols] inputReshaped;
		int64_al[reshapedFilterRows][reshapedIPCols] matmulOP;
		int64_al[reshapedFilterRows][reshapedFilterCols] filterReshaped;

		Conv2DReshapeFilterGroup(FH, FW, CI, CO, g, G, filterArr, filterReshaped);
		Conv2DReshapeInputGroup(N, H, W, CI, FH, FW, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, g, G, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);

		MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, true);
		
		Conv2DReshapeMatMulOPGroup(N, outH, outW, CO, g, G, matmulOP, outArr);

		ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
		ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
		ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
	}
}

(**************************)
(* Generic implementation of Conv3D *)

def void Conv3DReshapeFilter(int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CI, int32_pl CO, int64_al[FD][FH][FW][CI][CO] inputArr, int64_al[CO][FD*FH*FW*CI] outputArr){
	for co=[0:CO]{
		for fd=[0:FD]{
			for fh=[0:FH]{
				for fw=[0:FW]{
					for ci=[0:CI]{
						int32_pl linIdx = (fd*FH*FW*CI) + (fh*FW*CI) + (fw*CI) + ci;
						outputArr[co][linIdx] = inputArr[fd][fh][fw][ci][co];
					};
				};
			};
		};
	};
}

def void Conv3DReshapeMatMulOP(int32_pl N, int32_pl finalD, int32_pl finalH, int32_pl finalW, int32_pl CO, int64_al[CO][N*finalD*finalH*finalW] inputArr, int64_al[N][finalD][finalH][finalW][CO] outputArr){
	for co=[0:CO]{
		for n=[0:N]{
			for d=[0:finalD]{
				for h=[0:finalH]{
					for w=[0:finalW]{
						outputArr[n][d][h][w][co] = inputArr[co][(n*finalD*finalH*finalW) + (d*finalH*finalW) + (h*finalW) + w];
					};
				};
			};
		};
	};
}

def void Conv3DReshapeInput(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, int32_pl FD, int32_pl FH, int32_pl FW, int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, int32_pl strideD, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][D][H][W][CI] inputArr, int64_al[RRows][RCols] outputArr){
	int32_pl linIdxFilterMult = 0;
	for n=[0:N]{
		int32_pl leftTopCornerD = 0 - zPadDLeft;
		int32_pl extremeRightBottomCornerD = D - 1 + zPadDRight;
		while((leftTopCornerD + FD - 1) <= extremeRightBottomCornerD){
			int32_pl leftTopCornerH = 0 - zPadHLeft;
			int32_pl extremeRightBottomCornerH = H - 1 + zPadHRight;
			while((leftTopCornerH + FH - 1) <= extremeRightBottomCornerH){
				int32_pl leftTopCornerW = 0 - zPadWLeft;
				int32_pl extremeRightBottomCornerW = W - 1 + zPadWRight;
				while((leftTopCornerW + FW - 1) <= extremeRightBottomCornerW){

					for fd=[0:FD]{
						for fh=[0:FH]{
							for fw=[0:FW]{
								int32_pl curPosD = leftTopCornerD + fd;
								int32_pl curPosH = leftTopCornerH + fh;
								int32_pl curPosW = leftTopCornerW + fw;
								int64_al val = 0L;
								for ci=[0:CI]{
									if ((((curPosD < 0) || (curPosD >= D)) || ((curPosH < 0) || (curPosH >= H)) || ((curPosW < 0) || (curPosW >= W)))){
										val = 0L;
									}
									else{
										val = inputArr[n][curPosD][curPosH][curPosW][ci];
									};
									outputArr[(fd*FH*FW*CI) + (fh*FW*CI) + (fw*CI) + ci][linIdxFilterMult] = val;
								};
							};
						};
					};

					linIdxFilterMult = linIdxFilterMult + 1;
					leftTopCornerW = leftTopCornerW + strideW;
				};

				leftTopCornerH = leftTopCornerH + strideH;
			};

			leftTopCornerD = leftTopCornerD + strideD;
		};
	};
}

(* int64_al[N][D][H][W][CI] inputArr, 
   int64_al[FD][FH][FW][CI][CO] filterArr, 
   int64_al[N][((D-FD+zPadDLeft+zPadDRight)/strideD)+1][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
def void Conv3D(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr,
				   int64_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	int32_pl reshapedFilterRows = CO;
	int32_pl reshapedFilterCols = FD*FH*FW*CI;
	int32_pl reshapedIPRows = FD*FH*FW*CI;
	int32_pl newD = (((D + (zPadDLeft+zPadDRight) - FD)/strideD) + 1);
	int32_pl newH = (((H + (zPadHLeft+zPadHRight) - FH)/strideH) + 1);
	int32_pl newW = (((W + (zPadWLeft+zPadWRight) - FW)/strideW) + 1);
	int32_pl reshapedIPCols = N * newD * newH * newW;

	int64_al[reshapedFilterRows][reshapedFilterCols] filterReshaped;
	int64_al[reshapedIPRows][reshapedIPCols] inputReshaped;
	int64_al[reshapedFilterRows][reshapedIPCols] matmulOP;

	Conv3DReshapeFilter(FD, FH, FW, CI, CO, filterArr, filterReshaped);
	Conv3DReshapeInput(N, D, H, W, CI, FD, FH, FW, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);

	MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, true);

	Conv3DReshapeMatMulOP(N, newD, newH, newW, CO, matmulOP, outArr);

	ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
	ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
	ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

(**************************)
(* Loop-based implementation of Conv3D *)
(* Loop implementation of convolution run faster with multithreading *)

def void Conv3DLoopInner(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight,int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_pl outD, int32_pl outH, int32_pl outW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr, 
				   int64_al[N][outD][outH][outW][CO] outArr)
{
	for n=[0:N]{
		for co=[0:CO]{
			for d=[0:outD]{
				for h=[0:outH]{
					for w=[0:outW]{
						for ci=[0:CI]{
							int64_al val = 0L;
							for fd=[d*strideD:d*strideD+FD]{
								for fh=[h*strideH:h*strideH+FH]{
										for fw=[w*strideW:w*strideW+FW]{
											int32_pl curPosD = fd-zPadDLeft;
											int32_pl curPosH = fh-zPadHLeft;
											int32_pl curPosW = fw-zPadWLeft;
											if( (curPosD >= 0) && (curPosH >= 0) && (curPosW >= 0) && (curPosD < D) && (curPosH < H) && (curPosW < W)){
												int32_pl curFilterPosD = fd-(d*strideD);
												int32_pl curFilterPosH = fh-(h*strideH);
												int32_pl curFilterPosW = fw-(w*strideW);
												val = val +_al (inputArr[n][curPosD][curPosH][curPosW][ci]*filterArr[curFilterPosD][curFilterPosH][curFilterPosW][ci][co]);
											};
										};
									};
								};	
							outArr[n][d][h][w][co] = outArr[n][d][h][w][co] + val;		
						};
					};
				};	
			};
		};
	};					   
}

(* int64_al[N][D][H][W][CI] inputArr, 
   int64_al[FD][FH][FW][CI][CO] filterArr, 
   int64_al[N][((D-FD+zPadDLeft+zPadDRight)/strideD)+1][((H-FH+zPadHLeft+zPadHRight)/strideH)+1][((W-FW+zPadWLeft+zPadWRight)/strideW)+1][CO] outArr 
*)
def void Conv3DLoop(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr, 
				   int64_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{	
	int32_pl outD = ((D-FD+(zPadDLeft+zPadDRight))/strideD)+1;
	int32_pl outH = ((H-FH+(zPadHLeft+zPadHRight))/strideH)+1;
	int32_pl outW = ((W-FW+(zPadWLeft+zPadWRight))/strideW)+1;

	Conv3DLoopInner(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, outD, outH, outW, inputArr, filterArr, outArr);
}

(**************************)
(* Generic implementation of ConvTranpose2D *)

def void ConvTranspose2DReshapeMatMulOP(int32_pl N, int32_pl finalH, int32_pl finalW, int32_pl CO, int64_al[CO][N*finalH*finalW] inputArr, int64_al[N][finalH][finalW][CO] outputArr){

	for co=[0:CO]{
		for n=[0:N]{
			for h=[0:finalH]{
				for w=[0:finalW]{
					outputArr[n][h][w][co] = inputArr[co][(n*finalH*finalW) + (h*finalW) + w];
				};
			};
		};
	};
}


def void ConvTranspose2DReshapeFilter(int32_pl FH, int32_pl FW, int32_pl CO, int32_pl CI, int64_al[FH][FW][CO][CI] inputArr, int64_al[CO][FH*FW*CI] outputArr)
{
	for co=[0:CO]{
		for fh=[0:FH]{
			for fw=[0:FW]{
				for ci=[0:CI]{
					int32_pl linIdx = (fh*FW*CI) + (fw*CI) + ci;
					outputArr[co][linIdx] = inputArr[FH-1-fh][FW-1-fw][co][ci];
				};
			};
		};
	};
}

def void ConvTranspose2DReshapeInput(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, int32_pl FH, int32_pl FW, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][HPrime][WPrime][CI] inputArr, int64_al[RRows][RCols] outputArr){
	int32_pl linIdxFilterMult = 0;
	for n=[0:N]{
		int32_pl leftTopCornerH = 0 - zPadTrHLeft;
		int32_pl HPrimeTilde = HPrime + ((HPrime-1)*(strideH-1));
		int32_pl extremeRightBottomCornerH = HPrimeTilde - 1 + zPadTrHRight;
		while((leftTopCornerH + FH - 1) <= extremeRightBottomCornerH){
			int32_pl leftTopCornerW = 0 - zPadTrWLeft;
			int32_pl WPrimeTilde = WPrime + ((WPrime-1)*(strideW-1));
			int32_pl extremeRightBottomCornerW = WPrimeTilde - 1 + zPadTrWRight;
			while((leftTopCornerW + FW - 1) <= extremeRightBottomCornerW){

				for fh=[0:FH]{
					for fw=[0:FW]{
						int32_pl curPosH = leftTopCornerH + fh;
						int32_pl curPosW = leftTopCornerW + fw;
						int64_al val = 0L;
						for ci=[0:CI]{
							if ((((curPosH < 0) || (curPosH >= HPrimeTilde)) || ((curPosW < 0) || (curPosW >= WPrimeTilde)))){
								val = 0L;
							}
							else{
								(* curPosH lies between 0 and HPrimeTilde *)
								if (((curPosH % strideH) == 0) && ((curPosW % strideW) == 0)) {
									int32_pl idxInputH = curPosH / strideH;
									int32_pl idxInputW = curPosW / strideW;
									val = inputArr[n][idxInputH][idxInputW][ci];
								}
								else{
									val = 0L; (* This represents fractional stride. *)
								};
							};
							outputArr[(fh*FW*CI) + (fw*CI) + ci][linIdxFilterMult] = val;
						};
					};
				};

				linIdxFilterMult = linIdxFilterMult + 1;
				leftTopCornerW = leftTopCornerW + 1; (* Imp Note: The actual stride is always 1 *)
			};

			leftTopCornerH = leftTopCornerH + 1; (* Imp Note: The actual stride is always 1 *)
		};
	};
}

(* int64_al[N][HPrime][WPrime][CI] inputArr,
   int64_al[FH][FW][CO][CI] filter,
   int64_al[N][H][W][CO] outputArr
*)
def void ConvTranspose2D(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl H, int32_pl W,
				   int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int64_al[N][HPrime][WPrime][CI] inputArr, 
				   int64_al[FH][FW][CO][CI] filterArr, 
				   int64_al[N][H][W][CO] outArr)
{
	int32_pl reshapedFilterRows = CO;
	int32_pl reshapedFilterCols = FH*FW*CI;
	int32_pl reshapedIPRows = FH*FW*CI;
	int32_pl reshapedIPCols = N * H * W;

	int64_al[reshapedFilterRows][reshapedFilterCols] filterReshaped;
	int64_al[reshapedIPRows][reshapedIPCols] inputReshaped;
	int64_al[reshapedFilterRows][reshapedIPCols] matmulOP;

	ConvTranspose2DReshapeFilter(FH, FW, CO, CI, filterArr, filterReshaped);
	ConvTranspose2DReshapeInput(N, HPrime, WPrime, CI, FH, FW, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);

	MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, true);

	ConvTranspose2DReshapeMatMulOP(N, H, W, CO, matmulOP, outArr);

	ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
	ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
	ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

(**************************)
(* Generic implementation of ConvTranpose3D *)

def void ConvTranspose3DReshapeFilter(int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, int32_pl CI, int64_al[FD][FH][FW][CO][CI] inputArr, int64_al[CO][FD*FH*FW*CI] outputArr)
{
	for co=[0:CO]{
		for fd=[0:FD]{
			for fh=[0:FH]{
				for fw=[0:FW]{
					for ci=[0:CI]{
						int32_pl linIdx = (fd*FH*FW*CI) + (fh*FW*CI) + (fw*CI) + ci;
						outputArr[co][linIdx] = inputArr[FD-1-fd][FH-1-fh][FW-1-fw][co][ci];
					};
				};
			};
		};
	};
}

def void ConvTranspose3DReshapeInput(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, int32_pl FD, int32_pl FH, int32_pl FW, int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, int32_pl strideD, int32_pl strideH, int32_pl strideW, int32_pl RRows, int32_pl RCols, int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, int64_al[RRows][RCols] outputArr){
	int32_pl linIdxFilterMult = 0;
	for n=[0:N]{
		int32_pl leftTopCornerD = 0 - zPadTrDLeft;
		int32_pl DPrimeTilde = DPrime + ((DPrime-1)*(strideD-1));
		int32_pl extremeRightBottomCornerD = DPrimeTilde - 1 + zPadTrDRight;
		while((leftTopCornerD + FD - 1) <= extremeRightBottomCornerD){
			int32_pl leftTopCornerH = 0 - zPadTrHLeft;
			int32_pl HPrimeTilde = HPrime + ((HPrime-1)*(strideH-1));
			int32_pl extremeRightBottomCornerH = HPrimeTilde - 1 + zPadTrHRight;
			while((leftTopCornerH + FH - 1) <= extremeRightBottomCornerH){
				int32_pl leftTopCornerW = 0 - zPadTrWLeft;
				int32_pl WPrimeTilde = WPrime + ((WPrime-1)*(strideW-1));
				int32_pl extremeRightBottomCornerW = WPrimeTilde - 1 + zPadTrWRight;
				while((leftTopCornerW + FW - 1) <= extremeRightBottomCornerW){

					for fd=[0:FD]{
						for fh=[0:FH]{
							for fw=[0:FW]{
								int32_pl curPosD = leftTopCornerD + fd;
								int32_pl curPosH = leftTopCornerH + fh;
								int32_pl curPosW = leftTopCornerW + fw;
								int64_al val = 0L;
								for ci=[0:CI]{
									if (((curPosD < 0) || (curPosD >= DPrimeTilde)) || ((curPosH < 0) || (curPosH >= HPrimeTilde)) || ((curPosW < 0) || (curPosW >= WPrimeTilde))) {
										val = 0L;
									}
									else{
										(* curPosH lies between 0 and HPrimeTilde *)
										if (((curPosD % strideD) == 0) && ((curPosH % strideH) == 0) && ((curPosW % strideW) == 0)) {
											int32_pl idxInputD = curPosD / strideD;
											int32_pl idxInputH = curPosH / strideH;
											int32_pl idxInputW = curPosW / strideW;
											val = inputArr[n][idxInputD][idxInputH][idxInputW][ci];
										}
										else{
											val = 0L; (* This represents fractional stride. *)
										};
									};
									outputArr[(fd*FH*FW*CI) + (fh*FW*CI) + (fw*CI) + ci][linIdxFilterMult] = val;
								};
							};
						};
					};

					linIdxFilterMult = linIdxFilterMult + 1;
					leftTopCornerW = leftTopCornerW + 1; (* Imp Note: The actual stride is always 1 *)
				};

				leftTopCornerH = leftTopCornerH + 1; (* Imp Note: The actual stride is always 1 *)
			};

			leftTopCornerD = leftTopCornerD + 1; (* Imp Note: The actual stride is always 1 *)
		};
	};
}

(* int64_al[N][DPrime][HPrime][WPrime][CI] inputArr,
   int64_al[FD][FH][FW][CO][CI] filter,
   int64_al[N][D][H][W][CO] outputArr
*)
def void ConvTranspose3D(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][D][H][W][CO] outArr)
{
	int32_pl reshapedFilterRows = CO;
	int32_pl reshapedFilterCols = FD*FH*FW*CI;
	int32_pl reshapedIPRows = FD*FH*FW*CI;
	int32_pl reshapedIPCols = N * D * H * W;

	int64_al[reshapedFilterRows][reshapedFilterCols] filterReshaped;
	int64_al[reshapedIPRows][reshapedIPCols] inputReshaped;
	int64_al[reshapedFilterRows][reshapedIPCols] matmulOP;

	ConvTranspose3DReshapeFilter(FD, FH, FW, CO, CI, filterArr, filterReshaped);
	ConvTranspose3DReshapeInput(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, reshapedIPRows, reshapedIPCols, inputArr, inputReshaped);

	MatMul2D(reshapedFilterRows, reshapedFilterCols, reshapedIPCols, filterReshaped, inputReshaped, matmulOP, true);

	Conv3DReshapeMatMulOP(N, D, H, W, CO, matmulOP, outArr);

	ClearMemSecret2(reshapedFilterRows, reshapedFilterCols, filterReshaped);
	ClearMemSecret2(reshapedIPRows, reshapedIPCols, inputReshaped);
	ClearMemSecret2(reshapedFilterRows, reshapedIPCols, matmulOP);
}

(**************************)
(* Loop-based implementation of ConvTranspose3D *)

def void ConvTranspose3DLoopInner(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight,int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int32_pl outD, int32_pl outH, int32_pl outW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][outD][outH][outW][CO] outArr)
{
	for n=[0:N]{
		for co=[0:CO]{
			for d=[0:outD]{
				for h=[0:outH]{
					for w=[0:outW]{
						for ci=[0:CI]{
							int64_al val = 0L;
							for fd=[d:d+FD]{
								for fh=[h:h+FH]{
									for fw=[w:w+FW]{

										int32_pl curPosD = (fd-zPadDLeft)/strideD;
										int32_pl curPosH = (fh-zPadHLeft)/strideH;
										int32_pl curPosW = (fw-zPadWLeft)/strideW;
										
										if ((curPosD >= 0) && (curPosH >= 0) && (curPosW >= 0) && (curPosD < D) && (curPosH < H) && (curPosW < W) && ((fd-zPadDLeft)%strideD == 0) && ((fh-zPadHLeft)%strideH == 0) && ((fw-zPadWLeft)%strideW == 0))
										{

											int32_pl curFilterPosD = FD+d-fd-1;
											int32_pl curFilterPosH = FH+h-fh-1;
											int32_pl curFilterPosW = FW+w-fw-1;
											val = val +_al (inputArr[n][curPosD][curPosH][curPosW][ci]*filterArr[curFilterPosD][curFilterPosH][curFilterPosW][co][ci]);
										};
									};
								};
							};	
							outArr[n][d][h][w][co] = outArr[n][d][h][w][co] + val;		
						};
					};
				};	
			};
		};
	};			  
}

(* int64_al[N][DPrime][HPrime][WPrime][CI] inputArr,
   int64_al[FD][FH][FW][CO][CI] filter,
   int64_al[N][D][H][W][CO] outputArr
*)
def void ConvTranspose3DLoop(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int64_al[N][D][H][W][CO] outArr)
{
	ConvTranspose3DLoopInner(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, D, H, W, inputArr, filterArr, outArr);
}

(**************************)
def void Transpose2(int32_pl s1, int32_pl s2, int64_al[s2][s1] inArr, int64_al[s1][s2] outArr){
	for i=[0:s1]{
		for j=[0:s2]{
			outArr[i][j] = inArr[j][i];
		};
	};
}

(**************************)
def void Pad442(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int64_al[inps1][inps2][inps3][inps4] inpArr, int32_pl pads1, int32_pl pads2, int32_pl[pads1][pads2] paddings, int64_al[s1][s2][s3][s4] outArr){
	int32_pl lbounds1 = paddings[0][0];
	int32_pl rbounds1excl = s1-paddings[0][1];
	int32_pl lbounds2 = paddings[1][0];
	int32_pl rbounds2excl = s2-paddings[1][1];
	int32_pl lbounds3 = paddings[2][0];
	int32_pl rbounds3excl = s3-paddings[2][1];
	int32_pl lbounds4 = paddings[3][0];
	int32_pl rbounds4excl = s4-paddings[3][1];
	for i=[0:s1]{
		for j=[0:s2]{
			for k=[0:s3]{
				for l=[0:s4]{
					if ((i >= lbounds1) && (i < rbounds1excl) && (j >= lbounds2) && (j < rbounds2excl) && (k >= lbounds3) && (k < rbounds3excl) && (l >= lbounds4) && (l < rbounds4excl)){
						outArr[i][j][k][l] = inpArr[i-paddings[0][0]][j-paddings[1][0]][k-paddings[2][0]][l-paddings[3][0]];
					}
					else{
						outArr[i][j][k][l] = 0L;
					};
				};
			};
		};
	};
}

def void Pad552(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl inps1, int32_pl inps2, int32_pl inps3, int32_pl inps4, int32_pl inps5, int64_al[inps1][inps2][inps3][inps4][inps5] inpArr, int32_pl pads1, int32_pl pads2, int32_pl[pads1][pads2] paddings, int64_al[s1][s2][s3][s4][s5] outArr){
	int32_pl lbounds1 = paddings[0][0];
	int32_pl rbounds1excl = s1-paddings[0][1];
	int32_pl lbounds2 = paddings[1][0];
	int32_pl rbounds2excl = s2-paddings[1][1];
	int32_pl lbounds3 = paddings[2][0];
	int32_pl rbounds3excl = s3-paddings[2][1];
	int32_pl lbounds4 = paddings[3][0];
	int32_pl rbounds4excl = s4-paddings[3][1];
	int32_pl lbounds5 = paddings[4][0];
	int32_pl rbounds5excl = s5-paddings[4][1];
	for i=[0:s1]{
		for j=[0:s2]{
			for k=[0:s3]{
				for l=[0:s4]{
					for m=[0:s5]{
						if ((i >= lbounds1) && (i < rbounds1excl) && (j >= lbounds2) && (j < rbounds2excl) && (k >= lbounds3) && (k < rbounds3excl) && (l >= lbounds4) && (l < rbounds4excl) && (m >= lbounds5) && (m < rbounds5excl)){
							outArr[i][j][k][l][m] = inpArr[i-paddings[0][0]][j-paddings[1][0]][k-paddings[2][0]][l-paddings[3][0]][m-paddings[4][0]];
						}
						else{
							outArr[i][j][k][l][m] = 0L;
						};
					};
				};
			};
		};
	};
}

def void PadONNX441(int32_pl o1, int32_pl o2, int32_pl o3, int32_pl o4, int32_pl i1, int32_pl i2, int32_pl i3, int32_pl i4, int64_al[i1][i2][i3][i4] inpArr, int32_pl pads, int32_pl[pads] paddings, int64_al[o1][o2][o3][o4] outArr) {
    int32_pl lbounds1 = paddings[0];
    int32_pl rbounds1excl = o1 - paddings[4];
    int32_pl lbounds2 = paddings[1];
    int32_pl rbounds2excl = o2 - paddings[5];
    int32_pl lbounds3 = paddings[2];
    int32_pl rbounds3excl = o3 - paddings[6];
    int32_pl lbounds4 = paddings[3];
    int32_pl rbounds4excl = o4 - paddings[7];
    for i=[0:o1]{
        for j=[0:o2]{
            for k=[0:o3]{
                for l=[0:o4]{
                    if ((i >= lbounds1) && (i < rbounds1excl) && (j >= lbounds2) && (j < rbounds2excl) && (k >= lbounds3) && (k < rbounds3excl) && (l >= lbounds4) && (l < rbounds4excl)){
						outArr[i][j][k][l] = inpArr[i-paddings[0]][j-paddings[1]][k-paddings[2]][l-paddings[3]];
                    }
                    else{
						outArr[i][j][k][l] = 0L;
                    };
                };
            };
        };
    };
}

(**************************)
(* Squeeze where the input is a 4D tensor, output is a 2D tensor and hence 2 dims are getting squeezed. *)
(* Ignoring dimensions in squeeze *)

def void Squeeze24(int32_pl s1, int32_pl s2, int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4, int64_al[ins1][ins2][ins3][ins4] inArr, int64_al[s1][s2] outArr)
{	
	(* Since num of elements are same in both arrays, therefore do a linear traversal of both and fill *)

	for i=[0:ins1]{
		for j=[0:ins2]{
			for k=[0:ins3]{
				for l=[0:ins4]{
					int32_pl linIdx = (i*ins2*ins3*ins4) + (j*ins3*ins4) + (k*ins4) + l;
					int32_pl outIdx1 = linIdx / s2;
					int32_pl outIdx2 = linIdx % s2;
					outArr[outIdx1][outIdx2] = inArr[i][j][k][l];
				};
			};
		};
	};
}

def void Squeeze34(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl dim, int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4, int64_al[ins1][ins2][ins3][ins4] inArr, int64_al[s1][s2][s3] outArr)
{	
	(* Since num of elements are same in both arrays, therefore do a linear traversal of both and fill *)
	for i=[0:ins1]{
		for j=[0:ins2]{
			for k=[0:ins3]{
				for l=[0:ins4]{
					int32_pl linIdx = (i*ins2*ins3*ins4) + (j*ins3*ins4) + (k*ins4) + l;
					int32_pl outIdx1 = linIdx / (s2*s3);
					int32_pl outIdx2 = (linIdx - (outIdx1*s2*s3)) / s3;
					int32_pl outIdx3 = (linIdx - (outIdx1*s2*s3) - (outIdx2*s3));
					outArr[outIdx1][outIdx2][outIdx3] = inArr[i][j][k][l];
				};
			};
		};
	};
}

def void Squeeze23(int32_pl s1, int32_pl s2, int32_pl dim, int32_pl ins1, int32_pl ins2, int32_pl ins3, int64_al[ins1][ins2][ins3] inArr, int64_al[s1][s2] outArr)
{	
	(* Since num of elements are same in both arrays, therefore do a linear traversal of both and fill *)
	for i=[0:ins1]{
		for j=[0:ins2]{
			for k=[0:ins3]{
				int32_pl linIdx = (i*ins2*ins3) + (j*ins3) + (k);
				int32_pl outIdx1 = linIdx / s2;
				int32_pl outIdx2 = linIdx % s2;
				outArr[outIdx1][outIdx2] = inArr[i][j][k];
			};
		};
	};
}


(**************************)
def void FusedBatchNorm4411(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s4] multArr, int64_al[s4] biasArr, int32_pl multExprScaleDownSf, int32_pl biasExprScaleUpSf, int64_al[s1][s2][s3][s4] outputArr){
	int32_pl inpSize = s1*s2*s3*s4;
	int64_al[inpSize] inArrReshaped;
	int64_al[inpSize] multArrReshaped;
	int64_al[inpSize] multExprAns;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					inArrReshaped[linIdx] = inArr[i1][i2][i3][i4];
					multArrReshaped[linIdx] = multArr[i4];
				};
			};
		};
	};

	ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
	if (multExprScaleDownSf > 0) {
		ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
	};

	int64_al[s4] biasArrScaledUp;
	for ii=[0:s4]{
		biasArrScaledUp[ii] = biasArr[ii];
	};
	if (biasExprScaleUpSf > 0){
		ScaleUp(s4, biasArrScaledUp, biasExprScaleUpSf);
	};

	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					outputArr[i1][i2][i3][i4] = multExprAns[linIdx] + biasArrScaledUp[i4];
				};
			};
		};
	};

	ClearMemSecret1(inpSize, inArrReshaped);
	ClearMemSecret1(inpSize, multArrReshaped);
	ClearMemSecret1(inpSize, multExprAns);
	ClearMemSecret1(s4, biasArrScaledUp);
}

def void FusedBatchNorm5511(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] inArr, int64_al[s5] multArr, int64_al[s5] biasArr, int32_pl multExprScaleDownSf, int32_pl biasExprScaleUpSf, int64_al[s1][s2][s3][s4][s5] outputArr){
	int32_pl inpSize = s1*s2*s3*s4*s5;
	int64_al[inpSize] inArrReshaped;
	int64_al[inpSize] multArrReshaped;
	int64_al[inpSize] multExprAns;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						inArrReshaped[linIdx] = inArr[i1][i2][i3][i4][i5];
						multArrReshaped[linIdx] = multArr[i5];
					};
				};
			};
		};
	};

	ElemWiseActModelVectorMult(inpSize, inArrReshaped, multArrReshaped, multExprAns);
	if (multExprScaleDownSf > 0) {
		ScaleDown(inpSize, multExprAns, multExprScaleDownSf);
	};

	int64_al[s5] biasArrScaledUp;
	for ii=[0:s5]{
		biasArrScaledUp[ii] = biasArr[ii];
	};
	if (biasExprScaleUpSf > 0){
		ScaleUp(s5, biasArrScaledUp, biasExprScaleUpSf);
	};

	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						outputArr[i1][i2][i3][i4][i5] = multExprAns[linIdx] + biasArrScaledUp[i5];
					};
				};
			};
		};
	};

	ClearMemSecret1(inpSize, inArrReshaped);
	ClearMemSecret1(inpSize, multArrReshaped);
	ClearMemSecret1(inpSize, multExprAns);
	ClearMemSecret1(s5, biasArrScaledUp);
}

(**************************)
def void ElemWiseMul2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr1, int64_al[s1][s2] arr2, int64_al[s1][s2] outArr)
{
	int32_pl inpSize = s1*s2;
	int64_al[inpSize] arr1Reshaped;
	int64_al[inpSize] arr2Reshaped;
	int64_al[inpSize] outArrReshaped;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			arr1Reshaped[linIdx] = arr1[i1][i2];
			arr2Reshaped[linIdx] = arr2[i1][i2];
		};
	};

	ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			outArr[i1][i2] = outArrReshaped[linIdx];
		};
	};

	ClearMemSecret1(inpSize, arr1Reshaped);
	ClearMemSecret1(inpSize, arr2Reshaped);
	ClearMemSecret1(inpSize, outArrReshaped);
}

def void ElemWiseMul4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr1, int64_al[s1][s2][s3][s4] arr2, int64_al[s1][s2][s3][s4] outArr)
{
	int32_pl inpSize = s1*s2*s3*s4;
	int64_al[inpSize] arr1Reshaped;
	int64_al[inpSize] arr2Reshaped;
	int64_al[inpSize] outArrReshaped;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + (i4);
					arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4];
					arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4];
				};
			};
		};
	};

	ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + (i4);
					outArr[i1][i2][i3][i4] = outArrReshaped[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(inpSize, arr1Reshaped);
	ClearMemSecret1(inpSize, arr2Reshaped);
	ClearMemSecret1(inpSize, outArrReshaped);
}

def void ElemWiseMul5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr1, int64_al[s1][s2][s3][s4][s5] arr2, int64_al[s1][s2][s3][s4][s5] outArr)
{
	int32_pl inpSize = s1*s2*s3*s4*s5;
	int64_al[inpSize] arr1Reshaped;
	int64_al[inpSize] arr2Reshaped;
	int64_al[inpSize] outArrReshaped;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						arr1Reshaped[linIdx] = arr1[i1][i2][i3][i4][i5];
						arr2Reshaped[linIdx] = arr2[i1][i2][i3][i4][i5];
					};
				};
			};
		};
	};

	ElemWiseSecretSharedVectorMult(inpSize, arr1Reshaped, arr2Reshaped, outArrReshaped);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						outArr[i1][i2][i3][i4][i5] = outArrReshaped[linIdx];
					};
				};
			};
		};
	};

	ClearMemSecret1(inpSize, arr1Reshaped);
	ClearMemSecret1(inpSize, arr2Reshaped);
	ClearMemSecret1(inpSize, outArrReshaped);
}


(**************************)
def void ReduceMean24(int32_pl outS1, int32_pl outS2, 
					  int32_pl inS1, int32_pl inS2, int32_pl inS3, int32_pl inS4, 
					  int64_al[inS1][inS2][inS3][inS4] inputArr,
					  int32_pl[2] axes,
					  int64_al[outS1][outS2] outputArr
					  )
{
	int32_pl divisor = inS2*inS3;
	int32_pl outputSize = outS1*outS2;
	int64_al[outputSize] sumArr;
	int64_al[outputSize] outputArrReshaped;
	for i1=[0:outS1]{
		for i2=[0:outS2]{
			int64_al summ = 0L;
			for i=[0:inS2]{
				for j=[0:inS3]{
					summ = summ + inputArr[i1][i][j][i2];
				};
			};
			sumArr[(i1*outS2) + i2] = summ;
		};
	};

	ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);

	for i1=[0:outS1]{
		for i2=[0:outS2]{
			outputArr[i1][i2] = outputArrReshaped[(i1*outS2) + i2];
		};
	};

	ClearMemSecret1(outputSize, sumArr);
	ClearMemSecret1(outputSize, outputArrReshaped);
}

def void ReduceMeanONNX24(int32_pl outS1, int32_pl outS2, 
					  int32_pl inS1, int32_pl inS2, int32_pl inS3, int32_pl inS4, 
					  int64_al[inS1][inS2][inS3][inS4] inputArr,
					  int32_pl axis1, int32_pl axis2,
					  int64_al[outS1][outS2] outputArr
					  )
{
	int32_pl divisor = inS3*inS4;
	int32_pl outputSize = outS1*outS2;
	int64_al[outputSize] sumArr;
	int64_al[outputSize] outputArrReshaped;
	for i1=[0:outS1]{
		for i2=[0:outS2]{
			int64_al summ = 0L;
			for i=[0:inS3]{
				for j=[0:inS4]{
					summ = summ + inputArr[i1][i2][i][j];
				};
			};
			sumArr[(i1*outS2) + i2] = summ;
		};
	};

	ElemWiseVectorPublicDiv(outputSize, sumArr, divisor, outputArrReshaped);

	for i1=[0:outS1]{
		for i2=[0:outS2]{
			outputArr[i1][i2] = outputArrReshaped[(i1*outS2) + i2];
		};
	};

	ClearMemSecret1(outputSize, sumArr);
	ClearMemSecret1(outputSize, outputArrReshaped);
}

(**************************)
def void ArgMax1(int32_pl outArrS1, int32_pl inArrS1, int32_pl inArrS2, int64_al[inArrS1][inArrS2] inArr, int32_pl dim, int64_al[outArrS1] outArr)
{
	(* 
		Making some assumptions:
		- Ignoring dimension 
		- outArrS1==inArrS1
	*)
	ArgMax(inArrS1, inArrS2, inArr, outArr);
}

def void ArgMax3(int32_pl outs1, int32_pl outs2, int32_pl outs3, 
			   int32_pl ins1, int32_pl ins2, int32_pl ins3, int32_pl ins4,
			   int64_al[ins1][ins2][ins3][ins4] inArr, int32_pl dim, int64_al[outs1][outs2][outs3] outArr)
{
	(* 
		Making some assumptions:
		- Ignoring dimension 
		- outs1==ins1 && outs2==ins2 && outs3==ins3
	*)
	int32_pl size = ins1*ins2*ins3;
	int64_al[size][ins4] reshapedInArr;
	int64_al[size] reshapedOutArr;

	for i1=[0:ins1]{
		for i2=[0:ins2]{
			for i3=[0:ins3]{
				for i4=[0:ins4]{
					int32_pl linIdx = (i1*ins2*ins3) + (i2*ins3) + (i3);
					reshapedInArr[linIdx][i4] = inArr[i1][i2][i3][i4];
				};
			};
		};
	};
	ArgMax(size, ins4, reshapedInArr, reshapedOutArr);
	for i1=[0:ins1]{
		for i2=[0:ins2]{
			for i3=[0:ins3]{
				int32_pl linIdx = (i1*ins2*ins3) + (i2*ins3) + (i3);
				outArr[i1][i2][i3] = reshapedOutArr[linIdx];
			};
		};
	};

	ClearMemSecret2(size, ins4, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Softmax(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr){
    int64_al max;
    Max(s1, inArr, max);
    int64_al denominator = 0L;
    int64_al[s1] denominatorArr;
    int64_al[s1] tmpVal;
    int64_al[s1] expVal;
    for i=[0:s1]{
        tmpVal[i] = inArr[i] - max;
    };
    exp(8, s1, 12, 12, 1, 32, 32, tmpVal, expVal);
    for i=[0:s1]{
        denominator = denominator + expVal[i];
    };
    for i=[0:s1]{
        denominatorArr[i] = denominator;
    };
    div(8, s1, 12, 12, 12, 32, 32, 32, expVal, denominatorArr, outArr);
}

def void Softmax2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr)
{
    int32_pl newSize = s1 * s2;
    int64_al[newSize] reshapedArr;
    int32_pl pointer = 0;
    int64_al[s2] slicedArr;
    int64_al[s2] slicedOutArr;
    for i1=[0:s1]{
        for i2=[0:s2]{
            slicedArr[i2] = inArr[i1][i2];
        };
        Softmax(s2, slicedArr, slicedOutArr);
        for i2=[0:s2]{
            outArr[i1][i2] = slicedOutArr[i2];
        };
    };
}

def void Softmax4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s1][s2][s3][s4] outArr)
{
    int32_pl newSize = s1 * s2 * s3 * s4;
    int64_al[newSize] reshapedArr;
    int32_pl pointer = 0;
    int64_al[s4] slicedArr;
    int64_al[s4] slicedOutArr;
    for i1=[0:s1]{
        for i2=[0:s2]{
            for i3=[0:s3]{
                for i4=[0:s4]{
                   slicedArr[i4] = inArr[i1][i2][i3][i4];
                };
                Softmax(s4, slicedArr, slicedOutArr);
                for i4=[0:s4]{
                   outArr[i1][i2][i3][i4] = slicedOutArr[i4];
                };
            };
        };
    };
}

(**************************)
def void Relu1(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation)
{
	Relu(s1, inArr, outArr, sf, doTruncation);
}

def void Relu2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedInArr[linIdx] = inArr[i1][i2];
		};
	};
	Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			outArr[i1][i2] = reshapedOutArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Relu4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s1][s2][s3][s4] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3*s4;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					reshapedInArr[linIdx] = inArr[i1][i2][i3][i4];
				};
			};
		};
	};
	Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					outArr[i1][i2][i3][i4] = reshapedOutArr[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Relu5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] inArr, int64_al[s1][s2][s3][s4][s5] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3*s4*s5;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						reshapedInArr[linIdx] = inArr[i1][i2][i3][i4][i5];
					};
				};
			};
		};
	};
	Relu(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						outArr[i1][i2][i3][i4][i5] = reshapedOutArr[linIdx];
					};
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Clip1(int32_pl s1, int32_pl alpha, int32_pl beta, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation)
{
	Clip(s1, alpha, beta, inArr, outArr, sf, doTruncation);
}

def void Clip2(int32_pl s1, int32_pl s2, int32_pl alpha, int32_pl beta, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedInArr[linIdx] = inArr[i1][i2];
		};
	};
	Clip(size, alpha, beta, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			outArr[i1][i2] = reshapedOutArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Clip4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl alpha, int32_pl beta, int64_al[s1][s2][s3][s4] inArr, int64_al[s1][s2][s3][s4] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3*s4;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					reshapedInArr[linIdx] = inArr[i1][i2][i3][i4];
				};
			};
		};
	};
	Clip(size, alpha, beta, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					outArr[i1][i2][i3][i4] = reshapedOutArr[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void Clip5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int32_pl alpha, int32_pl beta, int64_al[s1][s2][s3][s4][s5] inArr, int64_al[s1][s2][s3][s4][s5] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3*s4*s5;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						reshapedInArr[linIdx] = inArr[i1][i2][i3][i4][i5];
					};
				};
			};
		};
	};
	Clip(size, alpha, beta, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					for i5=[0:s5]{
						int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
						outArr[i1][i2][i3][i4][i5] = reshapedOutArr[linIdx];
					};
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

(**************************)
def void HardSigmoid1(int32_pl s1, int64_al[s1] inArr, int64_al[s1] outArr, int32_pl sf, bool_pl doTruncation)
{
	HardSigmoid(s1, inArr, outArr, sf, doTruncation);
}

def void HardSigmoid2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedInArr[linIdx] = inArr[i1][i2];
		};
	};
	HardSigmoid(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			outArr[i1][i2] = reshapedOutArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void HardSigmoid3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] inArr, int64_al[s1][s2][s3] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3;
	int64_al[size] reshapedInArr;
    int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				reshapedInArr[linIdx] = inArr[i1][i2][i3];
			};
		};
	};
	HardSigmoid(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				outArr[i1][i2][i3] = reshapedOutArr[linIdx];
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

def void HardSigmoid4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inArr, int64_al[s1][s2][s3][s4] outArr, int32_pl sf, bool_pl doTruncation)
{
	int32_pl size = s1*s2*s3*s4;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					reshapedInArr[linIdx] = inArr[i1][i2][i3][i4];
				};
			};
		};
	};
	HardSigmoid(size, reshapedInArr, reshapedOutArr, sf, doTruncation);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					outArr[i1][i2][i3][i4] = reshapedOutArr[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

(**************************)
def void Floor2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inArr, int64_al[s1][s2] outArr, int32_pl sf)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedInArr;
	int64_al[size] reshapedOutArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedInArr[linIdx] = inArr[i1][i2];
		};
	};
	Floor(size, reshapedInArr, reshapedOutArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			outArr[i1][i2] = reshapedOutArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedInArr);
	ClearMemSecret1(size, reshapedOutArr);
}

(**************************)
def void ScaleUp1(int32_pl s1, int64_al[s1] arr, int32_pl sf)
{
	ScaleUp(s1, arr, sf);	
}

def void ScaleUp2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr, int32_pl sf)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedArr[linIdx] = arr[i1][i2];
		};
	};
	ScaleUp(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			arr[i1][i2] = reshapedArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleUp3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] arr, int32_pl sf)
{
	int32_pl size = s1*s2*s3;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				reshapedArr[linIdx] = arr[i1][i2][i3];
			};
		};
	};
	ScaleUp(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				arr[i1][i2][i3] = reshapedArr[linIdx];
			};
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleUp4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr, int32_pl sf)
{
	int32_pl size = s1*s2*s3*s4;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					reshapedArr[linIdx] = arr[i1][i2][i3][i4];
				};
			};
		};
	};
	ScaleUp(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					arr[i1][i2][i3][i4] = reshapedArr[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleUp5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr, int32_pl sf)
{
        int32_pl size = s1*s2*s3*s4*s5;
        int64_al[size] reshapedArr;
        for i1=[0:s1]{
                for i2=[0:s2]{
                        for i3=[0:s3]{
                                for i4=[0:s4]{
                                        for i5=[0:s5]{
                                                int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
                                                reshapedArr[linIdx] = arr[i1][i2][i3][i4][i5];
                                        };
                                };
                        };
                };
        };
        ScaleUp(size, reshapedArr, sf);
        for i1=[0:s1]{
                for i2=[0:s2]{
                        for i3=[0:s3]{
                                for i4=[0:s4]{
                                        for i5=[0:s5]{
                                                int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
                                                arr[i1][i2][i3][i4][i5] = reshapedArr[linIdx];
                                        };
                                };
                        };
                };
        };

        ClearMemSecret1(size, reshapedArr);
}

(**************************)
def void ScaleDown1(int32_pl s1, int64_al[s1] arr, int32_pl sf)
{
	ScaleDown(s1, arr, sf);	
}

def void ScaleDown2(int32_pl s1, int32_pl s2, int64_al[s1][s2] arr, int32_pl sf)
{
	int32_pl size = s1*s2;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			reshapedArr[linIdx] = arr[i1][i2];
		};
	};
	ScaleDown(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			int32_pl linIdx = (i1*s2) + (i2);
			arr[i1][i2] = reshapedArr[linIdx];
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleDown3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] arr, int32_pl sf)
{
	int32_pl size = s1*s2*s3;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				reshapedArr[linIdx] = arr[i1][i2][i3];
			};
		};
	};
	ScaleDown(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				int32_pl linIdx = (i1*s2*s3) + (i2*s3) + (i3);
				arr[i1][i2][i3] = reshapedArr[linIdx];
			};
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleDown4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] arr, int32_pl sf)
{
	int32_pl size = s1*s2*s3*s4;
	int64_al[size] reshapedArr;
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					reshapedArr[linIdx] = arr[i1][i2][i3][i4];
				};
			};
		};
	};
	ScaleDown(size, reshapedArr, sf);
	for i1=[0:s1]{
		for i2=[0:s2]{
			for i3=[0:s3]{
				for i4=[0:s4]{
					int32_pl linIdx = (i1*s2*s3*s4) + (i2*s3*s4) + (i3*s4) + i4;
					arr[i1][i2][i3][i4] = reshapedArr[linIdx];
				};
			};
		};
	};

	ClearMemSecret1(size, reshapedArr);
}

def void ScaleDown5(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int32_pl s5, int64_al[s1][s2][s3][s4][s5] arr, int32_pl sf)
{
        int32_pl size = s1*s2*s3*s4*s5;
        int64_al[size] reshapedArr;
        for i1=[0:s1]{
                for i2=[0:s2]{
                        for i3=[0:s3]{
                                for i4=[0:s4]{
                                	for i5=[0:s5]{
                                        	int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
                                        	reshapedArr[linIdx] = arr[i1][i2][i3][i4][i5];
                                	};
                                };
                        };
                };
        };
        ScaleDown(size, reshapedArr, sf);
        for i1=[0:s1]{
                for i2=[0:s2]{
                        for i3=[0:s3]{
                                for i4=[0:s4]{
                                	for i5=[0:s5]{
                                        	int32_pl linIdx = (i1*s2*s3*s4*s5) + (i2*s3*s4*s5) + (i3*s4*s5) + (i4*s5) + i5;
                                        	arr[i1][i2][i3][i4][i5] = reshapedArr[linIdx];
                                	};
                                };
                        };
                };
        };

        ClearMemSecret1(size, reshapedArr);
}


(* Non linear (OT only) functionalities *)

def void Tanh1(int32_pl s1, int64_al[s1] inp, int64_al[s1] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  TanhImpl(LUTBITS, s1, sA, sB, bwA, bwB, inp, out);
}

def void Tanh2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inp, int64_al[s1][s2] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      inpCopy[i*s2 + j] = inp[i][j];
    };
  };

  TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      out[i][j] = outCopy[i*s2 + j]; 
    };
  };
}

def void Tanh3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] inp, int64_al[s1][s2][s3] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        inpCopy[i*s2*s3 + j*s3 + k] = inp[i][j][k];
      };
    };
  };

  TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        out[i][j][k] = outCopy[i*s2*s3 + j*s3 + k];
      };
    };
  };
}

def void Tanh4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inp, int64_al[s1][s2][s3][s4] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3 * s4;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l] = inp[i][j][k][l];
        };
      };
    };
  };

  TanhImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          out[i][j][k][l] = inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l];
        };
      };
    };
  };
}
def void Sigmoid1(int32_pl s1, int64_al[s1] inp, int64_al[s1] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  SigmoidImpl(LUTBITS, s1, sA, sB, bwA, bwB, inp, out);
}

def void Sigmoid2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inp, int64_al[s1][s2] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      inpCopy[i*s1 + j] = inp[i][j];
    };
  };

  SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      out[i][j] = outCopy[i*s2 + j]; 
    };
  };
}

def void Sigmoid3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] inp, int64_al[s1][s2][s3] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        inpCopy[i*s2*s3 + j*s3 + k] = inp[i][j][k];
      };
    };
  };

  SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        out[i][j][k] = outCopy[i*s2*s3 + j*s3 + k];
      };
    };
  };
}

def void Sigmoid4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inp, int64_al[s1][s2][s3][s4] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3 * s4;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l] = inp[i][j][k][l];
        };
      };
    };
  };

  SigmoidImpl(LUTBITS, size, sA, sB, bwA, bwB, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          out[i][j][k][l] = inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l];
        };
      };
    };
  };
}
def void Sqrt1(int32_pl s1, int64_al[s1] inp, int64_al[s1] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, bool_pl inverse, int32_pl LUTBITS) {
  SqrtImpl(LUTBITS, s1, sA, sB, bwA, bwB, inverse, inp, out);
}

def void Sqrt2(int32_pl s1, int32_pl s2, int64_al[s1][s2] inp, int64_al[s1][s2] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, bool_pl inverse, int32_pl LUTBITS) {
  int32_pl size = s1 * s2;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      inpCopy[i*s2 + j] = inp[i][j];
    };
  };

  SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      out[i][j] = outCopy[i*s2 + j]; 
    };
  };
}

def void Sqrt3(int32_pl s1, int32_pl s2, int32_pl s3, int64_al[s1][s2][s3] inp, int64_al[s1][s2][s3] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, bool_pl inverse, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        inpCopy[i*s2*s3 + j*s3 + k] = inp[i][j][k];
      };
    };
  };

  SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        out[i][j][k] = outCopy[i*s2*s3 + j*s3 + k];
      };
    };
  };
}

def void Sqrt4(int32_pl s1, int32_pl s2, int32_pl s3, int32_pl s4, int64_al[s1][s2][s3][s4] inp, int64_al[s1][s2][s3][s4] out, int32_pl sA, int32_pl sB, int32_pl bwA, int32_pl bwB, bool_pl inverse, int32_pl LUTBITS) {
  int32_pl size = s1 * s2 * s3 * s4;
  int64_al[size] inpCopy;
  int64_al[size] outCopy;
  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l] = inp[i][j][k][l];
        };
      };
    };
  };

  SqrtImpl(LUTBITS, size, sA, sB, bwA, bwB, inverse, inpCopy, outCopy);

  for i=[0:s1] {
    for j=[0:s2] {
      for k=[0:s3] {
        for l=[0:s4] {
          out[i][j][k][l] = inpCopy[i*s2*s3*s4 + j*s3*s4 + k*s4 + l];
        };
      };
    };
  };
}
(*

Authors: Nishant Kumar.

Copyright:
Copyright (c) 2020 Microsoft Research
Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:
The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.
THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*)


def void Conv2DWrapper(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, 
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	Conv2D(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, inputArr, filterArr, outArr);
}

def void Conv3DWrapper(int32_pl N, int32_pl D, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadDLeft, int32_pl zPadDRight, int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW, 
				   int64_al[N][D][H][W][CI] inputArr, 
				   int64_al[FD][FH][FW][CI][CO] filterArr,
				   int32_pl consSF,
				   int64_al[N][((D-FD+(zPadDLeft+zPadDRight))/strideD)+1][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	Conv3D(N, D, H, W, CI, FD, FH, FW, CO, zPadDLeft, zPadDRight, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideD, strideH, strideW, inputArr, filterArr, outArr);
}

def void Conv2DGroupWrapper(int32_pl N, int32_pl H, int32_pl W, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl zPadHLeft, int32_pl zPadHRight, int32_pl zPadWLeft, int32_pl zPadWRight, 
				   int32_pl strideH, int32_pl strideW, int32_pl G,
				   int64_al[N][H][W][CI] inputArr, 
				   int64_al[FH][FW][CI/G][CO] filterArr, 
				   int64_al[N][((H-FH+(zPadHLeft+zPadHRight))/strideH)+1][((W-FW+(zPadWLeft+zPadWRight))/strideW)+1][CO] outArr)
{
	Conv2DGroup(N, H, W, CI, FH, FW, CO, zPadHLeft, zPadHRight, zPadWLeft, zPadWRight, strideH, strideW, G, inputArr, filterArr, outArr);
}

def void ConvTranspose2DWrapper(int32_pl N, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl H, int32_pl W,
				   int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideH, int32_pl strideW,
				   int64_al[N][HPrime][WPrime][CI] inputArr, 
				   int64_al[FH][FW][CO][CI] filterArr, 
				   int64_al[N][H][W][CO] outArr)
{
	ConvTranspose2D(N, HPrime, WPrime, CI, FH, FW, CO, H, W, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideH, strideW, inputArr, filterArr, outArr);	
}

def void ConvTranspose3DWrapper(int32_pl N, int32_pl DPrime, int32_pl HPrime, int32_pl WPrime, int32_pl CI, 
				   int32_pl FD, int32_pl FH, int32_pl FW, int32_pl CO, 
				   int32_pl D, int32_pl H, int32_pl W,
				   int32_pl zPadTrDLeft, int32_pl zPadTrDRight, int32_pl zPadTrHLeft, int32_pl zPadTrHRight, int32_pl zPadTrWLeft, int32_pl zPadTrWRight, 
				   int32_pl strideD, int32_pl strideH, int32_pl strideW,
				   int64_al[N][DPrime][HPrime][WPrime][CI] inputArr, 
				   int64_al[FD][FH][FW][CO][CI] filterArr, 
				   int32_pl consSF,
				   int64_al[N][D][H][W][CO] outArr)
{
	ConvTranspose3D(N, DPrime, HPrime, WPrime, CI, FD, FH, FW, CO, D, H, W, zPadTrDLeft, zPadTrDRight, zPadTrHLeft, zPadTrHRight, zPadTrWLeft, zPadTrWRight, strideD, strideH, strideW, inputArr, filterArr, outArr);
}




def void main(){

	(* {'TFOpName': 'Placeholder', 'TFNodeName': 'input'} *)
	input(CLIENT, tmp0, int64_al[1][256][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'cls/fc/kernel_mpc_const_var'} *)
	input(SERVER, tmp1, int64_al[256][100]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/beta_mpc_const_var'} *)
	input(SERVER, tmp2, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/qkv/kernel_mpc_const_var'} *)
	input(SERVER, tmp3, int64_al[256][768]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1//linear1/kernel_mpc_const_var'} *)
	input(SERVER, tmp4, int64_al[256][512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/beta_mpc_const_var'} *)
	input(SERVER, tmp5, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/linear1/mul_4/x_mpc_const_var'} *)
	input(SERVER, tmp6, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/qkv/kernel_mpc_const_var'} *)
	input(SERVER, tmp7, int64_al[256][768]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/concat_5/axis_mpc_const_var'} *)
	input(SERVER, tmp8, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/concat_5/axis_mpc_const_var'} *)
	input(SERVER, tmp9, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/qkv/kernel_mpc_const_var'} *)
	input(SERVER, tmp10, int64_al[256][768]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/concat_5/axis_mpc_const_var'} *)
	input(SERVER, tmp11, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3//linear1/kernel_mpc_const_var'} *)
	input(SERVER, tmp12, int64_al[256][512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/qkv/kernel_mpc_const_var'} *)
	input(SERVER, tmp13, int64_al[256][768]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/output/linear2/kernel_mpc_const_var'} *)
	input(SERVER, tmp14, int64_al[512][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/batchnorm/add/y_mpc_const_var'} *)
	input(SERVER, tmp15, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/concat_5/axis_mpc_const_var'} *)
	input(SERVER, tmp16, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2//linear1/kernel_mpc_const_var'} *)
	input(SERVER, tmp17, int64_al[256][512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/beta_mpc_const_var'} *)
	input(SERVER, tmp18, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5//linear1/bias_mpc_const_var'} *)
	input(SERVER, tmp19, int64_al[512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/output/linear2/kernel_mpc_const_var'} *)
	input(SERVER, tmp20, int64_al[512][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/output/linear2/kernel_mpc_const_var'} *)
	input(SERVER, tmp21, int64_al[512][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5//linear1/kernel_mpc_const_var'} *)
	input(SERVER, tmp22, int64_al[256][512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/gamma_mpc_const_var'} *)
	input(SERVER, tmp23, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/output/linear2/kernel_mpc_const_var'} *)
	input(SERVER, tmp24, int64_al[512][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/beta_mpc_const_var'} *)
	input(SERVER, tmp25, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/beta_mpc_const_var'} *)
	input(SERVER, tmp26, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/beta_mpc_const_var'} *)
	input(SERVER, tmp27, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/Reshape/shape_mpc_const_var'} *)
	input(SERVER, tmp28, int64_al[2]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/gamma_mpc_const_var'} *)
	input(SERVER, tmp29, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/proj/bias_mpc_const_var'} *)
	input(SERVER, tmp30, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/concat_5/axis_mpc_const_var'} *)
	input(SERVER, tmp31, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/beta_mpc_const_var'} *)
	input(SERVER, tmp32, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/qkv/kernel_mpc_const_var'} *)
	input(SERVER, tmp33, int64_al[256][768]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0//linear1/kernel_mpc_const_var'} *)
	input(SERVER, tmp34, int64_al[256][512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/gamma_mpc_const_var'} *)
	input(SERVER, tmp35, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/output/linear2/kernel_mpc_const_var'} *)
	input(SERVER, tmp36, int64_al[512][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/proj/kernel_mpc_const_var'} *)
	input(SERVER, tmp37, int64_al[256][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/concat_2/axis_mpc_const_var'} *)
	input(SERVER, tmp38, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/Reshape_1/shape_mpc_const_var'} *)
	input(SERVER, tmp39, int64_al[3]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/concat_2/axis_mpc_const_var'} *)
	input(SERVER, tmp40, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/gamma_mpc_const_var'} *)
	input(SERVER, tmp41, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/gamma_mpc_const_var'} *)
	input(SERVER, tmp42, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3//linear1/bias_mpc_const_var'} *)
	input(SERVER, tmp43, int64_al[512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/pooler/norm/beta_mpc_const_var'} *)
	input(SERVER, tmp44, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/beta_mpc_const_var'} *)
	input(SERVER, tmp45, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/gamma_mpc_const_var'} *)
	input(SERVER, tmp46, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Mul/y_mpc_const_var'} *)
	input(SERVER, tmp47, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/pooler/attention_pool/kernel_mpc_const_var'} *)
	input(SERVER, tmp48, int64_al[256][1]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/pooler/norm/gamma_mpc_const_var'} *)
	input(SERVER, tmp49, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/concat_5/axis_mpc_const_var'} *)
	input(SERVER, tmp50, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/concat_5/axis_mpc_const_var'} *)
	input(SERVER, tmp51, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/proj/bias_mpc_const_var'} *)
	input(SERVER, tmp52, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/concat_2/axis_mpc_const_var'} *)
	input(SERVER, tmp53, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/output/linear2/bias_mpc_const_var'} *)
	input(SERVER, tmp54, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/gamma_mpc_const_var'} *)
	input(SERVER, tmp55, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/gamma_mpc_const_var'} *)
	input(SERVER, tmp56, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/output/linear2/bias_mpc_const_var'} *)
	input(SERVER, tmp57, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/proj/kernel_mpc_const_var'} *)
	input(SERVER, tmp58, int64_al[256][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/proj/kernel_mpc_const_var'} *)
	input(SERVER, tmp59, int64_al[256][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/beta_mpc_const_var'} *)
	input(SERVER, tmp60, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4//linear1/bias_mpc_const_var'} *)
	input(SERVER, tmp61, int64_al[512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/qkv/kernel_mpc_const_var'} *)
	input(SERVER, tmp62, int64_al[256][768]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/gamma_mpc_const_var'} *)
	input(SERVER, tmp63, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4//linear1/kernel_mpc_const_var'} *)
	input(SERVER, tmp64, int64_al[256][512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/qkv/kernel_mpc_const_var'} *)
	input(SERVER, tmp65, int64_al[256][768]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape_8/shape_mpc_const_var'} *)
	input(SERVER, tmp66, int64_al[4]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/beta_mpc_const_var'} *)
	input(SERVER, tmp67, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/gamma_mpc_const_var'} *)
	input(SERVER, tmp68, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/gamma_mpc_const_var'} *)
	input(SERVER, tmp69, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/output/linear2/bias_mpc_const_var'} *)
	input(SERVER, tmp70, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/output/linear2/kernel_mpc_const_var'} *)
	input(SERVER, tmp71, int64_al[512][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/linear1/mul/x_mpc_const_var'} *)
	input(SERVER, tmp72, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/beta_mpc_const_var'} *)
	input(SERVER, tmp73, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/beta_mpc_const_var'} *)
	input(SERVER, tmp74, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/gamma_mpc_const_var'} *)
	input(SERVER, tmp75, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/proj/kernel_mpc_const_var'} *)
	input(SERVER, tmp76, int64_al[256][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/proj/kernel_mpc_const_var'} *)
	input(SERVER, tmp77, int64_al[256][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/gamma_mpc_const_var'} *)
	input(SERVER, tmp78, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape/shape_mpc_const_var'} *)
	input(SERVER, tmp79, int64_al[4]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/linear1/add_1/x_mpc_const_var'} *)
	input(SERVER, tmp80, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2//linear1/bias_mpc_const_var'} *)
	input(SERVER, tmp81, int64_al[512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0//linear1/bias_mpc_const_var'} *)
	input(SERVER, tmp82, int64_al[512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/proj/bias_mpc_const_var'} *)
	input(SERVER, tmp83, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_4/output/linear2/kernel_mpc_const_var'} *)
	input(SERVER, tmp84, int64_al[512][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/concat_2/axis_mpc_const_var'} *)
	input(SERVER, tmp85, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/proj/bias_mpc_const_var'} *)
	input(SERVER, tmp86, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1//linear1/bias_mpc_const_var'} *)
	input(SERVER, tmp87, int64_al[512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6//linear1/bias_mpc_const_var'} *)
	input(SERVER, tmp88, int64_al[512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_9/shape_mpc_const_var'} *)
	input(SERVER, tmp89, int64_al[2]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/proj/kernel_mpc_const_var'} *)
	input(SERVER, tmp90, int64_al[256][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/concat_2/axis_mpc_const_var'} *)
	input(SERVER, tmp91, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/pooler/attention_pool/bias_mpc_const_var'} *)
	input(SERVER, tmp92, int64_al[1]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/proj/bias_mpc_const_var'} *)
	input(SERVER, tmp93, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/concat_2/axis_mpc_const_var'} *)
	input(SERVER, tmp94, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/concat_2/axis_mpc_const_var'} *)
	input(SERVER, tmp95, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_1/shape_mpc_const_var'} *)
	input(SERVER, tmp96, int64_al[4]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/output/linear2/bias_mpc_const_var'} *)
	input(SERVER, tmp97, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_3/output/linear2/bias_mpc_const_var'} *)
	input(SERVER, tmp98, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/proj/bias_mpc_const_var'} *)
	input(SERVER, tmp99, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/gamma_mpc_const_var'} *)
	input(SERVER, tmp100, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/beta_mpc_const_var'} *)
	input(SERVER, tmp101, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'cls/fc/bias_mpc_const_var'} *)
	input(SERVER, tmp102, int64_al[100]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_5/output/linear2/bias_mpc_const_var'} *)
	input(SERVER, tmp103, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/proj/kernel_mpc_const_var'} *)
	input(SERVER, tmp104, int64_al[256][256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_6//linear1/kernel_mpc_const_var'} *)
	input(SERVER, tmp105, int64_al[256][512]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/linear1/mul_3/x_mpc_const_var'} *)
	input(SERVER, tmp106, int64_al);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/proj/bias_mpc_const_var'} *)
	input(SERVER, tmp107, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/output/linear2/bias_mpc_const_var'} *)
	input(SERVER, tmp108, int64_al[256]);

	(* {'TFOpName': 'VariableV2', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/beta_mpc_const_var'} *)
	input(SERVER, tmp109, int64_al[256]);

	StartComputation();

	int32_pl[4] tmp110;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_18/size'} *)
	(* Element assignments for tmp110 *)
	tmp110[0L] = 1;
	tmp110[1L] = 1;
	tmp110[2L] = 256;
	tmp110[3L] = 64;
	int32_pl[4] tmp111;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_18/begin'} *)
	(* Element assignments for tmp111 *)
	tmp111[0L] = 0;
	tmp111[1L] = 3;
	tmp111[2L] = 0;
	tmp111[3L] = 0;
	int32_pl[4] tmp112;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_17/size'} *)
	(* Element assignments for tmp112 *)
	tmp112[0L] = 1;
	tmp112[1L] = 1;
	tmp112[2L] = 256;
	tmp112[3L] = 256;
	int32_pl[4] tmp113;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_17/begin'} *)
	(* Element assignments for tmp113 *)
	tmp113[0L] = 0;
	tmp113[1L] = 3;
	tmp113[2L] = 0;
	tmp113[3L] = 0;
	int32_pl[4] tmp114;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_16/size'} *)
	(* Element assignments for tmp114 *)
	tmp114[0L] = 1;
	tmp114[1L] = 1;
	tmp114[2L] = 256;
	tmp114[3L] = 64;
	int32_pl[4] tmp115;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_16/begin'} *)
	(* Element assignments for tmp115 *)
	tmp115[0L] = 0;
	tmp115[1L] = 2;
	tmp115[2L] = 0;
	tmp115[3L] = 0;
	int32_pl[4] tmp116;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_15/size'} *)
	(* Element assignments for tmp116 *)
	tmp116[0L] = 1;
	tmp116[1L] = 1;
	tmp116[2L] = 256;
	tmp116[3L] = 256;
	int32_pl[4] tmp117;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_15/begin'} *)
	(* Element assignments for tmp117 *)
	tmp117[0L] = 0;
	tmp117[1L] = 2;
	tmp117[2L] = 0;
	tmp117[3L] = 0;
	int32_pl[4] tmp118;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_14/size'} *)
	(* Element assignments for tmp118 *)
	tmp118[0L] = 1;
	tmp118[1L] = 1;
	tmp118[2L] = 256;
	tmp118[3L] = 64;
	int32_pl[4] tmp119;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_14/begin'} *)
	(* Element assignments for tmp119 *)
	tmp119[0L] = 0;
	tmp119[1L] = 1;
	tmp119[2L] = 0;
	tmp119[3L] = 0;
	int32_pl[4] tmp120;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_13/size'} *)
	(* Element assignments for tmp120 *)
	tmp120[0L] = 1;
	tmp120[1L] = 1;
	tmp120[2L] = 256;
	tmp120[3L] = 256;
	int32_pl[4] tmp121;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_13/begin'} *)
	(* Element assignments for tmp121 *)
	tmp121[0L] = 0;
	tmp121[1L] = 1;
	tmp121[2L] = 0;
	tmp121[3L] = 0;
	int32_pl[4] tmp122;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_12/size'} *)
	(* Element assignments for tmp122 *)
	tmp122[0L] = 1;
	tmp122[1L] = 1;
	tmp122[2L] = 256;
	tmp122[3L] = 64;
	int32_pl[4] tmp123;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_12/begin'} *)
	(* Element assignments for tmp123 *)
	tmp123[0L] = 0;
	tmp123[1L] = 0;
	tmp123[2L] = 0;
	tmp123[3L] = 0;
	int32_pl[4] tmp124;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_11/size'} *)
	(* Element assignments for tmp124 *)
	tmp124[0L] = 1;
	tmp124[1L] = 1;
	tmp124[2L] = 256;
	tmp124[3L] = 256;
	int32_pl[4] tmp125;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_11/begin'} *)
	(* Element assignments for tmp125 *)
	tmp125[0L] = 0;
	tmp125[1L] = 0;
	tmp125[2L] = 0;
	tmp125[3L] = 0;
	int32_pl[4] tmp126;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_10/size'} *)
	(* Element assignments for tmp126 *)
	tmp126[0L] = 1;
	tmp126[1L] = 1;
	tmp126[2L] = 256;
	tmp126[3L] = 64;
	int32_pl[4] tmp127;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_10/begin'} *)
	(* Element assignments for tmp127 *)
	tmp127[0L] = 0;
	tmp127[1L] = 3;
	tmp127[2L] = 0;
	tmp127[3L] = 0;
	int32_pl[4] tmp128;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_9/size'} *)
	(* Element assignments for tmp128 *)
	tmp128[0L] = 1;
	tmp128[1L] = 1;
	tmp128[2L] = 256;
	tmp128[3L] = 64;
	int32_pl[4] tmp129;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_9/begin'} *)
	(* Element assignments for tmp129 *)
	tmp129[0L] = 0;
	tmp129[1L] = 3;
	tmp129[2L] = 0;
	tmp129[3L] = 0;
	int32_pl[4] tmp130;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_8/size'} *)
	(* Element assignments for tmp130 *)
	tmp130[0L] = 1;
	tmp130[1L] = 1;
	tmp130[2L] = 256;
	tmp130[3L] = 64;
	int32_pl[4] tmp131;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_8/begin'} *)
	(* Element assignments for tmp131 *)
	tmp131[0L] = 0;
	tmp131[1L] = 2;
	tmp131[2L] = 0;
	tmp131[3L] = 0;
	int32_pl[4] tmp132;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_7/size'} *)
	(* Element assignments for tmp132 *)
	tmp132[0L] = 1;
	tmp132[1L] = 1;
	tmp132[2L] = 256;
	tmp132[3L] = 64;
	int32_pl[4] tmp133;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_7/begin'} *)
	(* Element assignments for tmp133 *)
	tmp133[0L] = 0;
	tmp133[1L] = 2;
	tmp133[2L] = 0;
	tmp133[3L] = 0;
	int32_pl[4] tmp134;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_6/size'} *)
	(* Element assignments for tmp134 *)
	tmp134[0L] = 1;
	tmp134[1L] = 1;
	tmp134[2L] = 256;
	tmp134[3L] = 64;
	int32_pl[4] tmp135;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_6/begin'} *)
	(* Element assignments for tmp135 *)
	tmp135[0L] = 0;
	tmp135[1L] = 1;
	tmp135[2L] = 0;
	tmp135[3L] = 0;
	int32_pl[4] tmp136;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_5/size'} *)
	(* Element assignments for tmp136 *)
	tmp136[0L] = 1;
	tmp136[1L] = 1;
	tmp136[2L] = 256;
	tmp136[3L] = 64;
	int32_pl[4] tmp137;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_5/begin'} *)
	(* Element assignments for tmp137 *)
	tmp137[0L] = 0;
	tmp137[1L] = 1;
	tmp137[2L] = 0;
	tmp137[3L] = 0;
	int32_pl[4] tmp138;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_4/size'} *)
	(* Element assignments for tmp138 *)
	tmp138[0L] = 1;
	tmp138[1L] = 1;
	tmp138[2L] = 256;
	tmp138[3L] = 64;
	int32_pl[4] tmp139;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_4/begin'} *)
	(* Element assignments for tmp139 *)
	tmp139[0L] = 0;
	tmp139[1L] = 0;
	tmp139[2L] = 0;
	tmp139[3L] = 0;
	int32_pl[4] tmp140;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_3/size'} *)
	(* Element assignments for tmp140 *)
	tmp140[0L] = 1;
	tmp140[1L] = 1;
	tmp140[2L] = 256;
	tmp140[3L] = 64;
	int32_pl[4] tmp141;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_3/begin'} *)
	(* Element assignments for tmp141 *)
	tmp141[0L] = 0;
	tmp141[1L] = 0;
	tmp141[2L] = 0;
	tmp141[3L] = 0;
	int32_pl[4] tmp142;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_2/size'} *)
	(* Element assignments for tmp142 *)
	tmp142[0L] = 1;
	tmp142[1L] = 4;
	tmp142[2L] = 256;
	tmp142[3L] = 64;
	int32_pl[4] tmp143;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_2/begin'} *)
	(* Element assignments for tmp143 *)
	tmp143[0L] = 2;
	tmp143[1L] = 0;
	tmp143[2L] = 0;
	tmp143[3L] = 0;
	int32_pl[4] tmp144;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_1/size'} *)
	(* Element assignments for tmp144 *)
	tmp144[0L] = 1;
	tmp144[1L] = 4;
	tmp144[2L] = 256;
	tmp144[3L] = 64;
	int32_pl[4] tmp145;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_1/begin'} *)
	(* Element assignments for tmp145 *)
	tmp145[0L] = 1;
	tmp145[1L] = 0;
	tmp145[2L] = 0;
	tmp145[3L] = 0;
	int32_pl[4] tmp146;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice/size'} *)
	(* Element assignments for tmp146 *)
	tmp146[0L] = 1;
	tmp146[1L] = 4;
	tmp146[2L] = 256;
	tmp146[3L] = 64;
	int32_pl[4] tmp147;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice/begin'} *)
	(* Element assignments for tmp147 *)
	tmp147[0L] = 0;
	tmp147[1L] = 0;
	tmp147[2L] = 0;
	tmp147[3L] = 0;
	int32_pl[4] tmp148;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/transpose/perm'} *)
	(* Element assignments for tmp148 *)
	tmp148[0L] = 1;
	tmp148[1L] = 2;
	tmp148[2L] = 0;
	tmp148[3L] = 3;
	int64_pl[1] tmp150;

	int32_pl tmp149 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp149, tmp150);

	int64_pl[1] tmp152;

	int32_pl tmp151 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp151, tmp152);

	int64_pl[1] tmp154;

	int32_pl tmp153 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp153, tmp154);

	int64_pl[1] tmp156;

	int32_pl tmp155 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp155, tmp156);

	int64_pl[1] tmp158;

	int32_pl tmp157 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/pooler/norm/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp157, tmp158);

	int32_pl[4] tmp159;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/transpose_5/perm'} *)
	(* Element assignments for tmp159 *)
	tmp159[0L] = 0;
	tmp159[1L] = 2;
	tmp159[2L] = 1;
	tmp159[3L] = 3;
	int32_pl[4] tmp160;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_18/size'} *)
	(* Element assignments for tmp160 *)
	tmp160[0L] = 1;
	tmp160[1L] = 1;
	tmp160[2L] = 256;
	tmp160[3L] = 64;
	int32_pl[4] tmp161;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_18/begin'} *)
	(* Element assignments for tmp161 *)
	tmp161[0L] = 0;
	tmp161[1L] = 3;
	tmp161[2L] = 0;
	tmp161[3L] = 0;
	int32_pl[4] tmp162;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_17/size'} *)
	(* Element assignments for tmp162 *)
	tmp162[0L] = 1;
	tmp162[1L] = 1;
	tmp162[2L] = 256;
	tmp162[3L] = 256;
	int32_pl[4] tmp163;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_17/begin'} *)
	(* Element assignments for tmp163 *)
	tmp163[0L] = 0;
	tmp163[1L] = 3;
	tmp163[2L] = 0;
	tmp163[3L] = 0;
	int32_pl[4] tmp164;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_16/size'} *)
	(* Element assignments for tmp164 *)
	tmp164[0L] = 1;
	tmp164[1L] = 1;
	tmp164[2L] = 256;
	tmp164[3L] = 64;
	int32_pl[4] tmp165;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_16/begin'} *)
	(* Element assignments for tmp165 *)
	tmp165[0L] = 0;
	tmp165[1L] = 2;
	tmp165[2L] = 0;
	tmp165[3L] = 0;
	int32_pl[4] tmp166;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_15/size'} *)
	(* Element assignments for tmp166 *)
	tmp166[0L] = 1;
	tmp166[1L] = 1;
	tmp166[2L] = 256;
	tmp166[3L] = 256;
	int32_pl[4] tmp167;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_15/begin'} *)
	(* Element assignments for tmp167 *)
	tmp167[0L] = 0;
	tmp167[1L] = 2;
	tmp167[2L] = 0;
	tmp167[3L] = 0;
	int32_pl[4] tmp168;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_14/size'} *)
	(* Element assignments for tmp168 *)
	tmp168[0L] = 1;
	tmp168[1L] = 1;
	tmp168[2L] = 256;
	tmp168[3L] = 64;
	int32_pl[4] tmp169;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_14/begin'} *)
	(* Element assignments for tmp169 *)
	tmp169[0L] = 0;
	tmp169[1L] = 1;
	tmp169[2L] = 0;
	tmp169[3L] = 0;
	int32_pl[4] tmp170;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_13/size'} *)
	(* Element assignments for tmp170 *)
	tmp170[0L] = 1;
	tmp170[1L] = 1;
	tmp170[2L] = 256;
	tmp170[3L] = 256;
	int32_pl[4] tmp171;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_13/begin'} *)
	(* Element assignments for tmp171 *)
	tmp171[0L] = 0;
	tmp171[1L] = 1;
	tmp171[2L] = 0;
	tmp171[3L] = 0;
	int32_pl[4] tmp172;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_12/size'} *)
	(* Element assignments for tmp172 *)
	tmp172[0L] = 1;
	tmp172[1L] = 1;
	tmp172[2L] = 256;
	tmp172[3L] = 64;
	int32_pl[4] tmp173;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_12/begin'} *)
	(* Element assignments for tmp173 *)
	tmp173[0L] = 0;
	tmp173[1L] = 0;
	tmp173[2L] = 0;
	tmp173[3L] = 0;
	int32_pl[4] tmp174;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_11/size'} *)
	(* Element assignments for tmp174 *)
	tmp174[0L] = 1;
	tmp174[1L] = 1;
	tmp174[2L] = 256;
	tmp174[3L] = 256;
	int32_pl[4] tmp175;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_11/begin'} *)
	(* Element assignments for tmp175 *)
	tmp175[0L] = 0;
	tmp175[1L] = 0;
	tmp175[2L] = 0;
	tmp175[3L] = 0;
	int32_pl[4] tmp176;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_10/size'} *)
	(* Element assignments for tmp176 *)
	tmp176[0L] = 1;
	tmp176[1L] = 1;
	tmp176[2L] = 256;
	tmp176[3L] = 64;
	int32_pl[4] tmp177;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_10/begin'} *)
	(* Element assignments for tmp177 *)
	tmp177[0L] = 0;
	tmp177[1L] = 3;
	tmp177[2L] = 0;
	tmp177[3L] = 0;
	int32_pl[4] tmp178;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_9/size'} *)
	(* Element assignments for tmp178 *)
	tmp178[0L] = 1;
	tmp178[1L] = 1;
	tmp178[2L] = 256;
	tmp178[3L] = 64;
	int32_pl[4] tmp179;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_9/begin'} *)
	(* Element assignments for tmp179 *)
	tmp179[0L] = 0;
	tmp179[1L] = 3;
	tmp179[2L] = 0;
	tmp179[3L] = 0;
	int32_pl[4] tmp180;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_8/size'} *)
	(* Element assignments for tmp180 *)
	tmp180[0L] = 1;
	tmp180[1L] = 1;
	tmp180[2L] = 256;
	tmp180[3L] = 64;
	int32_pl[4] tmp181;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_8/begin'} *)
	(* Element assignments for tmp181 *)
	tmp181[0L] = 0;
	tmp181[1L] = 2;
	tmp181[2L] = 0;
	tmp181[3L] = 0;
	int32_pl[4] tmp182;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_7/size'} *)
	(* Element assignments for tmp182 *)
	tmp182[0L] = 1;
	tmp182[1L] = 1;
	tmp182[2L] = 256;
	tmp182[3L] = 64;
	int32_pl[4] tmp183;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_7/begin'} *)
	(* Element assignments for tmp183 *)
	tmp183[0L] = 0;
	tmp183[1L] = 2;
	tmp183[2L] = 0;
	tmp183[3L] = 0;
	int32_pl[4] tmp184;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_6/size'} *)
	(* Element assignments for tmp184 *)
	tmp184[0L] = 1;
	tmp184[1L] = 1;
	tmp184[2L] = 256;
	tmp184[3L] = 64;
	int32_pl[4] tmp185;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_6/begin'} *)
	(* Element assignments for tmp185 *)
	tmp185[0L] = 0;
	tmp185[1L] = 1;
	tmp185[2L] = 0;
	tmp185[3L] = 0;
	int32_pl[4] tmp186;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_5/size'} *)
	(* Element assignments for tmp186 *)
	tmp186[0L] = 1;
	tmp186[1L] = 1;
	tmp186[2L] = 256;
	tmp186[3L] = 64;
	int32_pl[4] tmp187;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_5/begin'} *)
	(* Element assignments for tmp187 *)
	tmp187[0L] = 0;
	tmp187[1L] = 1;
	tmp187[2L] = 0;
	tmp187[3L] = 0;
	int32_pl[4] tmp188;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_4/size'} *)
	(* Element assignments for tmp188 *)
	tmp188[0L] = 1;
	tmp188[1L] = 1;
	tmp188[2L] = 256;
	tmp188[3L] = 64;
	int32_pl[4] tmp189;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_4/begin'} *)
	(* Element assignments for tmp189 *)
	tmp189[0L] = 0;
	tmp189[1L] = 0;
	tmp189[2L] = 0;
	tmp189[3L] = 0;
	int32_pl[4] tmp190;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_3/size'} *)
	(* Element assignments for tmp190 *)
	tmp190[0L] = 1;
	tmp190[1L] = 1;
	tmp190[2L] = 256;
	tmp190[3L] = 64;
	int32_pl[4] tmp191;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_3/begin'} *)
	(* Element assignments for tmp191 *)
	tmp191[0L] = 0;
	tmp191[1L] = 0;
	tmp191[2L] = 0;
	tmp191[3L] = 0;
	int32_pl[4] tmp192;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_2/size'} *)
	(* Element assignments for tmp192 *)
	tmp192[0L] = 1;
	tmp192[1L] = 4;
	tmp192[2L] = 256;
	tmp192[3L] = 64;
	int32_pl[4] tmp193;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_2/begin'} *)
	(* Element assignments for tmp193 *)
	tmp193[0L] = 2;
	tmp193[1L] = 0;
	tmp193[2L] = 0;
	tmp193[3L] = 0;
	int32_pl[4] tmp194;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_1/size'} *)
	(* Element assignments for tmp194 *)
	tmp194[0L] = 1;
	tmp194[1L] = 4;
	tmp194[2L] = 256;
	tmp194[3L] = 64;
	int32_pl[4] tmp195;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_1/begin'} *)
	(* Element assignments for tmp195 *)
	tmp195[0L] = 1;
	tmp195[1L] = 0;
	tmp195[2L] = 0;
	tmp195[3L] = 0;
	int32_pl[4] tmp196;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice/size'} *)
	(* Element assignments for tmp196 *)
	tmp196[0L] = 1;
	tmp196[1L] = 4;
	tmp196[2L] = 256;
	tmp196[3L] = 64;
	int32_pl[4] tmp197;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice/begin'} *)
	(* Element assignments for tmp197 *)
	tmp197[0L] = 0;
	tmp197[1L] = 0;
	tmp197[2L] = 0;
	tmp197[3L] = 0;
	int32_pl[4] tmp198;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/transpose/perm'} *)
	(* Element assignments for tmp198 *)
	tmp198[0L] = 1;
	tmp198[1L] = 2;
	tmp198[2L] = 0;
	tmp198[3L] = 3;
	int64_pl[1] tmp200;

	int32_pl tmp199 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp199, tmp200);

	int64_pl[1] tmp202;

	int32_pl tmp201 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp201, tmp202);

	int64_pl[1] tmp204;

	int32_pl tmp203 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/pooler/norm/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp203, tmp204);

	int64_pl[1] tmp206;

	int32_pl tmp205 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp205, tmp206);

	int64_pl[1] tmp208;

	int32_pl tmp207 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp207, tmp208);

	int32_pl[4] tmp209;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/transpose_5/perm'} *)
	(* Element assignments for tmp209 *)
	tmp209[0L] = 0;
	tmp209[1L] = 2;
	tmp209[2L] = 1;
	tmp209[3L] = 3;
	int32_pl[4] tmp210;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_18/size'} *)
	(* Element assignments for tmp210 *)
	tmp210[0L] = 1;
	tmp210[1L] = 1;
	tmp210[2L] = 256;
	tmp210[3L] = 64;
	int32_pl[4] tmp211;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_18/begin'} *)
	(* Element assignments for tmp211 *)
	tmp211[0L] = 0;
	tmp211[1L] = 3;
	tmp211[2L] = 0;
	tmp211[3L] = 0;
	int32_pl[4] tmp212;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_17/size'} *)
	(* Element assignments for tmp212 *)
	tmp212[0L] = 1;
	tmp212[1L] = 1;
	tmp212[2L] = 256;
	tmp212[3L] = 256;
	int32_pl[4] tmp213;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_17/begin'} *)
	(* Element assignments for tmp213 *)
	tmp213[0L] = 0;
	tmp213[1L] = 3;
	tmp213[2L] = 0;
	tmp213[3L] = 0;
	int32_pl[4] tmp214;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_16/size'} *)
	(* Element assignments for tmp214 *)
	tmp214[0L] = 1;
	tmp214[1L] = 1;
	tmp214[2L] = 256;
	tmp214[3L] = 64;
	int32_pl[4] tmp215;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_16/begin'} *)
	(* Element assignments for tmp215 *)
	tmp215[0L] = 0;
	tmp215[1L] = 2;
	tmp215[2L] = 0;
	tmp215[3L] = 0;
	int32_pl[4] tmp216;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_15/size'} *)
	(* Element assignments for tmp216 *)
	tmp216[0L] = 1;
	tmp216[1L] = 1;
	tmp216[2L] = 256;
	tmp216[3L] = 256;
	int32_pl[4] tmp217;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_15/begin'} *)
	(* Element assignments for tmp217 *)
	tmp217[0L] = 0;
	tmp217[1L] = 2;
	tmp217[2L] = 0;
	tmp217[3L] = 0;
	int32_pl[4] tmp218;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_14/size'} *)
	(* Element assignments for tmp218 *)
	tmp218[0L] = 1;
	tmp218[1L] = 1;
	tmp218[2L] = 256;
	tmp218[3L] = 64;
	int32_pl[4] tmp219;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_14/begin'} *)
	(* Element assignments for tmp219 *)
	tmp219[0L] = 0;
	tmp219[1L] = 1;
	tmp219[2L] = 0;
	tmp219[3L] = 0;
	int32_pl[4] tmp220;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_13/size'} *)
	(* Element assignments for tmp220 *)
	tmp220[0L] = 1;
	tmp220[1L] = 1;
	tmp220[2L] = 256;
	tmp220[3L] = 256;
	int32_pl[4] tmp221;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_13/begin'} *)
	(* Element assignments for tmp221 *)
	tmp221[0L] = 0;
	tmp221[1L] = 1;
	tmp221[2L] = 0;
	tmp221[3L] = 0;
	int32_pl[4] tmp222;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_12/size'} *)
	(* Element assignments for tmp222 *)
	tmp222[0L] = 1;
	tmp222[1L] = 1;
	tmp222[2L] = 256;
	tmp222[3L] = 64;
	int32_pl[4] tmp223;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_12/begin'} *)
	(* Element assignments for tmp223 *)
	tmp223[0L] = 0;
	tmp223[1L] = 0;
	tmp223[2L] = 0;
	tmp223[3L] = 0;
	int32_pl[4] tmp224;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_11/size'} *)
	(* Element assignments for tmp224 *)
	tmp224[0L] = 1;
	tmp224[1L] = 1;
	tmp224[2L] = 256;
	tmp224[3L] = 256;
	int32_pl[4] tmp225;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_11/begin'} *)
	(* Element assignments for tmp225 *)
	tmp225[0L] = 0;
	tmp225[1L] = 0;
	tmp225[2L] = 0;
	tmp225[3L] = 0;
	int32_pl[4] tmp226;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_10/size'} *)
	(* Element assignments for tmp226 *)
	tmp226[0L] = 1;
	tmp226[1L] = 1;
	tmp226[2L] = 256;
	tmp226[3L] = 64;
	int32_pl[4] tmp227;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_10/begin'} *)
	(* Element assignments for tmp227 *)
	tmp227[0L] = 0;
	tmp227[1L] = 3;
	tmp227[2L] = 0;
	tmp227[3L] = 0;
	int32_pl[4] tmp228;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_9/size'} *)
	(* Element assignments for tmp228 *)
	tmp228[0L] = 1;
	tmp228[1L] = 1;
	tmp228[2L] = 256;
	tmp228[3L] = 64;
	int32_pl[4] tmp229;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_9/begin'} *)
	(* Element assignments for tmp229 *)
	tmp229[0L] = 0;
	tmp229[1L] = 3;
	tmp229[2L] = 0;
	tmp229[3L] = 0;
	int32_pl[4] tmp230;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_8/size'} *)
	(* Element assignments for tmp230 *)
	tmp230[0L] = 1;
	tmp230[1L] = 1;
	tmp230[2L] = 256;
	tmp230[3L] = 64;
	int32_pl[4] tmp231;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_8/begin'} *)
	(* Element assignments for tmp231 *)
	tmp231[0L] = 0;
	tmp231[1L] = 2;
	tmp231[2L] = 0;
	tmp231[3L] = 0;
	int32_pl[4] tmp232;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_7/size'} *)
	(* Element assignments for tmp232 *)
	tmp232[0L] = 1;
	tmp232[1L] = 1;
	tmp232[2L] = 256;
	tmp232[3L] = 64;
	int32_pl[4] tmp233;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_7/begin'} *)
	(* Element assignments for tmp233 *)
	tmp233[0L] = 0;
	tmp233[1L] = 2;
	tmp233[2L] = 0;
	tmp233[3L] = 0;
	int32_pl[4] tmp234;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_6/size'} *)
	(* Element assignments for tmp234 *)
	tmp234[0L] = 1;
	tmp234[1L] = 1;
	tmp234[2L] = 256;
	tmp234[3L] = 64;
	int32_pl[4] tmp235;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_6/begin'} *)
	(* Element assignments for tmp235 *)
	tmp235[0L] = 0;
	tmp235[1L] = 1;
	tmp235[2L] = 0;
	tmp235[3L] = 0;
	int32_pl[4] tmp236;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_5/size'} *)
	(* Element assignments for tmp236 *)
	tmp236[0L] = 1;
	tmp236[1L] = 1;
	tmp236[2L] = 256;
	tmp236[3L] = 64;
	int32_pl[4] tmp237;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_5/begin'} *)
	(* Element assignments for tmp237 *)
	tmp237[0L] = 0;
	tmp237[1L] = 1;
	tmp237[2L] = 0;
	tmp237[3L] = 0;
	int32_pl[4] tmp238;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_4/size'} *)
	(* Element assignments for tmp238 *)
	tmp238[0L] = 1;
	tmp238[1L] = 1;
	tmp238[2L] = 256;
	tmp238[3L] = 64;
	int32_pl[4] tmp239;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_4/begin'} *)
	(* Element assignments for tmp239 *)
	tmp239[0L] = 0;
	tmp239[1L] = 0;
	tmp239[2L] = 0;
	tmp239[3L] = 0;
	int32_pl[4] tmp240;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_3/size'} *)
	(* Element assignments for tmp240 *)
	tmp240[0L] = 1;
	tmp240[1L] = 1;
	tmp240[2L] = 256;
	tmp240[3L] = 64;
	int32_pl[4] tmp241;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_3/begin'} *)
	(* Element assignments for tmp241 *)
	tmp241[0L] = 0;
	tmp241[1L] = 0;
	tmp241[2L] = 0;
	tmp241[3L] = 0;
	int32_pl[4] tmp242;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_2/size'} *)
	(* Element assignments for tmp242 *)
	tmp242[0L] = 1;
	tmp242[1L] = 4;
	tmp242[2L] = 256;
	tmp242[3L] = 64;
	int32_pl[4] tmp243;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_2/begin'} *)
	(* Element assignments for tmp243 *)
	tmp243[0L] = 2;
	tmp243[1L] = 0;
	tmp243[2L] = 0;
	tmp243[3L] = 0;
	int32_pl[4] tmp244;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_1/size'} *)
	(* Element assignments for tmp244 *)
	tmp244[0L] = 1;
	tmp244[1L] = 4;
	tmp244[2L] = 256;
	tmp244[3L] = 64;
	int32_pl[4] tmp245;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_1/begin'} *)
	(* Element assignments for tmp245 *)
	tmp245[0L] = 1;
	tmp245[1L] = 0;
	tmp245[2L] = 0;
	tmp245[3L] = 0;
	int32_pl[4] tmp246;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice/size'} *)
	(* Element assignments for tmp246 *)
	tmp246[0L] = 1;
	tmp246[1L] = 4;
	tmp246[2L] = 256;
	tmp246[3L] = 64;
	int32_pl[4] tmp247;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice/begin'} *)
	(* Element assignments for tmp247 *)
	tmp247[0L] = 0;
	tmp247[1L] = 0;
	tmp247[2L] = 0;
	tmp247[3L] = 0;
	int32_pl[4] tmp248;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/transpose/perm'} *)
	(* Element assignments for tmp248 *)
	tmp248[0L] = 1;
	tmp248[1L] = 2;
	tmp248[2L] = 0;
	tmp248[3L] = 3;
	int64_pl[1] tmp250;

	int32_pl tmp249 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp249, tmp250);

	int64_pl[1] tmp252;

	int32_pl tmp251 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp251, tmp252);

	int64_pl[1] tmp254;

	int32_pl tmp253 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp253, tmp254);

	int64_pl[1] tmp256;

	int32_pl tmp255 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp255, tmp256);

	int32_pl[4] tmp257;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/transpose_5/perm'} *)
	(* Element assignments for tmp257 *)
	tmp257[0L] = 0;
	tmp257[1L] = 2;
	tmp257[2L] = 1;
	tmp257[3L] = 3;
	int32_pl[4] tmp258;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_18/size'} *)
	(* Element assignments for tmp258 *)
	tmp258[0L] = 1;
	tmp258[1L] = 1;
	tmp258[2L] = 256;
	tmp258[3L] = 64;
	int32_pl[4] tmp259;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_18/begin'} *)
	(* Element assignments for tmp259 *)
	tmp259[0L] = 0;
	tmp259[1L] = 3;
	tmp259[2L] = 0;
	tmp259[3L] = 0;
	int32_pl[4] tmp260;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_17/size'} *)
	(* Element assignments for tmp260 *)
	tmp260[0L] = 1;
	tmp260[1L] = 1;
	tmp260[2L] = 256;
	tmp260[3L] = 256;
	int32_pl[4] tmp261;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_17/begin'} *)
	(* Element assignments for tmp261 *)
	tmp261[0L] = 0;
	tmp261[1L] = 3;
	tmp261[2L] = 0;
	tmp261[3L] = 0;
	int32_pl[4] tmp262;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_16/size'} *)
	(* Element assignments for tmp262 *)
	tmp262[0L] = 1;
	tmp262[1L] = 1;
	tmp262[2L] = 256;
	tmp262[3L] = 64;
	int32_pl[4] tmp263;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_16/begin'} *)
	(* Element assignments for tmp263 *)
	tmp263[0L] = 0;
	tmp263[1L] = 2;
	tmp263[2L] = 0;
	tmp263[3L] = 0;
	int32_pl[4] tmp264;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_15/size'} *)
	(* Element assignments for tmp264 *)
	tmp264[0L] = 1;
	tmp264[1L] = 1;
	tmp264[2L] = 256;
	tmp264[3L] = 256;
	int32_pl[4] tmp265;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_15/begin'} *)
	(* Element assignments for tmp265 *)
	tmp265[0L] = 0;
	tmp265[1L] = 2;
	tmp265[2L] = 0;
	tmp265[3L] = 0;
	int32_pl[4] tmp266;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_14/size'} *)
	(* Element assignments for tmp266 *)
	tmp266[0L] = 1;
	tmp266[1L] = 1;
	tmp266[2L] = 256;
	tmp266[3L] = 64;
	int32_pl[4] tmp267;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_14/begin'} *)
	(* Element assignments for tmp267 *)
	tmp267[0L] = 0;
	tmp267[1L] = 1;
	tmp267[2L] = 0;
	tmp267[3L] = 0;
	int32_pl[4] tmp268;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_13/size'} *)
	(* Element assignments for tmp268 *)
	tmp268[0L] = 1;
	tmp268[1L] = 1;
	tmp268[2L] = 256;
	tmp268[3L] = 256;
	int32_pl[4] tmp269;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_13/begin'} *)
	(* Element assignments for tmp269 *)
	tmp269[0L] = 0;
	tmp269[1L] = 1;
	tmp269[2L] = 0;
	tmp269[3L] = 0;
	int32_pl[4] tmp270;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_12/size'} *)
	(* Element assignments for tmp270 *)
	tmp270[0L] = 1;
	tmp270[1L] = 1;
	tmp270[2L] = 256;
	tmp270[3L] = 64;
	int32_pl[4] tmp271;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_12/begin'} *)
	(* Element assignments for tmp271 *)
	tmp271[0L] = 0;
	tmp271[1L] = 0;
	tmp271[2L] = 0;
	tmp271[3L] = 0;
	int32_pl[4] tmp272;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_11/size'} *)
	(* Element assignments for tmp272 *)
	tmp272[0L] = 1;
	tmp272[1L] = 1;
	tmp272[2L] = 256;
	tmp272[3L] = 256;
	int32_pl[4] tmp273;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_11/begin'} *)
	(* Element assignments for tmp273 *)
	tmp273[0L] = 0;
	tmp273[1L] = 0;
	tmp273[2L] = 0;
	tmp273[3L] = 0;
	int32_pl[4] tmp274;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_10/size'} *)
	(* Element assignments for tmp274 *)
	tmp274[0L] = 1;
	tmp274[1L] = 1;
	tmp274[2L] = 256;
	tmp274[3L] = 64;
	int32_pl[4] tmp275;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_10/begin'} *)
	(* Element assignments for tmp275 *)
	tmp275[0L] = 0;
	tmp275[1L] = 3;
	tmp275[2L] = 0;
	tmp275[3L] = 0;
	int32_pl[4] tmp276;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_9/size'} *)
	(* Element assignments for tmp276 *)
	tmp276[0L] = 1;
	tmp276[1L] = 1;
	tmp276[2L] = 256;
	tmp276[3L] = 64;
	int32_pl[4] tmp277;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_9/begin'} *)
	(* Element assignments for tmp277 *)
	tmp277[0L] = 0;
	tmp277[1L] = 3;
	tmp277[2L] = 0;
	tmp277[3L] = 0;
	int32_pl[4] tmp278;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_8/size'} *)
	(* Element assignments for tmp278 *)
	tmp278[0L] = 1;
	tmp278[1L] = 1;
	tmp278[2L] = 256;
	tmp278[3L] = 64;
	int32_pl[4] tmp279;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_8/begin'} *)
	(* Element assignments for tmp279 *)
	tmp279[0L] = 0;
	tmp279[1L] = 2;
	tmp279[2L] = 0;
	tmp279[3L] = 0;
	int32_pl[4] tmp280;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_7/size'} *)
	(* Element assignments for tmp280 *)
	tmp280[0L] = 1;
	tmp280[1L] = 1;
	tmp280[2L] = 256;
	tmp280[3L] = 64;
	int32_pl[4] tmp281;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_7/begin'} *)
	(* Element assignments for tmp281 *)
	tmp281[0L] = 0;
	tmp281[1L] = 2;
	tmp281[2L] = 0;
	tmp281[3L] = 0;
	int32_pl[4] tmp282;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_6/size'} *)
	(* Element assignments for tmp282 *)
	tmp282[0L] = 1;
	tmp282[1L] = 1;
	tmp282[2L] = 256;
	tmp282[3L] = 64;
	int32_pl[4] tmp283;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_6/begin'} *)
	(* Element assignments for tmp283 *)
	tmp283[0L] = 0;
	tmp283[1L] = 1;
	tmp283[2L] = 0;
	tmp283[3L] = 0;
	int32_pl[4] tmp284;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_5/size'} *)
	(* Element assignments for tmp284 *)
	tmp284[0L] = 1;
	tmp284[1L] = 1;
	tmp284[2L] = 256;
	tmp284[3L] = 64;
	int32_pl[4] tmp285;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_5/begin'} *)
	(* Element assignments for tmp285 *)
	tmp285[0L] = 0;
	tmp285[1L] = 1;
	tmp285[2L] = 0;
	tmp285[3L] = 0;
	int32_pl[4] tmp286;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_4/size'} *)
	(* Element assignments for tmp286 *)
	tmp286[0L] = 1;
	tmp286[1L] = 1;
	tmp286[2L] = 256;
	tmp286[3L] = 64;
	int32_pl[4] tmp287;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_4/begin'} *)
	(* Element assignments for tmp287 *)
	tmp287[0L] = 0;
	tmp287[1L] = 0;
	tmp287[2L] = 0;
	tmp287[3L] = 0;
	int32_pl[4] tmp288;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_3/size'} *)
	(* Element assignments for tmp288 *)
	tmp288[0L] = 1;
	tmp288[1L] = 1;
	tmp288[2L] = 256;
	tmp288[3L] = 64;
	int32_pl[4] tmp289;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_3/begin'} *)
	(* Element assignments for tmp289 *)
	tmp289[0L] = 0;
	tmp289[1L] = 0;
	tmp289[2L] = 0;
	tmp289[3L] = 0;
	int32_pl[4] tmp290;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_2/size'} *)
	(* Element assignments for tmp290 *)
	tmp290[0L] = 1;
	tmp290[1L] = 4;
	tmp290[2L] = 256;
	tmp290[3L] = 64;
	int32_pl[4] tmp291;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_2/begin'} *)
	(* Element assignments for tmp291 *)
	tmp291[0L] = 2;
	tmp291[1L] = 0;
	tmp291[2L] = 0;
	tmp291[3L] = 0;
	int32_pl[4] tmp292;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_1/size'} *)
	(* Element assignments for tmp292 *)
	tmp292[0L] = 1;
	tmp292[1L] = 4;
	tmp292[2L] = 256;
	tmp292[3L] = 64;
	int32_pl[4] tmp293;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_1/begin'} *)
	(* Element assignments for tmp293 *)
	tmp293[0L] = 1;
	tmp293[1L] = 0;
	tmp293[2L] = 0;
	tmp293[3L] = 0;
	int32_pl[4] tmp294;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice/size'} *)
	(* Element assignments for tmp294 *)
	tmp294[0L] = 1;
	tmp294[1L] = 4;
	tmp294[2L] = 256;
	tmp294[3L] = 64;
	int32_pl[4] tmp295;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice/begin'} *)
	(* Element assignments for tmp295 *)
	tmp295[0L] = 0;
	tmp295[1L] = 0;
	tmp295[2L] = 0;
	tmp295[3L] = 0;
	int32_pl[4] tmp296;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/transpose/perm'} *)
	(* Element assignments for tmp296 *)
	tmp296[0L] = 1;
	tmp296[1L] = 2;
	tmp296[2L] = 0;
	tmp296[3L] = 3;
	int64_pl[1] tmp298;

	int32_pl tmp297 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp297, tmp298);

	int64_pl[1] tmp300;

	int32_pl tmp299 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp299, tmp300);

	int64_pl[1] tmp302;

	int32_pl tmp301 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp301, tmp302);

	int64_pl[1] tmp304;

	int32_pl tmp303 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp303, tmp304);

	int32_pl[4] tmp305;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/transpose_5/perm'} *)
	(* Element assignments for tmp305 *)
	tmp305[0L] = 0;
	tmp305[1L] = 2;
	tmp305[2L] = 1;
	tmp305[3L] = 3;
	int32_pl[4] tmp306;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_18/size'} *)
	(* Element assignments for tmp306 *)
	tmp306[0L] = 1;
	tmp306[1L] = 1;
	tmp306[2L] = 256;
	tmp306[3L] = 64;
	int32_pl[4] tmp307;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_18/begin'} *)
	(* Element assignments for tmp307 *)
	tmp307[0L] = 0;
	tmp307[1L] = 3;
	tmp307[2L] = 0;
	tmp307[3L] = 0;
	int32_pl[4] tmp308;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_17/size'} *)
	(* Element assignments for tmp308 *)
	tmp308[0L] = 1;
	tmp308[1L] = 1;
	tmp308[2L] = 256;
	tmp308[3L] = 256;
	int32_pl[4] tmp309;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_17/begin'} *)
	(* Element assignments for tmp309 *)
	tmp309[0L] = 0;
	tmp309[1L] = 3;
	tmp309[2L] = 0;
	tmp309[3L] = 0;
	int32_pl[4] tmp310;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_16/size'} *)
	(* Element assignments for tmp310 *)
	tmp310[0L] = 1;
	tmp310[1L] = 1;
	tmp310[2L] = 256;
	tmp310[3L] = 64;
	int32_pl[4] tmp311;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_16/begin'} *)
	(* Element assignments for tmp311 *)
	tmp311[0L] = 0;
	tmp311[1L] = 2;
	tmp311[2L] = 0;
	tmp311[3L] = 0;
	int32_pl[4] tmp312;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_15/size'} *)
	(* Element assignments for tmp312 *)
	tmp312[0L] = 1;
	tmp312[1L] = 1;
	tmp312[2L] = 256;
	tmp312[3L] = 256;
	int32_pl[4] tmp313;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_15/begin'} *)
	(* Element assignments for tmp313 *)
	tmp313[0L] = 0;
	tmp313[1L] = 2;
	tmp313[2L] = 0;
	tmp313[3L] = 0;
	int32_pl[4] tmp314;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_14/size'} *)
	(* Element assignments for tmp314 *)
	tmp314[0L] = 1;
	tmp314[1L] = 1;
	tmp314[2L] = 256;
	tmp314[3L] = 64;
	int32_pl[4] tmp315;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_14/begin'} *)
	(* Element assignments for tmp315 *)
	tmp315[0L] = 0;
	tmp315[1L] = 1;
	tmp315[2L] = 0;
	tmp315[3L] = 0;
	int32_pl[4] tmp316;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_13/size'} *)
	(* Element assignments for tmp316 *)
	tmp316[0L] = 1;
	tmp316[1L] = 1;
	tmp316[2L] = 256;
	tmp316[3L] = 256;
	int32_pl[4] tmp317;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_13/begin'} *)
	(* Element assignments for tmp317 *)
	tmp317[0L] = 0;
	tmp317[1L] = 1;
	tmp317[2L] = 0;
	tmp317[3L] = 0;
	int32_pl[4] tmp318;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_12/size'} *)
	(* Element assignments for tmp318 *)
	tmp318[0L] = 1;
	tmp318[1L] = 1;
	tmp318[2L] = 256;
	tmp318[3L] = 64;
	int32_pl[4] tmp319;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_12/begin'} *)
	(* Element assignments for tmp319 *)
	tmp319[0L] = 0;
	tmp319[1L] = 0;
	tmp319[2L] = 0;
	tmp319[3L] = 0;
	int32_pl[4] tmp320;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_11/size'} *)
	(* Element assignments for tmp320 *)
	tmp320[0L] = 1;
	tmp320[1L] = 1;
	tmp320[2L] = 256;
	tmp320[3L] = 256;
	int32_pl[4] tmp321;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_11/begin'} *)
	(* Element assignments for tmp321 *)
	tmp321[0L] = 0;
	tmp321[1L] = 0;
	tmp321[2L] = 0;
	tmp321[3L] = 0;
	int32_pl[4] tmp322;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_10/size'} *)
	(* Element assignments for tmp322 *)
	tmp322[0L] = 1;
	tmp322[1L] = 1;
	tmp322[2L] = 256;
	tmp322[3L] = 64;
	int32_pl[4] tmp323;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_10/begin'} *)
	(* Element assignments for tmp323 *)
	tmp323[0L] = 0;
	tmp323[1L] = 3;
	tmp323[2L] = 0;
	tmp323[3L] = 0;
	int32_pl[4] tmp324;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_9/size'} *)
	(* Element assignments for tmp324 *)
	tmp324[0L] = 1;
	tmp324[1L] = 1;
	tmp324[2L] = 256;
	tmp324[3L] = 64;
	int32_pl[4] tmp325;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_9/begin'} *)
	(* Element assignments for tmp325 *)
	tmp325[0L] = 0;
	tmp325[1L] = 3;
	tmp325[2L] = 0;
	tmp325[3L] = 0;
	int32_pl[4] tmp326;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_8/size'} *)
	(* Element assignments for tmp326 *)
	tmp326[0L] = 1;
	tmp326[1L] = 1;
	tmp326[2L] = 256;
	tmp326[3L] = 64;
	int32_pl[4] tmp327;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_8/begin'} *)
	(* Element assignments for tmp327 *)
	tmp327[0L] = 0;
	tmp327[1L] = 2;
	tmp327[2L] = 0;
	tmp327[3L] = 0;
	int32_pl[4] tmp328;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_7/size'} *)
	(* Element assignments for tmp328 *)
	tmp328[0L] = 1;
	tmp328[1L] = 1;
	tmp328[2L] = 256;
	tmp328[3L] = 64;
	int32_pl[4] tmp329;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_7/begin'} *)
	(* Element assignments for tmp329 *)
	tmp329[0L] = 0;
	tmp329[1L] = 2;
	tmp329[2L] = 0;
	tmp329[3L] = 0;
	int32_pl[4] tmp330;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_6/size'} *)
	(* Element assignments for tmp330 *)
	tmp330[0L] = 1;
	tmp330[1L] = 1;
	tmp330[2L] = 256;
	tmp330[3L] = 64;
	int32_pl[4] tmp331;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_6/begin'} *)
	(* Element assignments for tmp331 *)
	tmp331[0L] = 0;
	tmp331[1L] = 1;
	tmp331[2L] = 0;
	tmp331[3L] = 0;
	int32_pl[4] tmp332;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_5/size'} *)
	(* Element assignments for tmp332 *)
	tmp332[0L] = 1;
	tmp332[1L] = 1;
	tmp332[2L] = 256;
	tmp332[3L] = 64;
	int32_pl[4] tmp333;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_5/begin'} *)
	(* Element assignments for tmp333 *)
	tmp333[0L] = 0;
	tmp333[1L] = 1;
	tmp333[2L] = 0;
	tmp333[3L] = 0;
	int32_pl[4] tmp334;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_4/size'} *)
	(* Element assignments for tmp334 *)
	tmp334[0L] = 1;
	tmp334[1L] = 1;
	tmp334[2L] = 256;
	tmp334[3L] = 64;
	int32_pl[4] tmp335;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_4/begin'} *)
	(* Element assignments for tmp335 *)
	tmp335[0L] = 0;
	tmp335[1L] = 0;
	tmp335[2L] = 0;
	tmp335[3L] = 0;
	int32_pl[4] tmp336;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_3/size'} *)
	(* Element assignments for tmp336 *)
	tmp336[0L] = 1;
	tmp336[1L] = 1;
	tmp336[2L] = 256;
	tmp336[3L] = 64;
	int32_pl[4] tmp337;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_3/begin'} *)
	(* Element assignments for tmp337 *)
	tmp337[0L] = 0;
	tmp337[1L] = 0;
	tmp337[2L] = 0;
	tmp337[3L] = 0;
	int32_pl[4] tmp338;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_2/size'} *)
	(* Element assignments for tmp338 *)
	tmp338[0L] = 1;
	tmp338[1L] = 4;
	tmp338[2L] = 256;
	tmp338[3L] = 64;
	int32_pl[4] tmp339;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_2/begin'} *)
	(* Element assignments for tmp339 *)
	tmp339[0L] = 2;
	tmp339[1L] = 0;
	tmp339[2L] = 0;
	tmp339[3L] = 0;
	int32_pl[4] tmp340;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_1/size'} *)
	(* Element assignments for tmp340 *)
	tmp340[0L] = 1;
	tmp340[1L] = 4;
	tmp340[2L] = 256;
	tmp340[3L] = 64;
	int32_pl[4] tmp341;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_1/begin'} *)
	(* Element assignments for tmp341 *)
	tmp341[0L] = 1;
	tmp341[1L] = 0;
	tmp341[2L] = 0;
	tmp341[3L] = 0;
	int32_pl[4] tmp342;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice/size'} *)
	(* Element assignments for tmp342 *)
	tmp342[0L] = 1;
	tmp342[1L] = 4;
	tmp342[2L] = 256;
	tmp342[3L] = 64;
	int32_pl[4] tmp343;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice/begin'} *)
	(* Element assignments for tmp343 *)
	tmp343[0L] = 0;
	tmp343[1L] = 0;
	tmp343[2L] = 0;
	tmp343[3L] = 0;
	int32_pl[4] tmp344;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/transpose/perm'} *)
	(* Element assignments for tmp344 *)
	tmp344[0L] = 1;
	tmp344[1L] = 2;
	tmp344[2L] = 0;
	tmp344[3L] = 3;
	int64_pl[1] tmp346;

	int32_pl tmp345 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp345, tmp346);

	int64_pl[1] tmp348;

	int32_pl tmp347 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp347, tmp348);

	int64_pl[1] tmp350;

	int32_pl tmp349 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp349, tmp350);

	int64_pl[1] tmp352;

	int32_pl tmp351 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp351, tmp352);

	int32_pl[2] tmp353;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/pooler/transpose/perm'} *)
	(* Element assignments for tmp353 *)
	tmp353[0L] = 1;
	tmp353[1L] = 0;
	int64_pl[1] tmp355;

	int32_pl tmp354 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp354, tmp355);

	int64_pl[1] tmp357;

	int32_pl tmp356 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp356, tmp357);

	int32_pl[4] tmp358;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/transpose_5/perm'} *)
	(* Element assignments for tmp358 *)
	tmp358[0L] = 0;
	tmp358[1L] = 2;
	tmp358[2L] = 1;
	tmp358[3L] = 3;
	int32_pl[4] tmp359;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_18/size'} *)
	(* Element assignments for tmp359 *)
	tmp359[0L] = 1;
	tmp359[1L] = 1;
	tmp359[2L] = 256;
	tmp359[3L] = 64;
	int32_pl[4] tmp360;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_18/begin'} *)
	(* Element assignments for tmp360 *)
	tmp360[0L] = 0;
	tmp360[1L] = 3;
	tmp360[2L] = 0;
	tmp360[3L] = 0;
	int32_pl[4] tmp361;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_17/size'} *)
	(* Element assignments for tmp361 *)
	tmp361[0L] = 1;
	tmp361[1L] = 1;
	tmp361[2L] = 256;
	tmp361[3L] = 256;
	int32_pl[4] tmp362;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_17/begin'} *)
	(* Element assignments for tmp362 *)
	tmp362[0L] = 0;
	tmp362[1L] = 3;
	tmp362[2L] = 0;
	tmp362[3L] = 0;
	int32_pl[4] tmp363;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_16/size'} *)
	(* Element assignments for tmp363 *)
	tmp363[0L] = 1;
	tmp363[1L] = 1;
	tmp363[2L] = 256;
	tmp363[3L] = 64;
	int32_pl[4] tmp364;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_16/begin'} *)
	(* Element assignments for tmp364 *)
	tmp364[0L] = 0;
	tmp364[1L] = 2;
	tmp364[2L] = 0;
	tmp364[3L] = 0;
	int32_pl[4] tmp365;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_15/size'} *)
	(* Element assignments for tmp365 *)
	tmp365[0L] = 1;
	tmp365[1L] = 1;
	tmp365[2L] = 256;
	tmp365[3L] = 256;
	int32_pl[4] tmp366;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_15/begin'} *)
	(* Element assignments for tmp366 *)
	tmp366[0L] = 0;
	tmp366[1L] = 2;
	tmp366[2L] = 0;
	tmp366[3L] = 0;
	int32_pl[4] tmp367;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_14/size'} *)
	(* Element assignments for tmp367 *)
	tmp367[0L] = 1;
	tmp367[1L] = 1;
	tmp367[2L] = 256;
	tmp367[3L] = 64;
	int32_pl[4] tmp368;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_14/begin'} *)
	(* Element assignments for tmp368 *)
	tmp368[0L] = 0;
	tmp368[1L] = 1;
	tmp368[2L] = 0;
	tmp368[3L] = 0;
	int32_pl[4] tmp369;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_13/size'} *)
	(* Element assignments for tmp369 *)
	tmp369[0L] = 1;
	tmp369[1L] = 1;
	tmp369[2L] = 256;
	tmp369[3L] = 256;
	int32_pl[4] tmp370;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_13/begin'} *)
	(* Element assignments for tmp370 *)
	tmp370[0L] = 0;
	tmp370[1L] = 1;
	tmp370[2L] = 0;
	tmp370[3L] = 0;
	int32_pl[4] tmp371;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_12/size'} *)
	(* Element assignments for tmp371 *)
	tmp371[0L] = 1;
	tmp371[1L] = 1;
	tmp371[2L] = 256;
	tmp371[3L] = 64;
	int32_pl[4] tmp372;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_12/begin'} *)
	(* Element assignments for tmp372 *)
	tmp372[0L] = 0;
	tmp372[1L] = 0;
	tmp372[2L] = 0;
	tmp372[3L] = 0;
	int32_pl[4] tmp373;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_11/size'} *)
	(* Element assignments for tmp373 *)
	tmp373[0L] = 1;
	tmp373[1L] = 1;
	tmp373[2L] = 256;
	tmp373[3L] = 256;
	int32_pl[4] tmp374;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_11/begin'} *)
	(* Element assignments for tmp374 *)
	tmp374[0L] = 0;
	tmp374[1L] = 0;
	tmp374[2L] = 0;
	tmp374[3L] = 0;
	int32_pl[4] tmp375;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_10/size'} *)
	(* Element assignments for tmp375 *)
	tmp375[0L] = 1;
	tmp375[1L] = 1;
	tmp375[2L] = 256;
	tmp375[3L] = 64;
	int32_pl[4] tmp376;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_10/begin'} *)
	(* Element assignments for tmp376 *)
	tmp376[0L] = 0;
	tmp376[1L] = 3;
	tmp376[2L] = 0;
	tmp376[3L] = 0;
	int32_pl[4] tmp377;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_9/size'} *)
	(* Element assignments for tmp377 *)
	tmp377[0L] = 1;
	tmp377[1L] = 1;
	tmp377[2L] = 256;
	tmp377[3L] = 64;
	int32_pl[4] tmp378;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_9/begin'} *)
	(* Element assignments for tmp378 *)
	tmp378[0L] = 0;
	tmp378[1L] = 3;
	tmp378[2L] = 0;
	tmp378[3L] = 0;
	int32_pl[4] tmp379;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_8/size'} *)
	(* Element assignments for tmp379 *)
	tmp379[0L] = 1;
	tmp379[1L] = 1;
	tmp379[2L] = 256;
	tmp379[3L] = 64;
	int32_pl[4] tmp380;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_8/begin'} *)
	(* Element assignments for tmp380 *)
	tmp380[0L] = 0;
	tmp380[1L] = 2;
	tmp380[2L] = 0;
	tmp380[3L] = 0;
	int32_pl[4] tmp381;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_7/size'} *)
	(* Element assignments for tmp381 *)
	tmp381[0L] = 1;
	tmp381[1L] = 1;
	tmp381[2L] = 256;
	tmp381[3L] = 64;
	int32_pl[4] tmp382;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_7/begin'} *)
	(* Element assignments for tmp382 *)
	tmp382[0L] = 0;
	tmp382[1L] = 2;
	tmp382[2L] = 0;
	tmp382[3L] = 0;
	int32_pl[4] tmp383;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_6/size'} *)
	(* Element assignments for tmp383 *)
	tmp383[0L] = 1;
	tmp383[1L] = 1;
	tmp383[2L] = 256;
	tmp383[3L] = 64;
	int32_pl[4] tmp384;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_6/begin'} *)
	(* Element assignments for tmp384 *)
	tmp384[0L] = 0;
	tmp384[1L] = 1;
	tmp384[2L] = 0;
	tmp384[3L] = 0;
	int32_pl[4] tmp385;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_5/size'} *)
	(* Element assignments for tmp385 *)
	tmp385[0L] = 1;
	tmp385[1L] = 1;
	tmp385[2L] = 256;
	tmp385[3L] = 64;
	int32_pl[4] tmp386;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_5/begin'} *)
	(* Element assignments for tmp386 *)
	tmp386[0L] = 0;
	tmp386[1L] = 1;
	tmp386[2L] = 0;
	tmp386[3L] = 0;
	int32_pl[4] tmp387;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_4/size'} *)
	(* Element assignments for tmp387 *)
	tmp387[0L] = 1;
	tmp387[1L] = 1;
	tmp387[2L] = 256;
	tmp387[3L] = 64;
	int32_pl[4] tmp388;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_4/begin'} *)
	(* Element assignments for tmp388 *)
	tmp388[0L] = 0;
	tmp388[1L] = 0;
	tmp388[2L] = 0;
	tmp388[3L] = 0;
	int32_pl[4] tmp389;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_3/size'} *)
	(* Element assignments for tmp389 *)
	tmp389[0L] = 1;
	tmp389[1L] = 1;
	tmp389[2L] = 256;
	tmp389[3L] = 64;
	int32_pl[4] tmp390;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_3/begin'} *)
	(* Element assignments for tmp390 *)
	tmp390[0L] = 0;
	tmp390[1L] = 0;
	tmp390[2L] = 0;
	tmp390[3L] = 0;
	int32_pl[4] tmp391;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_2/size'} *)
	(* Element assignments for tmp391 *)
	tmp391[0L] = 1;
	tmp391[1L] = 4;
	tmp391[2L] = 256;
	tmp391[3L] = 64;
	int32_pl[4] tmp392;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_2/begin'} *)
	(* Element assignments for tmp392 *)
	tmp392[0L] = 2;
	tmp392[1L] = 0;
	tmp392[2L] = 0;
	tmp392[3L] = 0;
	int32_pl[4] tmp393;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_1/size'} *)
	(* Element assignments for tmp393 *)
	tmp393[0L] = 1;
	tmp393[1L] = 4;
	tmp393[2L] = 256;
	tmp393[3L] = 64;
	int32_pl[4] tmp394;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_1/begin'} *)
	(* Element assignments for tmp394 *)
	tmp394[0L] = 1;
	tmp394[1L] = 0;
	tmp394[2L] = 0;
	tmp394[3L] = 0;
	int32_pl[4] tmp395;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice/size'} *)
	(* Element assignments for tmp395 *)
	tmp395[0L] = 1;
	tmp395[1L] = 4;
	tmp395[2L] = 256;
	tmp395[3L] = 64;
	int32_pl[4] tmp396;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice/begin'} *)
	(* Element assignments for tmp396 *)
	tmp396[0L] = 0;
	tmp396[1L] = 0;
	tmp396[2L] = 0;
	tmp396[3L] = 0;
	int32_pl[4] tmp397;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/transpose/perm'} *)
	(* Element assignments for tmp397 *)
	tmp397[0L] = 1;
	tmp397[1L] = 2;
	tmp397[2L] = 0;
	tmp397[3L] = 3;
	int64_pl[1] tmp399;

	int32_pl tmp398 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp398, tmp399);

	int64_pl[1] tmp401;

	int32_pl tmp400 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp400, tmp401);

	int64_pl[1] tmp403;

	int32_pl tmp402 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp402, tmp403);

	int64_pl[1] tmp405;

	int32_pl tmp404 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp404, tmp405);

	int32_pl[4] tmp406;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_6/attention/self/transpose_5/perm'} *)
	(* Element assignments for tmp406 *)
	tmp406[0L] = 0;
	tmp406[1L] = 2;
	tmp406[2L] = 1;
	tmp406[3L] = 3;
	int32_pl[4] tmp407;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/transpose_5/perm'} *)
	(* Element assignments for tmp407 *)
	tmp407[0L] = 0;
	tmp407[1L] = 2;
	tmp407[2L] = 1;
	tmp407[3L] = 3;
	int32_pl[4] tmp408;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_18/size'} *)
	(* Element assignments for tmp408 *)
	tmp408[0L] = 1;
	tmp408[1L] = 1;
	tmp408[2L] = 256;
	tmp408[3L] = 64;
	int32_pl[4] tmp409;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_18/begin'} *)
	(* Element assignments for tmp409 *)
	tmp409[0L] = 0;
	tmp409[1L] = 3;
	tmp409[2L] = 0;
	tmp409[3L] = 0;
	int32_pl[4] tmp410;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_17/size'} *)
	(* Element assignments for tmp410 *)
	tmp410[0L] = 1;
	tmp410[1L] = 1;
	tmp410[2L] = 256;
	tmp410[3L] = 256;
	int32_pl[4] tmp411;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_17/begin'} *)
	(* Element assignments for tmp411 *)
	tmp411[0L] = 0;
	tmp411[1L] = 3;
	tmp411[2L] = 0;
	tmp411[3L] = 0;
	int32_pl[4] tmp412;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_16/size'} *)
	(* Element assignments for tmp412 *)
	tmp412[0L] = 1;
	tmp412[1L] = 1;
	tmp412[2L] = 256;
	tmp412[3L] = 64;
	int32_pl[4] tmp413;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_16/begin'} *)
	(* Element assignments for tmp413 *)
	tmp413[0L] = 0;
	tmp413[1L] = 2;
	tmp413[2L] = 0;
	tmp413[3L] = 0;
	int32_pl[4] tmp414;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_15/size'} *)
	(* Element assignments for tmp414 *)
	tmp414[0L] = 1;
	tmp414[1L] = 1;
	tmp414[2L] = 256;
	tmp414[3L] = 256;
	int32_pl[4] tmp415;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_15/begin'} *)
	(* Element assignments for tmp415 *)
	tmp415[0L] = 0;
	tmp415[1L] = 2;
	tmp415[2L] = 0;
	tmp415[3L] = 0;
	int32_pl[4] tmp416;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_14/size'} *)
	(* Element assignments for tmp416 *)
	tmp416[0L] = 1;
	tmp416[1L] = 1;
	tmp416[2L] = 256;
	tmp416[3L] = 64;
	int32_pl[4] tmp417;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_14/begin'} *)
	(* Element assignments for tmp417 *)
	tmp417[0L] = 0;
	tmp417[1L] = 1;
	tmp417[2L] = 0;
	tmp417[3L] = 0;
	int32_pl[4] tmp418;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_13/size'} *)
	(* Element assignments for tmp418 *)
	tmp418[0L] = 1;
	tmp418[1L] = 1;
	tmp418[2L] = 256;
	tmp418[3L] = 256;
	int32_pl[4] tmp419;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_13/begin'} *)
	(* Element assignments for tmp419 *)
	tmp419[0L] = 0;
	tmp419[1L] = 1;
	tmp419[2L] = 0;
	tmp419[3L] = 0;
	int32_pl[4] tmp420;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_12/size'} *)
	(* Element assignments for tmp420 *)
	tmp420[0L] = 1;
	tmp420[1L] = 1;
	tmp420[2L] = 256;
	tmp420[3L] = 64;
	int32_pl[4] tmp421;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_12/begin'} *)
	(* Element assignments for tmp421 *)
	tmp421[0L] = 0;
	tmp421[1L] = 0;
	tmp421[2L] = 0;
	tmp421[3L] = 0;
	int32_pl[4] tmp422;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_11/size'} *)
	(* Element assignments for tmp422 *)
	tmp422[0L] = 1;
	tmp422[1L] = 1;
	tmp422[2L] = 256;
	tmp422[3L] = 256;
	int32_pl[4] tmp423;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_11/begin'} *)
	(* Element assignments for tmp423 *)
	tmp423[0L] = 0;
	tmp423[1L] = 0;
	tmp423[2L] = 0;
	tmp423[3L] = 0;
	int32_pl[4] tmp424;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_10/size'} *)
	(* Element assignments for tmp424 *)
	tmp424[0L] = 1;
	tmp424[1L] = 1;
	tmp424[2L] = 256;
	tmp424[3L] = 64;
	int32_pl[4] tmp425;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_10/begin'} *)
	(* Element assignments for tmp425 *)
	tmp425[0L] = 0;
	tmp425[1L] = 3;
	tmp425[2L] = 0;
	tmp425[3L] = 0;
	int32_pl[4] tmp426;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_9/size'} *)
	(* Element assignments for tmp426 *)
	tmp426[0L] = 1;
	tmp426[1L] = 1;
	tmp426[2L] = 256;
	tmp426[3L] = 64;
	int32_pl[4] tmp427;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_9/begin'} *)
	(* Element assignments for tmp427 *)
	tmp427[0L] = 0;
	tmp427[1L] = 3;
	tmp427[2L] = 0;
	tmp427[3L] = 0;
	int32_pl[4] tmp428;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_8/size'} *)
	(* Element assignments for tmp428 *)
	tmp428[0L] = 1;
	tmp428[1L] = 1;
	tmp428[2L] = 256;
	tmp428[3L] = 64;
	int32_pl[4] tmp429;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_8/begin'} *)
	(* Element assignments for tmp429 *)
	tmp429[0L] = 0;
	tmp429[1L] = 2;
	tmp429[2L] = 0;
	tmp429[3L] = 0;
	int32_pl[4] tmp430;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_7/size'} *)
	(* Element assignments for tmp430 *)
	tmp430[0L] = 1;
	tmp430[1L] = 1;
	tmp430[2L] = 256;
	tmp430[3L] = 64;
	int32_pl[4] tmp431;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_7/begin'} *)
	(* Element assignments for tmp431 *)
	tmp431[0L] = 0;
	tmp431[1L] = 2;
	tmp431[2L] = 0;
	tmp431[3L] = 0;
	int32_pl[4] tmp432;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_6/size'} *)
	(* Element assignments for tmp432 *)
	tmp432[0L] = 1;
	tmp432[1L] = 1;
	tmp432[2L] = 256;
	tmp432[3L] = 64;
	int32_pl[4] tmp433;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_6/begin'} *)
	(* Element assignments for tmp433 *)
	tmp433[0L] = 0;
	tmp433[1L] = 1;
	tmp433[2L] = 0;
	tmp433[3L] = 0;
	int32_pl[4] tmp434;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_5/size'} *)
	(* Element assignments for tmp434 *)
	tmp434[0L] = 1;
	tmp434[1L] = 1;
	tmp434[2L] = 256;
	tmp434[3L] = 64;
	int32_pl[4] tmp435;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_5/begin'} *)
	(* Element assignments for tmp435 *)
	tmp435[0L] = 0;
	tmp435[1L] = 1;
	tmp435[2L] = 0;
	tmp435[3L] = 0;
	int32_pl[4] tmp436;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_4/size'} *)
	(* Element assignments for tmp436 *)
	tmp436[0L] = 1;
	tmp436[1L] = 1;
	tmp436[2L] = 256;
	tmp436[3L] = 64;
	int32_pl[4] tmp437;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_4/begin'} *)
	(* Element assignments for tmp437 *)
	tmp437[0L] = 0;
	tmp437[1L] = 0;
	tmp437[2L] = 0;
	tmp437[3L] = 0;
	int32_pl[4] tmp438;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_3/size'} *)
	(* Element assignments for tmp438 *)
	tmp438[0L] = 1;
	tmp438[1L] = 1;
	tmp438[2L] = 256;
	tmp438[3L] = 64;
	int32_pl[4] tmp439;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_3/begin'} *)
	(* Element assignments for tmp439 *)
	tmp439[0L] = 0;
	tmp439[1L] = 0;
	tmp439[2L] = 0;
	tmp439[3L] = 0;
	int32_pl[4] tmp440;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_2/size'} *)
	(* Element assignments for tmp440 *)
	tmp440[0L] = 1;
	tmp440[1L] = 4;
	tmp440[2L] = 256;
	tmp440[3L] = 64;
	int32_pl[4] tmp441;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_2/begin'} *)
	(* Element assignments for tmp441 *)
	tmp441[0L] = 2;
	tmp441[1L] = 0;
	tmp441[2L] = 0;
	tmp441[3L] = 0;
	int32_pl[4] tmp442;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_1/size'} *)
	(* Element assignments for tmp442 *)
	tmp442[0L] = 1;
	tmp442[1L] = 4;
	tmp442[2L] = 256;
	tmp442[3L] = 64;
	int32_pl[4] tmp443;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_1/begin'} *)
	(* Element assignments for tmp443 *)
	tmp443[0L] = 1;
	tmp443[1L] = 0;
	tmp443[2L] = 0;
	tmp443[3L] = 0;
	int32_pl[4] tmp444;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice/size'} *)
	(* Element assignments for tmp444 *)
	tmp444[0L] = 1;
	tmp444[1L] = 4;
	tmp444[2L] = 256;
	tmp444[3L] = 64;
	int32_pl[4] tmp445;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice/begin'} *)
	(* Element assignments for tmp445 *)
	tmp445[0L] = 0;
	tmp445[1L] = 0;
	tmp445[2L] = 0;
	tmp445[3L] = 0;
	int32_pl[4] tmp446;

	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/transpose/perm'} *)
	(* Element assignments for tmp446 *)
	tmp446[0L] = 1;
	tmp446[1L] = 2;
	tmp446[2L] = 0;
	tmp446[3L] = 3;
	int64_pl[1] tmp448;

	int32_pl tmp447 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/moments/variance/reduction_indices'} *)
	CreateTensor1(1, tmp447, tmp448);

	int64_pl[1] tmp450;

	int32_pl tmp449 = 1;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Const', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/moments/mean/reduction_indices'} *)
	CreateTensor1(1, tmp449, tmp450);

	int64_al[256][256] tmp451;

	int64_pl i4;

	int64_pl i3;

	int64_pl i2;

	int64_pl i1;

	int64_pl i0;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/Reshape'} *)
	(* reshape(J0, 256, 256) *)
	i0 = 0L;
	i1 = 0L;
	i2 = 0L;
	for i3 = [0: 256]{
 		for i4 = [0: 256]{
 			tmp451[i3][i4] = tmp0[i0][i1][i2];
			i2 = (i2 + 1L);
			if ((i2 == 256L)) {
				i2 = 0L;
				i1 = (i1 + 1L);
				if ((i1 == 256L)) {
					i1 = 0L;
					i0 = (i0 + 1L);
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret3(1, 256, 256, tmp0);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/moments/mean'} *)
	int64_al tmp453;

	int64_al[256] tmp454;

	int64_al[256] tmp455;

	int64_al[256][1] tmp456;

	for i5 = [0: 256]{
 		tmp453 = 0L;
		for i6 = [0: 256]{
 			tmp453 = (tmp453 + tmp451[i5][i6]);
		};
		tmp454[(0 + (i5 * 1))] = tmp453;
	};
	ElemWiseVectorPublicDiv(256, tmp454, 256, tmp455);

	ClearMemSecret1(256, tmp454);

	for i5 = [0: 256]{
 		tmp456[i5][0] = tmp455[(0 + (i5 * 1))];
	};
	ClearMemSecret1(256, tmp455);

	int64_al[256][1] tmp457;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	for i7 = [0: 256]{
 		for i8 = [0: 1]{
 			tmp457[i7][i8] = (0L - tmp456[i7][i8]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	(* J421 + tmp457 *)
	int64_al[256][256] tmp458;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp458[i0][i1] = (tmp451[i0][i1] + tmp457[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/moments/SquaredDifference__mul'} *)
	(* J423 .* J423 *)
	int64_al[256][256] tmp459;

	int64_al[65536] tmp460;

	int64_al[65536] tmp461;

	int64_al[65536] tmp462;

	int32_pl tmp463;

	for i9 = [0: 256]{
 		for i10 = [0: 256]{
 			tmp463 = ((0 + (i9 * 256)) + (i10 * 1));
			tmp460[tmp463] = tmp458[i9][i10];
			tmp461[tmp463] = tmp458[i9][i10];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp460, tmp461, tmp462);

	ClearMemSecret1(65536, tmp460);

	ClearMemSecret1(65536, tmp461);

	for i9 = [0: 256]{
 		for i10 = [0: 256]{
 			tmp463 = ((0 + (i9 * 256)) + (i10 * 1));
			tmp459[i9][i10] = tmp462[tmp463];
		};
	};
	ClearMemSecret1(65536, tmp462);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp458);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/moments/variance'} *)
	int64_al tmp465;

	int64_al[256] tmp466;

	int64_al[256] tmp467;

	int64_al[256][1] tmp468;

	for i11 = [0: 256]{
 		tmp465 = 0L;
		for i12 = [0: 256]{
 			tmp465 = (tmp465 + tmp459[i11][i12]);
		};
		tmp466[(0 + (i11 * 1))] = tmp465;
	};
	ElemWiseVectorPublicDiv(256, tmp466, 256, tmp467);

	ClearMemSecret1(256, tmp466);

	for i11 = [0: 256]{
 		tmp468[i11][0] = tmp467[(0 + (i11 * 1))];
	};
	ClearMemSecret1(256, tmp467);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp459);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp0(tmp15, 12);

;
	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/batchnorm/add'} *)
	(* J15 + J425 *)
	int64_al[256][1] tmp470;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp470[i0][i1] = (tmp15 + tmp468[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp468);

	int64_al[256][1] tmp472;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp470, tmp472, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp470);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/batchnorm/mul'} *)
	(* J427 .* J46 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp472, 12);

	int64_al[256][256] tmp474;

	int64_al[65536] tmp475;

	int64_al[65536] tmp476;

	int64_al[65536] tmp477;

	int32_pl tmp478;

	for i13 = [0: 256]{
 		for i14 = [0: 256]{
 			tmp478 = ((0 + (i13 * 256)) + (i14 * 1));
			tmp475[tmp478] = tmp472[i13][0];
			tmp476[tmp478] = tmp46[i14];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp475, tmp476, tmp477);

	ClearMemSecret1(65536, tmp475);

	ClearMemSecret1(65536, tmp476);

	for i13 = [0: 256]{
 		for i14 = [0: 256]{
 			tmp478 = ((0 + (i13 * 256)) + (i14 * 1));
			tmp474[i13][i14] = tmp477[tmp478];
		};
	};
	ClearMemSecret1(65536, tmp477);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp472);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp46);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/batchnorm/mul_2'} *)
	(* J428 .* J422 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp474, 12);

	int64_al[256][256] tmp481;

	int64_al[65536] tmp482;

	int64_al[65536] tmp483;

	int64_al[65536] tmp484;

	int32_pl tmp485;

	for i15 = [0: 256]{
 		for i16 = [0: 256]{
 			tmp485 = ((0 + (i15 * 256)) + (i16 * 1));
			tmp482[tmp485] = tmp474[i15][i16];
			tmp483[tmp485] = tmp456[i15][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp482, tmp483, tmp484);

	ClearMemSecret1(65536, tmp482);

	ClearMemSecret1(65536, tmp483);

	for i15 = [0: 256]{
 		for i16 = [0: 256]{
 			tmp485 = ((0 + (i15 * 256)) + (i16 * 1));
			tmp481[i15][i16] = tmp484[tmp485];
		};
	};
	ClearMemSecret1(65536, tmp484);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp456);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp32, 12);

	int64_al[256][256] tmp487;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/batchnorm/sub'} *)
	for i17 = [0: 256]{
 		for i18 = [0: 256]{
 			tmp487[i17][i18] = (0L - tmp481[i17][i18]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/batchnorm/sub'} *)
	(* J32 + tmp487 *)
	int64_al[256][256] tmp488;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp488[i0][i1] = (tmp32[i1] + tmp487[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp481);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp32);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/batchnorm/mul_1'} *)
	(* J421 .* J428 *)
	int64_al[256][256] tmp491;

	int64_al[65536] tmp492;

	int64_al[65536] tmp493;

	int64_al[65536] tmp494;

	int32_pl tmp495;

	for i19 = [0: 256]{
 		for i20 = [0: 256]{
 			tmp495 = ((0 + (i19 * 256)) + (i20 * 1));
			tmp492[tmp495] = tmp451[i19][i20];
			tmp493[tmp495] = tmp474[i19][i20];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp492, tmp493, tmp494);

	ClearMemSecret1(65536, tmp492);

	ClearMemSecret1(65536, tmp493);

	for i19 = [0: 256]{
 		for i20 = [0: 256]{
 			tmp495 = ((0 + (i19 * 256)) + (i20 * 1));
			tmp491[i19][i20] = tmp494[tmp495];
		};
	};
	ClearMemSecret1(65536, tmp494);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp474);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/pre_norm/batchnorm/add_1'} *)
	(* J431 + J430 *)
	int64_al[256][256] tmp497;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp497[i0][i1] = (tmp491[i0][i1] + tmp488[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp488);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp491);

	int64_al[256][768] tmp500;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp497, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/qkv/MatMul'} *)
	(* J432 * J62 *)
	MatMul2D(256, 256, 768, tmp497, tmp62, tmp500, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp62);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp497);

	int64_al[256][3][4][64] tmp503;

	int64_pl i26;

	int64_pl i25;

	int64_pl i24;

	int64_pl i23;

	int64_pl i22;

	int64_pl i21;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape'} *)
	(* reshape(J433, 256, 3, 4, 64) *)
	i21 = 0L;
	i22 = 0L;
	for i23 = [0: 256]{
 		for i24 = [0: 3]{
 			for i25 = [0: 4]{
 				for i26 = [0: 64]{
 					tmp503[i23][i24][i25][i26] = tmp500[i21][i22];
					i22 = (i22 + 1L);
					if ((i22 == 768L)) {
						i22 = 0L;
						i21 = (i21 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp500);

	int64_al[3][4][256][64] tmp505;

	int64_pl i30;

	int64_pl i29;

	int64_pl i28;

	int64_pl i27;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_0/attention/self/transpose'} *)
	(* transpose(J434, [256, 3, 4, 64] --> [3, 4, 256, 64]) *)
	for i27 = [0: 256]{
 		for i28 = [0: 3]{
 			for i29 = [0: 4]{
 				for i30 = [0: 64]{
 					tmp505[i28][i29][i27][i30] = tmp503[i27][i28][i29][i30];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 3, 4, 64, tmp503);

	int64_al[1][4][256][64] tmp507;

	int64_pl i34;

	int64_pl i33;

	int64_pl i32;

	int64_pl i31;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_2'} *)
	(* slice(J435, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i31 = [0: 1]{
 		for i32 = [0: 4]{
 			for i33 = [0: 256]{
 				for i34 = [0: 64]{
 					tmp507[i31][i32][i33][i34] = tmp505[(i31 + 2L)][(i32 + 0L)][(i33 + 0L)][(i34 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp508;

	int64_pl i38;

	int64_pl i37;

	int64_pl i36;

	int64_pl i35;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_18'} *)
	(* slice(J436, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i35 = [0: 1]{
 		for i36 = [0: 1]{
 			for i37 = [0: 256]{
 				for i38 = [0: 64]{
 					tmp508[i35][i36][i37][i38] = tmp507[(i35 + 0L)][(i36 + 3L)][(i37 + 0L)][(i38 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp509;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp508, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_15'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp508, tmp509);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp508);

	int64_al[1][1][256][64] tmp511;

	int64_pl i42;

	int64_pl i41;

	int64_pl i40;

	int64_pl i39;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_16'} *)
	(* slice(J436, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i39 = [0: 1]{
 		for i40 = [0: 1]{
 			for i41 = [0: 256]{
 				for i42 = [0: 64]{
 					tmp511[i39][i40][i41][i42] = tmp507[(i39 + 0L)][(i40 + 2L)][(i41 + 0L)][(i42 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp512;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp511, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_13'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp511, tmp512);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp511);

	int64_al[1][1][256][64] tmp514;

	int64_pl i46;

	int64_pl i45;

	int64_pl i44;

	int64_pl i43;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_14'} *)
	(* slice(J436, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i43 = [0: 1]{
 		for i44 = [0: 1]{
 			for i45 = [0: 256]{
 				for i46 = [0: 64]{
 					tmp514[i43][i44][i45][i46] = tmp507[(i43 + 0L)][(i44 + 1L)][(i45 + 0L)][(i46 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp515;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp514, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_11'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp514, tmp515);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp514);

	int64_al[1][1][256][64] tmp517;

	int64_pl i50;

	int64_pl i49;

	int64_pl i48;

	int64_pl i47;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_12'} *)
	(* slice(J436, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i47 = [0: 1]{
 		for i48 = [0: 1]{
 			for i49 = [0: 256]{
 				for i50 = [0: 64]{
 					tmp517[i47][i48][i49][i50] = tmp507[(i47 + 0L)][(i48 + 0L)][(i49 + 0L)][(i50 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp507);

	int64_al[256][64] tmp519;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp517, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_9'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp517, tmp519);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp517);

	int64_al[1][4][256][64] tmp521;

	int64_pl i54;

	int64_pl i53;

	int64_pl i52;

	int64_pl i51;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_1'} *)
	(* slice(J435, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i51 = [0: 1]{
 		for i52 = [0: 4]{
 			for i53 = [0: 256]{
 				for i54 = [0: 64]{
 					tmp521[i51][i52][i53][i54] = tmp505[(i51 + 1L)][(i52 + 0L)][(i53 + 0L)][(i54 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp522;

	int64_pl i58;

	int64_pl i57;

	int64_pl i56;

	int64_pl i55;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_10'} *)
	(* slice(J445, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i55 = [0: 1]{
 		for i56 = [0: 1]{
 			for i57 = [0: 256]{
 				for i58 = [0: 64]{
 					tmp522[i55][i56][i57][i58] = tmp521[(i55 + 0L)][(i56 + 3L)][(i57 + 0L)][(i58 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp523;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp522, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_7'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp522, tmp523);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp522);

	int64_al[1][1][256][64] tmp525;

	int64_pl i62;

	int64_pl i61;

	int64_pl i60;

	int64_pl i59;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_8'} *)
	(* slice(J445, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i59 = [0: 1]{
 		for i60 = [0: 1]{
 			for i61 = [0: 256]{
 				for i62 = [0: 64]{
 					tmp525[i59][i60][i61][i62] = tmp521[(i59 + 0L)][(i60 + 2L)][(i61 + 0L)][(i62 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp526;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp525, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_5'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp525, tmp526);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp525);

	int64_al[1][1][256][64] tmp528;

	int64_pl i66;

	int64_pl i65;

	int64_pl i64;

	int64_pl i63;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_6'} *)
	(* slice(J445, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i63 = [0: 1]{
 		for i64 = [0: 1]{
 			for i65 = [0: 256]{
 				for i66 = [0: 64]{
 					tmp528[i63][i64][i65][i66] = tmp521[(i63 + 0L)][(i64 + 1L)][(i65 + 0L)][(i66 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp529;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp528, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_3'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp528, tmp529);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp528);

	int64_al[1][1][256][64] tmp531;

	int64_pl i70;

	int64_pl i69;

	int64_pl i68;

	int64_pl i67;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_4'} *)
	(* slice(J445, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i67 = [0: 1]{
 		for i68 = [0: 1]{
 			for i69 = [0: 256]{
 				for i70 = [0: 64]{
 					tmp531[i67][i68][i69][i70] = tmp521[(i67 + 0L)][(i68 + 0L)][(i69 + 0L)][(i70 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp521);

	int64_al[256][64] tmp533;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp531, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_1'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp531, tmp533);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp531);

	int64_al[1][4][256][64] tmp535;

	int64_pl i74;

	int64_pl i73;

	int64_pl i72;

	int64_pl i71;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice'} *)
	(* slice(J435, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i71 = [0: 1]{
 		for i72 = [0: 4]{
 			for i73 = [0: 256]{
 				for i74 = [0: 64]{
 					tmp535[i71][i72][i73][i74] = tmp505[(i71 + 0L)][(i72 + 0L)][(i73 + 0L)][(i74 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 4, 256, 64, tmp505);

	int64_al[1][1][256][64] tmp537;

	int64_pl i78;

	int64_pl i77;

	int64_pl i76;

	int64_pl i75;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_9'} *)
	(* slice(J454, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i75 = [0: 1]{
 		for i76 = [0: 1]{
 			for i77 = [0: 256]{
 				for i78 = [0: 64]{
 					tmp537[i75][i76][i77][i78] = tmp535[(i75 + 0L)][(i76 + 3L)][(i77 + 0L)][(i78 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp538;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp537, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_6'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp537, tmp538);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp537);

	int64_al[256][256] tmp541;

	int64_al[64][256] tmp540;

	int64_pl i80;

	int64_pl i79;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* transpose(J447, [256, 64] --> [64, 256]) *)
	for i79 = [0: 256]{
 		for i80 = [0: 64]{
 			tmp540[i80][i79] = tmp523[i79][i80];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* J456 * tmp540 *)
	MatMul2D(256, 64, 256, tmp538, tmp540, tmp541, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp523);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp538);

	int64_al[1][1][256][256] tmp544;

	int64_pl i86;

	int64_pl i85;

	int64_pl i84;

	int64_pl i83;

	int64_pl i82;

	int64_pl i81;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_4'} *)
	(* reshape(J457, 1, 1, 256, 256) *)
	i81 = 0L;
	i82 = 0L;
	for i83 = [0: 1]{
 		for i84 = [0: 1]{
 			for i85 = [0: 256]{
 				for i86 = [0: 256]{
 					tmp544[i83][i84][i85][i86] = tmp541[i81][i82];
					i82 = (i82 + 1L);
					if ((i82 == 256L)) {
						i82 = 0L;
						i81 = (i81 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp541);

	int64_al[1][1][256][64] tmp546;

	int64_pl i90;

	int64_pl i89;

	int64_pl i88;

	int64_pl i87;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_7'} *)
	(* slice(J454, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i87 = [0: 1]{
 		for i88 = [0: 1]{
 			for i89 = [0: 256]{
 				for i90 = [0: 64]{
 					tmp546[i87][i88][i89][i90] = tmp535[(i87 + 0L)][(i88 + 2L)][(i89 + 0L)][(i90 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp547;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp546, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_4'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp546, tmp547);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp546);

	int64_al[256][256] tmp550;

	int64_al[64][256] tmp549;

	int64_pl i92;

	int64_pl i91;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* transpose(J449, [256, 64] --> [64, 256]) *)
	for i91 = [0: 256]{
 		for i92 = [0: 64]{
 			tmp549[i92][i91] = tmp526[i91][i92];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* J460 * tmp549 *)
	MatMul2D(256, 64, 256, tmp547, tmp549, tmp550, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp526);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp547);

	int64_al[1][1][256][256] tmp553;

	int64_pl i98;

	int64_pl i97;

	int64_pl i96;

	int64_pl i95;

	int64_pl i94;

	int64_pl i93;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_3'} *)
	(* reshape(J461, 1, 1, 256, 256) *)
	i93 = 0L;
	i94 = 0L;
	for i95 = [0: 1]{
 		for i96 = [0: 1]{
 			for i97 = [0: 256]{
 				for i98 = [0: 256]{
 					tmp553[i95][i96][i97][i98] = tmp550[i93][i94];
					i94 = (i94 + 1L);
					if ((i94 == 256L)) {
						i94 = 0L;
						i93 = (i93 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp550);

	int64_al[1][1][256][64] tmp555;

	int64_pl i102;

	int64_pl i101;

	int64_pl i100;

	int64_pl i99;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_5'} *)
	(* slice(J454, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i99 = [0: 1]{
 		for i100 = [0: 1]{
 			for i101 = [0: 256]{
 				for i102 = [0: 64]{
 					tmp555[i99][i100][i101][i102] = tmp535[(i99 + 0L)][(i100 + 1L)][(i101 + 0L)][(i102 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp556;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp555, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_2'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp555, tmp556);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp555);

	int64_al[256][256] tmp559;

	int64_al[64][256] tmp558;

	int64_pl i104;

	int64_pl i103;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* transpose(J451, [256, 64] --> [64, 256]) *)
	for i103 = [0: 256]{
 		for i104 = [0: 64]{
 			tmp558[i104][i103] = tmp529[i103][i104];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* J464 * tmp558 *)
	MatMul2D(256, 64, 256, tmp556, tmp558, tmp559, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp529);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp556);

	int64_al[1][1][256][256] tmp562;

	int64_pl i110;

	int64_pl i109;

	int64_pl i108;

	int64_pl i107;

	int64_pl i106;

	int64_pl i105;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_2'} *)
	(* reshape(J465, 1, 1, 256, 256) *)
	i105 = 0L;
	i106 = 0L;
	for i107 = [0: 1]{
 		for i108 = [0: 1]{
 			for i109 = [0: 256]{
 				for i110 = [0: 256]{
 					tmp562[i107][i108][i109][i110] = tmp559[i105][i106];
					i106 = (i106 + 1L);
					if ((i106 == 256L)) {
						i106 = 0L;
						i105 = (i105 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp559);

	int64_al[1][1][256][64] tmp564;

	int64_pl i114;

	int64_pl i113;

	int64_pl i112;

	int64_pl i111;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_3'} *)
	(* slice(J454, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i111 = [0: 1]{
 		for i112 = [0: 1]{
 			for i113 = [0: 256]{
 				for i114 = [0: 64]{
 					tmp564[i111][i112][i113][i114] = tmp535[(i111 + 0L)][(i112 + 0L)][(i113 + 0L)][(i114 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp535);

	int64_al[256][64] tmp566;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp564, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp564, tmp566);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp564);

	int64_al[256][256] tmp569;

	int64_al[64][256] tmp568;

	int64_pl i116;

	int64_pl i115;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* transpose(J453, [256, 64] --> [64, 256]) *)
	for i115 = [0: 256]{
 		for i116 = [0: 64]{
 			tmp568[i116][i115] = tmp533[i115][i116];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* J468 * tmp568 *)
	MatMul2D(256, 64, 256, tmp566, tmp568, tmp569, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp533);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp566);

	int64_al[1][1][256][256] tmp572;

	int64_pl i122;

	int64_pl i121;

	int64_pl i120;

	int64_pl i119;

	int64_pl i118;

	int64_pl i117;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_1'} *)
	(* reshape(J469, 1, 1, 256, 256) *)
	i117 = 0L;
	i118 = 0L;
	for i119 = [0: 1]{
 		for i120 = [0: 1]{
 			for i121 = [0: 256]{
 				for i122 = [0: 256]{
 					tmp572[i119][i120][i121][i122] = tmp569[i117][i118];
					i118 = (i118 + 1L);
					if ((i118 == 256L)) {
						i118 = 0L;
						i117 = (i117 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp569);

	int64_al[1][4][256][256] tmp574;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp544, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp553, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp562, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp572, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/concat_2'} *)
	Concat4T44444(1, 4, 256, 256, 1, 1, 256, 256, tmp572, 1, 1, 256, 256, tmp562, 1, 1, 256, 256, tmp553, 1, 1, 256, 256, tmp544, 1, tmp574);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp572);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp553);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp544);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp562);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Mul'} *)
	(* J47 .* J471 *)
	int64_al[1][4][256][256] tmp580;

	int64_al[262144] tmp581;

	int64_al[262144] tmp582;

	int64_al[262144] tmp583;

	int32_pl tmp584;

	for i123 = [0: 1]{
 		for i124 = [0: 4]{
 			for i125 = [0: 256]{
 				for i126 = [0: 256]{
 					tmp584 = ((((0 + (i123 * 262144)) + (i124 * 65536)) + (i125 * 256)) + (i126 * 1));
					tmp581[tmp584] = tmp47;
					tmp582[tmp584] = tmp574[i123][i124][i125][i126];
				};
			};
		};
	};
	ElemWiseActModelVectorMult(262144, tmp582, tmp581, tmp583);

	ClearMemSecret1(262144, tmp581);

	ClearMemSecret1(262144, tmp582);

	for i123 = [0: 1]{
 		for i124 = [0: 4]{
 			for i125 = [0: 256]{
 				for i126 = [0: 256]{
 					tmp584 = ((((0 + (i123 * 262144)) + (i124 * 65536)) + (i125 * 256)) + (i126 * 1));
					tmp580[i123][i124][i125][i126] = tmp583[tmp584];
				};
			};
		};
	};
	ClearMemSecret1(262144, tmp583);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp574);

	int64_al[1][4][256][256] tmp586;

	(* {'TFOpName': 'Softmax', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Softmax'} *)
	Softmax4(1, 4, 256, 256, tmp580, tmp586);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp580);

	int64_al[1][1][256][256] tmp588;

	int64_pl i130;

	int64_pl i129;

	int64_pl i128;

	int64_pl i127;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_17'} *)
	(* slice(J473, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i127 = [0: 1]{
 		for i128 = [0: 1]{
 			for i129 = [0: 256]{
 				for i130 = [0: 256]{
 					tmp588[i127][i128][i129][i130] = tmp586[(i127 + 0L)][(i128 + 3L)][(i129 + 0L)][(i130 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp589;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp588, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_14'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp588, tmp589);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp588);

	int64_al[256][64] tmp591;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/MatMul_7'} *)
	(* J475 * J438 *)
	MatMul2D(256, 256, 64, tmp589, tmp509, tmp591, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp509);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp589);

	int64_al[1][1][256][64] tmp594;

	int64_pl i136;

	int64_pl i135;

	int64_pl i134;

	int64_pl i133;

	int64_pl i132;

	int64_pl i131;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_8'} *)
	(* reshape(J476, 1, 1, 256, 64) *)
	i131 = 0L;
	i132 = 0L;
	for i133 = [0: 1]{
 		for i134 = [0: 1]{
 			for i135 = [0: 256]{
 				for i136 = [0: 64]{
 					tmp594[i133][i134][i135][i136] = tmp591[i131][i132];
					i132 = (i132 + 1L);
					if ((i132 == 64L)) {
						i132 = 0L;
						i131 = (i131 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp591);

	int64_al[1][1][256][256] tmp596;

	int64_pl i140;

	int64_pl i139;

	int64_pl i138;

	int64_pl i137;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_15'} *)
	(* slice(J473, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i137 = [0: 1]{
 		for i138 = [0: 1]{
 			for i139 = [0: 256]{
 				for i140 = [0: 256]{
 					tmp596[i137][i138][i139][i140] = tmp586[(i137 + 0L)][(i138 + 2L)][(i139 + 0L)][(i140 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp597;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp596, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_12'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp596, tmp597);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp596);

	int64_al[256][64] tmp599;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/MatMul_6'} *)
	(* J479 * J440 *)
	MatMul2D(256, 256, 64, tmp597, tmp512, tmp599, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp597);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp512);

	int64_al[1][1][256][64] tmp602;

	int64_pl i146;

	int64_pl i145;

	int64_pl i144;

	int64_pl i143;

	int64_pl i142;

	int64_pl i141;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_7'} *)
	(* reshape(J480, 1, 1, 256, 64) *)
	i141 = 0L;
	i142 = 0L;
	for i143 = [0: 1]{
 		for i144 = [0: 1]{
 			for i145 = [0: 256]{
 				for i146 = [0: 64]{
 					tmp602[i143][i144][i145][i146] = tmp599[i141][i142];
					i142 = (i142 + 1L);
					if ((i142 == 64L)) {
						i142 = 0L;
						i141 = (i141 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp599);

	int64_al[1][1][256][256] tmp604;

	int64_pl i150;

	int64_pl i149;

	int64_pl i148;

	int64_pl i147;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_13'} *)
	(* slice(J473, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i147 = [0: 1]{
 		for i148 = [0: 1]{
 			for i149 = [0: 256]{
 				for i150 = [0: 256]{
 					tmp604[i147][i148][i149][i150] = tmp586[(i147 + 0L)][(i148 + 1L)][(i149 + 0L)][(i150 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp605;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp604, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_10'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp604, tmp605);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp604);

	int64_al[256][64] tmp607;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/MatMul_5'} *)
	(* J483 * J442 *)
	MatMul2D(256, 256, 64, tmp605, tmp515, tmp607, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp515);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp605);

	int64_al[1][1][256][64] tmp610;

	int64_pl i156;

	int64_pl i155;

	int64_pl i154;

	int64_pl i153;

	int64_pl i152;

	int64_pl i151;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_6'} *)
	(* reshape(J484, 1, 1, 256, 64) *)
	i151 = 0L;
	i152 = 0L;
	for i153 = [0: 1]{
 		for i154 = [0: 1]{
 			for i155 = [0: 256]{
 				for i156 = [0: 64]{
 					tmp610[i153][i154][i155][i156] = tmp607[i151][i152];
					i152 = (i152 + 1L);
					if ((i152 == 64L)) {
						i152 = 0L;
						i151 = (i151 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp607);

	int64_al[1][1][256][256] tmp612;

	int64_pl i160;

	int64_pl i159;

	int64_pl i158;

	int64_pl i157;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Slice_11'} *)
	(* slice(J473, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i157 = [0: 1]{
 		for i158 = [0: 1]{
 			for i159 = [0: 256]{
 				for i160 = [0: 256]{
 					tmp612[i157][i158][i159][i160] = tmp586[(i157 + 0L)][(i158 + 0L)][(i159 + 0L)][(i160 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp586);

	int64_al[256][256] tmp614;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp612, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Squeeze_8'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp612, tmp614);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp612);

	int64_al[256][64] tmp616;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/MatMul_4'} *)
	(* J487 * J444 *)
	MatMul2D(256, 256, 64, tmp614, tmp519, tmp616, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp614);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp519);

	int64_al[1][1][256][64] tmp619;

	int64_pl i166;

	int64_pl i165;

	int64_pl i164;

	int64_pl i163;

	int64_pl i162;

	int64_pl i161;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_5'} *)
	(* reshape(J488, 1, 1, 256, 64) *)
	i161 = 0L;
	i162 = 0L;
	for i163 = [0: 1]{
 		for i164 = [0: 1]{
 			for i165 = [0: 256]{
 				for i166 = [0: 64]{
 					tmp619[i163][i164][i165][i166] = tmp616[i161][i162];
					i162 = (i162 + 1L);
					if ((i162 == 64L)) {
						i162 = 0L;
						i161 = (i161 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp616);

	int64_al[1][4][256][64] tmp621;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp594, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp602, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp610, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp619, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_0/attention/self/concat_5'} *)
	Concat4T44444(1, 4, 256, 64, 1, 1, 256, 64, tmp619, 1, 1, 256, 64, tmp610, 1, 1, 256, 64, tmp602, 1, 1, 256, 64, tmp594, 1, tmp621);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp619);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp594);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp602);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp610);

	int64_al[1][256][4][64] tmp627;

	int64_pl i170;

	int64_pl i169;

	int64_pl i168;

	int64_pl i167;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_0/attention/self/transpose_5'} *)
	(* transpose(J490, [1, 4, 256, 64] --> [1, 256, 4, 64]) *)
	for i167 = [0: 1]{
 		for i168 = [0: 4]{
 			for i169 = [0: 256]{
 				for i170 = [0: 64]{
 					tmp627[i167][i169][i168][i170] = tmp621[i167][i168][i169][i170];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp621);

	int64_al[256][256] tmp629;

	int64_pl i176;

	int64_pl i175;

	int64_pl i174;

	int64_pl i173;

	int64_pl i172;

	int64_pl i171;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_0/attention/self/Reshape_9'} *)
	(* reshape(J491, 256, 256) *)
	i171 = 0L;
	i172 = 0L;
	i173 = 0L;
	i174 = 0L;
	for i175 = [0: 256]{
 		for i176 = [0: 256]{
 			tmp629[i175][i176] = tmp627[i171][i172][i173][i174];
			i174 = (i174 + 1L);
			if ((i174 == 64L)) {
				i174 = 0L;
				i173 = (i173 + 1L);
				if ((i173 == 4L)) {
					i173 = 0L;
					i172 = (i172 + 1L);
					if ((i172 == 256L)) {
						i172 = 0L;
						i171 = (i171 + 1L);
					}
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 4, 64, tmp627);

	int64_al[256][256] tmp631;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/attention/self/proj/MatMul'} *)
	(* J492 * J59 *)
	MatMul2D(256, 256, 256, tmp629, tmp59, tmp631, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp59);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp629);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp99, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_0/attention/self/proj/BiasAdd'} *)
	(* J493 + J99 *)
	int64_al[256][256] tmp634;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp634[i0][i1] = (tmp631[i0][i1] + tmp99[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp99);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp631);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp451, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_0/attention/output/add'} *)
	(* J421 + J494 *)
	int64_al[256][256] tmp637;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp637[i0][i1] = (tmp451[i0][i1] + tmp634[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp634);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp451);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/moments/mean'} *)
	int64_al tmp640;

	int64_al[256] tmp641;

	int64_al[256] tmp642;

	int64_al[256][1] tmp643;

	for i177 = [0: 256]{
 		tmp640 = 0L;
		for i178 = [0: 256]{
 			tmp640 = (tmp640 + tmp637[i177][i178]);
		};
		tmp641[(0 + (i177 * 1))] = tmp640;
	};
	ElemWiseVectorPublicDiv(256, tmp641, 256, tmp642);

	ClearMemSecret1(256, tmp641);

	for i177 = [0: 256]{
 		tmp643[i177][0] = tmp642[(0 + (i177 * 1))];
	};
	ClearMemSecret1(256, tmp642);

	int64_al[256][1] tmp644;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/moments/SquaredDifference__sub'} *)
	for i179 = [0: 256]{
 		for i180 = [0: 1]{
 			tmp644[i179][i180] = (0L - tmp643[i179][i180]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/moments/SquaredDifference__sub'} *)
	(* J495 + tmp644 *)
	int64_al[256][256] tmp645;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp645[i0][i1] = (tmp637[i0][i1] + tmp644[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/moments/SquaredDifference__mul'} *)
	(* J497 .* J497 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp645, 12);

	int64_al[256][256] tmp646;

	int64_al[65536] tmp647;

	int64_al[65536] tmp648;

	int64_al[65536] tmp649;

	int32_pl tmp650;

	for i181 = [0: 256]{
 		for i182 = [0: 256]{
 			tmp650 = ((0 + (i181 * 256)) + (i182 * 1));
			tmp647[tmp650] = tmp645[i181][i182];
			tmp648[tmp650] = tmp645[i181][i182];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp647, tmp648, tmp649);

	ClearMemSecret1(65536, tmp647);

	ClearMemSecret1(65536, tmp648);

	for i181 = [0: 256]{
 		for i182 = [0: 256]{
 			tmp650 = ((0 + (i181 * 256)) + (i182 * 1));
			tmp646[i181][i182] = tmp649[tmp650];
		};
	};
	ClearMemSecret1(65536, tmp649);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp645);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/moments/variance'} *)
	int64_al tmp652;

	int64_al[256] tmp653;

	int64_al[256] tmp654;

	int64_al[256][1] tmp655;

	for i183 = [0: 256]{
 		tmp652 = 0L;
		for i184 = [0: 256]{
 			tmp652 = (tmp652 + tmp646[i183][i184]);
		};
		tmp653[(0 + (i183 * 1))] = tmp652;
	};
	ElemWiseVectorPublicDiv(256, tmp653, 256, tmp654);

	ClearMemSecret1(256, tmp653);

	for i183 = [0: 256]{
 		tmp655[i183][0] = tmp654[(0 + (i183 * 1))];
	};
	ClearMemSecret1(256, tmp654);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp646);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/batchnorm/add'} *)
	(* J499 + J15 *)
	int64_al[256][1] tmp657;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp657[i0][i1] = (tmp655[i0][i1] + tmp15);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp655);

	int64_al[256][1] tmp659;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp657, tmp659, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp657);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/batchnorm/mul'} *)
	(* J501 .* J68 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp659, 12);

	int64_al[256][256] tmp661;

	int64_al[65536] tmp662;

	int64_al[65536] tmp663;

	int64_al[65536] tmp664;

	int32_pl tmp665;

	for i185 = [0: 256]{
 		for i186 = [0: 256]{
 			tmp665 = ((0 + (i185 * 256)) + (i186 * 1));
			tmp662[tmp665] = tmp659[i185][0];
			tmp663[tmp665] = tmp68[i186];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp662, tmp663, tmp664);

	ClearMemSecret1(65536, tmp662);

	ClearMemSecret1(65536, tmp663);

	for i185 = [0: 256]{
 		for i186 = [0: 256]{
 			tmp665 = ((0 + (i185 * 256)) + (i186 * 1));
			tmp661[i185][i186] = tmp664[tmp665];
		};
	};
	ClearMemSecret1(65536, tmp664);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp659);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp68);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/batchnorm/mul_2'} *)
	(* J502 .* J496 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp661, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp643, 12);

	int64_al[256][256] tmp668;

	int64_al[65536] tmp669;

	int64_al[65536] tmp670;

	int64_al[65536] tmp671;

	int32_pl tmp672;

	for i187 = [0: 256]{
 		for i188 = [0: 256]{
 			tmp672 = ((0 + (i187 * 256)) + (i188 * 1));
			tmp669[tmp672] = tmp661[i187][i188];
			tmp670[tmp672] = tmp643[i187][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp669, tmp670, tmp671);

	ClearMemSecret1(65536, tmp669);

	ClearMemSecret1(65536, tmp670);

	for i187 = [0: 256]{
 		for i188 = [0: 256]{
 			tmp672 = ((0 + (i187 * 256)) + (i188 * 1));
			tmp668[i187][i188] = tmp671[tmp672];
		};
	};
	ClearMemSecret1(65536, tmp671);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp643);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp109, 12);

	int64_al[256][256] tmp674;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/batchnorm/sub'} *)
	for i189 = [0: 256]{
 		for i190 = [0: 256]{
 			tmp674[i189][i190] = (0L - tmp668[i189][i190]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/batchnorm/sub'} *)
	(* J109 + tmp674 *)
	int64_al[256][256] tmp675;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp675[i0][i1] = (tmp109[i1] + tmp674[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp109);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp668);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/batchnorm/mul_1'} *)
	(* J495 .* J502 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp637, 12);

	int64_al[256][256] tmp678;

	int64_al[65536] tmp679;

	int64_al[65536] tmp680;

	int64_al[65536] tmp681;

	int32_pl tmp682;

	for i191 = [0: 256]{
 		for i192 = [0: 256]{
 			tmp682 = ((0 + (i191 * 256)) + (i192 * 1));
			tmp679[tmp682] = tmp637[i191][i192];
			tmp680[tmp682] = tmp661[i191][i192];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp679, tmp680, tmp681);

	ClearMemSecret1(65536, tmp679);

	ClearMemSecret1(65536, tmp680);

	for i191 = [0: 256]{
 		for i192 = [0: 256]{
 			tmp682 = ((0 + (i191 * 256)) + (i192 * 1));
			tmp678[i191][i192] = tmp681[tmp682];
		};
	};
	ClearMemSecret1(65536, tmp681);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp661);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp637);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_0/attention/output/norm1/batchnorm/add_1'} *)
	(* J505 + J504 *)
	int64_al[256][256] tmp685;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp685[i0][i1] = (tmp678[i0][i1] + tmp675[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp678);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp675);

	int64_al[256][512] tmp688;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp685, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/linear1/MatMul'} *)
	(* J506 * J34 *)
	MatMul2D(256, 256, 512, tmp685, tmp34, tmp688, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp34);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(512, tmp82, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_0/linear1/BiasAdd'} *)
	(* J507 + J82 *)
	int64_al[256][512] tmp690;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp690[i0][i1] = (tmp688[i0][i1] + tmp82[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp688);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp82);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/linear1/mul_4'} *)
	(* J508 .* J6 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp690, 12);

	int64_al[256][512] tmp693;

	int64_al[131072] tmp694;

	int64_al[131072] tmp695;

	int64_al[131072] tmp696;

	int32_pl tmp697;

	for i193 = [0: 256]{
 		for i194 = [0: 512]{
 			tmp697 = ((0 + (i193 * 512)) + (i194 * 1));
			tmp694[tmp697] = tmp690[i193][i194];
			tmp695[tmp697] = tmp6;
		};
	};
	ElemWiseActModelVectorMult(131072, tmp694, tmp695, tmp696);

	ClearMemSecret1(131072, tmp694);

	ClearMemSecret1(131072, tmp695);

	for i193 = [0: 256]{
 		for i194 = [0: 512]{
 			tmp697 = ((0 + (i193 * 512)) + (i194 * 1));
			tmp693[i193][i194] = tmp696[tmp697];
		};
	};
	ClearMemSecret1(131072, tmp696);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/linear1/mul'} *)
	(* J508 .* J72 *)
	int64_al[256][512] tmp698;

	int64_al[131072] tmp699;

	int64_al[131072] tmp700;

	int64_al[131072] tmp701;

	int32_pl tmp702;

	for i195 = [0: 256]{
 		for i196 = [0: 512]{
 			tmp702 = ((0 + (i195 * 512)) + (i196 * 1));
			tmp699[tmp702] = tmp690[i195][i196];
			tmp700[tmp702] = tmp72;
		};
	};
	ElemWiseActModelVectorMult(131072, tmp699, tmp700, tmp701);

	ClearMemSecret1(131072, tmp699);

	ClearMemSecret1(131072, tmp700);

	for i195 = [0: 256]{
 		for i196 = [0: 512]{
 			tmp702 = ((0 + (i195 * 512)) + (i196 * 1));
			tmp698[i195][i196] = tmp701[tmp702];
		};
	};
	ClearMemSecret1(131072, tmp701);

	(* {'TFOpName': 'Square', 'TFNodeName': 'bert/encoder/layer_0/linear1/ArithmeticOptimizer/ReplaceMulWithSquare_mul_1'} *)
	(* J508 .* J508 *)
	int64_al[256][512] tmp703;

	int64_al[131072] tmp704;

	int64_al[131072] tmp705;

	int64_al[131072] tmp706;

	int32_pl tmp707;

	for i197 = [0: 256]{
 		for i198 = [0: 512]{
 			tmp707 = ((0 + (i197 * 512)) + (i198 * 1));
			tmp704[tmp707] = tmp690[i197][i198];
			tmp705[tmp707] = tmp690[i197][i198];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp704, tmp705, tmp706);

	ClearMemSecret1(131072, tmp704);

	ClearMemSecret1(131072, tmp705);

	for i197 = [0: 256]{
 		for i198 = [0: 512]{
 			tmp707 = ((0 + (i197 * 512)) + (i198 * 1));
			tmp703[i197][i198] = tmp706[tmp707];
		};
	};
	ClearMemSecret1(131072, tmp706);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/linear1/mul_2'} *)
	(* J511 .* J510 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp703, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp698, 12);

	int64_al[256][512] tmp708;

	int64_al[131072] tmp709;

	int64_al[131072] tmp710;

	int64_al[131072] tmp711;

	int32_pl tmp712;

	for i199 = [0: 256]{
 		for i200 = [0: 512]{
 			tmp712 = ((0 + (i199 * 512)) + (i200 * 1));
			tmp709[tmp712] = tmp703[i199][i200];
			tmp710[tmp712] = tmp698[i199][i200];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp709, tmp710, tmp711);

	ClearMemSecret1(131072, tmp709);

	ClearMemSecret1(131072, tmp710);

	for i199 = [0: 256]{
 		for i200 = [0: 512]{
 			tmp712 = ((0 + (i199 * 512)) + (i200 * 1));
			tmp708[i199][i200] = tmp711[tmp712];
		};
	};
	ClearMemSecret1(131072, tmp711);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp698);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp703);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 512, tmp690, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_0/linear1/add'} *)
	(* J508 + J512 *)
	int64_al[256][512] tmp715;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp715[i0][i1] = (tmp690[i0][i1] + tmp708[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp708);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp690);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/linear1/mul_3'} *)
	(* J513 .* J106 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp715, 12);

	int64_al[256][512] tmp718;

	int64_al[131072] tmp719;

	int64_al[131072] tmp720;

	int64_al[131072] tmp721;

	int32_pl tmp722;

	for i201 = [0: 256]{
 		for i202 = [0: 512]{
 			tmp722 = ((0 + (i201 * 512)) + (i202 * 1));
			tmp719[tmp722] = tmp715[i201][i202];
			tmp720[tmp722] = tmp106;
		};
	};
	ElemWiseActModelVectorMult(131072, tmp719, tmp720, tmp721);

	ClearMemSecret1(131072, tmp719);

	ClearMemSecret1(131072, tmp720);

	for i201 = [0: 256]{
 		for i202 = [0: 512]{
 			tmp722 = ((0 + (i201 * 512)) + (i202 * 1));
			tmp718[i201][i202] = tmp721[tmp722];
		};
	};
	ClearMemSecret1(131072, tmp721);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp715);

	int64_al[256][512] tmp724;

	(* {'TFOpName': 'Tanh', 'TFNodeName': 'bert/encoder/layer_0/linear1/Tanh'} *)
	Tanh2(256, 512, tmp718, tmp724, 24, 24, 32, 64, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp718);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp0(tmp80, 12);

;
	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_0/linear1/add_1'} *)
	(* J515 + J80 *)
	int64_al[256][512] tmp726;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp726[i0][i1] = (tmp724[i0][i1] + tmp80);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp724);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_0/linear1/mul_5'} *)
	(* J516 .* J509 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp726, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp693, 12);

	int64_al[256][512] tmp728;

	int64_al[131072] tmp729;

	int64_al[131072] tmp730;

	int64_al[131072] tmp731;

	int32_pl tmp732;

	for i203 = [0: 256]{
 		for i204 = [0: 512]{
 			tmp732 = ((0 + (i203 * 512)) + (i204 * 1));
			tmp729[tmp732] = tmp726[i203][i204];
			tmp730[tmp732] = tmp693[i203][i204];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp729, tmp730, tmp731);

	ClearMemSecret1(131072, tmp729);

	ClearMemSecret1(131072, tmp730);

	for i203 = [0: 256]{
 		for i204 = [0: 512]{
 			tmp732 = ((0 + (i203 * 512)) + (i204 * 1));
			tmp728[i203][i204] = tmp731[tmp732];
		};
	};
	ClearMemSecret1(131072, tmp731);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp693);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp726);

	int64_al[256][256] tmp735;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 512, tmp728, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_0/output/linear2/MatMul'} *)
	(* J517 * J24 *)
	MatMul2D(256, 512, 256, tmp728, tmp24, tmp735, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(512, 256, tmp24);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp728);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp108, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_0/output/linear2/BiasAdd'} *)
	(* J518 + J108 *)
	int64_al[256][256] tmp738;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp738[i0][i1] = (tmp735[i0][i1] + tmp108[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp108);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp735);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp685, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_0/output/add'} *)
	(* J506 + J519 *)
	int64_al[256][256] tmp741;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp741[i0][i1] = (tmp685[i0][i1] + tmp738[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp685);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp738);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/moments/mean'} *)
	int64_al tmp744;

	int64_al[256] tmp745;

	int64_al[256] tmp746;

	int64_al[256][1] tmp747;

	for i205 = [0: 256]{
 		tmp744 = 0L;
		for i206 = [0: 256]{
 			tmp744 = (tmp744 + tmp741[i205][i206]);
		};
		tmp745[(0 + (i205 * 1))] = tmp744;
	};
	ElemWiseVectorPublicDiv(256, tmp745, 256, tmp746);

	ClearMemSecret1(256, tmp745);

	for i205 = [0: 256]{
 		tmp747[i205][0] = tmp746[(0 + (i205 * 1))];
	};
	ClearMemSecret1(256, tmp746);

	int64_al[256][1] tmp748;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	for i207 = [0: 256]{
 		for i208 = [0: 1]{
 			tmp748[i207][i208] = (0L - tmp747[i207][i208]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	(* J520 + tmp748 *)
	int64_al[256][256] tmp749;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp749[i0][i1] = (tmp741[i0][i1] + tmp748[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/moments/SquaredDifference__mul'} *)
	(* J522 .* J522 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp749, 12);

	int64_al[256][256] tmp750;

	int64_al[65536] tmp751;

	int64_al[65536] tmp752;

	int64_al[65536] tmp753;

	int32_pl tmp754;

	for i209 = [0: 256]{
 		for i210 = [0: 256]{
 			tmp754 = ((0 + (i209 * 256)) + (i210 * 1));
			tmp751[tmp754] = tmp749[i209][i210];
			tmp752[tmp754] = tmp749[i209][i210];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp751, tmp752, tmp753);

	ClearMemSecret1(65536, tmp751);

	ClearMemSecret1(65536, tmp752);

	for i209 = [0: 256]{
 		for i210 = [0: 256]{
 			tmp754 = ((0 + (i209 * 256)) + (i210 * 1));
			tmp750[i209][i210] = tmp753[tmp754];
		};
	};
	ClearMemSecret1(65536, tmp753);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp749);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/moments/variance'} *)
	int64_al tmp756;

	int64_al[256] tmp757;

	int64_al[256] tmp758;

	int64_al[256][1] tmp759;

	for i211 = [0: 256]{
 		tmp756 = 0L;
		for i212 = [0: 256]{
 			tmp756 = (tmp756 + tmp750[i211][i212]);
		};
		tmp757[(0 + (i211 * 1))] = tmp756;
	};
	ElemWiseVectorPublicDiv(256, tmp757, 256, tmp758);

	ClearMemSecret1(256, tmp757);

	for i211 = [0: 256]{
 		tmp759[i211][0] = tmp758[(0 + (i211 * 1))];
	};
	ClearMemSecret1(256, tmp758);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp750);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/batchnorm/add'} *)
	(* J15 + J524 *)
	int64_al[256][1] tmp761;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp761[i0][i1] = (tmp15 + tmp759[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp759);

	int64_al[256][1] tmp763;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp761, tmp763, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp761);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/batchnorm/mul'} *)
	(* J526 .* J75 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp763, 12);

	int64_al[256][256] tmp765;

	int64_al[65536] tmp766;

	int64_al[65536] tmp767;

	int64_al[65536] tmp768;

	int32_pl tmp769;

	for i213 = [0: 256]{
 		for i214 = [0: 256]{
 			tmp769 = ((0 + (i213 * 256)) + (i214 * 1));
			tmp766[tmp769] = tmp763[i213][0];
			tmp767[tmp769] = tmp75[i214];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp766, tmp767, tmp768);

	ClearMemSecret1(65536, tmp766);

	ClearMemSecret1(65536, tmp767);

	for i213 = [0: 256]{
 		for i214 = [0: 256]{
 			tmp769 = ((0 + (i213 * 256)) + (i214 * 1));
			tmp765[i213][i214] = tmp768[tmp769];
		};
	};
	ClearMemSecret1(65536, tmp768);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp763);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp75);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/batchnorm/mul_2'} *)
	(* J527 .* J521 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp765, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp747, 12);

	int64_al[256][256] tmp772;

	int64_al[65536] tmp773;

	int64_al[65536] tmp774;

	int64_al[65536] tmp775;

	int32_pl tmp776;

	for i215 = [0: 256]{
 		for i216 = [0: 256]{
 			tmp776 = ((0 + (i215 * 256)) + (i216 * 1));
			tmp773[tmp776] = tmp765[i215][i216];
			tmp774[tmp776] = tmp747[i215][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp773, tmp774, tmp775);

	ClearMemSecret1(65536, tmp773);

	ClearMemSecret1(65536, tmp774);

	for i215 = [0: 256]{
 		for i216 = [0: 256]{
 			tmp776 = ((0 + (i215 * 256)) + (i216 * 1));
			tmp772[i215][i216] = tmp775[tmp776];
		};
	};
	ClearMemSecret1(65536, tmp775);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp747);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp67, 12);

	int64_al[256][256] tmp778;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/batchnorm/sub'} *)
	for i217 = [0: 256]{
 		for i218 = [0: 256]{
 			tmp778[i217][i218] = (0L - tmp772[i217][i218]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/batchnorm/sub'} *)
	(* J67 + tmp778 *)
	int64_al[256][256] tmp779;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp779[i0][i1] = (tmp67[i1] + tmp778[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp67);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp772);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/batchnorm/mul_1'} *)
	(* J520 .* J527 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp741, 12);

	int64_al[256][256] tmp782;

	int64_al[65536] tmp783;

	int64_al[65536] tmp784;

	int64_al[65536] tmp785;

	int32_pl tmp786;

	for i219 = [0: 256]{
 		for i220 = [0: 256]{
 			tmp786 = ((0 + (i219 * 256)) + (i220 * 1));
			tmp783[tmp786] = tmp741[i219][i220];
			tmp784[tmp786] = tmp765[i219][i220];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp783, tmp784, tmp785);

	ClearMemSecret1(65536, tmp783);

	ClearMemSecret1(65536, tmp784);

	for i219 = [0: 256]{
 		for i220 = [0: 256]{
 			tmp786 = ((0 + (i219 * 256)) + (i220 * 1));
			tmp782[i219][i220] = tmp785[tmp786];
		};
	};
	ClearMemSecret1(65536, tmp785);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp765);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/pre_norm/batchnorm/add_1'} *)
	(* J530 + J529 *)
	int64_al[256][256] tmp788;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp788[i0][i1] = (tmp782[i0][i1] + tmp779[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp782);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp779);

	int64_al[256][768] tmp791;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp788, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/qkv/MatMul'} *)
	(* J531 * J3 *)
	MatMul2D(256, 256, 768, tmp788, tmp3, tmp791, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp788);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp3);

	int64_al[256][3][4][64] tmp794;

	int64_pl i226;

	int64_pl i225;

	int64_pl i224;

	int64_pl i223;

	int64_pl i222;

	int64_pl i221;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Reshape'} *)
	(* reshape(J532, 256, 3, 4, 64) *)
	i221 = 0L;
	i222 = 0L;
	for i223 = [0: 256]{
 		for i224 = [0: 3]{
 			for i225 = [0: 4]{
 				for i226 = [0: 64]{
 					tmp794[i223][i224][i225][i226] = tmp791[i221][i222];
					i222 = (i222 + 1L);
					if ((i222 == 768L)) {
						i222 = 0L;
						i221 = (i221 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp791);

	int64_al[3][4][256][64] tmp796;

	int64_pl i230;

	int64_pl i229;

	int64_pl i228;

	int64_pl i227;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_1/attention/self/transpose'} *)
	(* transpose(J533, [256, 3, 4, 64] --> [3, 4, 256, 64]) *)
	for i227 = [0: 256]{
 		for i228 = [0: 3]{
 			for i229 = [0: 4]{
 				for i230 = [0: 64]{
 					tmp796[i228][i229][i227][i230] = tmp794[i227][i228][i229][i230];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 3, 4, 64, tmp794);

	int64_al[1][4][256][64] tmp798;

	int64_pl i234;

	int64_pl i233;

	int64_pl i232;

	int64_pl i231;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_2'} *)
	(* slice(J534, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i231 = [0: 1]{
 		for i232 = [0: 4]{
 			for i233 = [0: 256]{
 				for i234 = [0: 64]{
 					tmp798[i231][i232][i233][i234] = tmp796[(i231 + 2L)][(i232 + 0L)][(i233 + 0L)][(i234 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp799;

	int64_pl i238;

	int64_pl i237;

	int64_pl i236;

	int64_pl i235;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_18'} *)
	(* slice(J535, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i235 = [0: 1]{
 		for i236 = [0: 1]{
 			for i237 = [0: 256]{
 				for i238 = [0: 64]{
 					tmp799[i235][i236][i237][i238] = tmp798[(i235 + 0L)][(i236 + 3L)][(i237 + 0L)][(i238 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp800;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp799, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_15'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp799, tmp800);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp799);

	int64_al[1][1][256][64] tmp802;

	int64_pl i242;

	int64_pl i241;

	int64_pl i240;

	int64_pl i239;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_16'} *)
	(* slice(J535, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i239 = [0: 1]{
 		for i240 = [0: 1]{
 			for i241 = [0: 256]{
 				for i242 = [0: 64]{
 					tmp802[i239][i240][i241][i242] = tmp798[(i239 + 0L)][(i240 + 2L)][(i241 + 0L)][(i242 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp803;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp802, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_13'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp802, tmp803);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp802);

	int64_al[1][1][256][64] tmp805;

	int64_pl i246;

	int64_pl i245;

	int64_pl i244;

	int64_pl i243;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_14'} *)
	(* slice(J535, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i243 = [0: 1]{
 		for i244 = [0: 1]{
 			for i245 = [0: 256]{
 				for i246 = [0: 64]{
 					tmp805[i243][i244][i245][i246] = tmp798[(i243 + 0L)][(i244 + 1L)][(i245 + 0L)][(i246 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp806;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp805, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_11'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp805, tmp806);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp805);

	int64_al[1][1][256][64] tmp808;

	int64_pl i250;

	int64_pl i249;

	int64_pl i248;

	int64_pl i247;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_12'} *)
	(* slice(J535, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i247 = [0: 1]{
 		for i248 = [0: 1]{
 			for i249 = [0: 256]{
 				for i250 = [0: 64]{
 					tmp808[i247][i248][i249][i250] = tmp798[(i247 + 0L)][(i248 + 0L)][(i249 + 0L)][(i250 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp798);

	int64_al[256][64] tmp810;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp808, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_9'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp808, tmp810);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp808);

	int64_al[1][4][256][64] tmp812;

	int64_pl i254;

	int64_pl i253;

	int64_pl i252;

	int64_pl i251;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_1'} *)
	(* slice(J534, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i251 = [0: 1]{
 		for i252 = [0: 4]{
 			for i253 = [0: 256]{
 				for i254 = [0: 64]{
 					tmp812[i251][i252][i253][i254] = tmp796[(i251 + 1L)][(i252 + 0L)][(i253 + 0L)][(i254 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp813;

	int64_pl i258;

	int64_pl i257;

	int64_pl i256;

	int64_pl i255;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_10'} *)
	(* slice(J544, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i255 = [0: 1]{
 		for i256 = [0: 1]{
 			for i257 = [0: 256]{
 				for i258 = [0: 64]{
 					tmp813[i255][i256][i257][i258] = tmp812[(i255 + 0L)][(i256 + 3L)][(i257 + 0L)][(i258 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp814;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp813, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_7'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp813, tmp814);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp813);

	int64_al[1][1][256][64] tmp816;

	int64_pl i262;

	int64_pl i261;

	int64_pl i260;

	int64_pl i259;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_8'} *)
	(* slice(J544, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i259 = [0: 1]{
 		for i260 = [0: 1]{
 			for i261 = [0: 256]{
 				for i262 = [0: 64]{
 					tmp816[i259][i260][i261][i262] = tmp812[(i259 + 0L)][(i260 + 2L)][(i261 + 0L)][(i262 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp817;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp816, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_5'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp816, tmp817);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp816);

	int64_al[1][1][256][64] tmp819;

	int64_pl i266;

	int64_pl i265;

	int64_pl i264;

	int64_pl i263;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_6'} *)
	(* slice(J544, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i263 = [0: 1]{
 		for i264 = [0: 1]{
 			for i265 = [0: 256]{
 				for i266 = [0: 64]{
 					tmp819[i263][i264][i265][i266] = tmp812[(i263 + 0L)][(i264 + 1L)][(i265 + 0L)][(i266 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp820;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp819, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_3'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp819, tmp820);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp819);

	int64_al[1][1][256][64] tmp822;

	int64_pl i270;

	int64_pl i269;

	int64_pl i268;

	int64_pl i267;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_4'} *)
	(* slice(J544, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i267 = [0: 1]{
 		for i268 = [0: 1]{
 			for i269 = [0: 256]{
 				for i270 = [0: 64]{
 					tmp822[i267][i268][i269][i270] = tmp812[(i267 + 0L)][(i268 + 0L)][(i269 + 0L)][(i270 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp812);

	int64_al[256][64] tmp824;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp822, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_1'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp822, tmp824);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp822);

	int64_al[1][4][256][64] tmp826;

	int64_pl i274;

	int64_pl i273;

	int64_pl i272;

	int64_pl i271;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice'} *)
	(* slice(J534, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i271 = [0: 1]{
 		for i272 = [0: 4]{
 			for i273 = [0: 256]{
 				for i274 = [0: 64]{
 					tmp826[i271][i272][i273][i274] = tmp796[(i271 + 0L)][(i272 + 0L)][(i273 + 0L)][(i274 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 4, 256, 64, tmp796);

	int64_al[1][1][256][64] tmp828;

	int64_pl i278;

	int64_pl i277;

	int64_pl i276;

	int64_pl i275;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_9'} *)
	(* slice(J553, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i275 = [0: 1]{
 		for i276 = [0: 1]{
 			for i277 = [0: 256]{
 				for i278 = [0: 64]{
 					tmp828[i275][i276][i277][i278] = tmp826[(i275 + 0L)][(i276 + 3L)][(i277 + 0L)][(i278 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp829;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp828, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_6'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp828, tmp829);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp828);

	int64_al[256][256] tmp832;

	int64_al[64][256] tmp831;

	int64_pl i280;

	int64_pl i279;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* transpose(J546, [256, 64] --> [64, 256]) *)
	for i279 = [0: 256]{
 		for i280 = [0: 64]{
 			tmp831[i280][i279] = tmp814[i279][i280];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* J555 * tmp831 *)
	MatMul2D(256, 64, 256, tmp829, tmp831, tmp832, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp814);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp829);

	int64_al[1][1][256][256] tmp835;

	int64_pl i286;

	int64_pl i285;

	int64_pl i284;

	int64_pl i283;

	int64_pl i282;

	int64_pl i281;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Reshape_4'} *)
	(* reshape(J556, 1, 1, 256, 256) *)
	i281 = 0L;
	i282 = 0L;
	for i283 = [0: 1]{
 		for i284 = [0: 1]{
 			for i285 = [0: 256]{
 				for i286 = [0: 256]{
 					tmp835[i283][i284][i285][i286] = tmp832[i281][i282];
					i282 = (i282 + 1L);
					if ((i282 == 256L)) {
						i282 = 0L;
						i281 = (i281 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp832);

	int64_al[1][1][256][64] tmp837;

	int64_pl i290;

	int64_pl i289;

	int64_pl i288;

	int64_pl i287;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_7'} *)
	(* slice(J553, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i287 = [0: 1]{
 		for i288 = [0: 1]{
 			for i289 = [0: 256]{
 				for i290 = [0: 64]{
 					tmp837[i287][i288][i289][i290] = tmp826[(i287 + 0L)][(i288 + 2L)][(i289 + 0L)][(i290 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp838;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp837, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_4'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp837, tmp838);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp837);

	int64_al[256][256] tmp841;

	int64_al[64][256] tmp840;

	int64_pl i292;

	int64_pl i291;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* transpose(J548, [256, 64] --> [64, 256]) *)
	for i291 = [0: 256]{
 		for i292 = [0: 64]{
 			tmp840[i292][i291] = tmp817[i291][i292];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* J559 * tmp840 *)
	MatMul2D(256, 64, 256, tmp838, tmp840, tmp841, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp838);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp817);

	int64_al[1][1][256][256] tmp844;

	int64_pl i298;

	int64_pl i297;

	int64_pl i296;

	int64_pl i295;

	int64_pl i294;

	int64_pl i293;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Reshape_3'} *)
	(* reshape(J560, 1, 1, 256, 256) *)
	i293 = 0L;
	i294 = 0L;
	for i295 = [0: 1]{
 		for i296 = [0: 1]{
 			for i297 = [0: 256]{
 				for i298 = [0: 256]{
 					tmp844[i295][i296][i297][i298] = tmp841[i293][i294];
					i294 = (i294 + 1L);
					if ((i294 == 256L)) {
						i294 = 0L;
						i293 = (i293 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp841);

	int64_al[1][1][256][64] tmp846;

	int64_pl i302;

	int64_pl i301;

	int64_pl i300;

	int64_pl i299;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_5'} *)
	(* slice(J553, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i299 = [0: 1]{
 		for i300 = [0: 1]{
 			for i301 = [0: 256]{
 				for i302 = [0: 64]{
 					tmp846[i299][i300][i301][i302] = tmp826[(i299 + 0L)][(i300 + 1L)][(i301 + 0L)][(i302 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp847;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp846, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_2'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp846, tmp847);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp846);

	int64_al[256][256] tmp850;

	int64_al[64][256] tmp849;

	int64_pl i304;

	int64_pl i303;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* transpose(J550, [256, 64] --> [64, 256]) *)
	for i303 = [0: 256]{
 		for i304 = [0: 64]{
 			tmp849[i304][i303] = tmp820[i303][i304];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* J563 * tmp849 *)
	MatMul2D(256, 64, 256, tmp847, tmp849, tmp850, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp820);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp847);

	int64_al[1][1][256][256] tmp853;

	int64_pl i310;

	int64_pl i309;

	int64_pl i308;

	int64_pl i307;

	int64_pl i306;

	int64_pl i305;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Reshape_2'} *)
	(* reshape(J564, 1, 1, 256, 256) *)
	i305 = 0L;
	i306 = 0L;
	for i307 = [0: 1]{
 		for i308 = [0: 1]{
 			for i309 = [0: 256]{
 				for i310 = [0: 256]{
 					tmp853[i307][i308][i309][i310] = tmp850[i305][i306];
					i306 = (i306 + 1L);
					if ((i306 == 256L)) {
						i306 = 0L;
						i305 = (i305 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp850);

	int64_al[1][1][256][64] tmp855;

	int64_pl i314;

	int64_pl i313;

	int64_pl i312;

	int64_pl i311;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_3'} *)
	(* slice(J553, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i311 = [0: 1]{
 		for i312 = [0: 1]{
 			for i313 = [0: 256]{
 				for i314 = [0: 64]{
 					tmp855[i311][i312][i313][i314] = tmp826[(i311 + 0L)][(i312 + 0L)][(i313 + 0L)][(i314 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp826);

	int64_al[256][64] tmp857;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp855, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp855, tmp857);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp855);

	int64_al[256][256] tmp860;

	int64_al[64][256] tmp859;

	int64_pl i316;

	int64_pl i315;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* transpose(J552, [256, 64] --> [64, 256]) *)
	for i315 = [0: 256]{
 		for i316 = [0: 64]{
 			tmp859[i316][i315] = tmp824[i315][i316];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* J567 * tmp859 *)
	MatMul2D(256, 64, 256, tmp857, tmp859, tmp860, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp857);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp824);

	int64_al[1][1][256][256] tmp863;

	int64_pl i322;

	int64_pl i321;

	int64_pl i320;

	int64_pl i319;

	int64_pl i318;

	int64_pl i317;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Reshape_1'} *)
	(* reshape(J568, 1, 1, 256, 256) *)
	i317 = 0L;
	i318 = 0L;
	for i319 = [0: 1]{
 		for i320 = [0: 1]{
 			for i321 = [0: 256]{
 				for i322 = [0: 256]{
 					tmp863[i319][i320][i321][i322] = tmp860[i317][i318];
					i318 = (i318 + 1L);
					if ((i318 == 256L)) {
						i318 = 0L;
						i317 = (i317 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp860);

	int64_al[1][4][256][256] tmp865;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp835, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp844, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp853, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp863, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/concat_2'} *)
	Concat4T44444(1, 4, 256, 256, 1, 1, 256, 256, tmp863, 1, 1, 256, 256, tmp853, 1, 1, 256, 256, tmp844, 1, 1, 256, 256, tmp835, 1, tmp865);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp835);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp844);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp853);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp863);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Mul'} *)
	(* J47 .* J570 *)
	int64_al[1][4][256][256] tmp871;

	int64_al[262144] tmp872;

	int64_al[262144] tmp873;

	int64_al[262144] tmp874;

	int32_pl tmp875;

	for i323 = [0: 1]{
 		for i324 = [0: 4]{
 			for i325 = [0: 256]{
 				for i326 = [0: 256]{
 					tmp875 = ((((0 + (i323 * 262144)) + (i324 * 65536)) + (i325 * 256)) + (i326 * 1));
					tmp872[tmp875] = tmp47;
					tmp873[tmp875] = tmp865[i323][i324][i325][i326];
				};
			};
		};
	};
	ElemWiseActModelVectorMult(262144, tmp873, tmp872, tmp874);

	ClearMemSecret1(262144, tmp872);

	ClearMemSecret1(262144, tmp873);

	for i323 = [0: 1]{
 		for i324 = [0: 4]{
 			for i325 = [0: 256]{
 				for i326 = [0: 256]{
 					tmp875 = ((((0 + (i323 * 262144)) + (i324 * 65536)) + (i325 * 256)) + (i326 * 1));
					tmp871[i323][i324][i325][i326] = tmp874[tmp875];
				};
			};
		};
	};
	ClearMemSecret1(262144, tmp874);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp865);

	int64_al[1][4][256][256] tmp877;

	(* {'TFOpName': 'Softmax', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Softmax'} *)
	Softmax4(1, 4, 256, 256, tmp871, tmp877);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp871);

	int64_al[1][1][256][256] tmp879;

	int64_pl i330;

	int64_pl i329;

	int64_pl i328;

	int64_pl i327;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_17'} *)
	(* slice(J572, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i327 = [0: 1]{
 		for i328 = [0: 1]{
 			for i329 = [0: 256]{
 				for i330 = [0: 256]{
 					tmp879[i327][i328][i329][i330] = tmp877[(i327 + 0L)][(i328 + 3L)][(i329 + 0L)][(i330 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp880;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp879, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_14'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp879, tmp880);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp879);

	int64_al[256][64] tmp882;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/MatMul_7'} *)
	(* J574 * J537 *)
	MatMul2D(256, 256, 64, tmp880, tmp800, tmp882, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp880);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp800);

	int64_al[1][1][256][64] tmp885;

	int64_pl i336;

	int64_pl i335;

	int64_pl i334;

	int64_pl i333;

	int64_pl i332;

	int64_pl i331;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Reshape_8'} *)
	(* reshape(J575, 1, 1, 256, 64) *)
	i331 = 0L;
	i332 = 0L;
	for i333 = [0: 1]{
 		for i334 = [0: 1]{
 			for i335 = [0: 256]{
 				for i336 = [0: 64]{
 					tmp885[i333][i334][i335][i336] = tmp882[i331][i332];
					i332 = (i332 + 1L);
					if ((i332 == 64L)) {
						i332 = 0L;
						i331 = (i331 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp882);

	int64_al[1][1][256][256] tmp887;

	int64_pl i340;

	int64_pl i339;

	int64_pl i338;

	int64_pl i337;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_15'} *)
	(* slice(J572, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i337 = [0: 1]{
 		for i338 = [0: 1]{
 			for i339 = [0: 256]{
 				for i340 = [0: 256]{
 					tmp887[i337][i338][i339][i340] = tmp877[(i337 + 0L)][(i338 + 2L)][(i339 + 0L)][(i340 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp888;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp887, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_12'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp887, tmp888);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp887);

	int64_al[256][64] tmp890;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/MatMul_6'} *)
	(* J578 * J539 *)
	MatMul2D(256, 256, 64, tmp888, tmp803, tmp890, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp888);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp803);

	int64_al[1][1][256][64] tmp893;

	int64_pl i346;

	int64_pl i345;

	int64_pl i344;

	int64_pl i343;

	int64_pl i342;

	int64_pl i341;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Reshape_7'} *)
	(* reshape(J579, 1, 1, 256, 64) *)
	i341 = 0L;
	i342 = 0L;
	for i343 = [0: 1]{
 		for i344 = [0: 1]{
 			for i345 = [0: 256]{
 				for i346 = [0: 64]{
 					tmp893[i343][i344][i345][i346] = tmp890[i341][i342];
					i342 = (i342 + 1L);
					if ((i342 == 64L)) {
						i342 = 0L;
						i341 = (i341 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp890);

	int64_al[1][1][256][256] tmp895;

	int64_pl i350;

	int64_pl i349;

	int64_pl i348;

	int64_pl i347;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_13'} *)
	(* slice(J572, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i347 = [0: 1]{
 		for i348 = [0: 1]{
 			for i349 = [0: 256]{
 				for i350 = [0: 256]{
 					tmp895[i347][i348][i349][i350] = tmp877[(i347 + 0L)][(i348 + 1L)][(i349 + 0L)][(i350 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp896;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp895, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_10'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp895, tmp896);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp895);

	int64_al[256][64] tmp898;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/MatMul_5'} *)
	(* J582 * J541 *)
	MatMul2D(256, 256, 64, tmp896, tmp806, tmp898, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp806);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp896);

	int64_al[1][1][256][64] tmp901;

	int64_pl i356;

	int64_pl i355;

	int64_pl i354;

	int64_pl i353;

	int64_pl i352;

	int64_pl i351;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Reshape_6'} *)
	(* reshape(J583, 1, 1, 256, 64) *)
	i351 = 0L;
	i352 = 0L;
	for i353 = [0: 1]{
 		for i354 = [0: 1]{
 			for i355 = [0: 256]{
 				for i356 = [0: 64]{
 					tmp901[i353][i354][i355][i356] = tmp898[i351][i352];
					i352 = (i352 + 1L);
					if ((i352 == 64L)) {
						i352 = 0L;
						i351 = (i351 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp898);

	int64_al[1][1][256][256] tmp903;

	int64_pl i360;

	int64_pl i359;

	int64_pl i358;

	int64_pl i357;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Slice_11'} *)
	(* slice(J572, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i357 = [0: 1]{
 		for i358 = [0: 1]{
 			for i359 = [0: 256]{
 				for i360 = [0: 256]{
 					tmp903[i357][i358][i359][i360] = tmp877[(i357 + 0L)][(i358 + 0L)][(i359 + 0L)][(i360 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp877);

	int64_al[256][256] tmp905;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp903, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Squeeze_8'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp903, tmp905);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp903);

	int64_al[256][64] tmp907;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/MatMul_4'} *)
	(* J586 * J543 *)
	MatMul2D(256, 256, 64, tmp905, tmp810, tmp907, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp810);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp905);

	int64_al[1][1][256][64] tmp910;

	int64_pl i366;

	int64_pl i365;

	int64_pl i364;

	int64_pl i363;

	int64_pl i362;

	int64_pl i361;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Reshape_5'} *)
	(* reshape(J587, 1, 1, 256, 64) *)
	i361 = 0L;
	i362 = 0L;
	for i363 = [0: 1]{
 		for i364 = [0: 1]{
 			for i365 = [0: 256]{
 				for i366 = [0: 64]{
 					tmp910[i363][i364][i365][i366] = tmp907[i361][i362];
					i362 = (i362 + 1L);
					if ((i362 == 64L)) {
						i362 = 0L;
						i361 = (i361 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp907);

	int64_al[1][4][256][64] tmp912;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp885, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp893, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp901, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp910, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_1/attention/self/concat_5'} *)
	Concat4T44444(1, 4, 256, 64, 1, 1, 256, 64, tmp910, 1, 1, 256, 64, tmp901, 1, 1, 256, 64, tmp893, 1, 1, 256, 64, tmp885, 1, tmp912);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp910);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp893);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp901);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp885);

	int64_al[1][256][4][64] tmp918;

	int64_pl i370;

	int64_pl i369;

	int64_pl i368;

	int64_pl i367;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_1/attention/self/transpose_5'} *)
	(* transpose(J589, [1, 4, 256, 64] --> [1, 256, 4, 64]) *)
	for i367 = [0: 1]{
 		for i368 = [0: 4]{
 			for i369 = [0: 256]{
 				for i370 = [0: 64]{
 					tmp918[i367][i369][i368][i370] = tmp912[i367][i368][i369][i370];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp912);

	int64_al[256][256] tmp920;

	int64_pl i376;

	int64_pl i375;

	int64_pl i374;

	int64_pl i373;

	int64_pl i372;

	int64_pl i371;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_1/attention/self/Reshape_9'} *)
	(* reshape(J590, 256, 256) *)
	i371 = 0L;
	i372 = 0L;
	i373 = 0L;
	i374 = 0L;
	for i375 = [0: 256]{
 		for i376 = [0: 256]{
 			tmp920[i375][i376] = tmp918[i371][i372][i373][i374];
			i374 = (i374 + 1L);
			if ((i374 == 64L)) {
				i374 = 0L;
				i373 = (i373 + 1L);
				if ((i373 == 4L)) {
					i373 = 0L;
					i372 = (i372 + 1L);
					if ((i372 == 256L)) {
						i372 = 0L;
						i371 = (i371 + 1L);
					}
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 4, 64, tmp918);

	int64_al[256][256] tmp922;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/attention/self/proj/MatMul'} *)
	(* J591 * J104 *)
	MatMul2D(256, 256, 256, tmp920, tmp104, tmp922, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp920);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp104);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp30, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_1/attention/self/proj/BiasAdd'} *)
	(* J592 + J30 *)
	int64_al[256][256] tmp925;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp925[i0][i1] = (tmp922[i0][i1] + tmp30[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp30);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp922);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp741, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_1/attention/output/add'} *)
	(* J520 + J593 *)
	int64_al[256][256] tmp928;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp928[i0][i1] = (tmp741[i0][i1] + tmp925[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp925);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp741);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/moments/mean'} *)
	int64_al tmp931;

	int64_al[256] tmp932;

	int64_al[256] tmp933;

	int64_al[256][1] tmp934;

	for i377 = [0: 256]{
 		tmp931 = 0L;
		for i378 = [0: 256]{
 			tmp931 = (tmp931 + tmp928[i377][i378]);
		};
		tmp932[(0 + (i377 * 1))] = tmp931;
	};
	ElemWiseVectorPublicDiv(256, tmp932, 256, tmp933);

	ClearMemSecret1(256, tmp932);

	for i377 = [0: 256]{
 		tmp934[i377][0] = tmp933[(0 + (i377 * 1))];
	};
	ClearMemSecret1(256, tmp933);

	int64_al[256][1] tmp935;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/moments/SquaredDifference__sub'} *)
	for i379 = [0: 256]{
 		for i380 = [0: 1]{
 			tmp935[i379][i380] = (0L - tmp934[i379][i380]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/moments/SquaredDifference__sub'} *)
	(* J594 + tmp935 *)
	int64_al[256][256] tmp936;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp936[i0][i1] = (tmp928[i0][i1] + tmp935[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/moments/SquaredDifference__mul'} *)
	(* J596 .* J596 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp936, 12);

	int64_al[256][256] tmp937;

	int64_al[65536] tmp938;

	int64_al[65536] tmp939;

	int64_al[65536] tmp940;

	int32_pl tmp941;

	for i381 = [0: 256]{
 		for i382 = [0: 256]{
 			tmp941 = ((0 + (i381 * 256)) + (i382 * 1));
			tmp938[tmp941] = tmp936[i381][i382];
			tmp939[tmp941] = tmp936[i381][i382];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp938, tmp939, tmp940);

	ClearMemSecret1(65536, tmp938);

	ClearMemSecret1(65536, tmp939);

	for i381 = [0: 256]{
 		for i382 = [0: 256]{
 			tmp941 = ((0 + (i381 * 256)) + (i382 * 1));
			tmp937[i381][i382] = tmp940[tmp941];
		};
	};
	ClearMemSecret1(65536, tmp940);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp936);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/moments/variance'} *)
	int64_al tmp943;

	int64_al[256] tmp944;

	int64_al[256] tmp945;

	int64_al[256][1] tmp946;

	for i383 = [0: 256]{
 		tmp943 = 0L;
		for i384 = [0: 256]{
 			tmp943 = (tmp943 + tmp937[i383][i384]);
		};
		tmp944[(0 + (i383 * 1))] = tmp943;
	};
	ElemWiseVectorPublicDiv(256, tmp944, 256, tmp945);

	ClearMemSecret1(256, tmp944);

	for i383 = [0: 256]{
 		tmp946[i383][0] = tmp945[(0 + (i383 * 1))];
	};
	ClearMemSecret1(256, tmp945);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp937);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/batchnorm/add'} *)
	(* J15 + J598 *)
	int64_al[256][1] tmp948;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp948[i0][i1] = (tmp15 + tmp946[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp946);

	int64_al[256][1] tmp950;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp948, tmp950, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp948);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/batchnorm/mul'} *)
	(* J600 .* J55 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp950, 12);

	int64_al[256][256] tmp952;

	int64_al[65536] tmp953;

	int64_al[65536] tmp954;

	int64_al[65536] tmp955;

	int32_pl tmp956;

	for i385 = [0: 256]{
 		for i386 = [0: 256]{
 			tmp956 = ((0 + (i385 * 256)) + (i386 * 1));
			tmp953[tmp956] = tmp950[i385][0];
			tmp954[tmp956] = tmp55[i386];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp953, tmp954, tmp955);

	ClearMemSecret1(65536, tmp953);

	ClearMemSecret1(65536, tmp954);

	for i385 = [0: 256]{
 		for i386 = [0: 256]{
 			tmp956 = ((0 + (i385 * 256)) + (i386 * 1));
			tmp952[i385][i386] = tmp955[tmp956];
		};
	};
	ClearMemSecret1(65536, tmp955);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp55);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp950);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/batchnorm/mul_2'} *)
	(* J601 .* J595 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp952, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp934, 12);

	int64_al[256][256] tmp959;

	int64_al[65536] tmp960;

	int64_al[65536] tmp961;

	int64_al[65536] tmp962;

	int32_pl tmp963;

	for i387 = [0: 256]{
 		for i388 = [0: 256]{
 			tmp963 = ((0 + (i387 * 256)) + (i388 * 1));
			tmp960[tmp963] = tmp952[i387][i388];
			tmp961[tmp963] = tmp934[i387][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp960, tmp961, tmp962);

	ClearMemSecret1(65536, tmp960);

	ClearMemSecret1(65536, tmp961);

	for i387 = [0: 256]{
 		for i388 = [0: 256]{
 			tmp963 = ((0 + (i387 * 256)) + (i388 * 1));
			tmp959[i387][i388] = tmp962[tmp963];
		};
	};
	ClearMemSecret1(65536, tmp962);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp934);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp25, 12);

	int64_al[256][256] tmp965;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/batchnorm/sub'} *)
	for i389 = [0: 256]{
 		for i390 = [0: 256]{
 			tmp965[i389][i390] = (0L - tmp959[i389][i390]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/batchnorm/sub'} *)
	(* J25 + tmp965 *)
	int64_al[256][256] tmp966;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp966[i0][i1] = (tmp25[i1] + tmp965[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp959);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp25);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/batchnorm/mul_1'} *)
	(* J594 .* J601 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp928, 12);

	int64_al[256][256] tmp969;

	int64_al[65536] tmp970;

	int64_al[65536] tmp971;

	int64_al[65536] tmp972;

	int32_pl tmp973;

	for i391 = [0: 256]{
 		for i392 = [0: 256]{
 			tmp973 = ((0 + (i391 * 256)) + (i392 * 1));
			tmp970[tmp973] = tmp928[i391][i392];
			tmp971[tmp973] = tmp952[i391][i392];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp970, tmp971, tmp972);

	ClearMemSecret1(65536, tmp970);

	ClearMemSecret1(65536, tmp971);

	for i391 = [0: 256]{
 		for i392 = [0: 256]{
 			tmp973 = ((0 + (i391 * 256)) + (i392 * 1));
			tmp969[i391][i392] = tmp972[tmp973];
		};
	};
	ClearMemSecret1(65536, tmp972);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp952);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp928);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_1/attention/output/norm1/batchnorm/add_1'} *)
	(* J604 + J603 *)
	int64_al[256][256] tmp976;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp976[i0][i1] = (tmp969[i0][i1] + tmp966[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp969);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp966);

	int64_al[256][512] tmp979;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp976, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/linear1/MatMul'} *)
	(* J605 * J4 *)
	MatMul2D(256, 256, 512, tmp976, tmp4, tmp979, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp4);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(512, tmp87, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_1/linear1/BiasAdd'} *)
	(* J606 + J87 *)
	int64_al[256][512] tmp981;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp981[i0][i1] = (tmp979[i0][i1] + tmp87[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp979);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp87);

	(* {'TFOpName': 'Square', 'TFNodeName': 'bert/encoder/layer_1/linear1/ArithmeticOptimizer/ReplaceMulWithSquare_mul_1'} *)
	(* J607 .* J607 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp981, 12);

	int64_al[256][512] tmp984;

	int64_al[131072] tmp985;

	int64_al[131072] tmp986;

	int64_al[131072] tmp987;

	int32_pl tmp988;

	for i393 = [0: 256]{
 		for i394 = [0: 512]{
 			tmp988 = ((0 + (i393 * 512)) + (i394 * 1));
			tmp985[tmp988] = tmp981[i393][i394];
			tmp986[tmp988] = tmp981[i393][i394];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp985, tmp986, tmp987);

	ClearMemSecret1(131072, tmp985);

	ClearMemSecret1(131072, tmp986);

	for i393 = [0: 256]{
 		for i394 = [0: 512]{
 			tmp988 = ((0 + (i393 * 512)) + (i394 * 1));
			tmp984[i393][i394] = tmp987[tmp988];
		};
	};
	ClearMemSecret1(131072, tmp987);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/linear1/mul_4'} *)
	(* J6 .* J607 *)
	int64_al[256][512] tmp989;

	int64_al[131072] tmp990;

	int64_al[131072] tmp991;

	int64_al[131072] tmp992;

	int32_pl tmp993;

	for i395 = [0: 256]{
 		for i396 = [0: 512]{
 			tmp993 = ((0 + (i395 * 512)) + (i396 * 1));
			tmp990[tmp993] = tmp6;
			tmp991[tmp993] = tmp981[i395][i396];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp991, tmp990, tmp992);

	ClearMemSecret1(131072, tmp990);

	ClearMemSecret1(131072, tmp991);

	for i395 = [0: 256]{
 		for i396 = [0: 512]{
 			tmp993 = ((0 + (i395 * 512)) + (i396 * 1));
			tmp989[i395][i396] = tmp992[tmp993];
		};
	};
	ClearMemSecret1(131072, tmp992);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/linear1/mul'} *)
	(* J72 .* J607 *)
	int64_al[256][512] tmp994;

	int64_al[131072] tmp995;

	int64_al[131072] tmp996;

	int64_al[131072] tmp997;

	int32_pl tmp998;

	for i397 = [0: 256]{
 		for i398 = [0: 512]{
 			tmp998 = ((0 + (i397 * 512)) + (i398 * 1));
			tmp995[tmp998] = tmp72;
			tmp996[tmp998] = tmp981[i397][i398];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp996, tmp995, tmp997);

	ClearMemSecret1(131072, tmp995);

	ClearMemSecret1(131072, tmp996);

	for i397 = [0: 256]{
 		for i398 = [0: 512]{
 			tmp998 = ((0 + (i397 * 512)) + (i398 * 1));
			tmp994[i397][i398] = tmp997[tmp998];
		};
	};
	ClearMemSecret1(131072, tmp997);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/linear1/mul_2'} *)
	(* J608 .* J610 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp984, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp994, 12);

	int64_al[256][512] tmp999;

	int64_al[131072] tmp1000;

	int64_al[131072] tmp1001;

	int64_al[131072] tmp1002;

	int32_pl tmp1003;

	for i399 = [0: 256]{
 		for i400 = [0: 512]{
 			tmp1003 = ((0 + (i399 * 512)) + (i400 * 1));
			tmp1000[tmp1003] = tmp984[i399][i400];
			tmp1001[tmp1003] = tmp994[i399][i400];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1000, tmp1001, tmp1002);

	ClearMemSecret1(131072, tmp1000);

	ClearMemSecret1(131072, tmp1001);

	for i399 = [0: 256]{
 		for i400 = [0: 512]{
 			tmp1003 = ((0 + (i399 * 512)) + (i400 * 1));
			tmp999[i399][i400] = tmp1002[tmp1003];
		};
	};
	ClearMemSecret1(131072, tmp1002);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp994);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp984);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 512, tmp981, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_1/linear1/add'} *)
	(* J607 + J611 *)
	int64_al[256][512] tmp1006;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1006[i0][i1] = (tmp981[i0][i1] + tmp999[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp999);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp981);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/linear1/mul_3'} *)
	(* J106 .* J612 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1006, 12);

	int64_al[256][512] tmp1009;

	int64_al[131072] tmp1010;

	int64_al[131072] tmp1011;

	int64_al[131072] tmp1012;

	int32_pl tmp1013;

	for i401 = [0: 256]{
 		for i402 = [0: 512]{
 			tmp1013 = ((0 + (i401 * 512)) + (i402 * 1));
			tmp1010[tmp1013] = tmp106;
			tmp1011[tmp1013] = tmp1006[i401][i402];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp1011, tmp1010, tmp1012);

	ClearMemSecret1(131072, tmp1010);

	ClearMemSecret1(131072, tmp1011);

	for i401 = [0: 256]{
 		for i402 = [0: 512]{
 			tmp1013 = ((0 + (i401 * 512)) + (i402 * 1));
			tmp1009[i401][i402] = tmp1012[tmp1013];
		};
	};
	ClearMemSecret1(131072, tmp1012);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1006);

	int64_al[256][512] tmp1015;

	(* {'TFOpName': 'Tanh', 'TFNodeName': 'bert/encoder/layer_1/linear1/Tanh'} *)
	Tanh2(256, 512, tmp1009, tmp1015, 24, 24, 32, 64, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1009);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_1/linear1/add_1'} *)
	(* J80 + J614 *)
	int64_al[256][512] tmp1017;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1017[i0][i1] = (tmp80 + tmp1015[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1015);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_1/linear1/mul_5'} *)
	(* J615 .* J609 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1017, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp989, 12);

	int64_al[256][512] tmp1019;

	int64_al[131072] tmp1020;

	int64_al[131072] tmp1021;

	int64_al[131072] tmp1022;

	int32_pl tmp1023;

	for i403 = [0: 256]{
 		for i404 = [0: 512]{
 			tmp1023 = ((0 + (i403 * 512)) + (i404 * 1));
			tmp1020[tmp1023] = tmp1017[i403][i404];
			tmp1021[tmp1023] = tmp989[i403][i404];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1020, tmp1021, tmp1022);

	ClearMemSecret1(131072, tmp1020);

	ClearMemSecret1(131072, tmp1021);

	for i403 = [0: 256]{
 		for i404 = [0: 512]{
 			tmp1023 = ((0 + (i403 * 512)) + (i404 * 1));
			tmp1019[i403][i404] = tmp1022[tmp1023];
		};
	};
	ClearMemSecret1(131072, tmp1022);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp989);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1017);

	int64_al[256][256] tmp1026;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 512, tmp1019, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_1/output/linear2/MatMul'} *)
	(* J616 * J14 *)
	MatMul2D(256, 512, 256, tmp1019, tmp14, tmp1026, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(512, 256, tmp14);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1019);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp97, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_1/output/linear2/BiasAdd'} *)
	(* J617 + J97 *)
	int64_al[256][256] tmp1029;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1029[i0][i1] = (tmp1026[i0][i1] + tmp97[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp97);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1026);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp976, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_1/output/add'} *)
	(* J605 + J618 *)
	int64_al[256][256] tmp1032;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1032[i0][i1] = (tmp976[i0][i1] + tmp1029[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp976);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1029);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/moments/mean'} *)
	int64_al tmp1035;

	int64_al[256] tmp1036;

	int64_al[256] tmp1037;

	int64_al[256][1] tmp1038;

	for i405 = [0: 256]{
 		tmp1035 = 0L;
		for i406 = [0: 256]{
 			tmp1035 = (tmp1035 + tmp1032[i405][i406]);
		};
		tmp1036[(0 + (i405 * 1))] = tmp1035;
	};
	ElemWiseVectorPublicDiv(256, tmp1036, 256, tmp1037);

	ClearMemSecret1(256, tmp1036);

	for i405 = [0: 256]{
 		tmp1038[i405][0] = tmp1037[(0 + (i405 * 1))];
	};
	ClearMemSecret1(256, tmp1037);

	int64_al[256][1] tmp1039;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	for i407 = [0: 256]{
 		for i408 = [0: 1]{
 			tmp1039[i407][i408] = (0L - tmp1038[i407][i408]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	(* J619 + tmp1039 *)
	int64_al[256][256] tmp1040;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1040[i0][i1] = (tmp1032[i0][i1] + tmp1039[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/moments/SquaredDifference__mul'} *)
	(* J621 .* J621 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1040, 12);

	int64_al[256][256] tmp1041;

	int64_al[65536] tmp1042;

	int64_al[65536] tmp1043;

	int64_al[65536] tmp1044;

	int32_pl tmp1045;

	for i409 = [0: 256]{
 		for i410 = [0: 256]{
 			tmp1045 = ((0 + (i409 * 256)) + (i410 * 1));
			tmp1042[tmp1045] = tmp1040[i409][i410];
			tmp1043[tmp1045] = tmp1040[i409][i410];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1042, tmp1043, tmp1044);

	ClearMemSecret1(65536, tmp1042);

	ClearMemSecret1(65536, tmp1043);

	for i409 = [0: 256]{
 		for i410 = [0: 256]{
 			tmp1045 = ((0 + (i409 * 256)) + (i410 * 1));
			tmp1041[i409][i410] = tmp1044[tmp1045];
		};
	};
	ClearMemSecret1(65536, tmp1044);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1040);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/moments/variance'} *)
	int64_al tmp1047;

	int64_al[256] tmp1048;

	int64_al[256] tmp1049;

	int64_al[256][1] tmp1050;

	for i411 = [0: 256]{
 		tmp1047 = 0L;
		for i412 = [0: 256]{
 			tmp1047 = (tmp1047 + tmp1041[i411][i412]);
		};
		tmp1048[(0 + (i411 * 1))] = tmp1047;
	};
	ElemWiseVectorPublicDiv(256, tmp1048, 256, tmp1049);

	ClearMemSecret1(256, tmp1048);

	for i411 = [0: 256]{
 		tmp1050[i411][0] = tmp1049[(0 + (i411 * 1))];
	};
	ClearMemSecret1(256, tmp1049);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1041);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/batchnorm/add'} *)
	(* J15 + J623 *)
	int64_al[256][1] tmp1052;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp1052[i0][i1] = (tmp15 + tmp1050[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1050);

	int64_al[256][1] tmp1054;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp1052, tmp1054, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1052);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/batchnorm/mul'} *)
	(* J625 .* J69 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1054, 12);

	int64_al[256][256] tmp1056;

	int64_al[65536] tmp1057;

	int64_al[65536] tmp1058;

	int64_al[65536] tmp1059;

	int32_pl tmp1060;

	for i413 = [0: 256]{
 		for i414 = [0: 256]{
 			tmp1060 = ((0 + (i413 * 256)) + (i414 * 1));
			tmp1057[tmp1060] = tmp1054[i413][0];
			tmp1058[tmp1060] = tmp69[i414];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp1057, tmp1058, tmp1059);

	ClearMemSecret1(65536, tmp1057);

	ClearMemSecret1(65536, tmp1058);

	for i413 = [0: 256]{
 		for i414 = [0: 256]{
 			tmp1060 = ((0 + (i413 * 256)) + (i414 * 1));
			tmp1056[i413][i414] = tmp1059[tmp1060];
		};
	};
	ClearMemSecret1(65536, tmp1059);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1054);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp69);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/batchnorm/mul_2'} *)
	(* J626 .* J620 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1056, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1038, 12);

	int64_al[256][256] tmp1063;

	int64_al[65536] tmp1064;

	int64_al[65536] tmp1065;

	int64_al[65536] tmp1066;

	int32_pl tmp1067;

	for i415 = [0: 256]{
 		for i416 = [0: 256]{
 			tmp1067 = ((0 + (i415 * 256)) + (i416 * 1));
			tmp1064[tmp1067] = tmp1056[i415][i416];
			tmp1065[tmp1067] = tmp1038[i415][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1064, tmp1065, tmp1066);

	ClearMemSecret1(65536, tmp1064);

	ClearMemSecret1(65536, tmp1065);

	for i415 = [0: 256]{
 		for i416 = [0: 256]{
 			tmp1067 = ((0 + (i415 * 256)) + (i416 * 1));
			tmp1063[i415][i416] = tmp1066[tmp1067];
		};
	};
	ClearMemSecret1(65536, tmp1066);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1038);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp18, 12);

	int64_al[256][256] tmp1069;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/batchnorm/sub'} *)
	for i417 = [0: 256]{
 		for i418 = [0: 256]{
 			tmp1069[i417][i418] = (0L - tmp1063[i417][i418]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/batchnorm/sub'} *)
	(* J18 + tmp1069 *)
	int64_al[256][256] tmp1070;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1070[i0][i1] = (tmp18[i1] + tmp1069[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1063);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp18);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/batchnorm/mul_1'} *)
	(* J619 .* J626 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1032, 12);

	int64_al[256][256] tmp1073;

	int64_al[65536] tmp1074;

	int64_al[65536] tmp1075;

	int64_al[65536] tmp1076;

	int32_pl tmp1077;

	for i419 = [0: 256]{
 		for i420 = [0: 256]{
 			tmp1077 = ((0 + (i419 * 256)) + (i420 * 1));
			tmp1074[tmp1077] = tmp1032[i419][i420];
			tmp1075[tmp1077] = tmp1056[i419][i420];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1074, tmp1075, tmp1076);

	ClearMemSecret1(65536, tmp1074);

	ClearMemSecret1(65536, tmp1075);

	for i419 = [0: 256]{
 		for i420 = [0: 256]{
 			tmp1077 = ((0 + (i419 * 256)) + (i420 * 1));
			tmp1073[i419][i420] = tmp1076[tmp1077];
		};
	};
	ClearMemSecret1(65536, tmp1076);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1056);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/pre_norm/batchnorm/add_1'} *)
	(* J629 + J628 *)
	int64_al[256][256] tmp1079;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1079[i0][i1] = (tmp1073[i0][i1] + tmp1070[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1070);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1073);

	int64_al[256][768] tmp1082;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp1079, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/qkv/MatMul'} *)
	(* J630 * J7 *)
	MatMul2D(256, 256, 768, tmp1079, tmp7, tmp1082, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp7);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1079);

	int64_al[256][3][4][64] tmp1085;

	int64_pl i426;

	int64_pl i425;

	int64_pl i424;

	int64_pl i423;

	int64_pl i422;

	int64_pl i421;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Reshape'} *)
	(* reshape(J631, 256, 3, 4, 64) *)
	i421 = 0L;
	i422 = 0L;
	for i423 = [0: 256]{
 		for i424 = [0: 3]{
 			for i425 = [0: 4]{
 				for i426 = [0: 64]{
 					tmp1085[i423][i424][i425][i426] = tmp1082[i421][i422];
					i422 = (i422 + 1L);
					if ((i422 == 768L)) {
						i422 = 0L;
						i421 = (i421 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp1082);

	int64_al[3][4][256][64] tmp1087;

	int64_pl i430;

	int64_pl i429;

	int64_pl i428;

	int64_pl i427;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_2/attention/self/transpose'} *)
	(* transpose(J632, [256, 3, 4, 64] --> [3, 4, 256, 64]) *)
	for i427 = [0: 256]{
 		for i428 = [0: 3]{
 			for i429 = [0: 4]{
 				for i430 = [0: 64]{
 					tmp1087[i428][i429][i427][i430] = tmp1085[i427][i428][i429][i430];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 3, 4, 64, tmp1085);

	int64_al[1][4][256][64] tmp1089;

	int64_pl i434;

	int64_pl i433;

	int64_pl i432;

	int64_pl i431;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_2'} *)
	(* slice(J633, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i431 = [0: 1]{
 		for i432 = [0: 4]{
 			for i433 = [0: 256]{
 				for i434 = [0: 64]{
 					tmp1089[i431][i432][i433][i434] = tmp1087[(i431 + 2L)][(i432 + 0L)][(i433 + 0L)][(i434 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp1090;

	int64_pl i438;

	int64_pl i437;

	int64_pl i436;

	int64_pl i435;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_18'} *)
	(* slice(J634, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i435 = [0: 1]{
 		for i436 = [0: 1]{
 			for i437 = [0: 256]{
 				for i438 = [0: 64]{
 					tmp1090[i435][i436][i437][i438] = tmp1089[(i435 + 0L)][(i436 + 3L)][(i437 + 0L)][(i438 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1091;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1090, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_15'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1090, tmp1091);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1090);

	int64_al[1][1][256][64] tmp1093;

	int64_pl i442;

	int64_pl i441;

	int64_pl i440;

	int64_pl i439;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_16'} *)
	(* slice(J634, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i439 = [0: 1]{
 		for i440 = [0: 1]{
 			for i441 = [0: 256]{
 				for i442 = [0: 64]{
 					tmp1093[i439][i440][i441][i442] = tmp1089[(i439 + 0L)][(i440 + 2L)][(i441 + 0L)][(i442 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1094;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1093, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_13'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1093, tmp1094);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1093);

	int64_al[1][1][256][64] tmp1096;

	int64_pl i446;

	int64_pl i445;

	int64_pl i444;

	int64_pl i443;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_14'} *)
	(* slice(J634, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i443 = [0: 1]{
 		for i444 = [0: 1]{
 			for i445 = [0: 256]{
 				for i446 = [0: 64]{
 					tmp1096[i443][i444][i445][i446] = tmp1089[(i443 + 0L)][(i444 + 1L)][(i445 + 0L)][(i446 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1097;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1096, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_11'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1096, tmp1097);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1096);

	int64_al[1][1][256][64] tmp1099;

	int64_pl i450;

	int64_pl i449;

	int64_pl i448;

	int64_pl i447;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_12'} *)
	(* slice(J634, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i447 = [0: 1]{
 		for i448 = [0: 1]{
 			for i449 = [0: 256]{
 				for i450 = [0: 64]{
 					tmp1099[i447][i448][i449][i450] = tmp1089[(i447 + 0L)][(i448 + 0L)][(i449 + 0L)][(i450 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1089);

	int64_al[256][64] tmp1101;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1099, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_9'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1099, tmp1101);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1099);

	int64_al[1][4][256][64] tmp1103;

	int64_pl i454;

	int64_pl i453;

	int64_pl i452;

	int64_pl i451;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_1'} *)
	(* slice(J633, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i451 = [0: 1]{
 		for i452 = [0: 4]{
 			for i453 = [0: 256]{
 				for i454 = [0: 64]{
 					tmp1103[i451][i452][i453][i454] = tmp1087[(i451 + 1L)][(i452 + 0L)][(i453 + 0L)][(i454 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp1104;

	int64_pl i458;

	int64_pl i457;

	int64_pl i456;

	int64_pl i455;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_10'} *)
	(* slice(J643, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i455 = [0: 1]{
 		for i456 = [0: 1]{
 			for i457 = [0: 256]{
 				for i458 = [0: 64]{
 					tmp1104[i455][i456][i457][i458] = tmp1103[(i455 + 0L)][(i456 + 3L)][(i457 + 0L)][(i458 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1105;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1104, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_7'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1104, tmp1105);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1104);

	int64_al[1][1][256][64] tmp1107;

	int64_pl i462;

	int64_pl i461;

	int64_pl i460;

	int64_pl i459;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_8'} *)
	(* slice(J643, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i459 = [0: 1]{
 		for i460 = [0: 1]{
 			for i461 = [0: 256]{
 				for i462 = [0: 64]{
 					tmp1107[i459][i460][i461][i462] = tmp1103[(i459 + 0L)][(i460 + 2L)][(i461 + 0L)][(i462 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1108;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1107, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_5'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1107, tmp1108);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1107);

	int64_al[1][1][256][64] tmp1110;

	int64_pl i466;

	int64_pl i465;

	int64_pl i464;

	int64_pl i463;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_6'} *)
	(* slice(J643, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i463 = [0: 1]{
 		for i464 = [0: 1]{
 			for i465 = [0: 256]{
 				for i466 = [0: 64]{
 					tmp1110[i463][i464][i465][i466] = tmp1103[(i463 + 0L)][(i464 + 1L)][(i465 + 0L)][(i466 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1111;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1110, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_3'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1110, tmp1111);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1110);

	int64_al[1][1][256][64] tmp1113;

	int64_pl i470;

	int64_pl i469;

	int64_pl i468;

	int64_pl i467;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_4'} *)
	(* slice(J643, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i467 = [0: 1]{
 		for i468 = [0: 1]{
 			for i469 = [0: 256]{
 				for i470 = [0: 64]{
 					tmp1113[i467][i468][i469][i470] = tmp1103[(i467 + 0L)][(i468 + 0L)][(i469 + 0L)][(i470 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1103);

	int64_al[256][64] tmp1115;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1113, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_1'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1113, tmp1115);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1113);

	int64_al[1][4][256][64] tmp1117;

	int64_pl i474;

	int64_pl i473;

	int64_pl i472;

	int64_pl i471;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice'} *)
	(* slice(J633, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i471 = [0: 1]{
 		for i472 = [0: 4]{
 			for i473 = [0: 256]{
 				for i474 = [0: 64]{
 					tmp1117[i471][i472][i473][i474] = tmp1087[(i471 + 0L)][(i472 + 0L)][(i473 + 0L)][(i474 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 4, 256, 64, tmp1087);

	int64_al[1][1][256][64] tmp1119;

	int64_pl i478;

	int64_pl i477;

	int64_pl i476;

	int64_pl i475;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_9'} *)
	(* slice(J652, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i475 = [0: 1]{
 		for i476 = [0: 1]{
 			for i477 = [0: 256]{
 				for i478 = [0: 64]{
 					tmp1119[i475][i476][i477][i478] = tmp1117[(i475 + 0L)][(i476 + 3L)][(i477 + 0L)][(i478 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1120;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1119, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_6'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1119, tmp1120);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1119);

	int64_al[256][256] tmp1123;

	int64_al[64][256] tmp1122;

	int64_pl i480;

	int64_pl i479;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* transpose(J645, [256, 64] --> [64, 256]) *)
	for i479 = [0: 256]{
 		for i480 = [0: 64]{
 			tmp1122[i480][i479] = tmp1105[i479][i480];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* J654 * tmp1122 *)
	MatMul2D(256, 64, 256, tmp1120, tmp1122, tmp1123, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1105);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1120);

	int64_al[1][1][256][256] tmp1126;

	int64_pl i486;

	int64_pl i485;

	int64_pl i484;

	int64_pl i483;

	int64_pl i482;

	int64_pl i481;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Reshape_4'} *)
	(* reshape(J655, 1, 1, 256, 256) *)
	i481 = 0L;
	i482 = 0L;
	for i483 = [0: 1]{
 		for i484 = [0: 1]{
 			for i485 = [0: 256]{
 				for i486 = [0: 256]{
 					tmp1126[i483][i484][i485][i486] = tmp1123[i481][i482];
					i482 = (i482 + 1L);
					if ((i482 == 256L)) {
						i482 = 0L;
						i481 = (i481 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1123);

	int64_al[1][1][256][64] tmp1128;

	int64_pl i490;

	int64_pl i489;

	int64_pl i488;

	int64_pl i487;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_7'} *)
	(* slice(J652, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i487 = [0: 1]{
 		for i488 = [0: 1]{
 			for i489 = [0: 256]{
 				for i490 = [0: 64]{
 					tmp1128[i487][i488][i489][i490] = tmp1117[(i487 + 0L)][(i488 + 2L)][(i489 + 0L)][(i490 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1129;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1128, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_4'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1128, tmp1129);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1128);

	int64_al[256][256] tmp1132;

	int64_al[64][256] tmp1131;

	int64_pl i492;

	int64_pl i491;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* transpose(J647, [256, 64] --> [64, 256]) *)
	for i491 = [0: 256]{
 		for i492 = [0: 64]{
 			tmp1131[i492][i491] = tmp1108[i491][i492];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* J658 * tmp1131 *)
	MatMul2D(256, 64, 256, tmp1129, tmp1131, tmp1132, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1108);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1129);

	int64_al[1][1][256][256] tmp1135;

	int64_pl i498;

	int64_pl i497;

	int64_pl i496;

	int64_pl i495;

	int64_pl i494;

	int64_pl i493;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Reshape_3'} *)
	(* reshape(J659, 1, 1, 256, 256) *)
	i493 = 0L;
	i494 = 0L;
	for i495 = [0: 1]{
 		for i496 = [0: 1]{
 			for i497 = [0: 256]{
 				for i498 = [0: 256]{
 					tmp1135[i495][i496][i497][i498] = tmp1132[i493][i494];
					i494 = (i494 + 1L);
					if ((i494 == 256L)) {
						i494 = 0L;
						i493 = (i493 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1132);

	int64_al[1][1][256][64] tmp1137;

	int64_pl i502;

	int64_pl i501;

	int64_pl i500;

	int64_pl i499;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_5'} *)
	(* slice(J652, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i499 = [0: 1]{
 		for i500 = [0: 1]{
 			for i501 = [0: 256]{
 				for i502 = [0: 64]{
 					tmp1137[i499][i500][i501][i502] = tmp1117[(i499 + 0L)][(i500 + 1L)][(i501 + 0L)][(i502 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1138;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1137, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_2'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1137, tmp1138);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1137);

	int64_al[256][256] tmp1141;

	int64_al[64][256] tmp1140;

	int64_pl i504;

	int64_pl i503;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* transpose(J649, [256, 64] --> [64, 256]) *)
	for i503 = [0: 256]{
 		for i504 = [0: 64]{
 			tmp1140[i504][i503] = tmp1111[i503][i504];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* J662 * tmp1140 *)
	MatMul2D(256, 64, 256, tmp1138, tmp1140, tmp1141, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1111);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1138);

	int64_al[1][1][256][256] tmp1144;

	int64_pl i510;

	int64_pl i509;

	int64_pl i508;

	int64_pl i507;

	int64_pl i506;

	int64_pl i505;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Reshape_2'} *)
	(* reshape(J663, 1, 1, 256, 256) *)
	i505 = 0L;
	i506 = 0L;
	for i507 = [0: 1]{
 		for i508 = [0: 1]{
 			for i509 = [0: 256]{
 				for i510 = [0: 256]{
 					tmp1144[i507][i508][i509][i510] = tmp1141[i505][i506];
					i506 = (i506 + 1L);
					if ((i506 == 256L)) {
						i506 = 0L;
						i505 = (i505 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1141);

	int64_al[1][1][256][64] tmp1146;

	int64_pl i514;

	int64_pl i513;

	int64_pl i512;

	int64_pl i511;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_3'} *)
	(* slice(J652, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i511 = [0: 1]{
 		for i512 = [0: 1]{
 			for i513 = [0: 256]{
 				for i514 = [0: 64]{
 					tmp1146[i511][i512][i513][i514] = tmp1117[(i511 + 0L)][(i512 + 0L)][(i513 + 0L)][(i514 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1117);

	int64_al[256][64] tmp1148;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1146, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1146, tmp1148);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1146);

	int64_al[256][256] tmp1151;

	int64_al[64][256] tmp1150;

	int64_pl i516;

	int64_pl i515;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* transpose(J651, [256, 64] --> [64, 256]) *)
	for i515 = [0: 256]{
 		for i516 = [0: 64]{
 			tmp1150[i516][i515] = tmp1115[i515][i516];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* J666 * tmp1150 *)
	MatMul2D(256, 64, 256, tmp1148, tmp1150, tmp1151, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1115);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1148);

	int64_al[1][1][256][256] tmp1154;

	int64_pl i522;

	int64_pl i521;

	int64_pl i520;

	int64_pl i519;

	int64_pl i518;

	int64_pl i517;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Reshape_1'} *)
	(* reshape(J667, 1, 1, 256, 256) *)
	i517 = 0L;
	i518 = 0L;
	for i519 = [0: 1]{
 		for i520 = [0: 1]{
 			for i521 = [0: 256]{
 				for i522 = [0: 256]{
 					tmp1154[i519][i520][i521][i522] = tmp1151[i517][i518];
					i518 = (i518 + 1L);
					if ((i518 == 256L)) {
						i518 = 0L;
						i517 = (i517 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1151);

	int64_al[1][4][256][256] tmp1156;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1126, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1135, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1144, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1154, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/concat_2'} *)
	Concat4T44444(1, 4, 256, 256, 1, 1, 256, 256, tmp1154, 1, 1, 256, 256, tmp1144, 1, 1, 256, 256, tmp1135, 1, 1, 256, 256, tmp1126, 1, tmp1156);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1126);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1144);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1135);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1154);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Mul'} *)
	(* J47 .* J669 *)
	int64_al[1][4][256][256] tmp1162;

	int64_al[262144] tmp1163;

	int64_al[262144] tmp1164;

	int64_al[262144] tmp1165;

	int32_pl tmp1166;

	for i523 = [0: 1]{
 		for i524 = [0: 4]{
 			for i525 = [0: 256]{
 				for i526 = [0: 256]{
 					tmp1166 = ((((0 + (i523 * 262144)) + (i524 * 65536)) + (i525 * 256)) + (i526 * 1));
					tmp1163[tmp1166] = tmp47;
					tmp1164[tmp1166] = tmp1156[i523][i524][i525][i526];
				};
			};
		};
	};
	ElemWiseActModelVectorMult(262144, tmp1164, tmp1163, tmp1165);

	ClearMemSecret1(262144, tmp1163);

	ClearMemSecret1(262144, tmp1164);

	for i523 = [0: 1]{
 		for i524 = [0: 4]{
 			for i525 = [0: 256]{
 				for i526 = [0: 256]{
 					tmp1166 = ((((0 + (i523 * 262144)) + (i524 * 65536)) + (i525 * 256)) + (i526 * 1));
					tmp1162[i523][i524][i525][i526] = tmp1165[tmp1166];
				};
			};
		};
	};
	ClearMemSecret1(262144, tmp1165);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp1156);

	int64_al[1][4][256][256] tmp1168;

	(* {'TFOpName': 'Softmax', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Softmax'} *)
	Softmax4(1, 4, 256, 256, tmp1162, tmp1168);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp1162);

	int64_al[1][1][256][256] tmp1170;

	int64_pl i530;

	int64_pl i529;

	int64_pl i528;

	int64_pl i527;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_17'} *)
	(* slice(J671, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i527 = [0: 1]{
 		for i528 = [0: 1]{
 			for i529 = [0: 256]{
 				for i530 = [0: 256]{
 					tmp1170[i527][i528][i529][i530] = tmp1168[(i527 + 0L)][(i528 + 3L)][(i529 + 0L)][(i530 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp1171;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1170, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_14'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1170, tmp1171);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1170);

	int64_al[256][64] tmp1173;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/MatMul_7'} *)
	(* J673 * J636 *)
	MatMul2D(256, 256, 64, tmp1171, tmp1091, tmp1173, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1171);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1091);

	int64_al[1][1][256][64] tmp1176;

	int64_pl i536;

	int64_pl i535;

	int64_pl i534;

	int64_pl i533;

	int64_pl i532;

	int64_pl i531;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Reshape_8'} *)
	(* reshape(J674, 1, 1, 256, 64) *)
	i531 = 0L;
	i532 = 0L;
	for i533 = [0: 1]{
 		for i534 = [0: 1]{
 			for i535 = [0: 256]{
 				for i536 = [0: 64]{
 					tmp1176[i533][i534][i535][i536] = tmp1173[i531][i532];
					i532 = (i532 + 1L);
					if ((i532 == 64L)) {
						i532 = 0L;
						i531 = (i531 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1173);

	int64_al[1][1][256][256] tmp1178;

	int64_pl i540;

	int64_pl i539;

	int64_pl i538;

	int64_pl i537;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_15'} *)
	(* slice(J671, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i537 = [0: 1]{
 		for i538 = [0: 1]{
 			for i539 = [0: 256]{
 				for i540 = [0: 256]{
 					tmp1178[i537][i538][i539][i540] = tmp1168[(i537 + 0L)][(i538 + 2L)][(i539 + 0L)][(i540 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp1179;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1178, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_12'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1178, tmp1179);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1178);

	int64_al[256][64] tmp1181;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/MatMul_6'} *)
	(* J677 * J638 *)
	MatMul2D(256, 256, 64, tmp1179, tmp1094, tmp1181, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1094);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1179);

	int64_al[1][1][256][64] tmp1184;

	int64_pl i546;

	int64_pl i545;

	int64_pl i544;

	int64_pl i543;

	int64_pl i542;

	int64_pl i541;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Reshape_7'} *)
	(* reshape(J678, 1, 1, 256, 64) *)
	i541 = 0L;
	i542 = 0L;
	for i543 = [0: 1]{
 		for i544 = [0: 1]{
 			for i545 = [0: 256]{
 				for i546 = [0: 64]{
 					tmp1184[i543][i544][i545][i546] = tmp1181[i541][i542];
					i542 = (i542 + 1L);
					if ((i542 == 64L)) {
						i542 = 0L;
						i541 = (i541 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1181);

	int64_al[1][1][256][256] tmp1186;

	int64_pl i550;

	int64_pl i549;

	int64_pl i548;

	int64_pl i547;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_13'} *)
	(* slice(J671, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i547 = [0: 1]{
 		for i548 = [0: 1]{
 			for i549 = [0: 256]{
 				for i550 = [0: 256]{
 					tmp1186[i547][i548][i549][i550] = tmp1168[(i547 + 0L)][(i548 + 1L)][(i549 + 0L)][(i550 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp1187;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1186, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_10'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1186, tmp1187);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1186);

	int64_al[256][64] tmp1189;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/MatMul_5'} *)
	(* J681 * J640 *)
	MatMul2D(256, 256, 64, tmp1187, tmp1097, tmp1189, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1187);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1097);

	int64_al[1][1][256][64] tmp1192;

	int64_pl i556;

	int64_pl i555;

	int64_pl i554;

	int64_pl i553;

	int64_pl i552;

	int64_pl i551;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Reshape_6'} *)
	(* reshape(J682, 1, 1, 256, 64) *)
	i551 = 0L;
	i552 = 0L;
	for i553 = [0: 1]{
 		for i554 = [0: 1]{
 			for i555 = [0: 256]{
 				for i556 = [0: 64]{
 					tmp1192[i553][i554][i555][i556] = tmp1189[i551][i552];
					i552 = (i552 + 1L);
					if ((i552 == 64L)) {
						i552 = 0L;
						i551 = (i551 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1189);

	int64_al[1][1][256][256] tmp1194;

	int64_pl i560;

	int64_pl i559;

	int64_pl i558;

	int64_pl i557;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Slice_11'} *)
	(* slice(J671, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i557 = [0: 1]{
 		for i558 = [0: 1]{
 			for i559 = [0: 256]{
 				for i560 = [0: 256]{
 					tmp1194[i557][i558][i559][i560] = tmp1168[(i557 + 0L)][(i558 + 0L)][(i559 + 0L)][(i560 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp1168);

	int64_al[256][256] tmp1196;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1194, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Squeeze_8'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1194, tmp1196);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1194);

	int64_al[256][64] tmp1198;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/MatMul_4'} *)
	(* J685 * J642 *)
	MatMul2D(256, 256, 64, tmp1196, tmp1101, tmp1198, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1196);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1101);

	int64_al[1][1][256][64] tmp1201;

	int64_pl i566;

	int64_pl i565;

	int64_pl i564;

	int64_pl i563;

	int64_pl i562;

	int64_pl i561;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Reshape_5'} *)
	(* reshape(J686, 1, 1, 256, 64) *)
	i561 = 0L;
	i562 = 0L;
	for i563 = [0: 1]{
 		for i564 = [0: 1]{
 			for i565 = [0: 256]{
 				for i566 = [0: 64]{
 					tmp1201[i563][i564][i565][i566] = tmp1198[i561][i562];
					i562 = (i562 + 1L);
					if ((i562 == 64L)) {
						i562 = 0L;
						i561 = (i561 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1198);

	int64_al[1][4][256][64] tmp1203;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1176, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1184, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1192, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1201, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_2/attention/self/concat_5'} *)
	Concat4T44444(1, 4, 256, 64, 1, 1, 256, 64, tmp1201, 1, 1, 256, 64, tmp1192, 1, 1, 256, 64, tmp1184, 1, 1, 256, 64, tmp1176, 1, tmp1203);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1176);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1201);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1184);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1192);

	int64_al[1][256][4][64] tmp1209;

	int64_pl i570;

	int64_pl i569;

	int64_pl i568;

	int64_pl i567;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_2/attention/self/transpose_5'} *)
	(* transpose(J688, [1, 4, 256, 64] --> [1, 256, 4, 64]) *)
	for i567 = [0: 1]{
 		for i568 = [0: 4]{
 			for i569 = [0: 256]{
 				for i570 = [0: 64]{
 					tmp1209[i567][i569][i568][i570] = tmp1203[i567][i568][i569][i570];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1203);

	int64_al[256][256] tmp1211;

	int64_pl i576;

	int64_pl i575;

	int64_pl i574;

	int64_pl i573;

	int64_pl i572;

	int64_pl i571;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_2/attention/self/Reshape_9'} *)
	(* reshape(J689, 256, 256) *)
	i571 = 0L;
	i572 = 0L;
	i573 = 0L;
	i574 = 0L;
	for i575 = [0: 256]{
 		for i576 = [0: 256]{
 			tmp1211[i575][i576] = tmp1209[i571][i572][i573][i574];
			i574 = (i574 + 1L);
			if ((i574 == 64L)) {
				i574 = 0L;
				i573 = (i573 + 1L);
				if ((i573 == 4L)) {
					i573 = 0L;
					i572 = (i572 + 1L);
					if ((i572 == 256L)) {
						i572 = 0L;
						i571 = (i571 + 1L);
					}
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 4, 64, tmp1209);

	int64_al[256][256] tmp1213;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/attention/self/proj/MatMul'} *)
	(* J690 * J76 *)
	MatMul2D(256, 256, 256, tmp1211, tmp76, tmp1213, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp76);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1211);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp107, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_2/attention/self/proj/BiasAdd'} *)
	(* J691 + J107 *)
	int64_al[256][256] tmp1216;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1216[i0][i1] = (tmp1213[i0][i1] + tmp107[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1213);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp107);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp1032, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_2/attention/output/add'} *)
	(* J619 + J692 *)
	int64_al[256][256] tmp1219;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1219[i0][i1] = (tmp1032[i0][i1] + tmp1216[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1216);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1032);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/moments/mean'} *)
	int64_al tmp1222;

	int64_al[256] tmp1223;

	int64_al[256] tmp1224;

	int64_al[256][1] tmp1225;

	for i577 = [0: 256]{
 		tmp1222 = 0L;
		for i578 = [0: 256]{
 			tmp1222 = (tmp1222 + tmp1219[i577][i578]);
		};
		tmp1223[(0 + (i577 * 1))] = tmp1222;
	};
	ElemWiseVectorPublicDiv(256, tmp1223, 256, tmp1224);

	ClearMemSecret1(256, tmp1223);

	for i577 = [0: 256]{
 		tmp1225[i577][0] = tmp1224[(0 + (i577 * 1))];
	};
	ClearMemSecret1(256, tmp1224);

	int64_al[256][1] tmp1226;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/moments/SquaredDifference__sub'} *)
	for i579 = [0: 256]{
 		for i580 = [0: 1]{
 			tmp1226[i579][i580] = (0L - tmp1225[i579][i580]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/moments/SquaredDifference__sub'} *)
	(* J693 + tmp1226 *)
	int64_al[256][256] tmp1227;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1227[i0][i1] = (tmp1219[i0][i1] + tmp1226[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/moments/SquaredDifference__mul'} *)
	(* J695 .* J695 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1227, 12);

	int64_al[256][256] tmp1228;

	int64_al[65536] tmp1229;

	int64_al[65536] tmp1230;

	int64_al[65536] tmp1231;

	int32_pl tmp1232;

	for i581 = [0: 256]{
 		for i582 = [0: 256]{
 			tmp1232 = ((0 + (i581 * 256)) + (i582 * 1));
			tmp1229[tmp1232] = tmp1227[i581][i582];
			tmp1230[tmp1232] = tmp1227[i581][i582];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1229, tmp1230, tmp1231);

	ClearMemSecret1(65536, tmp1229);

	ClearMemSecret1(65536, tmp1230);

	for i581 = [0: 256]{
 		for i582 = [0: 256]{
 			tmp1232 = ((0 + (i581 * 256)) + (i582 * 1));
			tmp1228[i581][i582] = tmp1231[tmp1232];
		};
	};
	ClearMemSecret1(65536, tmp1231);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1227);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/moments/variance'} *)
	int64_al tmp1234;

	int64_al[256] tmp1235;

	int64_al[256] tmp1236;

	int64_al[256][1] tmp1237;

	for i583 = [0: 256]{
 		tmp1234 = 0L;
		for i584 = [0: 256]{
 			tmp1234 = (tmp1234 + tmp1228[i583][i584]);
		};
		tmp1235[(0 + (i583 * 1))] = tmp1234;
	};
	ElemWiseVectorPublicDiv(256, tmp1235, 256, tmp1236);

	ClearMemSecret1(256, tmp1235);

	for i583 = [0: 256]{
 		tmp1237[i583][0] = tmp1236[(0 + (i583 * 1))];
	};
	ClearMemSecret1(256, tmp1236);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1228);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/batchnorm/add'} *)
	(* J15 + J697 *)
	int64_al[256][1] tmp1239;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp1239[i0][i1] = (tmp15 + tmp1237[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1237);

	int64_al[256][1] tmp1241;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp1239, tmp1241, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1239);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/batchnorm/mul'} *)
	(* J699 .* J29 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1241, 12);

	int64_al[256][256] tmp1243;

	int64_al[65536] tmp1244;

	int64_al[65536] tmp1245;

	int64_al[65536] tmp1246;

	int32_pl tmp1247;

	for i585 = [0: 256]{
 		for i586 = [0: 256]{
 			tmp1247 = ((0 + (i585 * 256)) + (i586 * 1));
			tmp1244[tmp1247] = tmp1241[i585][0];
			tmp1245[tmp1247] = tmp29[i586];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp1244, tmp1245, tmp1246);

	ClearMemSecret1(65536, tmp1244);

	ClearMemSecret1(65536, tmp1245);

	for i585 = [0: 256]{
 		for i586 = [0: 256]{
 			tmp1247 = ((0 + (i585 * 256)) + (i586 * 1));
			tmp1243[i585][i586] = tmp1246[tmp1247];
		};
	};
	ClearMemSecret1(65536, tmp1246);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1241);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp29);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/batchnorm/mul_2'} *)
	(* J700 .* J694 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1243, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1225, 12);

	int64_al[256][256] tmp1250;

	int64_al[65536] tmp1251;

	int64_al[65536] tmp1252;

	int64_al[65536] tmp1253;

	int32_pl tmp1254;

	for i587 = [0: 256]{
 		for i588 = [0: 256]{
 			tmp1254 = ((0 + (i587 * 256)) + (i588 * 1));
			tmp1251[tmp1254] = tmp1243[i587][i588];
			tmp1252[tmp1254] = tmp1225[i587][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1251, tmp1252, tmp1253);

	ClearMemSecret1(65536, tmp1251);

	ClearMemSecret1(65536, tmp1252);

	for i587 = [0: 256]{
 		for i588 = [0: 256]{
 			tmp1254 = ((0 + (i587 * 256)) + (i588 * 1));
			tmp1250[i587][i588] = tmp1253[tmp1254];
		};
	};
	ClearMemSecret1(65536, tmp1253);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1225);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp101, 12);

	int64_al[256][256] tmp1256;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/batchnorm/sub'} *)
	for i589 = [0: 256]{
 		for i590 = [0: 256]{
 			tmp1256[i589][i590] = (0L - tmp1250[i589][i590]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/batchnorm/sub'} *)
	(* J101 + tmp1256 *)
	int64_al[256][256] tmp1257;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1257[i0][i1] = (tmp101[i1] + tmp1256[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp101);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1250);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/batchnorm/mul_1'} *)
	(* J693 .* J700 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1219, 12);

	int64_al[256][256] tmp1260;

	int64_al[65536] tmp1261;

	int64_al[65536] tmp1262;

	int64_al[65536] tmp1263;

	int32_pl tmp1264;

	for i591 = [0: 256]{
 		for i592 = [0: 256]{
 			tmp1264 = ((0 + (i591 * 256)) + (i592 * 1));
			tmp1261[tmp1264] = tmp1219[i591][i592];
			tmp1262[tmp1264] = tmp1243[i591][i592];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1261, tmp1262, tmp1263);

	ClearMemSecret1(65536, tmp1261);

	ClearMemSecret1(65536, tmp1262);

	for i591 = [0: 256]{
 		for i592 = [0: 256]{
 			tmp1264 = ((0 + (i591 * 256)) + (i592 * 1));
			tmp1260[i591][i592] = tmp1263[tmp1264];
		};
	};
	ClearMemSecret1(65536, tmp1263);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1219);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1243);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_2/attention/output/norm1/batchnorm/add_1'} *)
	(* J703 + J702 *)
	int64_al[256][256] tmp1267;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1267[i0][i1] = (tmp1260[i0][i1] + tmp1257[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1257);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1260);

	int64_al[256][512] tmp1270;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp1267, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/linear1/MatMul'} *)
	(* J704 * J17 *)
	MatMul2D(256, 256, 512, tmp1267, tmp17, tmp1270, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp17);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(512, tmp81, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_2/linear1/BiasAdd'} *)
	(* J705 + J81 *)
	int64_al[256][512] tmp1272;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1272[i0][i1] = (tmp1270[i0][i1] + tmp81[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1270);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp81);

	(* {'TFOpName': 'Square', 'TFNodeName': 'bert/encoder/layer_2/linear1/ArithmeticOptimizer/ReplaceMulWithSquare_mul_1'} *)
	(* J706 .* J706 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1272, 12);

	int64_al[256][512] tmp1275;

	int64_al[131072] tmp1276;

	int64_al[131072] tmp1277;

	int64_al[131072] tmp1278;

	int32_pl tmp1279;

	for i593 = [0: 256]{
 		for i594 = [0: 512]{
 			tmp1279 = ((0 + (i593 * 512)) + (i594 * 1));
			tmp1276[tmp1279] = tmp1272[i593][i594];
			tmp1277[tmp1279] = tmp1272[i593][i594];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1276, tmp1277, tmp1278);

	ClearMemSecret1(131072, tmp1276);

	ClearMemSecret1(131072, tmp1277);

	for i593 = [0: 256]{
 		for i594 = [0: 512]{
 			tmp1279 = ((0 + (i593 * 512)) + (i594 * 1));
			tmp1275[i593][i594] = tmp1278[tmp1279];
		};
	};
	ClearMemSecret1(131072, tmp1278);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/linear1/mul_4'} *)
	(* J6 .* J706 *)
	int64_al[256][512] tmp1280;

	int64_al[131072] tmp1281;

	int64_al[131072] tmp1282;

	int64_al[131072] tmp1283;

	int32_pl tmp1284;

	for i595 = [0: 256]{
 		for i596 = [0: 512]{
 			tmp1284 = ((0 + (i595 * 512)) + (i596 * 1));
			tmp1281[tmp1284] = tmp6;
			tmp1282[tmp1284] = tmp1272[i595][i596];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp1282, tmp1281, tmp1283);

	ClearMemSecret1(131072, tmp1281);

	ClearMemSecret1(131072, tmp1282);

	for i595 = [0: 256]{
 		for i596 = [0: 512]{
 			tmp1284 = ((0 + (i595 * 512)) + (i596 * 1));
			tmp1280[i595][i596] = tmp1283[tmp1284];
		};
	};
	ClearMemSecret1(131072, tmp1283);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/linear1/mul'} *)
	(* J72 .* J706 *)
	int64_al[256][512] tmp1285;

	int64_al[131072] tmp1286;

	int64_al[131072] tmp1287;

	int64_al[131072] tmp1288;

	int32_pl tmp1289;

	for i597 = [0: 256]{
 		for i598 = [0: 512]{
 			tmp1289 = ((0 + (i597 * 512)) + (i598 * 1));
			tmp1286[tmp1289] = tmp72;
			tmp1287[tmp1289] = tmp1272[i597][i598];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp1287, tmp1286, tmp1288);

	ClearMemSecret1(131072, tmp1286);

	ClearMemSecret1(131072, tmp1287);

	for i597 = [0: 256]{
 		for i598 = [0: 512]{
 			tmp1289 = ((0 + (i597 * 512)) + (i598 * 1));
			tmp1285[i597][i598] = tmp1288[tmp1289];
		};
	};
	ClearMemSecret1(131072, tmp1288);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/linear1/mul_2'} *)
	(* J707 .* J709 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1275, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1285, 12);

	int64_al[256][512] tmp1290;

	int64_al[131072] tmp1291;

	int64_al[131072] tmp1292;

	int64_al[131072] tmp1293;

	int32_pl tmp1294;

	for i599 = [0: 256]{
 		for i600 = [0: 512]{
 			tmp1294 = ((0 + (i599 * 512)) + (i600 * 1));
			tmp1291[tmp1294] = tmp1275[i599][i600];
			tmp1292[tmp1294] = tmp1285[i599][i600];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1291, tmp1292, tmp1293);

	ClearMemSecret1(131072, tmp1291);

	ClearMemSecret1(131072, tmp1292);

	for i599 = [0: 256]{
 		for i600 = [0: 512]{
 			tmp1294 = ((0 + (i599 * 512)) + (i600 * 1));
			tmp1290[i599][i600] = tmp1293[tmp1294];
		};
	};
	ClearMemSecret1(131072, tmp1293);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1285);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1275);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 512, tmp1272, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_2/linear1/add'} *)
	(* J706 + J710 *)
	int64_al[256][512] tmp1297;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1297[i0][i1] = (tmp1272[i0][i1] + tmp1290[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1290);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1272);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/linear1/mul_3'} *)
	(* J106 .* J711 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1297, 12);

	int64_al[256][512] tmp1300;

	int64_al[131072] tmp1301;

	int64_al[131072] tmp1302;

	int64_al[131072] tmp1303;

	int32_pl tmp1304;

	for i601 = [0: 256]{
 		for i602 = [0: 512]{
 			tmp1304 = ((0 + (i601 * 512)) + (i602 * 1));
			tmp1301[tmp1304] = tmp106;
			tmp1302[tmp1304] = tmp1297[i601][i602];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp1302, tmp1301, tmp1303);

	ClearMemSecret1(131072, tmp1301);

	ClearMemSecret1(131072, tmp1302);

	for i601 = [0: 256]{
 		for i602 = [0: 512]{
 			tmp1304 = ((0 + (i601 * 512)) + (i602 * 1));
			tmp1300[i601][i602] = tmp1303[tmp1304];
		};
	};
	ClearMemSecret1(131072, tmp1303);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1297);

	int64_al[256][512] tmp1306;

	(* {'TFOpName': 'Tanh', 'TFNodeName': 'bert/encoder/layer_2/linear1/Tanh'} *)
	Tanh2(256, 512, tmp1300, tmp1306, 24, 24, 32, 64, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1300);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_2/linear1/add_1'} *)
	(* J80 + J713 *)
	int64_al[256][512] tmp1308;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1308[i0][i1] = (tmp80 + tmp1306[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1306);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_2/linear1/mul_5'} *)
	(* J714 .* J708 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1308, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1280, 12);

	int64_al[256][512] tmp1310;

	int64_al[131072] tmp1311;

	int64_al[131072] tmp1312;

	int64_al[131072] tmp1313;

	int32_pl tmp1314;

	for i603 = [0: 256]{
 		for i604 = [0: 512]{
 			tmp1314 = ((0 + (i603 * 512)) + (i604 * 1));
			tmp1311[tmp1314] = tmp1308[i603][i604];
			tmp1312[tmp1314] = tmp1280[i603][i604];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1311, tmp1312, tmp1313);

	ClearMemSecret1(131072, tmp1311);

	ClearMemSecret1(131072, tmp1312);

	for i603 = [0: 256]{
 		for i604 = [0: 512]{
 			tmp1314 = ((0 + (i603 * 512)) + (i604 * 1));
			tmp1310[i603][i604] = tmp1313[tmp1314];
		};
	};
	ClearMemSecret1(131072, tmp1313);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1308);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1280);

	int64_al[256][256] tmp1317;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 512, tmp1310, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_2/output/linear2/MatMul'} *)
	(* J715 * J21 *)
	MatMul2D(256, 512, 256, tmp1310, tmp21, tmp1317, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1310);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(512, 256, tmp21);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp54, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_2/output/linear2/BiasAdd'} *)
	(* J716 + J54 *)
	int64_al[256][256] tmp1320;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1320[i0][i1] = (tmp1317[i0][i1] + tmp54[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp54);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1317);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp1267, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_2/output/add'} *)
	(* J704 + J717 *)
	int64_al[256][256] tmp1323;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1323[i0][i1] = (tmp1267[i0][i1] + tmp1320[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1267);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1320);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/moments/mean'} *)
	int64_al tmp1326;

	int64_al[256] tmp1327;

	int64_al[256] tmp1328;

	int64_al[256][1] tmp1329;

	for i605 = [0: 256]{
 		tmp1326 = 0L;
		for i606 = [0: 256]{
 			tmp1326 = (tmp1326 + tmp1323[i605][i606]);
		};
		tmp1327[(0 + (i605 * 1))] = tmp1326;
	};
	ElemWiseVectorPublicDiv(256, tmp1327, 256, tmp1328);

	ClearMemSecret1(256, tmp1327);

	for i605 = [0: 256]{
 		tmp1329[i605][0] = tmp1328[(0 + (i605 * 1))];
	};
	ClearMemSecret1(256, tmp1328);

	int64_al[256][1] tmp1330;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	for i607 = [0: 256]{
 		for i608 = [0: 1]{
 			tmp1330[i607][i608] = (0L - tmp1329[i607][i608]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	(* J718 + tmp1330 *)
	int64_al[256][256] tmp1331;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1331[i0][i1] = (tmp1323[i0][i1] + tmp1330[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/moments/SquaredDifference__mul'} *)
	(* J720 .* J720 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1331, 12);

	int64_al[256][256] tmp1332;

	int64_al[65536] tmp1333;

	int64_al[65536] tmp1334;

	int64_al[65536] tmp1335;

	int32_pl tmp1336;

	for i609 = [0: 256]{
 		for i610 = [0: 256]{
 			tmp1336 = ((0 + (i609 * 256)) + (i610 * 1));
			tmp1333[tmp1336] = tmp1331[i609][i610];
			tmp1334[tmp1336] = tmp1331[i609][i610];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1333, tmp1334, tmp1335);

	ClearMemSecret1(65536, tmp1333);

	ClearMemSecret1(65536, tmp1334);

	for i609 = [0: 256]{
 		for i610 = [0: 256]{
 			tmp1336 = ((0 + (i609 * 256)) + (i610 * 1));
			tmp1332[i609][i610] = tmp1335[tmp1336];
		};
	};
	ClearMemSecret1(65536, tmp1335);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1331);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/moments/variance'} *)
	int64_al tmp1338;

	int64_al[256] tmp1339;

	int64_al[256] tmp1340;

	int64_al[256][1] tmp1341;

	for i611 = [0: 256]{
 		tmp1338 = 0L;
		for i612 = [0: 256]{
 			tmp1338 = (tmp1338 + tmp1332[i611][i612]);
		};
		tmp1339[(0 + (i611 * 1))] = tmp1338;
	};
	ElemWiseVectorPublicDiv(256, tmp1339, 256, tmp1340);

	ClearMemSecret1(256, tmp1339);

	for i611 = [0: 256]{
 		tmp1341[i611][0] = tmp1340[(0 + (i611 * 1))];
	};
	ClearMemSecret1(256, tmp1340);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1332);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/batchnorm/add'} *)
	(* J15 + J722 *)
	int64_al[256][1] tmp1343;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp1343[i0][i1] = (tmp15 + tmp1341[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1341);

	int64_al[256][1] tmp1345;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp1343, tmp1345, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1343);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/batchnorm/mul'} *)
	(* J724 .* J78 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1345, 12);

	int64_al[256][256] tmp1347;

	int64_al[65536] tmp1348;

	int64_al[65536] tmp1349;

	int64_al[65536] tmp1350;

	int32_pl tmp1351;

	for i613 = [0: 256]{
 		for i614 = [0: 256]{
 			tmp1351 = ((0 + (i613 * 256)) + (i614 * 1));
			tmp1348[tmp1351] = tmp1345[i613][0];
			tmp1349[tmp1351] = tmp78[i614];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp1348, tmp1349, tmp1350);

	ClearMemSecret1(65536, tmp1348);

	ClearMemSecret1(65536, tmp1349);

	for i613 = [0: 256]{
 		for i614 = [0: 256]{
 			tmp1351 = ((0 + (i613 * 256)) + (i614 * 1));
			tmp1347[i613][i614] = tmp1350[tmp1351];
		};
	};
	ClearMemSecret1(65536, tmp1350);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1345);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp78);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/batchnorm/mul_2'} *)
	(* J725 .* J719 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1347, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1329, 12);

	int64_al[256][256] tmp1354;

	int64_al[65536] tmp1355;

	int64_al[65536] tmp1356;

	int64_al[65536] tmp1357;

	int32_pl tmp1358;

	for i615 = [0: 256]{
 		for i616 = [0: 256]{
 			tmp1358 = ((0 + (i615 * 256)) + (i616 * 1));
			tmp1355[tmp1358] = tmp1347[i615][i616];
			tmp1356[tmp1358] = tmp1329[i615][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1355, tmp1356, tmp1357);

	ClearMemSecret1(65536, tmp1355);

	ClearMemSecret1(65536, tmp1356);

	for i615 = [0: 256]{
 		for i616 = [0: 256]{
 			tmp1358 = ((0 + (i615 * 256)) + (i616 * 1));
			tmp1354[i615][i616] = tmp1357[tmp1358];
		};
	};
	ClearMemSecret1(65536, tmp1357);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1329);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp26, 12);

	int64_al[256][256] tmp1360;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/batchnorm/sub'} *)
	for i617 = [0: 256]{
 		for i618 = [0: 256]{
 			tmp1360[i617][i618] = (0L - tmp1354[i617][i618]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/batchnorm/sub'} *)
	(* J26 + tmp1360 *)
	int64_al[256][256] tmp1361;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1361[i0][i1] = (tmp26[i1] + tmp1360[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp26);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1354);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/batchnorm/mul_1'} *)
	(* J718 .* J725 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1323, 12);

	int64_al[256][256] tmp1364;

	int64_al[65536] tmp1365;

	int64_al[65536] tmp1366;

	int64_al[65536] tmp1367;

	int32_pl tmp1368;

	for i619 = [0: 256]{
 		for i620 = [0: 256]{
 			tmp1368 = ((0 + (i619 * 256)) + (i620 * 1));
			tmp1365[tmp1368] = tmp1323[i619][i620];
			tmp1366[tmp1368] = tmp1347[i619][i620];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1365, tmp1366, tmp1367);

	ClearMemSecret1(65536, tmp1365);

	ClearMemSecret1(65536, tmp1366);

	for i619 = [0: 256]{
 		for i620 = [0: 256]{
 			tmp1368 = ((0 + (i619 * 256)) + (i620 * 1));
			tmp1364[i619][i620] = tmp1367[tmp1368];
		};
	};
	ClearMemSecret1(65536, tmp1367);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1347);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/pre_norm/batchnorm/add_1'} *)
	(* J728 + J727 *)
	int64_al[256][256] tmp1370;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1370[i0][i1] = (tmp1364[i0][i1] + tmp1361[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1364);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1361);

	int64_al[256][768] tmp1373;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp1370, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/qkv/MatMul'} *)
	(* J729 * J13 *)
	MatMul2D(256, 256, 768, tmp1370, tmp13, tmp1373, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp13);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1370);

	int64_al[256][3][4][64] tmp1376;

	int64_pl i626;

	int64_pl i625;

	int64_pl i624;

	int64_pl i623;

	int64_pl i622;

	int64_pl i621;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Reshape'} *)
	(* reshape(J730, 256, 3, 4, 64) *)
	i621 = 0L;
	i622 = 0L;
	for i623 = [0: 256]{
 		for i624 = [0: 3]{
 			for i625 = [0: 4]{
 				for i626 = [0: 64]{
 					tmp1376[i623][i624][i625][i626] = tmp1373[i621][i622];
					i622 = (i622 + 1L);
					if ((i622 == 768L)) {
						i622 = 0L;
						i621 = (i621 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp1373);

	int64_al[3][4][256][64] tmp1378;

	int64_pl i630;

	int64_pl i629;

	int64_pl i628;

	int64_pl i627;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_3/attention/self/transpose'} *)
	(* transpose(J731, [256, 3, 4, 64] --> [3, 4, 256, 64]) *)
	for i627 = [0: 256]{
 		for i628 = [0: 3]{
 			for i629 = [0: 4]{
 				for i630 = [0: 64]{
 					tmp1378[i628][i629][i627][i630] = tmp1376[i627][i628][i629][i630];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 3, 4, 64, tmp1376);

	int64_al[1][4][256][64] tmp1380;

	int64_pl i634;

	int64_pl i633;

	int64_pl i632;

	int64_pl i631;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_2'} *)
	(* slice(J732, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i631 = [0: 1]{
 		for i632 = [0: 4]{
 			for i633 = [0: 256]{
 				for i634 = [0: 64]{
 					tmp1380[i631][i632][i633][i634] = tmp1378[(i631 + 2L)][(i632 + 0L)][(i633 + 0L)][(i634 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp1381;

	int64_pl i638;

	int64_pl i637;

	int64_pl i636;

	int64_pl i635;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_18'} *)
	(* slice(J733, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i635 = [0: 1]{
 		for i636 = [0: 1]{
 			for i637 = [0: 256]{
 				for i638 = [0: 64]{
 					tmp1381[i635][i636][i637][i638] = tmp1380[(i635 + 0L)][(i636 + 3L)][(i637 + 0L)][(i638 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1382;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1381, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_15'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1381, tmp1382);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1381);

	int64_al[1][1][256][64] tmp1384;

	int64_pl i642;

	int64_pl i641;

	int64_pl i640;

	int64_pl i639;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_16'} *)
	(* slice(J733, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i639 = [0: 1]{
 		for i640 = [0: 1]{
 			for i641 = [0: 256]{
 				for i642 = [0: 64]{
 					tmp1384[i639][i640][i641][i642] = tmp1380[(i639 + 0L)][(i640 + 2L)][(i641 + 0L)][(i642 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1385;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1384, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_13'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1384, tmp1385);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1384);

	int64_al[1][1][256][64] tmp1387;

	int64_pl i646;

	int64_pl i645;

	int64_pl i644;

	int64_pl i643;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_14'} *)
	(* slice(J733, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i643 = [0: 1]{
 		for i644 = [0: 1]{
 			for i645 = [0: 256]{
 				for i646 = [0: 64]{
 					tmp1387[i643][i644][i645][i646] = tmp1380[(i643 + 0L)][(i644 + 1L)][(i645 + 0L)][(i646 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1388;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1387, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_11'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1387, tmp1388);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1387);

	int64_al[1][1][256][64] tmp1390;

	int64_pl i650;

	int64_pl i649;

	int64_pl i648;

	int64_pl i647;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_12'} *)
	(* slice(J733, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i647 = [0: 1]{
 		for i648 = [0: 1]{
 			for i649 = [0: 256]{
 				for i650 = [0: 64]{
 					tmp1390[i647][i648][i649][i650] = tmp1380[(i647 + 0L)][(i648 + 0L)][(i649 + 0L)][(i650 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1380);

	int64_al[256][64] tmp1392;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1390, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_9'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1390, tmp1392);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1390);

	int64_al[1][4][256][64] tmp1394;

	int64_pl i654;

	int64_pl i653;

	int64_pl i652;

	int64_pl i651;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_1'} *)
	(* slice(J732, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i651 = [0: 1]{
 		for i652 = [0: 4]{
 			for i653 = [0: 256]{
 				for i654 = [0: 64]{
 					tmp1394[i651][i652][i653][i654] = tmp1378[(i651 + 1L)][(i652 + 0L)][(i653 + 0L)][(i654 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp1395;

	int64_pl i658;

	int64_pl i657;

	int64_pl i656;

	int64_pl i655;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_10'} *)
	(* slice(J742, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i655 = [0: 1]{
 		for i656 = [0: 1]{
 			for i657 = [0: 256]{
 				for i658 = [0: 64]{
 					tmp1395[i655][i656][i657][i658] = tmp1394[(i655 + 0L)][(i656 + 3L)][(i657 + 0L)][(i658 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1396;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1395, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_7'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1395, tmp1396);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1395);

	int64_al[1][1][256][64] tmp1398;

	int64_pl i662;

	int64_pl i661;

	int64_pl i660;

	int64_pl i659;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_8'} *)
	(* slice(J742, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i659 = [0: 1]{
 		for i660 = [0: 1]{
 			for i661 = [0: 256]{
 				for i662 = [0: 64]{
 					tmp1398[i659][i660][i661][i662] = tmp1394[(i659 + 0L)][(i660 + 2L)][(i661 + 0L)][(i662 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1399;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1398, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_5'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1398, tmp1399);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1398);

	int64_al[1][1][256][64] tmp1401;

	int64_pl i666;

	int64_pl i665;

	int64_pl i664;

	int64_pl i663;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_6'} *)
	(* slice(J742, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i663 = [0: 1]{
 		for i664 = [0: 1]{
 			for i665 = [0: 256]{
 				for i666 = [0: 64]{
 					tmp1401[i663][i664][i665][i666] = tmp1394[(i663 + 0L)][(i664 + 1L)][(i665 + 0L)][(i666 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1402;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1401, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_3'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1401, tmp1402);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1401);

	int64_al[1][1][256][64] tmp1404;

	int64_pl i670;

	int64_pl i669;

	int64_pl i668;

	int64_pl i667;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_4'} *)
	(* slice(J742, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i667 = [0: 1]{
 		for i668 = [0: 1]{
 			for i669 = [0: 256]{
 				for i670 = [0: 64]{
 					tmp1404[i667][i668][i669][i670] = tmp1394[(i667 + 0L)][(i668 + 0L)][(i669 + 0L)][(i670 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1394);

	int64_al[256][64] tmp1406;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1404, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_1'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1404, tmp1406);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1404);

	int64_al[1][4][256][64] tmp1408;

	int64_pl i674;

	int64_pl i673;

	int64_pl i672;

	int64_pl i671;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice'} *)
	(* slice(J732, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i671 = [0: 1]{
 		for i672 = [0: 4]{
 			for i673 = [0: 256]{
 				for i674 = [0: 64]{
 					tmp1408[i671][i672][i673][i674] = tmp1378[(i671 + 0L)][(i672 + 0L)][(i673 + 0L)][(i674 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 4, 256, 64, tmp1378);

	int64_al[1][1][256][64] tmp1410;

	int64_pl i678;

	int64_pl i677;

	int64_pl i676;

	int64_pl i675;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_9'} *)
	(* slice(J751, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i675 = [0: 1]{
 		for i676 = [0: 1]{
 			for i677 = [0: 256]{
 				for i678 = [0: 64]{
 					tmp1410[i675][i676][i677][i678] = tmp1408[(i675 + 0L)][(i676 + 3L)][(i677 + 0L)][(i678 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1411;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1410, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_6'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1410, tmp1411);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1410);

	int64_al[256][256] tmp1414;

	int64_al[64][256] tmp1413;

	int64_pl i680;

	int64_pl i679;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* transpose(J744, [256, 64] --> [64, 256]) *)
	for i679 = [0: 256]{
 		for i680 = [0: 64]{
 			tmp1413[i680][i679] = tmp1396[i679][i680];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* J753 * tmp1413 *)
	MatMul2D(256, 64, 256, tmp1411, tmp1413, tmp1414, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1411);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1396);

	int64_al[1][1][256][256] tmp1417;

	int64_pl i686;

	int64_pl i685;

	int64_pl i684;

	int64_pl i683;

	int64_pl i682;

	int64_pl i681;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Reshape_4'} *)
	(* reshape(J754, 1, 1, 256, 256) *)
	i681 = 0L;
	i682 = 0L;
	for i683 = [0: 1]{
 		for i684 = [0: 1]{
 			for i685 = [0: 256]{
 				for i686 = [0: 256]{
 					tmp1417[i683][i684][i685][i686] = tmp1414[i681][i682];
					i682 = (i682 + 1L);
					if ((i682 == 256L)) {
						i682 = 0L;
						i681 = (i681 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1414);

	int64_al[1][1][256][64] tmp1419;

	int64_pl i690;

	int64_pl i689;

	int64_pl i688;

	int64_pl i687;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_7'} *)
	(* slice(J751, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i687 = [0: 1]{
 		for i688 = [0: 1]{
 			for i689 = [0: 256]{
 				for i690 = [0: 64]{
 					tmp1419[i687][i688][i689][i690] = tmp1408[(i687 + 0L)][(i688 + 2L)][(i689 + 0L)][(i690 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1420;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1419, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_4'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1419, tmp1420);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1419);

	int64_al[256][256] tmp1423;

	int64_al[64][256] tmp1422;

	int64_pl i692;

	int64_pl i691;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* transpose(J746, [256, 64] --> [64, 256]) *)
	for i691 = [0: 256]{
 		for i692 = [0: 64]{
 			tmp1422[i692][i691] = tmp1399[i691][i692];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* J757 * tmp1422 *)
	MatMul2D(256, 64, 256, tmp1420, tmp1422, tmp1423, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1399);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1420);

	int64_al[1][1][256][256] tmp1426;

	int64_pl i698;

	int64_pl i697;

	int64_pl i696;

	int64_pl i695;

	int64_pl i694;

	int64_pl i693;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Reshape_3'} *)
	(* reshape(J758, 1, 1, 256, 256) *)
	i693 = 0L;
	i694 = 0L;
	for i695 = [0: 1]{
 		for i696 = [0: 1]{
 			for i697 = [0: 256]{
 				for i698 = [0: 256]{
 					tmp1426[i695][i696][i697][i698] = tmp1423[i693][i694];
					i694 = (i694 + 1L);
					if ((i694 == 256L)) {
						i694 = 0L;
						i693 = (i693 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1423);

	int64_al[1][1][256][64] tmp1428;

	int64_pl i702;

	int64_pl i701;

	int64_pl i700;

	int64_pl i699;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_5'} *)
	(* slice(J751, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i699 = [0: 1]{
 		for i700 = [0: 1]{
 			for i701 = [0: 256]{
 				for i702 = [0: 64]{
 					tmp1428[i699][i700][i701][i702] = tmp1408[(i699 + 0L)][(i700 + 1L)][(i701 + 0L)][(i702 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1429;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1428, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_2'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1428, tmp1429);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1428);

	int64_al[256][256] tmp1432;

	int64_al[64][256] tmp1431;

	int64_pl i704;

	int64_pl i703;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* transpose(J748, [256, 64] --> [64, 256]) *)
	for i703 = [0: 256]{
 		for i704 = [0: 64]{
 			tmp1431[i704][i703] = tmp1402[i703][i704];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* J761 * tmp1431 *)
	MatMul2D(256, 64, 256, tmp1429, tmp1431, tmp1432, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1429);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1402);

	int64_al[1][1][256][256] tmp1435;

	int64_pl i710;

	int64_pl i709;

	int64_pl i708;

	int64_pl i707;

	int64_pl i706;

	int64_pl i705;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Reshape_2'} *)
	(* reshape(J762, 1, 1, 256, 256) *)
	i705 = 0L;
	i706 = 0L;
	for i707 = [0: 1]{
 		for i708 = [0: 1]{
 			for i709 = [0: 256]{
 				for i710 = [0: 256]{
 					tmp1435[i707][i708][i709][i710] = tmp1432[i705][i706];
					i706 = (i706 + 1L);
					if ((i706 == 256L)) {
						i706 = 0L;
						i705 = (i705 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1432);

	int64_al[1][1][256][64] tmp1437;

	int64_pl i714;

	int64_pl i713;

	int64_pl i712;

	int64_pl i711;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_3'} *)
	(* slice(J751, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i711 = [0: 1]{
 		for i712 = [0: 1]{
 			for i713 = [0: 256]{
 				for i714 = [0: 64]{
 					tmp1437[i711][i712][i713][i714] = tmp1408[(i711 + 0L)][(i712 + 0L)][(i713 + 0L)][(i714 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1408);

	int64_al[256][64] tmp1439;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1437, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1437, tmp1439);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1437);

	int64_al[256][256] tmp1442;

	int64_al[64][256] tmp1441;

	int64_pl i716;

	int64_pl i715;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* transpose(J750, [256, 64] --> [64, 256]) *)
	for i715 = [0: 256]{
 		for i716 = [0: 64]{
 			tmp1441[i716][i715] = tmp1406[i715][i716];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* J765 * tmp1441 *)
	MatMul2D(256, 64, 256, tmp1439, tmp1441, tmp1442, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1439);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1406);

	int64_al[1][1][256][256] tmp1445;

	int64_pl i722;

	int64_pl i721;

	int64_pl i720;

	int64_pl i719;

	int64_pl i718;

	int64_pl i717;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Reshape_1'} *)
	(* reshape(J766, 1, 1, 256, 256) *)
	i717 = 0L;
	i718 = 0L;
	for i719 = [0: 1]{
 		for i720 = [0: 1]{
 			for i721 = [0: 256]{
 				for i722 = [0: 256]{
 					tmp1445[i719][i720][i721][i722] = tmp1442[i717][i718];
					i718 = (i718 + 1L);
					if ((i718 == 256L)) {
						i718 = 0L;
						i717 = (i717 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1442);

	int64_al[1][4][256][256] tmp1447;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1417, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1426, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1435, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1445, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/concat_2'} *)
	Concat4T44444(1, 4, 256, 256, 1, 1, 256, 256, tmp1445, 1, 1, 256, 256, tmp1435, 1, 1, 256, 256, tmp1426, 1, 1, 256, 256, tmp1417, 1, tmp1447);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1435);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1445);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1426);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1417);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Mul'} *)
	(* J47 .* J768 *)
	int64_al[1][4][256][256] tmp1453;

	int64_al[262144] tmp1454;

	int64_al[262144] tmp1455;

	int64_al[262144] tmp1456;

	int32_pl tmp1457;

	for i723 = [0: 1]{
 		for i724 = [0: 4]{
 			for i725 = [0: 256]{
 				for i726 = [0: 256]{
 					tmp1457 = ((((0 + (i723 * 262144)) + (i724 * 65536)) + (i725 * 256)) + (i726 * 1));
					tmp1454[tmp1457] = tmp47;
					tmp1455[tmp1457] = tmp1447[i723][i724][i725][i726];
				};
			};
		};
	};
	ElemWiseActModelVectorMult(262144, tmp1455, tmp1454, tmp1456);

	ClearMemSecret1(262144, tmp1454);

	ClearMemSecret1(262144, tmp1455);

	for i723 = [0: 1]{
 		for i724 = [0: 4]{
 			for i725 = [0: 256]{
 				for i726 = [0: 256]{
 					tmp1457 = ((((0 + (i723 * 262144)) + (i724 * 65536)) + (i725 * 256)) + (i726 * 1));
					tmp1453[i723][i724][i725][i726] = tmp1456[tmp1457];
				};
			};
		};
	};
	ClearMemSecret1(262144, tmp1456);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp1447);

	int64_al[1][4][256][256] tmp1459;

	(* {'TFOpName': 'Softmax', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Softmax'} *)
	Softmax4(1, 4, 256, 256, tmp1453, tmp1459);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp1453);

	int64_al[1][1][256][256] tmp1461;

	int64_pl i730;

	int64_pl i729;

	int64_pl i728;

	int64_pl i727;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_17'} *)
	(* slice(J770, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i727 = [0: 1]{
 		for i728 = [0: 1]{
 			for i729 = [0: 256]{
 				for i730 = [0: 256]{
 					tmp1461[i727][i728][i729][i730] = tmp1459[(i727 + 0L)][(i728 + 3L)][(i729 + 0L)][(i730 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp1462;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1461, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_14'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1461, tmp1462);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1461);

	int64_al[256][64] tmp1464;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/MatMul_7'} *)
	(* J772 * J735 *)
	MatMul2D(256, 256, 64, tmp1462, tmp1382, tmp1464, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1462);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1382);

	int64_al[1][1][256][64] tmp1467;

	int64_pl i736;

	int64_pl i735;

	int64_pl i734;

	int64_pl i733;

	int64_pl i732;

	int64_pl i731;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Reshape_8'} *)
	(* reshape(J773, 1, 1, 256, 64) *)
	i731 = 0L;
	i732 = 0L;
	for i733 = [0: 1]{
 		for i734 = [0: 1]{
 			for i735 = [0: 256]{
 				for i736 = [0: 64]{
 					tmp1467[i733][i734][i735][i736] = tmp1464[i731][i732];
					i732 = (i732 + 1L);
					if ((i732 == 64L)) {
						i732 = 0L;
						i731 = (i731 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1464);

	int64_al[1][1][256][256] tmp1469;

	int64_pl i740;

	int64_pl i739;

	int64_pl i738;

	int64_pl i737;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_15'} *)
	(* slice(J770, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i737 = [0: 1]{
 		for i738 = [0: 1]{
 			for i739 = [0: 256]{
 				for i740 = [0: 256]{
 					tmp1469[i737][i738][i739][i740] = tmp1459[(i737 + 0L)][(i738 + 2L)][(i739 + 0L)][(i740 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp1470;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1469, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_12'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1469, tmp1470);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1469);

	int64_al[256][64] tmp1472;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/MatMul_6'} *)
	(* J776 * J737 *)
	MatMul2D(256, 256, 64, tmp1470, tmp1385, tmp1472, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1470);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1385);

	int64_al[1][1][256][64] tmp1475;

	int64_pl i746;

	int64_pl i745;

	int64_pl i744;

	int64_pl i743;

	int64_pl i742;

	int64_pl i741;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Reshape_7'} *)
	(* reshape(J777, 1, 1, 256, 64) *)
	i741 = 0L;
	i742 = 0L;
	for i743 = [0: 1]{
 		for i744 = [0: 1]{
 			for i745 = [0: 256]{
 				for i746 = [0: 64]{
 					tmp1475[i743][i744][i745][i746] = tmp1472[i741][i742];
					i742 = (i742 + 1L);
					if ((i742 == 64L)) {
						i742 = 0L;
						i741 = (i741 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1472);

	int64_al[1][1][256][256] tmp1477;

	int64_pl i750;

	int64_pl i749;

	int64_pl i748;

	int64_pl i747;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_13'} *)
	(* slice(J770, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i747 = [0: 1]{
 		for i748 = [0: 1]{
 			for i749 = [0: 256]{
 				for i750 = [0: 256]{
 					tmp1477[i747][i748][i749][i750] = tmp1459[(i747 + 0L)][(i748 + 1L)][(i749 + 0L)][(i750 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp1478;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1477, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_10'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1477, tmp1478);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1477);

	int64_al[256][64] tmp1480;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/MatMul_5'} *)
	(* J780 * J739 *)
	MatMul2D(256, 256, 64, tmp1478, tmp1388, tmp1480, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1478);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1388);

	int64_al[1][1][256][64] tmp1483;

	int64_pl i756;

	int64_pl i755;

	int64_pl i754;

	int64_pl i753;

	int64_pl i752;

	int64_pl i751;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Reshape_6'} *)
	(* reshape(J781, 1, 1, 256, 64) *)
	i751 = 0L;
	i752 = 0L;
	for i753 = [0: 1]{
 		for i754 = [0: 1]{
 			for i755 = [0: 256]{
 				for i756 = [0: 64]{
 					tmp1483[i753][i754][i755][i756] = tmp1480[i751][i752];
					i752 = (i752 + 1L);
					if ((i752 == 64L)) {
						i752 = 0L;
						i751 = (i751 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1480);

	int64_al[1][1][256][256] tmp1485;

	int64_pl i760;

	int64_pl i759;

	int64_pl i758;

	int64_pl i757;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Slice_11'} *)
	(* slice(J770, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i757 = [0: 1]{
 		for i758 = [0: 1]{
 			for i759 = [0: 256]{
 				for i760 = [0: 256]{
 					tmp1485[i757][i758][i759][i760] = tmp1459[(i757 + 0L)][(i758 + 0L)][(i759 + 0L)][(i760 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp1459);

	int64_al[256][256] tmp1487;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1485, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Squeeze_8'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1485, tmp1487);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1485);

	int64_al[256][64] tmp1489;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/MatMul_4'} *)
	(* J784 * J741 *)
	MatMul2D(256, 256, 64, tmp1487, tmp1392, tmp1489, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1487);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1392);

	int64_al[1][1][256][64] tmp1492;

	int64_pl i766;

	int64_pl i765;

	int64_pl i764;

	int64_pl i763;

	int64_pl i762;

	int64_pl i761;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Reshape_5'} *)
	(* reshape(J785, 1, 1, 256, 64) *)
	i761 = 0L;
	i762 = 0L;
	for i763 = [0: 1]{
 		for i764 = [0: 1]{
 			for i765 = [0: 256]{
 				for i766 = [0: 64]{
 					tmp1492[i763][i764][i765][i766] = tmp1489[i761][i762];
					i762 = (i762 + 1L);
					if ((i762 == 64L)) {
						i762 = 0L;
						i761 = (i761 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1489);

	int64_al[1][4][256][64] tmp1494;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1467, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1475, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1483, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1492, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_3/attention/self/concat_5'} *)
	Concat4T44444(1, 4, 256, 64, 1, 1, 256, 64, tmp1492, 1, 1, 256, 64, tmp1483, 1, 1, 256, 64, tmp1475, 1, 1, 256, 64, tmp1467, 1, tmp1494);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1483);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1492);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1467);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1475);

	int64_al[1][256][4][64] tmp1500;

	int64_pl i770;

	int64_pl i769;

	int64_pl i768;

	int64_pl i767;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_3/attention/self/transpose_5'} *)
	(* transpose(J787, [1, 4, 256, 64] --> [1, 256, 4, 64]) *)
	for i767 = [0: 1]{
 		for i768 = [0: 4]{
 			for i769 = [0: 256]{
 				for i770 = [0: 64]{
 					tmp1500[i767][i769][i768][i770] = tmp1494[i767][i768][i769][i770];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1494);

	int64_al[256][256] tmp1502;

	int64_pl i776;

	int64_pl i775;

	int64_pl i774;

	int64_pl i773;

	int64_pl i772;

	int64_pl i771;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_3/attention/self/Reshape_9'} *)
	(* reshape(J788, 256, 256) *)
	i771 = 0L;
	i772 = 0L;
	i773 = 0L;
	i774 = 0L;
	for i775 = [0: 256]{
 		for i776 = [0: 256]{
 			tmp1502[i775][i776] = tmp1500[i771][i772][i773][i774];
			i774 = (i774 + 1L);
			if ((i774 == 64L)) {
				i774 = 0L;
				i773 = (i773 + 1L);
				if ((i773 == 4L)) {
					i773 = 0L;
					i772 = (i772 + 1L);
					if ((i772 == 256L)) {
						i772 = 0L;
						i771 = (i771 + 1L);
					}
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 4, 64, tmp1500);

	int64_al[256][256] tmp1504;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/attention/self/proj/MatMul'} *)
	(* J789 * J90 *)
	MatMul2D(256, 256, 256, tmp1502, tmp90, tmp1504, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1502);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp90);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp93, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_3/attention/self/proj/BiasAdd'} *)
	(* J790 + J93 *)
	int64_al[256][256] tmp1507;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1507[i0][i1] = (tmp1504[i0][i1] + tmp93[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1504);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp93);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp1323, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_3/attention/output/add'} *)
	(* J718 + J791 *)
	int64_al[256][256] tmp1510;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1510[i0][i1] = (tmp1323[i0][i1] + tmp1507[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1323);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1507);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/moments/mean'} *)
	int64_al tmp1513;

	int64_al[256] tmp1514;

	int64_al[256] tmp1515;

	int64_al[256][1] tmp1516;

	for i777 = [0: 256]{
 		tmp1513 = 0L;
		for i778 = [0: 256]{
 			tmp1513 = (tmp1513 + tmp1510[i777][i778]);
		};
		tmp1514[(0 + (i777 * 1))] = tmp1513;
	};
	ElemWiseVectorPublicDiv(256, tmp1514, 256, tmp1515);

	ClearMemSecret1(256, tmp1514);

	for i777 = [0: 256]{
 		tmp1516[i777][0] = tmp1515[(0 + (i777 * 1))];
	};
	ClearMemSecret1(256, tmp1515);

	int64_al[256][1] tmp1517;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/moments/SquaredDifference__sub'} *)
	for i779 = [0: 256]{
 		for i780 = [0: 1]{
 			tmp1517[i779][i780] = (0L - tmp1516[i779][i780]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/moments/SquaredDifference__sub'} *)
	(* J792 + tmp1517 *)
	int64_al[256][256] tmp1518;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1518[i0][i1] = (tmp1510[i0][i1] + tmp1517[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/moments/SquaredDifference__mul'} *)
	(* J794 .* J794 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1518, 12);

	int64_al[256][256] tmp1519;

	int64_al[65536] tmp1520;

	int64_al[65536] tmp1521;

	int64_al[65536] tmp1522;

	int32_pl tmp1523;

	for i781 = [0: 256]{
 		for i782 = [0: 256]{
 			tmp1523 = ((0 + (i781 * 256)) + (i782 * 1));
			tmp1520[tmp1523] = tmp1518[i781][i782];
			tmp1521[tmp1523] = tmp1518[i781][i782];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1520, tmp1521, tmp1522);

	ClearMemSecret1(65536, tmp1520);

	ClearMemSecret1(65536, tmp1521);

	for i781 = [0: 256]{
 		for i782 = [0: 256]{
 			tmp1523 = ((0 + (i781 * 256)) + (i782 * 1));
			tmp1519[i781][i782] = tmp1522[tmp1523];
		};
	};
	ClearMemSecret1(65536, tmp1522);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1518);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/moments/variance'} *)
	int64_al tmp1525;

	int64_al[256] tmp1526;

	int64_al[256] tmp1527;

	int64_al[256][1] tmp1528;

	for i783 = [0: 256]{
 		tmp1525 = 0L;
		for i784 = [0: 256]{
 			tmp1525 = (tmp1525 + tmp1519[i783][i784]);
		};
		tmp1526[(0 + (i783 * 1))] = tmp1525;
	};
	ElemWiseVectorPublicDiv(256, tmp1526, 256, tmp1527);

	ClearMemSecret1(256, tmp1526);

	for i783 = [0: 256]{
 		tmp1528[i783][0] = tmp1527[(0 + (i783 * 1))];
	};
	ClearMemSecret1(256, tmp1527);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1519);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/batchnorm/add'} *)
	(* J15 + J796 *)
	int64_al[256][1] tmp1530;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp1530[i0][i1] = (tmp15 + tmp1528[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1528);

	int64_al[256][1] tmp1532;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp1530, tmp1532, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1530);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/batchnorm/mul'} *)
	(* J798 .* J35 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1532, 12);

	int64_al[256][256] tmp1534;

	int64_al[65536] tmp1535;

	int64_al[65536] tmp1536;

	int64_al[65536] tmp1537;

	int32_pl tmp1538;

	for i785 = [0: 256]{
 		for i786 = [0: 256]{
 			tmp1538 = ((0 + (i785 * 256)) + (i786 * 1));
			tmp1535[tmp1538] = tmp1532[i785][0];
			tmp1536[tmp1538] = tmp35[i786];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp1535, tmp1536, tmp1537);

	ClearMemSecret1(65536, tmp1535);

	ClearMemSecret1(65536, tmp1536);

	for i785 = [0: 256]{
 		for i786 = [0: 256]{
 			tmp1538 = ((0 + (i785 * 256)) + (i786 * 1));
			tmp1534[i785][i786] = tmp1537[tmp1538];
		};
	};
	ClearMemSecret1(65536, tmp1537);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1532);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp35);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/batchnorm/mul_2'} *)
	(* J799 .* J793 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1534, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1516, 12);

	int64_al[256][256] tmp1541;

	int64_al[65536] tmp1542;

	int64_al[65536] tmp1543;

	int64_al[65536] tmp1544;

	int32_pl tmp1545;

	for i787 = [0: 256]{
 		for i788 = [0: 256]{
 			tmp1545 = ((0 + (i787 * 256)) + (i788 * 1));
			tmp1542[tmp1545] = tmp1534[i787][i788];
			tmp1543[tmp1545] = tmp1516[i787][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1542, tmp1543, tmp1544);

	ClearMemSecret1(65536, tmp1542);

	ClearMemSecret1(65536, tmp1543);

	for i787 = [0: 256]{
 		for i788 = [0: 256]{
 			tmp1545 = ((0 + (i787 * 256)) + (i788 * 1));
			tmp1541[i787][i788] = tmp1544[tmp1545];
		};
	};
	ClearMemSecret1(65536, tmp1544);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1516);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp2, 12);

	int64_al[256][256] tmp1547;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/batchnorm/sub'} *)
	for i789 = [0: 256]{
 		for i790 = [0: 256]{
 			tmp1547[i789][i790] = (0L - tmp1541[i789][i790]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/batchnorm/sub'} *)
	(* J2 + tmp1547 *)
	int64_al[256][256] tmp1548;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1548[i0][i1] = (tmp2[i1] + tmp1547[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp2);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1541);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/batchnorm/mul_1'} *)
	(* J792 .* J799 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1510, 12);

	int64_al[256][256] tmp1551;

	int64_al[65536] tmp1552;

	int64_al[65536] tmp1553;

	int64_al[65536] tmp1554;

	int32_pl tmp1555;

	for i791 = [0: 256]{
 		for i792 = [0: 256]{
 			tmp1555 = ((0 + (i791 * 256)) + (i792 * 1));
			tmp1552[tmp1555] = tmp1510[i791][i792];
			tmp1553[tmp1555] = tmp1534[i791][i792];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1552, tmp1553, tmp1554);

	ClearMemSecret1(65536, tmp1552);

	ClearMemSecret1(65536, tmp1553);

	for i791 = [0: 256]{
 		for i792 = [0: 256]{
 			tmp1555 = ((0 + (i791 * 256)) + (i792 * 1));
			tmp1551[i791][i792] = tmp1554[tmp1555];
		};
	};
	ClearMemSecret1(65536, tmp1554);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1510);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1534);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_3/attention/output/norm1/batchnorm/add_1'} *)
	(* J802 + J801 *)
	int64_al[256][256] tmp1558;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1558[i0][i1] = (tmp1551[i0][i1] + tmp1548[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1548);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1551);

	int64_al[256][512] tmp1561;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp1558, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/linear1/MatMul'} *)
	(* J803 * J12 *)
	MatMul2D(256, 256, 512, tmp1558, tmp12, tmp1561, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp12);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(512, tmp43, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_3/linear1/BiasAdd'} *)
	(* J804 + J43 *)
	int64_al[256][512] tmp1563;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1563[i0][i1] = (tmp1561[i0][i1] + tmp43[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1561);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp43);

	(* {'TFOpName': 'Square', 'TFNodeName': 'bert/encoder/layer_3/linear1/ArithmeticOptimizer/ReplaceMulWithSquare_mul_1'} *)
	(* J805 .* J805 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1563, 12);

	int64_al[256][512] tmp1566;

	int64_al[131072] tmp1567;

	int64_al[131072] tmp1568;

	int64_al[131072] tmp1569;

	int32_pl tmp1570;

	for i793 = [0: 256]{
 		for i794 = [0: 512]{
 			tmp1570 = ((0 + (i793 * 512)) + (i794 * 1));
			tmp1567[tmp1570] = tmp1563[i793][i794];
			tmp1568[tmp1570] = tmp1563[i793][i794];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1567, tmp1568, tmp1569);

	ClearMemSecret1(131072, tmp1567);

	ClearMemSecret1(131072, tmp1568);

	for i793 = [0: 256]{
 		for i794 = [0: 512]{
 			tmp1570 = ((0 + (i793 * 512)) + (i794 * 1));
			tmp1566[i793][i794] = tmp1569[tmp1570];
		};
	};
	ClearMemSecret1(131072, tmp1569);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/linear1/mul_4'} *)
	(* J6 .* J805 *)
	int64_al[256][512] tmp1571;

	int64_al[131072] tmp1572;

	int64_al[131072] tmp1573;

	int64_al[131072] tmp1574;

	int32_pl tmp1575;

	for i795 = [0: 256]{
 		for i796 = [0: 512]{
 			tmp1575 = ((0 + (i795 * 512)) + (i796 * 1));
			tmp1572[tmp1575] = tmp6;
			tmp1573[tmp1575] = tmp1563[i795][i796];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp1573, tmp1572, tmp1574);

	ClearMemSecret1(131072, tmp1572);

	ClearMemSecret1(131072, tmp1573);

	for i795 = [0: 256]{
 		for i796 = [0: 512]{
 			tmp1575 = ((0 + (i795 * 512)) + (i796 * 1));
			tmp1571[i795][i796] = tmp1574[tmp1575];
		};
	};
	ClearMemSecret1(131072, tmp1574);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/linear1/mul'} *)
	(* J72 .* J805 *)
	int64_al[256][512] tmp1576;

	int64_al[131072] tmp1577;

	int64_al[131072] tmp1578;

	int64_al[131072] tmp1579;

	int32_pl tmp1580;

	for i797 = [0: 256]{
 		for i798 = [0: 512]{
 			tmp1580 = ((0 + (i797 * 512)) + (i798 * 1));
			tmp1577[tmp1580] = tmp72;
			tmp1578[tmp1580] = tmp1563[i797][i798];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp1578, tmp1577, tmp1579);

	ClearMemSecret1(131072, tmp1577);

	ClearMemSecret1(131072, tmp1578);

	for i797 = [0: 256]{
 		for i798 = [0: 512]{
 			tmp1580 = ((0 + (i797 * 512)) + (i798 * 1));
			tmp1576[i797][i798] = tmp1579[tmp1580];
		};
	};
	ClearMemSecret1(131072, tmp1579);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/linear1/mul_2'} *)
	(* J806 .* J808 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1566, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1576, 12);

	int64_al[256][512] tmp1581;

	int64_al[131072] tmp1582;

	int64_al[131072] tmp1583;

	int64_al[131072] tmp1584;

	int32_pl tmp1585;

	for i799 = [0: 256]{
 		for i800 = [0: 512]{
 			tmp1585 = ((0 + (i799 * 512)) + (i800 * 1));
			tmp1582[tmp1585] = tmp1566[i799][i800];
			tmp1583[tmp1585] = tmp1576[i799][i800];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1582, tmp1583, tmp1584);

	ClearMemSecret1(131072, tmp1582);

	ClearMemSecret1(131072, tmp1583);

	for i799 = [0: 256]{
 		for i800 = [0: 512]{
 			tmp1585 = ((0 + (i799 * 512)) + (i800 * 1));
			tmp1581[i799][i800] = tmp1584[tmp1585];
		};
	};
	ClearMemSecret1(131072, tmp1584);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1566);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1576);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 512, tmp1563, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_3/linear1/add'} *)
	(* J805 + J809 *)
	int64_al[256][512] tmp1588;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1588[i0][i1] = (tmp1563[i0][i1] + tmp1581[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1563);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1581);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/linear1/mul_3'} *)
	(* J106 .* J810 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1588, 12);

	int64_al[256][512] tmp1591;

	int64_al[131072] tmp1592;

	int64_al[131072] tmp1593;

	int64_al[131072] tmp1594;

	int32_pl tmp1595;

	for i801 = [0: 256]{
 		for i802 = [0: 512]{
 			tmp1595 = ((0 + (i801 * 512)) + (i802 * 1));
			tmp1592[tmp1595] = tmp106;
			tmp1593[tmp1595] = tmp1588[i801][i802];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp1593, tmp1592, tmp1594);

	ClearMemSecret1(131072, tmp1592);

	ClearMemSecret1(131072, tmp1593);

	for i801 = [0: 256]{
 		for i802 = [0: 512]{
 			tmp1595 = ((0 + (i801 * 512)) + (i802 * 1));
			tmp1591[i801][i802] = tmp1594[tmp1595];
		};
	};
	ClearMemSecret1(131072, tmp1594);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1588);

	int64_al[256][512] tmp1597;

	(* {'TFOpName': 'Tanh', 'TFNodeName': 'bert/encoder/layer_3/linear1/Tanh'} *)
	Tanh2(256, 512, tmp1591, tmp1597, 24, 24, 32, 64, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1591);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_3/linear1/add_1'} *)
	(* J80 + J812 *)
	int64_al[256][512] tmp1599;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1599[i0][i1] = (tmp80 + tmp1597[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1597);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_3/linear1/mul_5'} *)
	(* J813 .* J807 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1599, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1571, 12);

	int64_al[256][512] tmp1601;

	int64_al[131072] tmp1602;

	int64_al[131072] tmp1603;

	int64_al[131072] tmp1604;

	int32_pl tmp1605;

	for i803 = [0: 256]{
 		for i804 = [0: 512]{
 			tmp1605 = ((0 + (i803 * 512)) + (i804 * 1));
			tmp1602[tmp1605] = tmp1599[i803][i804];
			tmp1603[tmp1605] = tmp1571[i803][i804];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1602, tmp1603, tmp1604);

	ClearMemSecret1(131072, tmp1602);

	ClearMemSecret1(131072, tmp1603);

	for i803 = [0: 256]{
 		for i804 = [0: 512]{
 			tmp1605 = ((0 + (i803 * 512)) + (i804 * 1));
			tmp1601[i803][i804] = tmp1604[tmp1605];
		};
	};
	ClearMemSecret1(131072, tmp1604);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1599);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1571);

	int64_al[256][256] tmp1608;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 512, tmp1601, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_3/output/linear2/MatMul'} *)
	(* J814 * J71 *)
	MatMul2D(256, 512, 256, tmp1601, tmp71, tmp1608, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1601);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(512, 256, tmp71);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp98, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_3/output/linear2/BiasAdd'} *)
	(* J815 + J98 *)
	int64_al[256][256] tmp1611;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1611[i0][i1] = (tmp1608[i0][i1] + tmp98[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp98);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1608);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp1558, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_3/output/add'} *)
	(* J803 + J816 *)
	int64_al[256][256] tmp1614;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1614[i0][i1] = (tmp1558[i0][i1] + tmp1611[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1611);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1558);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/moments/mean'} *)
	int64_al tmp1617;

	int64_al[256] tmp1618;

	int64_al[256] tmp1619;

	int64_al[256][1] tmp1620;

	for i805 = [0: 256]{
 		tmp1617 = 0L;
		for i806 = [0: 256]{
 			tmp1617 = (tmp1617 + tmp1614[i805][i806]);
		};
		tmp1618[(0 + (i805 * 1))] = tmp1617;
	};
	ElemWiseVectorPublicDiv(256, tmp1618, 256, tmp1619);

	ClearMemSecret1(256, tmp1618);

	for i805 = [0: 256]{
 		tmp1620[i805][0] = tmp1619[(0 + (i805 * 1))];
	};
	ClearMemSecret1(256, tmp1619);

	int64_al[256][1] tmp1621;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	for i807 = [0: 256]{
 		for i808 = [0: 1]{
 			tmp1621[i807][i808] = (0L - tmp1620[i807][i808]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	(* J817 + tmp1621 *)
	int64_al[256][256] tmp1622;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1622[i0][i1] = (tmp1614[i0][i1] + tmp1621[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/moments/SquaredDifference__mul'} *)
	(* J819 .* J819 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1622, 12);

	int64_al[256][256] tmp1623;

	int64_al[65536] tmp1624;

	int64_al[65536] tmp1625;

	int64_al[65536] tmp1626;

	int32_pl tmp1627;

	for i809 = [0: 256]{
 		for i810 = [0: 256]{
 			tmp1627 = ((0 + (i809 * 256)) + (i810 * 1));
			tmp1624[tmp1627] = tmp1622[i809][i810];
			tmp1625[tmp1627] = tmp1622[i809][i810];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1624, tmp1625, tmp1626);

	ClearMemSecret1(65536, tmp1624);

	ClearMemSecret1(65536, tmp1625);

	for i809 = [0: 256]{
 		for i810 = [0: 256]{
 			tmp1627 = ((0 + (i809 * 256)) + (i810 * 1));
			tmp1623[i809][i810] = tmp1626[tmp1627];
		};
	};
	ClearMemSecret1(65536, tmp1626);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1622);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/moments/variance'} *)
	int64_al tmp1629;

	int64_al[256] tmp1630;

	int64_al[256] tmp1631;

	int64_al[256][1] tmp1632;

	for i811 = [0: 256]{
 		tmp1629 = 0L;
		for i812 = [0: 256]{
 			tmp1629 = (tmp1629 + tmp1623[i811][i812]);
		};
		tmp1630[(0 + (i811 * 1))] = tmp1629;
	};
	ElemWiseVectorPublicDiv(256, tmp1630, 256, tmp1631);

	ClearMemSecret1(256, tmp1630);

	for i811 = [0: 256]{
 		tmp1632[i811][0] = tmp1631[(0 + (i811 * 1))];
	};
	ClearMemSecret1(256, tmp1631);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1623);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/batchnorm/add'} *)
	(* J15 + J821 *)
	int64_al[256][1] tmp1634;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp1634[i0][i1] = (tmp15 + tmp1632[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1632);

	int64_al[256][1] tmp1636;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp1634, tmp1636, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1634);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/batchnorm/mul'} *)
	(* J823 .* J41 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1636, 12);

	int64_al[256][256] tmp1638;

	int64_al[65536] tmp1639;

	int64_al[65536] tmp1640;

	int64_al[65536] tmp1641;

	int32_pl tmp1642;

	for i813 = [0: 256]{
 		for i814 = [0: 256]{
 			tmp1642 = ((0 + (i813 * 256)) + (i814 * 1));
			tmp1639[tmp1642] = tmp1636[i813][0];
			tmp1640[tmp1642] = tmp41[i814];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp1639, tmp1640, tmp1641);

	ClearMemSecret1(65536, tmp1639);

	ClearMemSecret1(65536, tmp1640);

	for i813 = [0: 256]{
 		for i814 = [0: 256]{
 			tmp1642 = ((0 + (i813 * 256)) + (i814 * 1));
			tmp1638[i813][i814] = tmp1641[tmp1642];
		};
	};
	ClearMemSecret1(65536, tmp1641);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp41);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1636);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/batchnorm/mul_2'} *)
	(* J824 .* J818 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1638, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1620, 12);

	int64_al[256][256] tmp1645;

	int64_al[65536] tmp1646;

	int64_al[65536] tmp1647;

	int64_al[65536] tmp1648;

	int32_pl tmp1649;

	for i815 = [0: 256]{
 		for i816 = [0: 256]{
 			tmp1649 = ((0 + (i815 * 256)) + (i816 * 1));
			tmp1646[tmp1649] = tmp1638[i815][i816];
			tmp1647[tmp1649] = tmp1620[i815][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1646, tmp1647, tmp1648);

	ClearMemSecret1(65536, tmp1646);

	ClearMemSecret1(65536, tmp1647);

	for i815 = [0: 256]{
 		for i816 = [0: 256]{
 			tmp1649 = ((0 + (i815 * 256)) + (i816 * 1));
			tmp1645[i815][i816] = tmp1648[tmp1649];
		};
	};
	ClearMemSecret1(65536, tmp1648);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1620);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp45, 12);

	int64_al[256][256] tmp1651;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/batchnorm/sub'} *)
	for i817 = [0: 256]{
 		for i818 = [0: 256]{
 			tmp1651[i817][i818] = (0L - tmp1645[i817][i818]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/batchnorm/sub'} *)
	(* J45 + tmp1651 *)
	int64_al[256][256] tmp1652;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1652[i0][i1] = (tmp45[i1] + tmp1651[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp45);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1645);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/batchnorm/mul_1'} *)
	(* J817 .* J824 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1614, 12);

	int64_al[256][256] tmp1655;

	int64_al[65536] tmp1656;

	int64_al[65536] tmp1657;

	int64_al[65536] tmp1658;

	int32_pl tmp1659;

	for i819 = [0: 256]{
 		for i820 = [0: 256]{
 			tmp1659 = ((0 + (i819 * 256)) + (i820 * 1));
			tmp1656[tmp1659] = tmp1614[i819][i820];
			tmp1657[tmp1659] = tmp1638[i819][i820];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1656, tmp1657, tmp1658);

	ClearMemSecret1(65536, tmp1656);

	ClearMemSecret1(65536, tmp1657);

	for i819 = [0: 256]{
 		for i820 = [0: 256]{
 			tmp1659 = ((0 + (i819 * 256)) + (i820 * 1));
			tmp1655[i819][i820] = tmp1658[tmp1659];
		};
	};
	ClearMemSecret1(65536, tmp1658);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1638);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/pre_norm/batchnorm/add_1'} *)
	(* J827 + J826 *)
	int64_al[256][256] tmp1661;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1661[i0][i1] = (tmp1655[i0][i1] + tmp1652[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1652);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1655);

	int64_al[256][768] tmp1664;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp1661, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/qkv/MatMul'} *)
	(* J828 * J65 *)
	MatMul2D(256, 256, 768, tmp1661, tmp65, tmp1664, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1661);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp65);

	int64_al[256][3][4][64] tmp1667;

	int64_pl i826;

	int64_pl i825;

	int64_pl i824;

	int64_pl i823;

	int64_pl i822;

	int64_pl i821;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Reshape'} *)
	(* reshape(J829, 256, 3, 4, 64) *)
	i821 = 0L;
	i822 = 0L;
	for i823 = [0: 256]{
 		for i824 = [0: 3]{
 			for i825 = [0: 4]{
 				for i826 = [0: 64]{
 					tmp1667[i823][i824][i825][i826] = tmp1664[i821][i822];
					i822 = (i822 + 1L);
					if ((i822 == 768L)) {
						i822 = 0L;
						i821 = (i821 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp1664);

	int64_al[3][4][256][64] tmp1669;

	int64_pl i830;

	int64_pl i829;

	int64_pl i828;

	int64_pl i827;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_4/attention/self/transpose'} *)
	(* transpose(J830, [256, 3, 4, 64] --> [3, 4, 256, 64]) *)
	for i827 = [0: 256]{
 		for i828 = [0: 3]{
 			for i829 = [0: 4]{
 				for i830 = [0: 64]{
 					tmp1669[i828][i829][i827][i830] = tmp1667[i827][i828][i829][i830];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 3, 4, 64, tmp1667);

	int64_al[1][4][256][64] tmp1671;

	int64_pl i834;

	int64_pl i833;

	int64_pl i832;

	int64_pl i831;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_2'} *)
	(* slice(J831, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i831 = [0: 1]{
 		for i832 = [0: 4]{
 			for i833 = [0: 256]{
 				for i834 = [0: 64]{
 					tmp1671[i831][i832][i833][i834] = tmp1669[(i831 + 2L)][(i832 + 0L)][(i833 + 0L)][(i834 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp1672;

	int64_pl i838;

	int64_pl i837;

	int64_pl i836;

	int64_pl i835;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_18'} *)
	(* slice(J832, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i835 = [0: 1]{
 		for i836 = [0: 1]{
 			for i837 = [0: 256]{
 				for i838 = [0: 64]{
 					tmp1672[i835][i836][i837][i838] = tmp1671[(i835 + 0L)][(i836 + 3L)][(i837 + 0L)][(i838 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1673;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1672, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_15'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1672, tmp1673);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1672);

	int64_al[1][1][256][64] tmp1675;

	int64_pl i842;

	int64_pl i841;

	int64_pl i840;

	int64_pl i839;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_16'} *)
	(* slice(J832, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i839 = [0: 1]{
 		for i840 = [0: 1]{
 			for i841 = [0: 256]{
 				for i842 = [0: 64]{
 					tmp1675[i839][i840][i841][i842] = tmp1671[(i839 + 0L)][(i840 + 2L)][(i841 + 0L)][(i842 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1676;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1675, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_13'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1675, tmp1676);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1675);

	int64_al[1][1][256][64] tmp1678;

	int64_pl i846;

	int64_pl i845;

	int64_pl i844;

	int64_pl i843;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_14'} *)
	(* slice(J832, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i843 = [0: 1]{
 		for i844 = [0: 1]{
 			for i845 = [0: 256]{
 				for i846 = [0: 64]{
 					tmp1678[i843][i844][i845][i846] = tmp1671[(i843 + 0L)][(i844 + 1L)][(i845 + 0L)][(i846 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1679;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1678, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_11'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1678, tmp1679);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1678);

	int64_al[1][1][256][64] tmp1681;

	int64_pl i850;

	int64_pl i849;

	int64_pl i848;

	int64_pl i847;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_12'} *)
	(* slice(J832, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i847 = [0: 1]{
 		for i848 = [0: 1]{
 			for i849 = [0: 256]{
 				for i850 = [0: 64]{
 					tmp1681[i847][i848][i849][i850] = tmp1671[(i847 + 0L)][(i848 + 0L)][(i849 + 0L)][(i850 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1671);

	int64_al[256][64] tmp1683;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1681, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_9'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1681, tmp1683);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1681);

	int64_al[1][4][256][64] tmp1685;

	int64_pl i854;

	int64_pl i853;

	int64_pl i852;

	int64_pl i851;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_1'} *)
	(* slice(J831, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i851 = [0: 1]{
 		for i852 = [0: 4]{
 			for i853 = [0: 256]{
 				for i854 = [0: 64]{
 					tmp1685[i851][i852][i853][i854] = tmp1669[(i851 + 1L)][(i852 + 0L)][(i853 + 0L)][(i854 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp1686;

	int64_pl i858;

	int64_pl i857;

	int64_pl i856;

	int64_pl i855;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_10'} *)
	(* slice(J841, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i855 = [0: 1]{
 		for i856 = [0: 1]{
 			for i857 = [0: 256]{
 				for i858 = [0: 64]{
 					tmp1686[i855][i856][i857][i858] = tmp1685[(i855 + 0L)][(i856 + 3L)][(i857 + 0L)][(i858 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1687;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1686, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_7'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1686, tmp1687);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1686);

	int64_al[1][1][256][64] tmp1689;

	int64_pl i862;

	int64_pl i861;

	int64_pl i860;

	int64_pl i859;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_8'} *)
	(* slice(J841, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i859 = [0: 1]{
 		for i860 = [0: 1]{
 			for i861 = [0: 256]{
 				for i862 = [0: 64]{
 					tmp1689[i859][i860][i861][i862] = tmp1685[(i859 + 0L)][(i860 + 2L)][(i861 + 0L)][(i862 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1690;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1689, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_5'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1689, tmp1690);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1689);

	int64_al[1][1][256][64] tmp1692;

	int64_pl i866;

	int64_pl i865;

	int64_pl i864;

	int64_pl i863;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_6'} *)
	(* slice(J841, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i863 = [0: 1]{
 		for i864 = [0: 1]{
 			for i865 = [0: 256]{
 				for i866 = [0: 64]{
 					tmp1692[i863][i864][i865][i866] = tmp1685[(i863 + 0L)][(i864 + 1L)][(i865 + 0L)][(i866 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1693;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1692, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_3'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1692, tmp1693);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1692);

	int64_al[1][1][256][64] tmp1695;

	int64_pl i870;

	int64_pl i869;

	int64_pl i868;

	int64_pl i867;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_4'} *)
	(* slice(J841, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i867 = [0: 1]{
 		for i868 = [0: 1]{
 			for i869 = [0: 256]{
 				for i870 = [0: 64]{
 					tmp1695[i867][i868][i869][i870] = tmp1685[(i867 + 0L)][(i868 + 0L)][(i869 + 0L)][(i870 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1685);

	int64_al[256][64] tmp1697;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1695, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_1'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1695, tmp1697);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1695);

	int64_al[1][4][256][64] tmp1699;

	int64_pl i874;

	int64_pl i873;

	int64_pl i872;

	int64_pl i871;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice'} *)
	(* slice(J831, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i871 = [0: 1]{
 		for i872 = [0: 4]{
 			for i873 = [0: 256]{
 				for i874 = [0: 64]{
 					tmp1699[i871][i872][i873][i874] = tmp1669[(i871 + 0L)][(i872 + 0L)][(i873 + 0L)][(i874 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 4, 256, 64, tmp1669);

	int64_al[1][1][256][64] tmp1701;

	int64_pl i878;

	int64_pl i877;

	int64_pl i876;

	int64_pl i875;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_9'} *)
	(* slice(J850, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i875 = [0: 1]{
 		for i876 = [0: 1]{
 			for i877 = [0: 256]{
 				for i878 = [0: 64]{
 					tmp1701[i875][i876][i877][i878] = tmp1699[(i875 + 0L)][(i876 + 3L)][(i877 + 0L)][(i878 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1702;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1701, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_6'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1701, tmp1702);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1701);

	int64_al[256][256] tmp1705;

	int64_al[64][256] tmp1704;

	int64_pl i880;

	int64_pl i879;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* transpose(J843, [256, 64] --> [64, 256]) *)
	for i879 = [0: 256]{
 		for i880 = [0: 64]{
 			tmp1704[i880][i879] = tmp1687[i879][i880];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* J852 * tmp1704 *)
	MatMul2D(256, 64, 256, tmp1702, tmp1704, tmp1705, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1702);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1687);

	int64_al[1][1][256][256] tmp1708;

	int64_pl i886;

	int64_pl i885;

	int64_pl i884;

	int64_pl i883;

	int64_pl i882;

	int64_pl i881;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Reshape_4'} *)
	(* reshape(J853, 1, 1, 256, 256) *)
	i881 = 0L;
	i882 = 0L;
	for i883 = [0: 1]{
 		for i884 = [0: 1]{
 			for i885 = [0: 256]{
 				for i886 = [0: 256]{
 					tmp1708[i883][i884][i885][i886] = tmp1705[i881][i882];
					i882 = (i882 + 1L);
					if ((i882 == 256L)) {
						i882 = 0L;
						i881 = (i881 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1705);

	int64_al[1][1][256][64] tmp1710;

	int64_pl i890;

	int64_pl i889;

	int64_pl i888;

	int64_pl i887;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_7'} *)
	(* slice(J850, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i887 = [0: 1]{
 		for i888 = [0: 1]{
 			for i889 = [0: 256]{
 				for i890 = [0: 64]{
 					tmp1710[i887][i888][i889][i890] = tmp1699[(i887 + 0L)][(i888 + 2L)][(i889 + 0L)][(i890 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1711;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1710, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_4'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1710, tmp1711);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1710);

	int64_al[256][256] tmp1714;

	int64_al[64][256] tmp1713;

	int64_pl i892;

	int64_pl i891;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* transpose(J845, [256, 64] --> [64, 256]) *)
	for i891 = [0: 256]{
 		for i892 = [0: 64]{
 			tmp1713[i892][i891] = tmp1690[i891][i892];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* J856 * tmp1713 *)
	MatMul2D(256, 64, 256, tmp1711, tmp1713, tmp1714, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1711);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1690);

	int64_al[1][1][256][256] tmp1717;

	int64_pl i898;

	int64_pl i897;

	int64_pl i896;

	int64_pl i895;

	int64_pl i894;

	int64_pl i893;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Reshape_3'} *)
	(* reshape(J857, 1, 1, 256, 256) *)
	i893 = 0L;
	i894 = 0L;
	for i895 = [0: 1]{
 		for i896 = [0: 1]{
 			for i897 = [0: 256]{
 				for i898 = [0: 256]{
 					tmp1717[i895][i896][i897][i898] = tmp1714[i893][i894];
					i894 = (i894 + 1L);
					if ((i894 == 256L)) {
						i894 = 0L;
						i893 = (i893 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1714);

	int64_al[1][1][256][64] tmp1719;

	int64_pl i902;

	int64_pl i901;

	int64_pl i900;

	int64_pl i899;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_5'} *)
	(* slice(J850, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i899 = [0: 1]{
 		for i900 = [0: 1]{
 			for i901 = [0: 256]{
 				for i902 = [0: 64]{
 					tmp1719[i899][i900][i901][i902] = tmp1699[(i899 + 0L)][(i900 + 1L)][(i901 + 0L)][(i902 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1720;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1719, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_2'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1719, tmp1720);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1719);

	int64_al[256][256] tmp1723;

	int64_al[64][256] tmp1722;

	int64_pl i904;

	int64_pl i903;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* transpose(J847, [256, 64] --> [64, 256]) *)
	for i903 = [0: 256]{
 		for i904 = [0: 64]{
 			tmp1722[i904][i903] = tmp1693[i903][i904];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* J860 * tmp1722 *)
	MatMul2D(256, 64, 256, tmp1720, tmp1722, tmp1723, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1693);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1720);

	int64_al[1][1][256][256] tmp1726;

	int64_pl i910;

	int64_pl i909;

	int64_pl i908;

	int64_pl i907;

	int64_pl i906;

	int64_pl i905;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Reshape_2'} *)
	(* reshape(J861, 1, 1, 256, 256) *)
	i905 = 0L;
	i906 = 0L;
	for i907 = [0: 1]{
 		for i908 = [0: 1]{
 			for i909 = [0: 256]{
 				for i910 = [0: 256]{
 					tmp1726[i907][i908][i909][i910] = tmp1723[i905][i906];
					i906 = (i906 + 1L);
					if ((i906 == 256L)) {
						i906 = 0L;
						i905 = (i905 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1723);

	int64_al[1][1][256][64] tmp1728;

	int64_pl i914;

	int64_pl i913;

	int64_pl i912;

	int64_pl i911;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_3'} *)
	(* slice(J850, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i911 = [0: 1]{
 		for i912 = [0: 1]{
 			for i913 = [0: 256]{
 				for i914 = [0: 64]{
 					tmp1728[i911][i912][i913][i914] = tmp1699[(i911 + 0L)][(i912 + 0L)][(i913 + 0L)][(i914 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1699);

	int64_al[256][64] tmp1730;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1728, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1728, tmp1730);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1728);

	int64_al[256][256] tmp1733;

	int64_al[64][256] tmp1732;

	int64_pl i916;

	int64_pl i915;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* transpose(J849, [256, 64] --> [64, 256]) *)
	for i915 = [0: 256]{
 		for i916 = [0: 64]{
 			tmp1732[i916][i915] = tmp1697[i915][i916];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* J864 * tmp1732 *)
	MatMul2D(256, 64, 256, tmp1730, tmp1732, tmp1733, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1697);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1730);

	int64_al[1][1][256][256] tmp1736;

	int64_pl i922;

	int64_pl i921;

	int64_pl i920;

	int64_pl i919;

	int64_pl i918;

	int64_pl i917;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Reshape_1'} *)
	(* reshape(J865, 1, 1, 256, 256) *)
	i917 = 0L;
	i918 = 0L;
	for i919 = [0: 1]{
 		for i920 = [0: 1]{
 			for i921 = [0: 256]{
 				for i922 = [0: 256]{
 					tmp1736[i919][i920][i921][i922] = tmp1733[i917][i918];
					i918 = (i918 + 1L);
					if ((i918 == 256L)) {
						i918 = 0L;
						i917 = (i917 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1733);

	int64_al[1][4][256][256] tmp1738;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1708, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1717, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1726, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1736, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/concat_2'} *)
	Concat4T44444(1, 4, 256, 256, 1, 1, 256, 256, tmp1736, 1, 1, 256, 256, tmp1726, 1, 1, 256, 256, tmp1717, 1, 1, 256, 256, tmp1708, 1, tmp1738);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1717);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1726);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1736);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1708);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Mul'} *)
	(* J47 .* J867 *)
	int64_al[1][4][256][256] tmp1744;

	int64_al[262144] tmp1745;

	int64_al[262144] tmp1746;

	int64_al[262144] tmp1747;

	int32_pl tmp1748;

	for i923 = [0: 1]{
 		for i924 = [0: 4]{
 			for i925 = [0: 256]{
 				for i926 = [0: 256]{
 					tmp1748 = ((((0 + (i923 * 262144)) + (i924 * 65536)) + (i925 * 256)) + (i926 * 1));
					tmp1745[tmp1748] = tmp47;
					tmp1746[tmp1748] = tmp1738[i923][i924][i925][i926];
				};
			};
		};
	};
	ElemWiseActModelVectorMult(262144, tmp1746, tmp1745, tmp1747);

	ClearMemSecret1(262144, tmp1745);

	ClearMemSecret1(262144, tmp1746);

	for i923 = [0: 1]{
 		for i924 = [0: 4]{
 			for i925 = [0: 256]{
 				for i926 = [0: 256]{
 					tmp1748 = ((((0 + (i923 * 262144)) + (i924 * 65536)) + (i925 * 256)) + (i926 * 1));
					tmp1744[i923][i924][i925][i926] = tmp1747[tmp1748];
				};
			};
		};
	};
	ClearMemSecret1(262144, tmp1747);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp1738);

	int64_al[1][4][256][256] tmp1750;

	(* {'TFOpName': 'Softmax', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Softmax'} *)
	Softmax4(1, 4, 256, 256, tmp1744, tmp1750);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp1744);

	int64_al[1][1][256][256] tmp1752;

	int64_pl i930;

	int64_pl i929;

	int64_pl i928;

	int64_pl i927;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_17'} *)
	(* slice(J869, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i927 = [0: 1]{
 		for i928 = [0: 1]{
 			for i929 = [0: 256]{
 				for i930 = [0: 256]{
 					tmp1752[i927][i928][i929][i930] = tmp1750[(i927 + 0L)][(i928 + 3L)][(i929 + 0L)][(i930 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp1753;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1752, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_14'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1752, tmp1753);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1752);

	int64_al[256][64] tmp1755;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/MatMul_7'} *)
	(* J871 * J834 *)
	MatMul2D(256, 256, 64, tmp1753, tmp1673, tmp1755, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1753);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1673);

	int64_al[1][1][256][64] tmp1758;

	int64_pl i936;

	int64_pl i935;

	int64_pl i934;

	int64_pl i933;

	int64_pl i932;

	int64_pl i931;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Reshape_8'} *)
	(* reshape(J872, 1, 1, 256, 64) *)
	i931 = 0L;
	i932 = 0L;
	for i933 = [0: 1]{
 		for i934 = [0: 1]{
 			for i935 = [0: 256]{
 				for i936 = [0: 64]{
 					tmp1758[i933][i934][i935][i936] = tmp1755[i931][i932];
					i932 = (i932 + 1L);
					if ((i932 == 64L)) {
						i932 = 0L;
						i931 = (i931 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1755);

	int64_al[1][1][256][256] tmp1760;

	int64_pl i940;

	int64_pl i939;

	int64_pl i938;

	int64_pl i937;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_15'} *)
	(* slice(J869, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i937 = [0: 1]{
 		for i938 = [0: 1]{
 			for i939 = [0: 256]{
 				for i940 = [0: 256]{
 					tmp1760[i937][i938][i939][i940] = tmp1750[(i937 + 0L)][(i938 + 2L)][(i939 + 0L)][(i940 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp1761;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1760, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_12'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1760, tmp1761);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1760);

	int64_al[256][64] tmp1763;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/MatMul_6'} *)
	(* J875 * J836 *)
	MatMul2D(256, 256, 64, tmp1761, tmp1676, tmp1763, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1761);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1676);

	int64_al[1][1][256][64] tmp1766;

	int64_pl i946;

	int64_pl i945;

	int64_pl i944;

	int64_pl i943;

	int64_pl i942;

	int64_pl i941;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Reshape_7'} *)
	(* reshape(J876, 1, 1, 256, 64) *)
	i941 = 0L;
	i942 = 0L;
	for i943 = [0: 1]{
 		for i944 = [0: 1]{
 			for i945 = [0: 256]{
 				for i946 = [0: 64]{
 					tmp1766[i943][i944][i945][i946] = tmp1763[i941][i942];
					i942 = (i942 + 1L);
					if ((i942 == 64L)) {
						i942 = 0L;
						i941 = (i941 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1763);

	int64_al[1][1][256][256] tmp1768;

	int64_pl i950;

	int64_pl i949;

	int64_pl i948;

	int64_pl i947;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_13'} *)
	(* slice(J869, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i947 = [0: 1]{
 		for i948 = [0: 1]{
 			for i949 = [0: 256]{
 				for i950 = [0: 256]{
 					tmp1768[i947][i948][i949][i950] = tmp1750[(i947 + 0L)][(i948 + 1L)][(i949 + 0L)][(i950 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp1769;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1768, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_10'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1768, tmp1769);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1768);

	int64_al[256][64] tmp1771;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/MatMul_5'} *)
	(* J879 * J838 *)
	MatMul2D(256, 256, 64, tmp1769, tmp1679, tmp1771, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1679);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1769);

	int64_al[1][1][256][64] tmp1774;

	int64_pl i956;

	int64_pl i955;

	int64_pl i954;

	int64_pl i953;

	int64_pl i952;

	int64_pl i951;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Reshape_6'} *)
	(* reshape(J880, 1, 1, 256, 64) *)
	i951 = 0L;
	i952 = 0L;
	for i953 = [0: 1]{
 		for i954 = [0: 1]{
 			for i955 = [0: 256]{
 				for i956 = [0: 64]{
 					tmp1774[i953][i954][i955][i956] = tmp1771[i951][i952];
					i952 = (i952 + 1L);
					if ((i952 == 64L)) {
						i952 = 0L;
						i951 = (i951 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1771);

	int64_al[1][1][256][256] tmp1776;

	int64_pl i960;

	int64_pl i959;

	int64_pl i958;

	int64_pl i957;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Slice_11'} *)
	(* slice(J869, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i957 = [0: 1]{
 		for i958 = [0: 1]{
 			for i959 = [0: 256]{
 				for i960 = [0: 256]{
 					tmp1776[i957][i958][i959][i960] = tmp1750[(i957 + 0L)][(i958 + 0L)][(i959 + 0L)][(i960 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp1750);

	int64_al[256][256] tmp1778;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1776, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Squeeze_8'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp1776, tmp1778);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1776);

	int64_al[256][64] tmp1780;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/MatMul_4'} *)
	(* J883 * J840 *)
	MatMul2D(256, 256, 64, tmp1778, tmp1683, tmp1780, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1683);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1778);

	int64_al[1][1][256][64] tmp1783;

	int64_pl i966;

	int64_pl i965;

	int64_pl i964;

	int64_pl i963;

	int64_pl i962;

	int64_pl i961;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Reshape_5'} *)
	(* reshape(J884, 1, 1, 256, 64) *)
	i961 = 0L;
	i962 = 0L;
	for i963 = [0: 1]{
 		for i964 = [0: 1]{
 			for i965 = [0: 256]{
 				for i966 = [0: 64]{
 					tmp1783[i963][i964][i965][i966] = tmp1780[i961][i962];
					i962 = (i962 + 1L);
					if ((i962 == 64L)) {
						i962 = 0L;
						i961 = (i961 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1780);

	int64_al[1][4][256][64] tmp1785;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1758, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1766, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1774, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1783, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_4/attention/self/concat_5'} *)
	Concat4T44444(1, 4, 256, 64, 1, 1, 256, 64, tmp1783, 1, 1, 256, 64, tmp1774, 1, 1, 256, 64, tmp1766, 1, 1, 256, 64, tmp1758, 1, tmp1785);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1766);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1783);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1758);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1774);

	int64_al[1][256][4][64] tmp1791;

	int64_pl i970;

	int64_pl i969;

	int64_pl i968;

	int64_pl i967;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_4/attention/self/transpose_5'} *)
	(* transpose(J886, [1, 4, 256, 64] --> [1, 256, 4, 64]) *)
	for i967 = [0: 1]{
 		for i968 = [0: 4]{
 			for i969 = [0: 256]{
 				for i970 = [0: 64]{
 					tmp1791[i967][i969][i968][i970] = tmp1785[i967][i968][i969][i970];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1785);

	int64_al[256][256] tmp1793;

	int64_pl i976;

	int64_pl i975;

	int64_pl i974;

	int64_pl i973;

	int64_pl i972;

	int64_pl i971;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_4/attention/self/Reshape_9'} *)
	(* reshape(J887, 256, 256) *)
	i971 = 0L;
	i972 = 0L;
	i973 = 0L;
	i974 = 0L;
	for i975 = [0: 256]{
 		for i976 = [0: 256]{
 			tmp1793[i975][i976] = tmp1791[i971][i972][i973][i974];
			i974 = (i974 + 1L);
			if ((i974 == 64L)) {
				i974 = 0L;
				i973 = (i973 + 1L);
				if ((i973 == 4L)) {
					i973 = 0L;
					i972 = (i972 + 1L);
					if ((i972 == 256L)) {
						i972 = 0L;
						i971 = (i971 + 1L);
					}
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 4, 64, tmp1791);

	int64_al[256][256] tmp1795;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/attention/self/proj/MatMul'} *)
	(* J888 * J77 *)
	MatMul2D(256, 256, 256, tmp1793, tmp77, tmp1795, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp77);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1793);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp83, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_4/attention/self/proj/BiasAdd'} *)
	(* J889 + J83 *)
	int64_al[256][256] tmp1798;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1798[i0][i1] = (tmp1795[i0][i1] + tmp83[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp83);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1795);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp1614, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_4/attention/output/add'} *)
	(* J817 + J890 *)
	int64_al[256][256] tmp1801;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1801[i0][i1] = (tmp1614[i0][i1] + tmp1798[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1614);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1798);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/moments/mean'} *)
	int64_al tmp1804;

	int64_al[256] tmp1805;

	int64_al[256] tmp1806;

	int64_al[256][1] tmp1807;

	for i977 = [0: 256]{
 		tmp1804 = 0L;
		for i978 = [0: 256]{
 			tmp1804 = (tmp1804 + tmp1801[i977][i978]);
		};
		tmp1805[(0 + (i977 * 1))] = tmp1804;
	};
	ElemWiseVectorPublicDiv(256, tmp1805, 256, tmp1806);

	ClearMemSecret1(256, tmp1805);

	for i977 = [0: 256]{
 		tmp1807[i977][0] = tmp1806[(0 + (i977 * 1))];
	};
	ClearMemSecret1(256, tmp1806);

	int64_al[256][1] tmp1808;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/moments/SquaredDifference__sub'} *)
	for i979 = [0: 256]{
 		for i980 = [0: 1]{
 			tmp1808[i979][i980] = (0L - tmp1807[i979][i980]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/moments/SquaredDifference__sub'} *)
	(* J891 + tmp1808 *)
	int64_al[256][256] tmp1809;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1809[i0][i1] = (tmp1801[i0][i1] + tmp1808[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/moments/SquaredDifference__mul'} *)
	(* J893 .* J893 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1809, 12);

	int64_al[256][256] tmp1810;

	int64_al[65536] tmp1811;

	int64_al[65536] tmp1812;

	int64_al[65536] tmp1813;

	int32_pl tmp1814;

	for i981 = [0: 256]{
 		for i982 = [0: 256]{
 			tmp1814 = ((0 + (i981 * 256)) + (i982 * 1));
			tmp1811[tmp1814] = tmp1809[i981][i982];
			tmp1812[tmp1814] = tmp1809[i981][i982];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1811, tmp1812, tmp1813);

	ClearMemSecret1(65536, tmp1811);

	ClearMemSecret1(65536, tmp1812);

	for i981 = [0: 256]{
 		for i982 = [0: 256]{
 			tmp1814 = ((0 + (i981 * 256)) + (i982 * 1));
			tmp1810[i981][i982] = tmp1813[tmp1814];
		};
	};
	ClearMemSecret1(65536, tmp1813);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1809);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/moments/variance'} *)
	int64_al tmp1816;

	int64_al[256] tmp1817;

	int64_al[256] tmp1818;

	int64_al[256][1] tmp1819;

	for i983 = [0: 256]{
 		tmp1816 = 0L;
		for i984 = [0: 256]{
 			tmp1816 = (tmp1816 + tmp1810[i983][i984]);
		};
		tmp1817[(0 + (i983 * 1))] = tmp1816;
	};
	ElemWiseVectorPublicDiv(256, tmp1817, 256, tmp1818);

	ClearMemSecret1(256, tmp1817);

	for i983 = [0: 256]{
 		tmp1819[i983][0] = tmp1818[(0 + (i983 * 1))];
	};
	ClearMemSecret1(256, tmp1818);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1810);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/batchnorm/add'} *)
	(* J15 + J895 *)
	int64_al[256][1] tmp1821;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp1821[i0][i1] = (tmp15 + tmp1819[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1819);

	int64_al[256][1] tmp1823;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp1821, tmp1823, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1821);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/batchnorm/mul'} *)
	(* J897 .* J56 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1823, 12);

	int64_al[256][256] tmp1825;

	int64_al[65536] tmp1826;

	int64_al[65536] tmp1827;

	int64_al[65536] tmp1828;

	int32_pl tmp1829;

	for i985 = [0: 256]{
 		for i986 = [0: 256]{
 			tmp1829 = ((0 + (i985 * 256)) + (i986 * 1));
			tmp1826[tmp1829] = tmp1823[i985][0];
			tmp1827[tmp1829] = tmp56[i986];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp1826, tmp1827, tmp1828);

	ClearMemSecret1(65536, tmp1826);

	ClearMemSecret1(65536, tmp1827);

	for i985 = [0: 256]{
 		for i986 = [0: 256]{
 			tmp1829 = ((0 + (i985 * 256)) + (i986 * 1));
			tmp1825[i985][i986] = tmp1828[tmp1829];
		};
	};
	ClearMemSecret1(65536, tmp1828);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp56);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1823);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/batchnorm/mul_2'} *)
	(* J898 .* J892 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1825, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1807, 12);

	int64_al[256][256] tmp1832;

	int64_al[65536] tmp1833;

	int64_al[65536] tmp1834;

	int64_al[65536] tmp1835;

	int32_pl tmp1836;

	for i987 = [0: 256]{
 		for i988 = [0: 256]{
 			tmp1836 = ((0 + (i987 * 256)) + (i988 * 1));
			tmp1833[tmp1836] = tmp1825[i987][i988];
			tmp1834[tmp1836] = tmp1807[i987][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1833, tmp1834, tmp1835);

	ClearMemSecret1(65536, tmp1833);

	ClearMemSecret1(65536, tmp1834);

	for i987 = [0: 256]{
 		for i988 = [0: 256]{
 			tmp1836 = ((0 + (i987 * 256)) + (i988 * 1));
			tmp1832[i987][i988] = tmp1835[tmp1836];
		};
	};
	ClearMemSecret1(65536, tmp1835);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1807);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp60, 12);

	int64_al[256][256] tmp1838;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/batchnorm/sub'} *)
	for i989 = [0: 256]{
 		for i990 = [0: 256]{
 			tmp1838[i989][i990] = (0L - tmp1832[i989][i990]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/batchnorm/sub'} *)
	(* J60 + tmp1838 *)
	int64_al[256][256] tmp1839;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1839[i0][i1] = (tmp60[i1] + tmp1838[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp60);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1832);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/batchnorm/mul_1'} *)
	(* J891 .* J898 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1801, 12);

	int64_al[256][256] tmp1842;

	int64_al[65536] tmp1843;

	int64_al[65536] tmp1844;

	int64_al[65536] tmp1845;

	int32_pl tmp1846;

	for i991 = [0: 256]{
 		for i992 = [0: 256]{
 			tmp1846 = ((0 + (i991 * 256)) + (i992 * 1));
			tmp1843[tmp1846] = tmp1801[i991][i992];
			tmp1844[tmp1846] = tmp1825[i991][i992];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1843, tmp1844, tmp1845);

	ClearMemSecret1(65536, tmp1843);

	ClearMemSecret1(65536, tmp1844);

	for i991 = [0: 256]{
 		for i992 = [0: 256]{
 			tmp1846 = ((0 + (i991 * 256)) + (i992 * 1));
			tmp1842[i991][i992] = tmp1845[tmp1846];
		};
	};
	ClearMemSecret1(65536, tmp1845);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1825);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1801);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_4/attention/output/norm1/batchnorm/add_1'} *)
	(* J901 + J900 *)
	int64_al[256][256] tmp1849;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1849[i0][i1] = (tmp1842[i0][i1] + tmp1839[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1839);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1842);

	int64_al[256][512] tmp1852;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp1849, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/linear1/MatMul'} *)
	(* J902 * J64 *)
	MatMul2D(256, 256, 512, tmp1849, tmp64, tmp1852, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp64);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(512, tmp61, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_4/linear1/BiasAdd'} *)
	(* J903 + J61 *)
	int64_al[256][512] tmp1854;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1854[i0][i1] = (tmp1852[i0][i1] + tmp61[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp61);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1852);

	(* {'TFOpName': 'Square', 'TFNodeName': 'bert/encoder/layer_4/linear1/ArithmeticOptimizer/ReplaceMulWithSquare_mul_1'} *)
	(* J904 .* J904 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1854, 12);

	int64_al[256][512] tmp1857;

	int64_al[131072] tmp1858;

	int64_al[131072] tmp1859;

	int64_al[131072] tmp1860;

	int32_pl tmp1861;

	for i993 = [0: 256]{
 		for i994 = [0: 512]{
 			tmp1861 = ((0 + (i993 * 512)) + (i994 * 1));
			tmp1858[tmp1861] = tmp1854[i993][i994];
			tmp1859[tmp1861] = tmp1854[i993][i994];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1858, tmp1859, tmp1860);

	ClearMemSecret1(131072, tmp1858);

	ClearMemSecret1(131072, tmp1859);

	for i993 = [0: 256]{
 		for i994 = [0: 512]{
 			tmp1861 = ((0 + (i993 * 512)) + (i994 * 1));
			tmp1857[i993][i994] = tmp1860[tmp1861];
		};
	};
	ClearMemSecret1(131072, tmp1860);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/linear1/mul_4'} *)
	(* J6 .* J904 *)
	int64_al[256][512] tmp1862;

	int64_al[131072] tmp1863;

	int64_al[131072] tmp1864;

	int64_al[131072] tmp1865;

	int32_pl tmp1866;

	for i995 = [0: 256]{
 		for i996 = [0: 512]{
 			tmp1866 = ((0 + (i995 * 512)) + (i996 * 1));
			tmp1863[tmp1866] = tmp6;
			tmp1864[tmp1866] = tmp1854[i995][i996];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp1864, tmp1863, tmp1865);

	ClearMemSecret1(131072, tmp1863);

	ClearMemSecret1(131072, tmp1864);

	for i995 = [0: 256]{
 		for i996 = [0: 512]{
 			tmp1866 = ((0 + (i995 * 512)) + (i996 * 1));
			tmp1862[i995][i996] = tmp1865[tmp1866];
		};
	};
	ClearMemSecret1(131072, tmp1865);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/linear1/mul'} *)
	(* J72 .* J904 *)
	int64_al[256][512] tmp1867;

	int64_al[131072] tmp1868;

	int64_al[131072] tmp1869;

	int64_al[131072] tmp1870;

	int32_pl tmp1871;

	for i997 = [0: 256]{
 		for i998 = [0: 512]{
 			tmp1871 = ((0 + (i997 * 512)) + (i998 * 1));
			tmp1868[tmp1871] = tmp72;
			tmp1869[tmp1871] = tmp1854[i997][i998];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp1869, tmp1868, tmp1870);

	ClearMemSecret1(131072, tmp1868);

	ClearMemSecret1(131072, tmp1869);

	for i997 = [0: 256]{
 		for i998 = [0: 512]{
 			tmp1871 = ((0 + (i997 * 512)) + (i998 * 1));
			tmp1867[i997][i998] = tmp1870[tmp1871];
		};
	};
	ClearMemSecret1(131072, tmp1870);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/linear1/mul_2'} *)
	(* J905 .* J907 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1857, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1867, 12);

	int64_al[256][512] tmp1872;

	int64_al[131072] tmp1873;

	int64_al[131072] tmp1874;

	int64_al[131072] tmp1875;

	int32_pl tmp1876;

	for i999 = [0: 256]{
 		for i1000 = [0: 512]{
 			tmp1876 = ((0 + (i999 * 512)) + (i1000 * 1));
			tmp1873[tmp1876] = tmp1857[i999][i1000];
			tmp1874[tmp1876] = tmp1867[i999][i1000];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1873, tmp1874, tmp1875);

	ClearMemSecret1(131072, tmp1873);

	ClearMemSecret1(131072, tmp1874);

	for i999 = [0: 256]{
 		for i1000 = [0: 512]{
 			tmp1876 = ((0 + (i999 * 512)) + (i1000 * 1));
			tmp1872[i999][i1000] = tmp1875[tmp1876];
		};
	};
	ClearMemSecret1(131072, tmp1875);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1867);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1857);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 512, tmp1854, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_4/linear1/add'} *)
	(* J904 + J908 *)
	int64_al[256][512] tmp1879;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1879[i0][i1] = (tmp1854[i0][i1] + tmp1872[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1872);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1854);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/linear1/mul_3'} *)
	(* J106 .* J909 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1879, 12);

	int64_al[256][512] tmp1882;

	int64_al[131072] tmp1883;

	int64_al[131072] tmp1884;

	int64_al[131072] tmp1885;

	int32_pl tmp1886;

	for i1001 = [0: 256]{
 		for i1002 = [0: 512]{
 			tmp1886 = ((0 + (i1001 * 512)) + (i1002 * 1));
			tmp1883[tmp1886] = tmp106;
			tmp1884[tmp1886] = tmp1879[i1001][i1002];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp1884, tmp1883, tmp1885);

	ClearMemSecret1(131072, tmp1883);

	ClearMemSecret1(131072, tmp1884);

	for i1001 = [0: 256]{
 		for i1002 = [0: 512]{
 			tmp1886 = ((0 + (i1001 * 512)) + (i1002 * 1));
			tmp1882[i1001][i1002] = tmp1885[tmp1886];
		};
	};
	ClearMemSecret1(131072, tmp1885);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1879);

	int64_al[256][512] tmp1888;

	(* {'TFOpName': 'Tanh', 'TFNodeName': 'bert/encoder/layer_4/linear1/Tanh'} *)
	Tanh2(256, 512, tmp1882, tmp1888, 24, 24, 32, 64, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1882);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_4/linear1/add_1'} *)
	(* J80 + J911 *)
	int64_al[256][512] tmp1890;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp1890[i0][i1] = (tmp80 + tmp1888[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1888);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_4/linear1/mul_5'} *)
	(* J912 .* J906 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1890, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp1862, 12);

	int64_al[256][512] tmp1892;

	int64_al[131072] tmp1893;

	int64_al[131072] tmp1894;

	int64_al[131072] tmp1895;

	int32_pl tmp1896;

	for i1003 = [0: 256]{
 		for i1004 = [0: 512]{
 			tmp1896 = ((0 + (i1003 * 512)) + (i1004 * 1));
			tmp1893[tmp1896] = tmp1890[i1003][i1004];
			tmp1894[tmp1896] = tmp1862[i1003][i1004];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp1893, tmp1894, tmp1895);

	ClearMemSecret1(131072, tmp1893);

	ClearMemSecret1(131072, tmp1894);

	for i1003 = [0: 256]{
 		for i1004 = [0: 512]{
 			tmp1896 = ((0 + (i1003 * 512)) + (i1004 * 1));
			tmp1892[i1003][i1004] = tmp1895[tmp1896];
		};
	};
	ClearMemSecret1(131072, tmp1895);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1890);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1862);

	int64_al[256][256] tmp1899;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 512, tmp1892, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_4/output/linear2/MatMul'} *)
	(* J913 * J84 *)
	MatMul2D(256, 512, 256, tmp1892, tmp84, tmp1899, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(512, 256, tmp84);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp1892);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp70, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_4/output/linear2/BiasAdd'} *)
	(* J914 + J70 *)
	int64_al[256][256] tmp1902;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1902[i0][i1] = (tmp1899[i0][i1] + tmp70[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1899);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp70);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp1849, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_4/output/add'} *)
	(* J902 + J915 *)
	int64_al[256][256] tmp1905;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1905[i0][i1] = (tmp1849[i0][i1] + tmp1902[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1902);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1849);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/moments/mean'} *)
	int64_al tmp1908;

	int64_al[256] tmp1909;

	int64_al[256] tmp1910;

	int64_al[256][1] tmp1911;

	for i1005 = [0: 256]{
 		tmp1908 = 0L;
		for i1006 = [0: 256]{
 			tmp1908 = (tmp1908 + tmp1905[i1005][i1006]);
		};
		tmp1909[(0 + (i1005 * 1))] = tmp1908;
	};
	ElemWiseVectorPublicDiv(256, tmp1909, 256, tmp1910);

	ClearMemSecret1(256, tmp1909);

	for i1005 = [0: 256]{
 		tmp1911[i1005][0] = tmp1910[(0 + (i1005 * 1))];
	};
	ClearMemSecret1(256, tmp1910);

	int64_al[256][1] tmp1912;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	for i1007 = [0: 256]{
 		for i1008 = [0: 1]{
 			tmp1912[i1007][i1008] = (0L - tmp1911[i1007][i1008]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	(* J916 + tmp1912 *)
	int64_al[256][256] tmp1913;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1913[i0][i1] = (tmp1905[i0][i1] + tmp1912[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/moments/SquaredDifference__mul'} *)
	(* J918 .* J918 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1913, 12);

	int64_al[256][256] tmp1914;

	int64_al[65536] tmp1915;

	int64_al[65536] tmp1916;

	int64_al[65536] tmp1917;

	int32_pl tmp1918;

	for i1009 = [0: 256]{
 		for i1010 = [0: 256]{
 			tmp1918 = ((0 + (i1009 * 256)) + (i1010 * 1));
			tmp1915[tmp1918] = tmp1913[i1009][i1010];
			tmp1916[tmp1918] = tmp1913[i1009][i1010];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1915, tmp1916, tmp1917);

	ClearMemSecret1(65536, tmp1915);

	ClearMemSecret1(65536, tmp1916);

	for i1009 = [0: 256]{
 		for i1010 = [0: 256]{
 			tmp1918 = ((0 + (i1009 * 256)) + (i1010 * 1));
			tmp1914[i1009][i1010] = tmp1917[tmp1918];
		};
	};
	ClearMemSecret1(65536, tmp1917);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1913);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/moments/variance'} *)
	int64_al tmp1920;

	int64_al[256] tmp1921;

	int64_al[256] tmp1922;

	int64_al[256][1] tmp1923;

	for i1011 = [0: 256]{
 		tmp1920 = 0L;
		for i1012 = [0: 256]{
 			tmp1920 = (tmp1920 + tmp1914[i1011][i1012]);
		};
		tmp1921[(0 + (i1011 * 1))] = tmp1920;
	};
	ElemWiseVectorPublicDiv(256, tmp1921, 256, tmp1922);

	ClearMemSecret1(256, tmp1921);

	for i1011 = [0: 256]{
 		tmp1923[i1011][0] = tmp1922[(0 + (i1011 * 1))];
	};
	ClearMemSecret1(256, tmp1922);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1914);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/batchnorm/add'} *)
	(* J15 + J920 *)
	int64_al[256][1] tmp1925;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp1925[i0][i1] = (tmp15 + tmp1923[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1923);

	int64_al[256][1] tmp1927;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp1925, tmp1927, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1925);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/batchnorm/mul'} *)
	(* J922 .* J23 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1927, 12);

	int64_al[256][256] tmp1929;

	int64_al[65536] tmp1930;

	int64_al[65536] tmp1931;

	int64_al[65536] tmp1932;

	int32_pl tmp1933;

	for i1013 = [0: 256]{
 		for i1014 = [0: 256]{
 			tmp1933 = ((0 + (i1013 * 256)) + (i1014 * 1));
			tmp1930[tmp1933] = tmp1927[i1013][0];
			tmp1931[tmp1933] = tmp23[i1014];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp1930, tmp1931, tmp1932);

	ClearMemSecret1(65536, tmp1930);

	ClearMemSecret1(65536, tmp1931);

	for i1013 = [0: 256]{
 		for i1014 = [0: 256]{
 			tmp1933 = ((0 + (i1013 * 256)) + (i1014 * 1));
			tmp1929[i1013][i1014] = tmp1932[tmp1933];
		};
	};
	ClearMemSecret1(65536, tmp1932);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1927);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp23);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/batchnorm/mul_2'} *)
	(* J923 .* J917 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1929, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp1911, 12);

	int64_al[256][256] tmp1936;

	int64_al[65536] tmp1937;

	int64_al[65536] tmp1938;

	int64_al[65536] tmp1939;

	int32_pl tmp1940;

	for i1015 = [0: 256]{
 		for i1016 = [0: 256]{
 			tmp1940 = ((0 + (i1015 * 256)) + (i1016 * 1));
			tmp1937[tmp1940] = tmp1929[i1015][i1016];
			tmp1938[tmp1940] = tmp1911[i1015][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1937, tmp1938, tmp1939);

	ClearMemSecret1(65536, tmp1937);

	ClearMemSecret1(65536, tmp1938);

	for i1015 = [0: 256]{
 		for i1016 = [0: 256]{
 			tmp1940 = ((0 + (i1015 * 256)) + (i1016 * 1));
			tmp1936[i1015][i1016] = tmp1939[tmp1940];
		};
	};
	ClearMemSecret1(65536, tmp1939);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp1911);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp73, 12);

	int64_al[256][256] tmp1942;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/batchnorm/sub'} *)
	for i1017 = [0: 256]{
 		for i1018 = [0: 256]{
 			tmp1942[i1017][i1018] = (0L - tmp1936[i1017][i1018]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/batchnorm/sub'} *)
	(* J73 + tmp1942 *)
	int64_al[256][256] tmp1943;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1943[i0][i1] = (tmp73[i1] + tmp1942[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1936);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp73);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/batchnorm/mul_1'} *)
	(* J916 .* J923 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp1905, 12);

	int64_al[256][256] tmp1946;

	int64_al[65536] tmp1947;

	int64_al[65536] tmp1948;

	int64_al[65536] tmp1949;

	int32_pl tmp1950;

	for i1019 = [0: 256]{
 		for i1020 = [0: 256]{
 			tmp1950 = ((0 + (i1019 * 256)) + (i1020 * 1));
			tmp1947[tmp1950] = tmp1905[i1019][i1020];
			tmp1948[tmp1950] = tmp1929[i1019][i1020];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp1947, tmp1948, tmp1949);

	ClearMemSecret1(65536, tmp1947);

	ClearMemSecret1(65536, tmp1948);

	for i1019 = [0: 256]{
 		for i1020 = [0: 256]{
 			tmp1950 = ((0 + (i1019 * 256)) + (i1020 * 1));
			tmp1946[i1019][i1020] = tmp1949[tmp1950];
		};
	};
	ClearMemSecret1(65536, tmp1949);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1929);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/pre_norm/batchnorm/add_1'} *)
	(* J926 + J925 *)
	int64_al[256][256] tmp1952;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp1952[i0][i1] = (tmp1946[i0][i1] + tmp1943[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1946);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1943);

	int64_al[256][768] tmp1955;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp1952, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/qkv/MatMul'} *)
	(* J927 * J33 *)
	MatMul2D(256, 256, 768, tmp1952, tmp33, tmp1955, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp33);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1952);

	int64_al[256][3][4][64] tmp1958;

	int64_pl i1026;

	int64_pl i1025;

	int64_pl i1024;

	int64_pl i1023;

	int64_pl i1022;

	int64_pl i1021;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Reshape'} *)
	(* reshape(J928, 256, 3, 4, 64) *)
	i1021 = 0L;
	i1022 = 0L;
	for i1023 = [0: 256]{
 		for i1024 = [0: 3]{
 			for i1025 = [0: 4]{
 				for i1026 = [0: 64]{
 					tmp1958[i1023][i1024][i1025][i1026] = tmp1955[i1021][i1022];
					i1022 = (i1022 + 1L);
					if ((i1022 == 768L)) {
						i1022 = 0L;
						i1021 = (i1021 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp1955);

	int64_al[3][4][256][64] tmp1960;

	int64_pl i1030;

	int64_pl i1029;

	int64_pl i1028;

	int64_pl i1027;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_5/attention/self/transpose'} *)
	(* transpose(J929, [256, 3, 4, 64] --> [3, 4, 256, 64]) *)
	for i1027 = [0: 256]{
 		for i1028 = [0: 3]{
 			for i1029 = [0: 4]{
 				for i1030 = [0: 64]{
 					tmp1960[i1028][i1029][i1027][i1030] = tmp1958[i1027][i1028][i1029][i1030];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 3, 4, 64, tmp1958);

	int64_al[1][4][256][64] tmp1962;

	int64_pl i1034;

	int64_pl i1033;

	int64_pl i1032;

	int64_pl i1031;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_2'} *)
	(* slice(J930, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i1031 = [0: 1]{
 		for i1032 = [0: 4]{
 			for i1033 = [0: 256]{
 				for i1034 = [0: 64]{
 					tmp1962[i1031][i1032][i1033][i1034] = tmp1960[(i1031 + 2L)][(i1032 + 0L)][(i1033 + 0L)][(i1034 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp1963;

	int64_pl i1038;

	int64_pl i1037;

	int64_pl i1036;

	int64_pl i1035;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_18'} *)
	(* slice(J931, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1035 = [0: 1]{
 		for i1036 = [0: 1]{
 			for i1037 = [0: 256]{
 				for i1038 = [0: 64]{
 					tmp1963[i1035][i1036][i1037][i1038] = tmp1962[(i1035 + 0L)][(i1036 + 3L)][(i1037 + 0L)][(i1038 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1964;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1963, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_15'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1963, tmp1964);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1963);

	int64_al[1][1][256][64] tmp1966;

	int64_pl i1042;

	int64_pl i1041;

	int64_pl i1040;

	int64_pl i1039;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_16'} *)
	(* slice(J931, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1039 = [0: 1]{
 		for i1040 = [0: 1]{
 			for i1041 = [0: 256]{
 				for i1042 = [0: 64]{
 					tmp1966[i1039][i1040][i1041][i1042] = tmp1962[(i1039 + 0L)][(i1040 + 2L)][(i1041 + 0L)][(i1042 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1967;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1966, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_13'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1966, tmp1967);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1966);

	int64_al[1][1][256][64] tmp1969;

	int64_pl i1046;

	int64_pl i1045;

	int64_pl i1044;

	int64_pl i1043;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_14'} *)
	(* slice(J931, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1043 = [0: 1]{
 		for i1044 = [0: 1]{
 			for i1045 = [0: 256]{
 				for i1046 = [0: 64]{
 					tmp1969[i1043][i1044][i1045][i1046] = tmp1962[(i1043 + 0L)][(i1044 + 1L)][(i1045 + 0L)][(i1046 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1970;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1969, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_11'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1969, tmp1970);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1969);

	int64_al[1][1][256][64] tmp1972;

	int64_pl i1050;

	int64_pl i1049;

	int64_pl i1048;

	int64_pl i1047;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_12'} *)
	(* slice(J931, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1047 = [0: 1]{
 		for i1048 = [0: 1]{
 			for i1049 = [0: 256]{
 				for i1050 = [0: 64]{
 					tmp1972[i1047][i1048][i1049][i1050] = tmp1962[(i1047 + 0L)][(i1048 + 0L)][(i1049 + 0L)][(i1050 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1962);

	int64_al[256][64] tmp1974;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1972, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_9'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1972, tmp1974);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1972);

	int64_al[1][4][256][64] tmp1976;

	int64_pl i1054;

	int64_pl i1053;

	int64_pl i1052;

	int64_pl i1051;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_1'} *)
	(* slice(J930, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i1051 = [0: 1]{
 		for i1052 = [0: 4]{
 			for i1053 = [0: 256]{
 				for i1054 = [0: 64]{
 					tmp1976[i1051][i1052][i1053][i1054] = tmp1960[(i1051 + 1L)][(i1052 + 0L)][(i1053 + 0L)][(i1054 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp1977;

	int64_pl i1058;

	int64_pl i1057;

	int64_pl i1056;

	int64_pl i1055;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_10'} *)
	(* slice(J940, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1055 = [0: 1]{
 		for i1056 = [0: 1]{
 			for i1057 = [0: 256]{
 				for i1058 = [0: 64]{
 					tmp1977[i1055][i1056][i1057][i1058] = tmp1976[(i1055 + 0L)][(i1056 + 3L)][(i1057 + 0L)][(i1058 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1978;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1977, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_7'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1977, tmp1978);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1977);

	int64_al[1][1][256][64] tmp1980;

	int64_pl i1062;

	int64_pl i1061;

	int64_pl i1060;

	int64_pl i1059;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_8'} *)
	(* slice(J940, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1059 = [0: 1]{
 		for i1060 = [0: 1]{
 			for i1061 = [0: 256]{
 				for i1062 = [0: 64]{
 					tmp1980[i1059][i1060][i1061][i1062] = tmp1976[(i1059 + 0L)][(i1060 + 2L)][(i1061 + 0L)][(i1062 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1981;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1980, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_5'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1980, tmp1981);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1980);

	int64_al[1][1][256][64] tmp1983;

	int64_pl i1066;

	int64_pl i1065;

	int64_pl i1064;

	int64_pl i1063;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_6'} *)
	(* slice(J940, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1063 = [0: 1]{
 		for i1064 = [0: 1]{
 			for i1065 = [0: 256]{
 				for i1066 = [0: 64]{
 					tmp1983[i1063][i1064][i1065][i1066] = tmp1976[(i1063 + 0L)][(i1064 + 1L)][(i1065 + 0L)][(i1066 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1984;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1983, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_3'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1983, tmp1984);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1983);

	int64_al[1][1][256][64] tmp1986;

	int64_pl i1070;

	int64_pl i1069;

	int64_pl i1068;

	int64_pl i1067;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_4'} *)
	(* slice(J940, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1067 = [0: 1]{
 		for i1068 = [0: 1]{
 			for i1069 = [0: 256]{
 				for i1070 = [0: 64]{
 					tmp1986[i1067][i1068][i1069][i1070] = tmp1976[(i1067 + 0L)][(i1068 + 0L)][(i1069 + 0L)][(i1070 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1976);

	int64_al[256][64] tmp1988;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1986, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_1'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1986, tmp1988);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1986);

	int64_al[1][4][256][64] tmp1990;

	int64_pl i1074;

	int64_pl i1073;

	int64_pl i1072;

	int64_pl i1071;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice'} *)
	(* slice(J930, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i1071 = [0: 1]{
 		for i1072 = [0: 4]{
 			for i1073 = [0: 256]{
 				for i1074 = [0: 64]{
 					tmp1990[i1071][i1072][i1073][i1074] = tmp1960[(i1071 + 0L)][(i1072 + 0L)][(i1073 + 0L)][(i1074 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 4, 256, 64, tmp1960);

	int64_al[1][1][256][64] tmp1992;

	int64_pl i1078;

	int64_pl i1077;

	int64_pl i1076;

	int64_pl i1075;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_9'} *)
	(* slice(J949, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1075 = [0: 1]{
 		for i1076 = [0: 1]{
 			for i1077 = [0: 256]{
 				for i1078 = [0: 64]{
 					tmp1992[i1075][i1076][i1077][i1078] = tmp1990[(i1075 + 0L)][(i1076 + 3L)][(i1077 + 0L)][(i1078 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp1993;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp1992, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_6'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp1992, tmp1993);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp1992);

	int64_al[256][256] tmp1996;

	int64_al[64][256] tmp1995;

	int64_pl i1080;

	int64_pl i1079;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* transpose(J942, [256, 64] --> [64, 256]) *)
	for i1079 = [0: 256]{
 		for i1080 = [0: 64]{
 			tmp1995[i1080][i1079] = tmp1978[i1079][i1080];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* J951 * tmp1995 *)
	MatMul2D(256, 64, 256, tmp1993, tmp1995, tmp1996, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1978);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1993);

	int64_al[1][1][256][256] tmp1999;

	int64_pl i1086;

	int64_pl i1085;

	int64_pl i1084;

	int64_pl i1083;

	int64_pl i1082;

	int64_pl i1081;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Reshape_4'} *)
	(* reshape(J952, 1, 1, 256, 256) *)
	i1081 = 0L;
	i1082 = 0L;
	for i1083 = [0: 1]{
 		for i1084 = [0: 1]{
 			for i1085 = [0: 256]{
 				for i1086 = [0: 256]{
 					tmp1999[i1083][i1084][i1085][i1086] = tmp1996[i1081][i1082];
					i1082 = (i1082 + 1L);
					if ((i1082 == 256L)) {
						i1082 = 0L;
						i1081 = (i1081 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1996);

	int64_al[1][1][256][64] tmp2001;

	int64_pl i1090;

	int64_pl i1089;

	int64_pl i1088;

	int64_pl i1087;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_7'} *)
	(* slice(J949, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1087 = [0: 1]{
 		for i1088 = [0: 1]{
 			for i1089 = [0: 256]{
 				for i1090 = [0: 64]{
 					tmp2001[i1087][i1088][i1089][i1090] = tmp1990[(i1087 + 0L)][(i1088 + 2L)][(i1089 + 0L)][(i1090 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2002;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2001, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_4'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2001, tmp2002);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2001);

	int64_al[256][256] tmp2005;

	int64_al[64][256] tmp2004;

	int64_pl i1092;

	int64_pl i1091;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* transpose(J944, [256, 64] --> [64, 256]) *)
	for i1091 = [0: 256]{
 		for i1092 = [0: 64]{
 			tmp2004[i1092][i1091] = tmp1981[i1091][i1092];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* J955 * tmp2004 *)
	MatMul2D(256, 64, 256, tmp2002, tmp2004, tmp2005, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2002);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1981);

	int64_al[1][1][256][256] tmp2008;

	int64_pl i1098;

	int64_pl i1097;

	int64_pl i1096;

	int64_pl i1095;

	int64_pl i1094;

	int64_pl i1093;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Reshape_3'} *)
	(* reshape(J956, 1, 1, 256, 256) *)
	i1093 = 0L;
	i1094 = 0L;
	for i1095 = [0: 1]{
 		for i1096 = [0: 1]{
 			for i1097 = [0: 256]{
 				for i1098 = [0: 256]{
 					tmp2008[i1095][i1096][i1097][i1098] = tmp2005[i1093][i1094];
					i1094 = (i1094 + 1L);
					if ((i1094 == 256L)) {
						i1094 = 0L;
						i1093 = (i1093 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2005);

	int64_al[1][1][256][64] tmp2010;

	int64_pl i1102;

	int64_pl i1101;

	int64_pl i1100;

	int64_pl i1099;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_5'} *)
	(* slice(J949, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1099 = [0: 1]{
 		for i1100 = [0: 1]{
 			for i1101 = [0: 256]{
 				for i1102 = [0: 64]{
 					tmp2010[i1099][i1100][i1101][i1102] = tmp1990[(i1099 + 0L)][(i1100 + 1L)][(i1101 + 0L)][(i1102 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2011;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2010, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_2'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2010, tmp2011);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2010);

	int64_al[256][256] tmp2014;

	int64_al[64][256] tmp2013;

	int64_pl i1104;

	int64_pl i1103;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* transpose(J946, [256, 64] --> [64, 256]) *)
	for i1103 = [0: 256]{
 		for i1104 = [0: 64]{
 			tmp2013[i1104][i1103] = tmp1984[i1103][i1104];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* J959 * tmp2013 *)
	MatMul2D(256, 64, 256, tmp2011, tmp2013, tmp2014, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2011);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1984);

	int64_al[1][1][256][256] tmp2017;

	int64_pl i1110;

	int64_pl i1109;

	int64_pl i1108;

	int64_pl i1107;

	int64_pl i1106;

	int64_pl i1105;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Reshape_2'} *)
	(* reshape(J960, 1, 1, 256, 256) *)
	i1105 = 0L;
	i1106 = 0L;
	for i1107 = [0: 1]{
 		for i1108 = [0: 1]{
 			for i1109 = [0: 256]{
 				for i1110 = [0: 256]{
 					tmp2017[i1107][i1108][i1109][i1110] = tmp2014[i1105][i1106];
					i1106 = (i1106 + 1L);
					if ((i1106 == 256L)) {
						i1106 = 0L;
						i1105 = (i1105 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2014);

	int64_al[1][1][256][64] tmp2019;

	int64_pl i1114;

	int64_pl i1113;

	int64_pl i1112;

	int64_pl i1111;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_3'} *)
	(* slice(J949, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1111 = [0: 1]{
 		for i1112 = [0: 1]{
 			for i1113 = [0: 256]{
 				for i1114 = [0: 64]{
 					tmp2019[i1111][i1112][i1113][i1114] = tmp1990[(i1111 + 0L)][(i1112 + 0L)][(i1113 + 0L)][(i1114 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp1990);

	int64_al[256][64] tmp2021;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2019, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2019, tmp2021);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2019);

	int64_al[256][256] tmp2024;

	int64_al[64][256] tmp2023;

	int64_pl i1116;

	int64_pl i1115;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* transpose(J948, [256, 64] --> [64, 256]) *)
	for i1115 = [0: 256]{
 		for i1116 = [0: 64]{
 			tmp2023[i1116][i1115] = tmp1988[i1115][i1116];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* J963 * tmp2023 *)
	MatMul2D(256, 64, 256, tmp2021, tmp2023, tmp2024, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1988);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2021);

	int64_al[1][1][256][256] tmp2027;

	int64_pl i1122;

	int64_pl i1121;

	int64_pl i1120;

	int64_pl i1119;

	int64_pl i1118;

	int64_pl i1117;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Reshape_1'} *)
	(* reshape(J964, 1, 1, 256, 256) *)
	i1117 = 0L;
	i1118 = 0L;
	for i1119 = [0: 1]{
 		for i1120 = [0: 1]{
 			for i1121 = [0: 256]{
 				for i1122 = [0: 256]{
 					tmp2027[i1119][i1120][i1121][i1122] = tmp2024[i1117][i1118];
					i1118 = (i1118 + 1L);
					if ((i1118 == 256L)) {
						i1118 = 0L;
						i1117 = (i1117 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2024);

	int64_al[1][4][256][256] tmp2029;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp1999, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2008, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2017, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2027, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/concat_2'} *)
	Concat4T44444(1, 4, 256, 256, 1, 1, 256, 256, tmp2027, 1, 1, 256, 256, tmp2017, 1, 1, 256, 256, tmp2008, 1, 1, 256, 256, tmp1999, 1, tmp2029);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp1999);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2027);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2017);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2008);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Mul'} *)
	(* J47 .* J966 *)
	int64_al[1][4][256][256] tmp2035;

	int64_al[262144] tmp2036;

	int64_al[262144] tmp2037;

	int64_al[262144] tmp2038;

	int32_pl tmp2039;

	for i1123 = [0: 1]{
 		for i1124 = [0: 4]{
 			for i1125 = [0: 256]{
 				for i1126 = [0: 256]{
 					tmp2039 = ((((0 + (i1123 * 262144)) + (i1124 * 65536)) + (i1125 * 256)) + (i1126 * 1));
					tmp2036[tmp2039] = tmp47;
					tmp2037[tmp2039] = tmp2029[i1123][i1124][i1125][i1126];
				};
			};
		};
	};
	ElemWiseActModelVectorMult(262144, tmp2037, tmp2036, tmp2038);

	ClearMemSecret1(262144, tmp2036);

	ClearMemSecret1(262144, tmp2037);

	for i1123 = [0: 1]{
 		for i1124 = [0: 4]{
 			for i1125 = [0: 256]{
 				for i1126 = [0: 256]{
 					tmp2039 = ((((0 + (i1123 * 262144)) + (i1124 * 65536)) + (i1125 * 256)) + (i1126 * 1));
					tmp2035[i1123][i1124][i1125][i1126] = tmp2038[tmp2039];
				};
			};
		};
	};
	ClearMemSecret1(262144, tmp2038);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp2029);

	int64_al[1][4][256][256] tmp2041;

	(* {'TFOpName': 'Softmax', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Softmax'} *)
	Softmax4(1, 4, 256, 256, tmp2035, tmp2041);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp2035);

	int64_al[1][1][256][256] tmp2043;

	int64_pl i1130;

	int64_pl i1129;

	int64_pl i1128;

	int64_pl i1127;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_17'} *)
	(* slice(J968, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i1127 = [0: 1]{
 		for i1128 = [0: 1]{
 			for i1129 = [0: 256]{
 				for i1130 = [0: 256]{
 					tmp2043[i1127][i1128][i1129][i1130] = tmp2041[(i1127 + 0L)][(i1128 + 3L)][(i1129 + 0L)][(i1130 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp2044;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2043, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_14'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp2043, tmp2044);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2043);

	int64_al[256][64] tmp2046;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/MatMul_7'} *)
	(* J970 * J933 *)
	MatMul2D(256, 256, 64, tmp2044, tmp1964, tmp2046, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2044);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1964);

	int64_al[1][1][256][64] tmp2049;

	int64_pl i1136;

	int64_pl i1135;

	int64_pl i1134;

	int64_pl i1133;

	int64_pl i1132;

	int64_pl i1131;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Reshape_8'} *)
	(* reshape(J971, 1, 1, 256, 64) *)
	i1131 = 0L;
	i1132 = 0L;
	for i1133 = [0: 1]{
 		for i1134 = [0: 1]{
 			for i1135 = [0: 256]{
 				for i1136 = [0: 64]{
 					tmp2049[i1133][i1134][i1135][i1136] = tmp2046[i1131][i1132];
					i1132 = (i1132 + 1L);
					if ((i1132 == 64L)) {
						i1132 = 0L;
						i1131 = (i1131 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2046);

	int64_al[1][1][256][256] tmp2051;

	int64_pl i1140;

	int64_pl i1139;

	int64_pl i1138;

	int64_pl i1137;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_15'} *)
	(* slice(J968, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i1137 = [0: 1]{
 		for i1138 = [0: 1]{
 			for i1139 = [0: 256]{
 				for i1140 = [0: 256]{
 					tmp2051[i1137][i1138][i1139][i1140] = tmp2041[(i1137 + 0L)][(i1138 + 2L)][(i1139 + 0L)][(i1140 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp2052;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2051, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_12'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp2051, tmp2052);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2051);

	int64_al[256][64] tmp2054;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/MatMul_6'} *)
	(* J974 * J935 *)
	MatMul2D(256, 256, 64, tmp2052, tmp1967, tmp2054, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1967);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2052);

	int64_al[1][1][256][64] tmp2057;

	int64_pl i1146;

	int64_pl i1145;

	int64_pl i1144;

	int64_pl i1143;

	int64_pl i1142;

	int64_pl i1141;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Reshape_7'} *)
	(* reshape(J975, 1, 1, 256, 64) *)
	i1141 = 0L;
	i1142 = 0L;
	for i1143 = [0: 1]{
 		for i1144 = [0: 1]{
 			for i1145 = [0: 256]{
 				for i1146 = [0: 64]{
 					tmp2057[i1143][i1144][i1145][i1146] = tmp2054[i1141][i1142];
					i1142 = (i1142 + 1L);
					if ((i1142 == 64L)) {
						i1142 = 0L;
						i1141 = (i1141 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2054);

	int64_al[1][1][256][256] tmp2059;

	int64_pl i1150;

	int64_pl i1149;

	int64_pl i1148;

	int64_pl i1147;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_13'} *)
	(* slice(J968, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i1147 = [0: 1]{
 		for i1148 = [0: 1]{
 			for i1149 = [0: 256]{
 				for i1150 = [0: 256]{
 					tmp2059[i1147][i1148][i1149][i1150] = tmp2041[(i1147 + 0L)][(i1148 + 1L)][(i1149 + 0L)][(i1150 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp2060;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2059, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_10'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp2059, tmp2060);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2059);

	int64_al[256][64] tmp2062;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/MatMul_5'} *)
	(* J978 * J937 *)
	MatMul2D(256, 256, 64, tmp2060, tmp1970, tmp2062, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1970);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2060);

	int64_al[1][1][256][64] tmp2065;

	int64_pl i1156;

	int64_pl i1155;

	int64_pl i1154;

	int64_pl i1153;

	int64_pl i1152;

	int64_pl i1151;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Reshape_6'} *)
	(* reshape(J979, 1, 1, 256, 64) *)
	i1151 = 0L;
	i1152 = 0L;
	for i1153 = [0: 1]{
 		for i1154 = [0: 1]{
 			for i1155 = [0: 256]{
 				for i1156 = [0: 64]{
 					tmp2065[i1153][i1154][i1155][i1156] = tmp2062[i1151][i1152];
					i1152 = (i1152 + 1L);
					if ((i1152 == 64L)) {
						i1152 = 0L;
						i1151 = (i1151 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2062);

	int64_al[1][1][256][256] tmp2067;

	int64_pl i1160;

	int64_pl i1159;

	int64_pl i1158;

	int64_pl i1157;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Slice_11'} *)
	(* slice(J968, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i1157 = [0: 1]{
 		for i1158 = [0: 1]{
 			for i1159 = [0: 256]{
 				for i1160 = [0: 256]{
 					tmp2067[i1157][i1158][i1159][i1160] = tmp2041[(i1157 + 0L)][(i1158 + 0L)][(i1159 + 0L)][(i1160 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp2041);

	int64_al[256][256] tmp2069;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2067, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Squeeze_8'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp2067, tmp2069);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2067);

	int64_al[256][64] tmp2071;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/MatMul_4'} *)
	(* J982 * J939 *)
	MatMul2D(256, 256, 64, tmp2069, tmp1974, tmp2071, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp1974);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2069);

	int64_al[1][1][256][64] tmp2074;

	int64_pl i1166;

	int64_pl i1165;

	int64_pl i1164;

	int64_pl i1163;

	int64_pl i1162;

	int64_pl i1161;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Reshape_5'} *)
	(* reshape(J983, 1, 1, 256, 64) *)
	i1161 = 0L;
	i1162 = 0L;
	for i1163 = [0: 1]{
 		for i1164 = [0: 1]{
 			for i1165 = [0: 256]{
 				for i1166 = [0: 64]{
 					tmp2074[i1163][i1164][i1165][i1166] = tmp2071[i1161][i1162];
					i1162 = (i1162 + 1L);
					if ((i1162 == 64L)) {
						i1162 = 0L;
						i1161 = (i1161 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2071);

	int64_al[1][4][256][64] tmp2076;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2049, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2057, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2065, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2074, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_5/attention/self/concat_5'} *)
	Concat4T44444(1, 4, 256, 64, 1, 1, 256, 64, tmp2074, 1, 1, 256, 64, tmp2065, 1, 1, 256, 64, tmp2057, 1, 1, 256, 64, tmp2049, 1, tmp2076);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2074);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2065);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2057);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2049);

	int64_al[1][256][4][64] tmp2082;

	int64_pl i1170;

	int64_pl i1169;

	int64_pl i1168;

	int64_pl i1167;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_5/attention/self/transpose_5'} *)
	(* transpose(J985, [1, 4, 256, 64] --> [1, 256, 4, 64]) *)
	for i1167 = [0: 1]{
 		for i1168 = [0: 4]{
 			for i1169 = [0: 256]{
 				for i1170 = [0: 64]{
 					tmp2082[i1167][i1169][i1168][i1170] = tmp2076[i1167][i1168][i1169][i1170];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp2076);

	int64_al[256][256] tmp2084;

	int64_pl i1176;

	int64_pl i1175;

	int64_pl i1174;

	int64_pl i1173;

	int64_pl i1172;

	int64_pl i1171;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_5/attention/self/Reshape_9'} *)
	(* reshape(J986, 256, 256) *)
	i1171 = 0L;
	i1172 = 0L;
	i1173 = 0L;
	i1174 = 0L;
	for i1175 = [0: 256]{
 		for i1176 = [0: 256]{
 			tmp2084[i1175][i1176] = tmp2082[i1171][i1172][i1173][i1174];
			i1174 = (i1174 + 1L);
			if ((i1174 == 64L)) {
				i1174 = 0L;
				i1173 = (i1173 + 1L);
				if ((i1173 == 4L)) {
					i1173 = 0L;
					i1172 = (i1172 + 1L);
					if ((i1172 == 256L)) {
						i1172 = 0L;
						i1171 = (i1171 + 1L);
					}
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 4, 64, tmp2082);

	int64_al[256][256] tmp2086;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/attention/self/proj/MatMul'} *)
	(* J987 * J37 *)
	MatMul2D(256, 256, 256, tmp2084, tmp37, tmp2086, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp37);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2084);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp52, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_5/attention/self/proj/BiasAdd'} *)
	(* J988 + J52 *)
	int64_al[256][256] tmp2089;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2089[i0][i1] = (tmp2086[i0][i1] + tmp52[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp52);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2086);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp1905, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_5/attention/output/add'} *)
	(* J916 + J989 *)
	int64_al[256][256] tmp2092;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2092[i0][i1] = (tmp1905[i0][i1] + tmp2089[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2089);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp1905);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/moments/mean'} *)
	int64_al tmp2095;

	int64_al[256] tmp2096;

	int64_al[256] tmp2097;

	int64_al[256][1] tmp2098;

	for i1177 = [0: 256]{
 		tmp2095 = 0L;
		for i1178 = [0: 256]{
 			tmp2095 = (tmp2095 + tmp2092[i1177][i1178]);
		};
		tmp2096[(0 + (i1177 * 1))] = tmp2095;
	};
	ElemWiseVectorPublicDiv(256, tmp2096, 256, tmp2097);

	ClearMemSecret1(256, tmp2096);

	for i1177 = [0: 256]{
 		tmp2098[i1177][0] = tmp2097[(0 + (i1177 * 1))];
	};
	ClearMemSecret1(256, tmp2097);

	int64_al[256][1] tmp2099;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/moments/SquaredDifference__sub'} *)
	for i1179 = [0: 256]{
 		for i1180 = [0: 1]{
 			tmp2099[i1179][i1180] = (0L - tmp2098[i1179][i1180]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/moments/SquaredDifference__sub'} *)
	(* J990 + tmp2099 *)
	int64_al[256][256] tmp2100;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2100[i0][i1] = (tmp2092[i0][i1] + tmp2099[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/moments/SquaredDifference__mul'} *)
	(* J992 .* J992 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp2100, 12);

	int64_al[256][256] tmp2101;

	int64_al[65536] tmp2102;

	int64_al[65536] tmp2103;

	int64_al[65536] tmp2104;

	int32_pl tmp2105;

	for i1181 = [0: 256]{
 		for i1182 = [0: 256]{
 			tmp2105 = ((0 + (i1181 * 256)) + (i1182 * 1));
			tmp2102[tmp2105] = tmp2100[i1181][i1182];
			tmp2103[tmp2105] = tmp2100[i1181][i1182];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2102, tmp2103, tmp2104);

	ClearMemSecret1(65536, tmp2102);

	ClearMemSecret1(65536, tmp2103);

	for i1181 = [0: 256]{
 		for i1182 = [0: 256]{
 			tmp2105 = ((0 + (i1181 * 256)) + (i1182 * 1));
			tmp2101[i1181][i1182] = tmp2104[tmp2105];
		};
	};
	ClearMemSecret1(65536, tmp2104);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2100);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/moments/variance'} *)
	int64_al tmp2107;

	int64_al[256] tmp2108;

	int64_al[256] tmp2109;

	int64_al[256][1] tmp2110;

	for i1183 = [0: 256]{
 		tmp2107 = 0L;
		for i1184 = [0: 256]{
 			tmp2107 = (tmp2107 + tmp2101[i1183][i1184]);
		};
		tmp2108[(0 + (i1183 * 1))] = tmp2107;
	};
	ElemWiseVectorPublicDiv(256, tmp2108, 256, tmp2109);

	ClearMemSecret1(256, tmp2108);

	for i1183 = [0: 256]{
 		tmp2110[i1183][0] = tmp2109[(0 + (i1183 * 1))];
	};
	ClearMemSecret1(256, tmp2109);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2101);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/batchnorm/add'} *)
	(* J15 + J994 *)
	int64_al[256][1] tmp2112;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp2112[i0][i1] = (tmp15 + tmp2110[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2110);

	int64_al[256][1] tmp2114;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp2112, tmp2114, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2112);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/batchnorm/mul'} *)
	(* J996 .* J63 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp2114, 12);

	int64_al[256][256] tmp2116;

	int64_al[65536] tmp2117;

	int64_al[65536] tmp2118;

	int64_al[65536] tmp2119;

	int32_pl tmp2120;

	for i1185 = [0: 256]{
 		for i1186 = [0: 256]{
 			tmp2120 = ((0 + (i1185 * 256)) + (i1186 * 1));
			tmp2117[tmp2120] = tmp2114[i1185][0];
			tmp2118[tmp2120] = tmp63[i1186];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp2117, tmp2118, tmp2119);

	ClearMemSecret1(65536, tmp2117);

	ClearMemSecret1(65536, tmp2118);

	for i1185 = [0: 256]{
 		for i1186 = [0: 256]{
 			tmp2120 = ((0 + (i1185 * 256)) + (i1186 * 1));
			tmp2116[i1185][i1186] = tmp2119[tmp2120];
		};
	};
	ClearMemSecret1(65536, tmp2119);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp63);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2114);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/batchnorm/mul_2'} *)
	(* J997 .* J991 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp2116, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp2098, 12);

	int64_al[256][256] tmp2123;

	int64_al[65536] tmp2124;

	int64_al[65536] tmp2125;

	int64_al[65536] tmp2126;

	int32_pl tmp2127;

	for i1187 = [0: 256]{
 		for i1188 = [0: 256]{
 			tmp2127 = ((0 + (i1187 * 256)) + (i1188 * 1));
			tmp2124[tmp2127] = tmp2116[i1187][i1188];
			tmp2125[tmp2127] = tmp2098[i1187][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2124, tmp2125, tmp2126);

	ClearMemSecret1(65536, tmp2124);

	ClearMemSecret1(65536, tmp2125);

	for i1187 = [0: 256]{
 		for i1188 = [0: 256]{
 			tmp2127 = ((0 + (i1187 * 256)) + (i1188 * 1));
			tmp2123[i1187][i1188] = tmp2126[tmp2127];
		};
	};
	ClearMemSecret1(65536, tmp2126);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2098);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp27, 12);

	int64_al[256][256] tmp2129;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/batchnorm/sub'} *)
	for i1189 = [0: 256]{
 		for i1190 = [0: 256]{
 			tmp2129[i1189][i1190] = (0L - tmp2123[i1189][i1190]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/batchnorm/sub'} *)
	(* J27 + tmp2129 *)
	int64_al[256][256] tmp2130;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2130[i0][i1] = (tmp27[i1] + tmp2129[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2123);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp27);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/batchnorm/mul_1'} *)
	(* J990 .* J997 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp2092, 12);

	int64_al[256][256] tmp2133;

	int64_al[65536] tmp2134;

	int64_al[65536] tmp2135;

	int64_al[65536] tmp2136;

	int32_pl tmp2137;

	for i1191 = [0: 256]{
 		for i1192 = [0: 256]{
 			tmp2137 = ((0 + (i1191 * 256)) + (i1192 * 1));
			tmp2134[tmp2137] = tmp2092[i1191][i1192];
			tmp2135[tmp2137] = tmp2116[i1191][i1192];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2134, tmp2135, tmp2136);

	ClearMemSecret1(65536, tmp2134);

	ClearMemSecret1(65536, tmp2135);

	for i1191 = [0: 256]{
 		for i1192 = [0: 256]{
 			tmp2137 = ((0 + (i1191 * 256)) + (i1192 * 1));
			tmp2133[i1191][i1192] = tmp2136[tmp2137];
		};
	};
	ClearMemSecret1(65536, tmp2136);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2092);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2116);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_5/attention/output/norm1/batchnorm/add_1'} *)
	(* J1000 + J999 *)
	int64_al[256][256] tmp2140;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2140[i0][i1] = (tmp2133[i0][i1] + tmp2130[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2133);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2130);

	int64_al[256][512] tmp2143;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp2140, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/linear1/MatMul'} *)
	(* J1001 * J22 *)
	MatMul2D(256, 256, 512, tmp2140, tmp22, tmp2143, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp22);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(512, tmp19, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_5/linear1/BiasAdd'} *)
	(* J1002 + J19 *)
	int64_al[256][512] tmp2145;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp2145[i0][i1] = (tmp2143[i0][i1] + tmp19[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2143);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp19);

	(* {'TFOpName': 'Square', 'TFNodeName': 'bert/encoder/layer_5/linear1/ArithmeticOptimizer/ReplaceMulWithSquare_mul_1'} *)
	(* J1003 .* J1003 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2145, 12);

	int64_al[256][512] tmp2148;

	int64_al[131072] tmp2149;

	int64_al[131072] tmp2150;

	int64_al[131072] tmp2151;

	int32_pl tmp2152;

	for i1193 = [0: 256]{
 		for i1194 = [0: 512]{
 			tmp2152 = ((0 + (i1193 * 512)) + (i1194 * 1));
			tmp2149[tmp2152] = tmp2145[i1193][i1194];
			tmp2150[tmp2152] = tmp2145[i1193][i1194];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp2149, tmp2150, tmp2151);

	ClearMemSecret1(131072, tmp2149);

	ClearMemSecret1(131072, tmp2150);

	for i1193 = [0: 256]{
 		for i1194 = [0: 512]{
 			tmp2152 = ((0 + (i1193 * 512)) + (i1194 * 1));
			tmp2148[i1193][i1194] = tmp2151[tmp2152];
		};
	};
	ClearMemSecret1(131072, tmp2151);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/linear1/mul_4'} *)
	(* J6 .* J1003 *)
	int64_al[256][512] tmp2153;

	int64_al[131072] tmp2154;

	int64_al[131072] tmp2155;

	int64_al[131072] tmp2156;

	int32_pl tmp2157;

	for i1195 = [0: 256]{
 		for i1196 = [0: 512]{
 			tmp2157 = ((0 + (i1195 * 512)) + (i1196 * 1));
			tmp2154[tmp2157] = tmp6;
			tmp2155[tmp2157] = tmp2145[i1195][i1196];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp2155, tmp2154, tmp2156);

	ClearMemSecret1(131072, tmp2154);

	ClearMemSecret1(131072, tmp2155);

	for i1195 = [0: 256]{
 		for i1196 = [0: 512]{
 			tmp2157 = ((0 + (i1195 * 512)) + (i1196 * 1));
			tmp2153[i1195][i1196] = tmp2156[tmp2157];
		};
	};
	ClearMemSecret1(131072, tmp2156);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/linear1/mul'} *)
	(* J72 .* J1003 *)
	int64_al[256][512] tmp2158;

	int64_al[131072] tmp2159;

	int64_al[131072] tmp2160;

	int64_al[131072] tmp2161;

	int32_pl tmp2162;

	for i1197 = [0: 256]{
 		for i1198 = [0: 512]{
 			tmp2162 = ((0 + (i1197 * 512)) + (i1198 * 1));
			tmp2159[tmp2162] = tmp72;
			tmp2160[tmp2162] = tmp2145[i1197][i1198];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp2160, tmp2159, tmp2161);

	ClearMemSecret1(131072, tmp2159);

	ClearMemSecret1(131072, tmp2160);

	for i1197 = [0: 256]{
 		for i1198 = [0: 512]{
 			tmp2162 = ((0 + (i1197 * 512)) + (i1198 * 1));
			tmp2158[i1197][i1198] = tmp2161[tmp2162];
		};
	};
	ClearMemSecret1(131072, tmp2161);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/linear1/mul_2'} *)
	(* J1004 .* J1006 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2148, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2158, 12);

	int64_al[256][512] tmp2163;

	int64_al[131072] tmp2164;

	int64_al[131072] tmp2165;

	int64_al[131072] tmp2166;

	int32_pl tmp2167;

	for i1199 = [0: 256]{
 		for i1200 = [0: 512]{
 			tmp2167 = ((0 + (i1199 * 512)) + (i1200 * 1));
			tmp2164[tmp2167] = tmp2148[i1199][i1200];
			tmp2165[tmp2167] = tmp2158[i1199][i1200];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp2164, tmp2165, tmp2166);

	ClearMemSecret1(131072, tmp2164);

	ClearMemSecret1(131072, tmp2165);

	for i1199 = [0: 256]{
 		for i1200 = [0: 512]{
 			tmp2167 = ((0 + (i1199 * 512)) + (i1200 * 1));
			tmp2163[i1199][i1200] = tmp2166[tmp2167];
		};
	};
	ClearMemSecret1(131072, tmp2166);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2148);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2158);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 512, tmp2145, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_5/linear1/add'} *)
	(* J1003 + J1007 *)
	int64_al[256][512] tmp2170;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp2170[i0][i1] = (tmp2145[i0][i1] + tmp2163[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2163);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2145);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/linear1/mul_3'} *)
	(* J106 .* J1008 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2170, 12);

	int64_al[256][512] tmp2173;

	int64_al[131072] tmp2174;

	int64_al[131072] tmp2175;

	int64_al[131072] tmp2176;

	int32_pl tmp2177;

	for i1201 = [0: 256]{
 		for i1202 = [0: 512]{
 			tmp2177 = ((0 + (i1201 * 512)) + (i1202 * 1));
			tmp2174[tmp2177] = tmp106;
			tmp2175[tmp2177] = tmp2170[i1201][i1202];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp2175, tmp2174, tmp2176);

	ClearMemSecret1(131072, tmp2174);

	ClearMemSecret1(131072, tmp2175);

	for i1201 = [0: 256]{
 		for i1202 = [0: 512]{
 			tmp2177 = ((0 + (i1201 * 512)) + (i1202 * 1));
			tmp2173[i1201][i1202] = tmp2176[tmp2177];
		};
	};
	ClearMemSecret1(131072, tmp2176);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2170);

	int64_al[256][512] tmp2179;

	(* {'TFOpName': 'Tanh', 'TFNodeName': 'bert/encoder/layer_5/linear1/Tanh'} *)
	Tanh2(256, 512, tmp2173, tmp2179, 24, 24, 32, 64, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2173);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_5/linear1/add_1'} *)
	(* J80 + J1010 *)
	int64_al[256][512] tmp2181;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp2181[i0][i1] = (tmp80 + tmp2179[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2179);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_5/linear1/mul_5'} *)
	(* J1011 .* J1005 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2181, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2153, 12);

	int64_al[256][512] tmp2183;

	int64_al[131072] tmp2184;

	int64_al[131072] tmp2185;

	int64_al[131072] tmp2186;

	int32_pl tmp2187;

	for i1203 = [0: 256]{
 		for i1204 = [0: 512]{
 			tmp2187 = ((0 + (i1203 * 512)) + (i1204 * 1));
			tmp2184[tmp2187] = tmp2181[i1203][i1204];
			tmp2185[tmp2187] = tmp2153[i1203][i1204];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp2184, tmp2185, tmp2186);

	ClearMemSecret1(131072, tmp2184);

	ClearMemSecret1(131072, tmp2185);

	for i1203 = [0: 256]{
 		for i1204 = [0: 512]{
 			tmp2187 = ((0 + (i1203 * 512)) + (i1204 * 1));
			tmp2183[i1203][i1204] = tmp2186[tmp2187];
		};
	};
	ClearMemSecret1(131072, tmp2186);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2181);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2153);

	int64_al[256][256] tmp2190;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 512, tmp2183, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_5/output/linear2/MatMul'} *)
	(* J1012 * J36 *)
	MatMul2D(256, 512, 256, tmp2183, tmp36, tmp2190, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2183);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(512, 256, tmp36);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp103, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_5/output/linear2/BiasAdd'} *)
	(* J1013 + J103 *)
	int64_al[256][256] tmp2193;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2193[i0][i1] = (tmp2190[i0][i1] + tmp103[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2190);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp103);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp2140, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_5/output/add'} *)
	(* J1001 + J1014 *)
	int64_al[256][256] tmp2196;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2196[i0][i1] = (tmp2140[i0][i1] + tmp2193[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2193);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2140);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/moments/mean'} *)
	int64_al tmp2199;

	int64_al[256] tmp2200;

	int64_al[256] tmp2201;

	int64_al[256][1] tmp2202;

	for i1205 = [0: 256]{
 		tmp2199 = 0L;
		for i1206 = [0: 256]{
 			tmp2199 = (tmp2199 + tmp2196[i1205][i1206]);
		};
		tmp2200[(0 + (i1205 * 1))] = tmp2199;
	};
	ElemWiseVectorPublicDiv(256, tmp2200, 256, tmp2201);

	ClearMemSecret1(256, tmp2200);

	for i1205 = [0: 256]{
 		tmp2202[i1205][0] = tmp2201[(0 + (i1205 * 1))];
	};
	ClearMemSecret1(256, tmp2201);

	int64_al[256][1] tmp2203;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	for i1207 = [0: 256]{
 		for i1208 = [0: 1]{
 			tmp2203[i1207][i1208] = (0L - tmp2202[i1207][i1208]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/moments/SquaredDifference__sub'} *)
	(* J1015 + tmp2203 *)
	int64_al[256][256] tmp2204;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2204[i0][i1] = (tmp2196[i0][i1] + tmp2203[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/moments/SquaredDifference__mul'} *)
	(* J1017 .* J1017 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp2204, 12);

	int64_al[256][256] tmp2205;

	int64_al[65536] tmp2206;

	int64_al[65536] tmp2207;

	int64_al[65536] tmp2208;

	int32_pl tmp2209;

	for i1209 = [0: 256]{
 		for i1210 = [0: 256]{
 			tmp2209 = ((0 + (i1209 * 256)) + (i1210 * 1));
			tmp2206[tmp2209] = tmp2204[i1209][i1210];
			tmp2207[tmp2209] = tmp2204[i1209][i1210];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2206, tmp2207, tmp2208);

	ClearMemSecret1(65536, tmp2206);

	ClearMemSecret1(65536, tmp2207);

	for i1209 = [0: 256]{
 		for i1210 = [0: 256]{
 			tmp2209 = ((0 + (i1209 * 256)) + (i1210 * 1));
			tmp2205[i1209][i1210] = tmp2208[tmp2209];
		};
	};
	ClearMemSecret1(65536, tmp2208);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2204);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/moments/variance'} *)
	int64_al tmp2211;

	int64_al[256] tmp2212;

	int64_al[256] tmp2213;

	int64_al[256][1] tmp2214;

	for i1211 = [0: 256]{
 		tmp2211 = 0L;
		for i1212 = [0: 256]{
 			tmp2211 = (tmp2211 + tmp2205[i1211][i1212]);
		};
		tmp2212[(0 + (i1211 * 1))] = tmp2211;
	};
	ElemWiseVectorPublicDiv(256, tmp2212, 256, tmp2213);

	ClearMemSecret1(256, tmp2212);

	for i1211 = [0: 256]{
 		tmp2214[i1211][0] = tmp2213[(0 + (i1211 * 1))];
	};
	ClearMemSecret1(256, tmp2213);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2205);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/batchnorm/add'} *)
	(* J15 + J1019 *)
	int64_al[256][1] tmp2216;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp2216[i0][i1] = (tmp15 + tmp2214[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2214);

	int64_al[256][1] tmp2218;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp2216, tmp2218, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2216);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/batchnorm/mul'} *)
	(* J1021 .* J42 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp2218, 12);

	int64_al[256][256] tmp2220;

	int64_al[65536] tmp2221;

	int64_al[65536] tmp2222;

	int64_al[65536] tmp2223;

	int32_pl tmp2224;

	for i1213 = [0: 256]{
 		for i1214 = [0: 256]{
 			tmp2224 = ((0 + (i1213 * 256)) + (i1214 * 1));
			tmp2221[tmp2224] = tmp2218[i1213][0];
			tmp2222[tmp2224] = tmp42[i1214];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp2221, tmp2222, tmp2223);

	ClearMemSecret1(65536, tmp2221);

	ClearMemSecret1(65536, tmp2222);

	for i1213 = [0: 256]{
 		for i1214 = [0: 256]{
 			tmp2224 = ((0 + (i1213 * 256)) + (i1214 * 1));
			tmp2220[i1213][i1214] = tmp2223[tmp2224];
		};
	};
	ClearMemSecret1(65536, tmp2223);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp42);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2218);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/batchnorm/mul_2'} *)
	(* J1022 .* J1016 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp2220, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp2202, 12);

	int64_al[256][256] tmp2227;

	int64_al[65536] tmp2228;

	int64_al[65536] tmp2229;

	int64_al[65536] tmp2230;

	int32_pl tmp2231;

	for i1215 = [0: 256]{
 		for i1216 = [0: 256]{
 			tmp2231 = ((0 + (i1215 * 256)) + (i1216 * 1));
			tmp2228[tmp2231] = tmp2220[i1215][i1216];
			tmp2229[tmp2231] = tmp2202[i1215][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2228, tmp2229, tmp2230);

	ClearMemSecret1(65536, tmp2228);

	ClearMemSecret1(65536, tmp2229);

	for i1215 = [0: 256]{
 		for i1216 = [0: 256]{
 			tmp2231 = ((0 + (i1215 * 256)) + (i1216 * 1));
			tmp2227[i1215][i1216] = tmp2230[tmp2231];
		};
	};
	ClearMemSecret1(65536, tmp2230);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2202);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp74, 12);

	int64_al[256][256] tmp2233;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/batchnorm/sub'} *)
	for i1217 = [0: 256]{
 		for i1218 = [0: 256]{
 			tmp2233[i1217][i1218] = (0L - tmp2227[i1217][i1218]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/batchnorm/sub'} *)
	(* J74 + tmp2233 *)
	int64_al[256][256] tmp2234;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2234[i0][i1] = (tmp74[i1] + tmp2233[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2227);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp74);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/batchnorm/mul_1'} *)
	(* J1015 .* J1022 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp2196, 12);

	int64_al[256][256] tmp2237;

	int64_al[65536] tmp2238;

	int64_al[65536] tmp2239;

	int64_al[65536] tmp2240;

	int32_pl tmp2241;

	for i1219 = [0: 256]{
 		for i1220 = [0: 256]{
 			tmp2241 = ((0 + (i1219 * 256)) + (i1220 * 1));
			tmp2238[tmp2241] = tmp2196[i1219][i1220];
			tmp2239[tmp2241] = tmp2220[i1219][i1220];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2238, tmp2239, tmp2240);

	ClearMemSecret1(65536, tmp2238);

	ClearMemSecret1(65536, tmp2239);

	for i1219 = [0: 256]{
 		for i1220 = [0: 256]{
 			tmp2241 = ((0 + (i1219 * 256)) + (i1220 * 1));
			tmp2237[i1219][i1220] = tmp2240[tmp2241];
		};
	};
	ClearMemSecret1(65536, tmp2240);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2220);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/pre_norm/batchnorm/add_1'} *)
	(* J1025 + J1024 *)
	int64_al[256][256] tmp2243;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2243[i0][i1] = (tmp2237[i0][i1] + tmp2234[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2237);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2234);

	int64_al[256][768] tmp2246;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp2243, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/qkv/MatMul'} *)
	(* J1026 * J10 *)
	MatMul2D(256, 256, 768, tmp2243, tmp10, tmp2246, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2243);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp10);

	int64_al[256][3][4][64] tmp2249;

	int64_pl i1226;

	int64_pl i1225;

	int64_pl i1224;

	int64_pl i1223;

	int64_pl i1222;

	int64_pl i1221;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape'} *)
	(* reshape(J1027, 256, 3, 4, 64) *)
	i1221 = 0L;
	i1222 = 0L;
	for i1223 = [0: 256]{
 		for i1224 = [0: 3]{
 			for i1225 = [0: 4]{
 				for i1226 = [0: 64]{
 					tmp2249[i1223][i1224][i1225][i1226] = tmp2246[i1221][i1222];
					i1222 = (i1222 + 1L);
					if ((i1222 == 768L)) {
						i1222 = 0L;
						i1221 = (i1221 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 768, tmp2246);

	int64_al[3][4][256][64] tmp2251;

	int64_pl i1230;

	int64_pl i1229;

	int64_pl i1228;

	int64_pl i1227;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_6/attention/self/transpose'} *)
	(* transpose(J1028, [256, 3, 4, 64] --> [3, 4, 256, 64]) *)
	for i1227 = [0: 256]{
 		for i1228 = [0: 3]{
 			for i1229 = [0: 4]{
 				for i1230 = [0: 64]{
 					tmp2251[i1228][i1229][i1227][i1230] = tmp2249[i1227][i1228][i1229][i1230];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(256, 3, 4, 64, tmp2249);

	int64_al[1][4][256][64] tmp2253;

	int64_pl i1234;

	int64_pl i1233;

	int64_pl i1232;

	int64_pl i1231;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_2'} *)
	(* slice(J1029, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i1231 = [0: 1]{
 		for i1232 = [0: 4]{
 			for i1233 = [0: 256]{
 				for i1234 = [0: 64]{
 					tmp2253[i1231][i1232][i1233][i1234] = tmp2251[(i1231 + 2L)][(i1232 + 0L)][(i1233 + 0L)][(i1234 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp2254;

	int64_pl i1238;

	int64_pl i1237;

	int64_pl i1236;

	int64_pl i1235;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_18'} *)
	(* slice(J1030, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1235 = [0: 1]{
 		for i1236 = [0: 1]{
 			for i1237 = [0: 256]{
 				for i1238 = [0: 64]{
 					tmp2254[i1235][i1236][i1237][i1238] = tmp2253[(i1235 + 0L)][(i1236 + 3L)][(i1237 + 0L)][(i1238 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2255;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2254, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_15'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2254, tmp2255);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2254);

	int64_al[1][1][256][64] tmp2257;

	int64_pl i1242;

	int64_pl i1241;

	int64_pl i1240;

	int64_pl i1239;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_16'} *)
	(* slice(J1030, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1239 = [0: 1]{
 		for i1240 = [0: 1]{
 			for i1241 = [0: 256]{
 				for i1242 = [0: 64]{
 					tmp2257[i1239][i1240][i1241][i1242] = tmp2253[(i1239 + 0L)][(i1240 + 2L)][(i1241 + 0L)][(i1242 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2258;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2257, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_13'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2257, tmp2258);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2257);

	int64_al[1][1][256][64] tmp2260;

	int64_pl i1246;

	int64_pl i1245;

	int64_pl i1244;

	int64_pl i1243;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_14'} *)
	(* slice(J1030, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1243 = [0: 1]{
 		for i1244 = [0: 1]{
 			for i1245 = [0: 256]{
 				for i1246 = [0: 64]{
 					tmp2260[i1243][i1244][i1245][i1246] = tmp2253[(i1243 + 0L)][(i1244 + 1L)][(i1245 + 0L)][(i1246 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2261;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2260, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_11'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2260, tmp2261);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2260);

	int64_al[1][1][256][64] tmp2263;

	int64_pl i1250;

	int64_pl i1249;

	int64_pl i1248;

	int64_pl i1247;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_12'} *)
	(* slice(J1030, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1247 = [0: 1]{
 		for i1248 = [0: 1]{
 			for i1249 = [0: 256]{
 				for i1250 = [0: 64]{
 					tmp2263[i1247][i1248][i1249][i1250] = tmp2253[(i1247 + 0L)][(i1248 + 0L)][(i1249 + 0L)][(i1250 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp2253);

	int64_al[256][64] tmp2265;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2263, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_9'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2263, tmp2265);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2263);

	int64_al[1][4][256][64] tmp2267;

	int64_pl i1254;

	int64_pl i1253;

	int64_pl i1252;

	int64_pl i1251;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_1'} *)
	(* slice(J1029, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i1251 = [0: 1]{
 		for i1252 = [0: 4]{
 			for i1253 = [0: 256]{
 				for i1254 = [0: 64]{
 					tmp2267[i1251][i1252][i1253][i1254] = tmp2251[(i1251 + 1L)][(i1252 + 0L)][(i1253 + 0L)][(i1254 + 0L)];
				};
			};
		};
	};
	int64_al[1][1][256][64] tmp2268;

	int64_pl i1258;

	int64_pl i1257;

	int64_pl i1256;

	int64_pl i1255;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_10'} *)
	(* slice(J1039, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1255 = [0: 1]{
 		for i1256 = [0: 1]{
 			for i1257 = [0: 256]{
 				for i1258 = [0: 64]{
 					tmp2268[i1255][i1256][i1257][i1258] = tmp2267[(i1255 + 0L)][(i1256 + 3L)][(i1257 + 0L)][(i1258 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2269;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2268, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_7'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2268, tmp2269);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2268);

	int64_al[1][1][256][64] tmp2271;

	int64_pl i1262;

	int64_pl i1261;

	int64_pl i1260;

	int64_pl i1259;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_8'} *)
	(* slice(J1039, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1259 = [0: 1]{
 		for i1260 = [0: 1]{
 			for i1261 = [0: 256]{
 				for i1262 = [0: 64]{
 					tmp2271[i1259][i1260][i1261][i1262] = tmp2267[(i1259 + 0L)][(i1260 + 2L)][(i1261 + 0L)][(i1262 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2272;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2271, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_5'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2271, tmp2272);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2271);

	int64_al[1][1][256][64] tmp2274;

	int64_pl i1266;

	int64_pl i1265;

	int64_pl i1264;

	int64_pl i1263;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_6'} *)
	(* slice(J1039, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1263 = [0: 1]{
 		for i1264 = [0: 1]{
 			for i1265 = [0: 256]{
 				for i1266 = [0: 64]{
 					tmp2274[i1263][i1264][i1265][i1266] = tmp2267[(i1263 + 0L)][(i1264 + 1L)][(i1265 + 0L)][(i1266 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2275;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2274, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_3'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2274, tmp2275);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2274);

	int64_al[1][1][256][64] tmp2277;

	int64_pl i1270;

	int64_pl i1269;

	int64_pl i1268;

	int64_pl i1267;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_4'} *)
	(* slice(J1039, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1267 = [0: 1]{
 		for i1268 = [0: 1]{
 			for i1269 = [0: 256]{
 				for i1270 = [0: 64]{
 					tmp2277[i1267][i1268][i1269][i1270] = tmp2267[(i1267 + 0L)][(i1268 + 0L)][(i1269 + 0L)][(i1270 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp2267);

	int64_al[256][64] tmp2279;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2277, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_1'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2277, tmp2279);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2277);

	int64_al[1][4][256][64] tmp2281;

	int64_pl i1274;

	int64_pl i1273;

	int64_pl i1272;

	int64_pl i1271;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice'} *)
	(* slice(J1029, [3, 4, 256, 64] --> [1, 4, 256, 64]) *)
	for i1271 = [0: 1]{
 		for i1272 = [0: 4]{
 			for i1273 = [0: 256]{
 				for i1274 = [0: 64]{
 					tmp2281[i1271][i1272][i1273][i1274] = tmp2251[(i1271 + 0L)][(i1272 + 0L)][(i1273 + 0L)][(i1274 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(3, 4, 256, 64, tmp2251);

	int64_al[1][1][256][64] tmp2283;

	int64_pl i1278;

	int64_pl i1277;

	int64_pl i1276;

	int64_pl i1275;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_9'} *)
	(* slice(J1048, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1275 = [0: 1]{
 		for i1276 = [0: 1]{
 			for i1277 = [0: 256]{
 				for i1278 = [0: 64]{
 					tmp2283[i1275][i1276][i1277][i1278] = tmp2281[(i1275 + 0L)][(i1276 + 3L)][(i1277 + 0L)][(i1278 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2284;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2283, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_6'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2283, tmp2284);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2283);

	int64_al[256][256] tmp2287;

	int64_al[64][256] tmp2286;

	int64_pl i1280;

	int64_pl i1279;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* transpose(J1041, [256, 64] --> [64, 256]) *)
	for i1279 = [0: 256]{
 		for i1280 = [0: 64]{
 			tmp2286[i1280][i1279] = tmp2269[i1279][i1280];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_3'} *)
	(* J1050 * tmp2286 *)
	MatMul2D(256, 64, 256, tmp2284, tmp2286, tmp2287, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2284);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2269);

	int64_al[1][1][256][256] tmp2290;

	int64_pl i1286;

	int64_pl i1285;

	int64_pl i1284;

	int64_pl i1283;

	int64_pl i1282;

	int64_pl i1281;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape_4'} *)
	(* reshape(J1051, 1, 1, 256, 256) *)
	i1281 = 0L;
	i1282 = 0L;
	for i1283 = [0: 1]{
 		for i1284 = [0: 1]{
 			for i1285 = [0: 256]{
 				for i1286 = [0: 256]{
 					tmp2290[i1283][i1284][i1285][i1286] = tmp2287[i1281][i1282];
					i1282 = (i1282 + 1L);
					if ((i1282 == 256L)) {
						i1282 = 0L;
						i1281 = (i1281 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2287);

	int64_al[1][1][256][64] tmp2292;

	int64_pl i1290;

	int64_pl i1289;

	int64_pl i1288;

	int64_pl i1287;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_7'} *)
	(* slice(J1048, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1287 = [0: 1]{
 		for i1288 = [0: 1]{
 			for i1289 = [0: 256]{
 				for i1290 = [0: 64]{
 					tmp2292[i1287][i1288][i1289][i1290] = tmp2281[(i1287 + 0L)][(i1288 + 2L)][(i1289 + 0L)][(i1290 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2293;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2292, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_4'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2292, tmp2293);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2292);

	int64_al[256][256] tmp2296;

	int64_al[64][256] tmp2295;

	int64_pl i1292;

	int64_pl i1291;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* transpose(J1043, [256, 64] --> [64, 256]) *)
	for i1291 = [0: 256]{
 		for i1292 = [0: 64]{
 			tmp2295[i1292][i1291] = tmp2272[i1291][i1292];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_2'} *)
	(* J1054 * tmp2295 *)
	MatMul2D(256, 64, 256, tmp2293, tmp2295, tmp2296, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2272);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2293);

	int64_al[1][1][256][256] tmp2299;

	int64_pl i1298;

	int64_pl i1297;

	int64_pl i1296;

	int64_pl i1295;

	int64_pl i1294;

	int64_pl i1293;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape_3'} *)
	(* reshape(J1055, 1, 1, 256, 256) *)
	i1293 = 0L;
	i1294 = 0L;
	for i1295 = [0: 1]{
 		for i1296 = [0: 1]{
 			for i1297 = [0: 256]{
 				for i1298 = [0: 256]{
 					tmp2299[i1295][i1296][i1297][i1298] = tmp2296[i1293][i1294];
					i1294 = (i1294 + 1L);
					if ((i1294 == 256L)) {
						i1294 = 0L;
						i1293 = (i1293 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2296);

	int64_al[1][1][256][64] tmp2301;

	int64_pl i1302;

	int64_pl i1301;

	int64_pl i1300;

	int64_pl i1299;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_5'} *)
	(* slice(J1048, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1299 = [0: 1]{
 		for i1300 = [0: 1]{
 			for i1301 = [0: 256]{
 				for i1302 = [0: 64]{
 					tmp2301[i1299][i1300][i1301][i1302] = tmp2281[(i1299 + 0L)][(i1300 + 1L)][(i1301 + 0L)][(i1302 + 0L)];
				};
			};
		};
	};
	int64_al[256][64] tmp2302;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2301, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_2'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2301, tmp2302);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2301);

	int64_al[256][256] tmp2305;

	int64_al[64][256] tmp2304;

	int64_pl i1304;

	int64_pl i1303;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* transpose(J1045, [256, 64] --> [64, 256]) *)
	for i1303 = [0: 256]{
 		for i1304 = [0: 64]{
 			tmp2304[i1304][i1303] = tmp2275[i1303][i1304];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul_1'} *)
	(* J1058 * tmp2304 *)
	MatMul2D(256, 64, 256, tmp2302, tmp2304, tmp2305, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2302);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2275);

	int64_al[1][1][256][256] tmp2308;

	int64_pl i1310;

	int64_pl i1309;

	int64_pl i1308;

	int64_pl i1307;

	int64_pl i1306;

	int64_pl i1305;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape_2'} *)
	(* reshape(J1059, 1, 1, 256, 256) *)
	i1305 = 0L;
	i1306 = 0L;
	for i1307 = [0: 1]{
 		for i1308 = [0: 1]{
 			for i1309 = [0: 256]{
 				for i1310 = [0: 256]{
 					tmp2308[i1307][i1308][i1309][i1310] = tmp2305[i1305][i1306];
					i1306 = (i1306 + 1L);
					if ((i1306 == 256L)) {
						i1306 = 0L;
						i1305 = (i1305 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2305);

	int64_al[1][1][256][64] tmp2310;

	int64_pl i1314;

	int64_pl i1313;

	int64_pl i1312;

	int64_pl i1311;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_3'} *)
	(* slice(J1048, [1, 4, 256, 64] --> [1, 1, 256, 64]) *)
	for i1311 = [0: 1]{
 		for i1312 = [0: 1]{
 			for i1313 = [0: 256]{
 				for i1314 = [0: 64]{
 					tmp2310[i1311][i1312][i1313][i1314] = tmp2281[(i1311 + 0L)][(i1312 + 0L)][(i1313 + 0L)][(i1314 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp2281);

	int64_al[256][64] tmp2312;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2310, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze'} *)
	Squeeze24(256, 64, 1, 1, 256, 64, tmp2310, tmp2312);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2310);

	int64_al[256][256] tmp2315;

	int64_al[64][256] tmp2314;

	int64_pl i1316;

	int64_pl i1315;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* transpose(J1047, [256, 64] --> [64, 256]) *)
	for i1315 = [0: 256]{
 		for i1316 = [0: 64]{
 			tmp2314[i1316][i1315] = tmp2279[i1315][i1316];
		};
	};
	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* J1062 * tmp2314 *)
	MatMul2D(256, 64, 256, tmp2312, tmp2314, tmp2315, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2279);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2312);

	int64_al[1][1][256][256] tmp2318;

	int64_pl i1322;

	int64_pl i1321;

	int64_pl i1320;

	int64_pl i1319;

	int64_pl i1318;

	int64_pl i1317;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape_1'} *)
	(* reshape(J1063, 1, 1, 256, 256) *)
	i1317 = 0L;
	i1318 = 0L;
	for i1319 = [0: 1]{
 		for i1320 = [0: 1]{
 			for i1321 = [0: 256]{
 				for i1322 = [0: 256]{
 					tmp2318[i1319][i1320][i1321][i1322] = tmp2315[i1317][i1318];
					i1318 = (i1318 + 1L);
					if ((i1318 == 256L)) {
						i1318 = 0L;
						i1317 = (i1317 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2315);

	int64_al[1][4][256][256] tmp2320;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2290, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2299, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2308, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2318, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/concat_2'} *)
	Concat4T44444(1, 4, 256, 256, 1, 1, 256, 256, tmp2318, 1, 1, 256, 256, tmp2308, 1, 1, 256, 256, tmp2299, 1, 1, 256, 256, tmp2290, 1, tmp2320);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2299);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2290);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2308);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2318);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Mul'} *)
	(* J47 .* J1065 *)
	int64_al[1][4][256][256] tmp2326;

	int64_al[262144] tmp2327;

	int64_al[262144] tmp2328;

	int64_al[262144] tmp2329;

	int32_pl tmp2330;

	for i1323 = [0: 1]{
 		for i1324 = [0: 4]{
 			for i1325 = [0: 256]{
 				for i1326 = [0: 256]{
 					tmp2330 = ((((0 + (i1323 * 262144)) + (i1324 * 65536)) + (i1325 * 256)) + (i1326 * 1));
					tmp2327[tmp2330] = tmp47;
					tmp2328[tmp2330] = tmp2320[i1323][i1324][i1325][i1326];
				};
			};
		};
	};
	ElemWiseActModelVectorMult(262144, tmp2328, tmp2327, tmp2329);

	ClearMemSecret1(262144, tmp2327);

	ClearMemSecret1(262144, tmp2328);

	for i1323 = [0: 1]{
 		for i1324 = [0: 4]{
 			for i1325 = [0: 256]{
 				for i1326 = [0: 256]{
 					tmp2330 = ((((0 + (i1323 * 262144)) + (i1324 * 65536)) + (i1325 * 256)) + (i1326 * 1));
					tmp2326[i1323][i1324][i1325][i1326] = tmp2329[tmp2330];
				};
			};
		};
	};
	ClearMemSecret1(262144, tmp2329);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp2320);

	int64_al[1][4][256][256] tmp2333;

	(* {'TFOpName': 'Softmax', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Softmax'} *)
	Softmax4(1, 4, 256, 256, tmp2326, tmp2333);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp2326);

	int64_al[1][1][256][256] tmp2335;

	int64_pl i1330;

	int64_pl i1329;

	int64_pl i1328;

	int64_pl i1327;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_17'} *)
	(* slice(J1067, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i1327 = [0: 1]{
 		for i1328 = [0: 1]{
 			for i1329 = [0: 256]{
 				for i1330 = [0: 256]{
 					tmp2335[i1327][i1328][i1329][i1330] = tmp2333[(i1327 + 0L)][(i1328 + 3L)][(i1329 + 0L)][(i1330 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp2336;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2335, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_14'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp2335, tmp2336);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2335);

	int64_al[256][64] tmp2338;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/MatMul_7'} *)
	(* J1069 * J1032 *)
	MatMul2D(256, 256, 64, tmp2336, tmp2255, tmp2338, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2255);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2336);

	int64_al[1][1][256][64] tmp2341;

	int64_pl i1336;

	int64_pl i1335;

	int64_pl i1334;

	int64_pl i1333;

	int64_pl i1332;

	int64_pl i1331;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape_8'} *)
	(* reshape(J1070, 1, 1, 256, 64) *)
	i1331 = 0L;
	i1332 = 0L;
	for i1333 = [0: 1]{
 		for i1334 = [0: 1]{
 			for i1335 = [0: 256]{
 				for i1336 = [0: 64]{
 					tmp2341[i1333][i1334][i1335][i1336] = tmp2338[i1331][i1332];
					i1332 = (i1332 + 1L);
					if ((i1332 == 64L)) {
						i1332 = 0L;
						i1331 = (i1331 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2338);

	int64_al[1][1][256][256] tmp2343;

	int64_pl i1340;

	int64_pl i1339;

	int64_pl i1338;

	int64_pl i1337;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_15'} *)
	(* slice(J1067, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i1337 = [0: 1]{
 		for i1338 = [0: 1]{
 			for i1339 = [0: 256]{
 				for i1340 = [0: 256]{
 					tmp2343[i1337][i1338][i1339][i1340] = tmp2333[(i1337 + 0L)][(i1338 + 2L)][(i1339 + 0L)][(i1340 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp2344;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2343, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_12'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp2343, tmp2344);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2343);

	int64_al[256][64] tmp2346;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/MatMul_6'} *)
	(* J1073 * J1034 *)
	MatMul2D(256, 256, 64, tmp2344, tmp2258, tmp2346, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2258);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2344);

	int64_al[1][1][256][64] tmp2349;

	int64_pl i1346;

	int64_pl i1345;

	int64_pl i1344;

	int64_pl i1343;

	int64_pl i1342;

	int64_pl i1341;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape_7'} *)
	(* reshape(J1074, 1, 1, 256, 64) *)
	i1341 = 0L;
	i1342 = 0L;
	for i1343 = [0: 1]{
 		for i1344 = [0: 1]{
 			for i1345 = [0: 256]{
 				for i1346 = [0: 64]{
 					tmp2349[i1343][i1344][i1345][i1346] = tmp2346[i1341][i1342];
					i1342 = (i1342 + 1L);
					if ((i1342 == 64L)) {
						i1342 = 0L;
						i1341 = (i1341 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2346);

	int64_al[1][1][256][256] tmp2351;

	int64_pl i1350;

	int64_pl i1349;

	int64_pl i1348;

	int64_pl i1347;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_13'} *)
	(* slice(J1067, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i1347 = [0: 1]{
 		for i1348 = [0: 1]{
 			for i1349 = [0: 256]{
 				for i1350 = [0: 256]{
 					tmp2351[i1347][i1348][i1349][i1350] = tmp2333[(i1347 + 0L)][(i1348 + 1L)][(i1349 + 0L)][(i1350 + 0L)];
				};
			};
		};
	};
	int64_al[256][256] tmp2352;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2351, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_10'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp2351, tmp2352);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2351);

	int64_al[256][64] tmp2354;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/MatMul_5'} *)
	(* J1077 * J1036 *)
	MatMul2D(256, 256, 64, tmp2352, tmp2261, tmp2354, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2261);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2352);

	int64_al[1][1][256][64] tmp2357;

	int64_pl i1356;

	int64_pl i1355;

	int64_pl i1354;

	int64_pl i1353;

	int64_pl i1352;

	int64_pl i1351;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape_6'} *)
	(* reshape(J1078, 1, 1, 256, 64) *)
	i1351 = 0L;
	i1352 = 0L;
	for i1353 = [0: 1]{
 		for i1354 = [0: 1]{
 			for i1355 = [0: 256]{
 				for i1356 = [0: 64]{
 					tmp2357[i1353][i1354][i1355][i1356] = tmp2354[i1351][i1352];
					i1352 = (i1352 + 1L);
					if ((i1352 == 64L)) {
						i1352 = 0L;
						i1351 = (i1351 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2354);

	int64_al[1][1][256][256] tmp2359;

	int64_pl i1360;

	int64_pl i1359;

	int64_pl i1358;

	int64_pl i1357;

	(* {'TFOpName': 'Slice', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Slice_11'} *)
	(* slice(J1067, [1, 4, 256, 256] --> [1, 1, 256, 256]) *)
	for i1357 = [0: 1]{
 		for i1358 = [0: 1]{
 			for i1359 = [0: 256]{
 				for i1360 = [0: 256]{
 					tmp2359[i1357][i1358][i1359][i1360] = tmp2333[(i1357 + 0L)][(i1358 + 0L)][(i1359 + 0L)][(i1360 + 0L)];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 256, tmp2333);

	int64_al[256][256] tmp2361;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 256, tmp2359, 12);

	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Squeeze_8'} *)
	Squeeze24(256, 256, 1, 1, 256, 256, tmp2359, tmp2361);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 256, tmp2359);

	int64_al[256][64] tmp2363;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/MatMul_4'} *)
	(* J1081 * J1038 *)
	MatMul2D(256, 256, 64, tmp2361, tmp2265, tmp2363, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2265);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2361);

	int64_al[1][1][256][64] tmp2366;

	int64_pl i1366;

	int64_pl i1365;

	int64_pl i1364;

	int64_pl i1363;

	int64_pl i1362;

	int64_pl i1361;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape_5'} *)
	(* reshape(J1082, 1, 1, 256, 64) *)
	i1361 = 0L;
	i1362 = 0L;
	for i1363 = [0: 1]{
 		for i1364 = [0: 1]{
 			for i1365 = [0: 256]{
 				for i1366 = [0: 64]{
 					tmp2366[i1363][i1364][i1365][i1366] = tmp2363[i1361][i1362];
					i1362 = (i1362 + 1L);
					if ((i1362 == 64L)) {
						i1362 = 0L;
						i1361 = (i1361 + 1L);
					}
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 64, tmp2363);

	int64_al[1][4][256][64] tmp2368;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2341, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2349, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2357, 12);

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown4(1, 1, 256, 64, tmp2366, 12);

	(* {'TFOpName': 'ConcatV2', 'TFNodeName': 'bert/encoder/layer_6/attention/self/concat_5'} *)
	Concat4T44444(1, 4, 256, 64, 1, 1, 256, 64, tmp2366, 1, 1, 256, 64, tmp2357, 1, 1, 256, 64, tmp2349, 1, 1, 256, 64, tmp2341, 1, tmp2368);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2366);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2349);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2357);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 1, 256, 64, tmp2341);

	int64_al[1][256][4][64] tmp2374;

	int64_pl i1370;

	int64_pl i1369;

	int64_pl i1368;

	int64_pl i1367;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/encoder/layer_6/attention/self/transpose_5'} *)
	(* transpose(J1084, [1, 4, 256, 64] --> [1, 256, 4, 64]) *)
	for i1367 = [0: 1]{
 		for i1368 = [0: 4]{
 			for i1369 = [0: 256]{
 				for i1370 = [0: 64]{
 					tmp2374[i1367][i1369][i1368][i1370] = tmp2368[i1367][i1368][i1369][i1370];
				};
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 4, 256, 64, tmp2368);

	int64_al[256][256] tmp2376;

	int64_pl i1376;

	int64_pl i1375;

	int64_pl i1374;

	int64_pl i1373;

	int64_pl i1372;

	int64_pl i1371;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/layer_6/attention/self/Reshape_9'} *)
	(* reshape(J1085, 256, 256) *)
	i1371 = 0L;
	i1372 = 0L;
	i1373 = 0L;
	i1374 = 0L;
	for i1375 = [0: 256]{
 		for i1376 = [0: 256]{
 			tmp2376[i1375][i1376] = tmp2374[i1371][i1372][i1373][i1374];
			i1374 = (i1374 + 1L);
			if ((i1374 == 64L)) {
				i1374 = 0L;
				i1373 = (i1373 + 1L);
				if ((i1373 == 4L)) {
					i1373 = 0L;
					i1372 = (i1372 + 1L);
					if ((i1372 == 256L)) {
						i1372 = 0L;
						i1371 = (i1371 + 1L);
					}
				}
			}
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret4(1, 256, 4, 64, tmp2374);

	int64_al[256][256] tmp2378;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/attention/self/proj/MatMul'} *)
	(* J1086 * J58 *)
	MatMul2D(256, 256, 256, tmp2376, tmp58, tmp2378, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp58);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2376);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp86, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_6/attention/self/proj/BiasAdd'} *)
	(* J1087 + J86 *)
	int64_al[256][256] tmp2381;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2381[i0][i1] = (tmp2378[i0][i1] + tmp86[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp86);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2378);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp2196, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_6/attention/output/add'} *)
	(* J1015 + J1088 *)
	int64_al[256][256] tmp2384;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2384[i0][i1] = (tmp2196[i0][i1] + tmp2381[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2381);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2196);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/moments/mean'} *)
	int64_al tmp2387;

	int64_al[256] tmp2388;

	int64_al[256] tmp2389;

	int64_al[256][1] tmp2390;

	for i1377 = [0: 256]{
 		tmp2387 = 0L;
		for i1378 = [0: 256]{
 			tmp2387 = (tmp2387 + tmp2384[i1377][i1378]);
		};
		tmp2388[(0 + (i1377 * 1))] = tmp2387;
	};
	ElemWiseVectorPublicDiv(256, tmp2388, 256, tmp2389);

	ClearMemSecret1(256, tmp2388);

	for i1377 = [0: 256]{
 		tmp2390[i1377][0] = tmp2389[(0 + (i1377 * 1))];
	};
	ClearMemSecret1(256, tmp2389);

	int64_al[256][1] tmp2391;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/moments/SquaredDifference__sub'} *)
	for i1379 = [0: 256]{
 		for i1380 = [0: 1]{
 			tmp2391[i1379][i1380] = (0L - tmp2390[i1379][i1380]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/moments/SquaredDifference__sub'} *)
	(* J1089 + tmp2391 *)
	int64_al[256][256] tmp2392;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2392[i0][i1] = (tmp2384[i0][i1] + tmp2391[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/moments/SquaredDifference__mul'} *)
	(* J1091 .* J1091 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp2392, 12);

	int64_al[256][256] tmp2393;

	int64_al[65536] tmp2394;

	int64_al[65536] tmp2395;

	int64_al[65536] tmp2396;

	int32_pl tmp2397;

	for i1381 = [0: 256]{
 		for i1382 = [0: 256]{
 			tmp2397 = ((0 + (i1381 * 256)) + (i1382 * 1));
			tmp2394[tmp2397] = tmp2392[i1381][i1382];
			tmp2395[tmp2397] = tmp2392[i1381][i1382];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2394, tmp2395, tmp2396);

	ClearMemSecret1(65536, tmp2394);

	ClearMemSecret1(65536, tmp2395);

	for i1381 = [0: 256]{
 		for i1382 = [0: 256]{
 			tmp2397 = ((0 + (i1381 * 256)) + (i1382 * 1));
			tmp2393[i1381][i1382] = tmp2396[tmp2397];
		};
	};
	ClearMemSecret1(65536, tmp2396);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2392);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/moments/variance'} *)
	int64_al tmp2399;

	int64_al[256] tmp2400;

	int64_al[256] tmp2401;

	int64_al[256][1] tmp2402;

	for i1383 = [0: 256]{
 		tmp2399 = 0L;
		for i1384 = [0: 256]{
 			tmp2399 = (tmp2399 + tmp2393[i1383][i1384]);
		};
		tmp2400[(0 + (i1383 * 1))] = tmp2399;
	};
	ElemWiseVectorPublicDiv(256, tmp2400, 256, tmp2401);

	ClearMemSecret1(256, tmp2400);

	for i1383 = [0: 256]{
 		tmp2402[i1383][0] = tmp2401[(0 + (i1383 * 1))];
	};
	ClearMemSecret1(256, tmp2401);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2393);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/batchnorm/add'} *)
	(* J15 + J1093 *)
	int64_al[256][1] tmp2404;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp2404[i0][i1] = (tmp15 + tmp2402[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2402);

	int64_al[256][1] tmp2406;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp2404, tmp2406, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2404);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/batchnorm/mul'} *)
	(* J1095 .* J100 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp2406, 12);

	int64_al[256][256] tmp2408;

	int64_al[65536] tmp2409;

	int64_al[65536] tmp2410;

	int64_al[65536] tmp2411;

	int32_pl tmp2412;

	for i1385 = [0: 256]{
 		for i1386 = [0: 256]{
 			tmp2412 = ((0 + (i1385 * 256)) + (i1386 * 1));
			tmp2409[tmp2412] = tmp2406[i1385][0];
			tmp2410[tmp2412] = tmp100[i1386];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp2409, tmp2410, tmp2411);

	ClearMemSecret1(65536, tmp2409);

	ClearMemSecret1(65536, tmp2410);

	for i1385 = [0: 256]{
 		for i1386 = [0: 256]{
 			tmp2412 = ((0 + (i1385 * 256)) + (i1386 * 1));
			tmp2408[i1385][i1386] = tmp2411[tmp2412];
		};
	};
	ClearMemSecret1(65536, tmp2411);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2406);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp100);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/batchnorm/mul_1'} *)
	(* J1089 .* J1096 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp2384, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp2408, 12);

	int64_al[256][256] tmp2415;

	int64_al[65536] tmp2416;

	int64_al[65536] tmp2417;

	int64_al[65536] tmp2418;

	int32_pl tmp2419;

	for i1387 = [0: 256]{
 		for i1388 = [0: 256]{
 			tmp2419 = ((0 + (i1387 * 256)) + (i1388 * 1));
			tmp2416[tmp2419] = tmp2384[i1387][i1388];
			tmp2417[tmp2419] = tmp2408[i1387][i1388];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2416, tmp2417, tmp2418);

	ClearMemSecret1(65536, tmp2416);

	ClearMemSecret1(65536, tmp2417);

	for i1387 = [0: 256]{
 		for i1388 = [0: 256]{
 			tmp2419 = ((0 + (i1387 * 256)) + (i1388 * 1));
			tmp2415[i1387][i1388] = tmp2418[tmp2419];
		};
	};
	ClearMemSecret1(65536, tmp2418);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2384);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/batchnorm/mul_2'} *)
	(* J1096 .* J1090 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp2390, 12);

	int64_al[256][256] tmp2421;

	int64_al[65536] tmp2422;

	int64_al[65536] tmp2423;

	int64_al[65536] tmp2424;

	int32_pl tmp2425;

	for i1389 = [0: 256]{
 		for i1390 = [0: 256]{
 			tmp2425 = ((0 + (i1389 * 256)) + (i1390 * 1));
			tmp2422[tmp2425] = tmp2408[i1389][i1390];
			tmp2423[tmp2425] = tmp2390[i1389][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2422, tmp2423, tmp2424);

	ClearMemSecret1(65536, tmp2422);

	ClearMemSecret1(65536, tmp2423);

	for i1389 = [0: 256]{
 		for i1390 = [0: 256]{
 			tmp2425 = ((0 + (i1389 * 256)) + (i1390 * 1));
			tmp2421[i1389][i1390] = tmp2424[tmp2425];
		};
	};
	ClearMemSecret1(65536, tmp2424);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2408);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2390);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp5, 12);

	int64_al[256][256] tmp2428;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/batchnorm/sub'} *)
	for i1391 = [0: 256]{
 		for i1392 = [0: 256]{
 			tmp2428[i1391][i1392] = (0L - tmp2421[i1391][i1392]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/batchnorm/sub'} *)
	(* J5 + tmp2428 *)
	int64_al[256][256] tmp2429;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2429[i0][i1] = (tmp5[i1] + tmp2428[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2421);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp5);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_6/attention/output/norm1/batchnorm/add_1'} *)
	(* J1097 + J1099 *)
	int64_al[256][256] tmp2432;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2432[i0][i1] = (tmp2415[i0][i1] + tmp2429[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2415);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2429);

	int64_al[256][512] tmp2435;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp2432, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/linear1/MatMul'} *)
	(* J1100 * J105 *)
	MatMul2D(256, 256, 512, tmp2432, tmp105, tmp2435, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp105);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(512, tmp88, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_6/linear1/BiasAdd'} *)
	(* J1101 + J88 *)
	int64_al[256][512] tmp2437;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp2437[i0][i1] = (tmp2435[i0][i1] + tmp88[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(512, tmp88);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2435);

	(* {'TFOpName': 'Square', 'TFNodeName': 'bert/encoder/layer_6/linear1/ArithmeticOptimizer/ReplaceMulWithSquare_mul_1'} *)
	(* J1102 .* J1102 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2437, 12);

	int64_al[256][512] tmp2440;

	int64_al[131072] tmp2441;

	int64_al[131072] tmp2442;

	int64_al[131072] tmp2443;

	int32_pl tmp2444;

	for i1393 = [0: 256]{
 		for i1394 = [0: 512]{
 			tmp2444 = ((0 + (i1393 * 512)) + (i1394 * 1));
			tmp2441[tmp2444] = tmp2437[i1393][i1394];
			tmp2442[tmp2444] = tmp2437[i1393][i1394];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp2441, tmp2442, tmp2443);

	ClearMemSecret1(131072, tmp2441);

	ClearMemSecret1(131072, tmp2442);

	for i1393 = [0: 256]{
 		for i1394 = [0: 512]{
 			tmp2444 = ((0 + (i1393 * 512)) + (i1394 * 1));
			tmp2440[i1393][i1394] = tmp2443[tmp2444];
		};
	};
	ClearMemSecret1(131072, tmp2443);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/linear1/mul_4'} *)
	(* J6 .* J1102 *)
	int64_al[256][512] tmp2445;

	int64_al[131072] tmp2446;

	int64_al[131072] tmp2447;

	int64_al[131072] tmp2448;

	int32_pl tmp2449;

	for i1395 = [0: 256]{
 		for i1396 = [0: 512]{
 			tmp2449 = ((0 + (i1395 * 512)) + (i1396 * 1));
			tmp2446[tmp2449] = tmp6;
			tmp2447[tmp2449] = tmp2437[i1395][i1396];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp2447, tmp2446, tmp2448);

	ClearMemSecret1(131072, tmp2446);

	ClearMemSecret1(131072, tmp2447);

	for i1395 = [0: 256]{
 		for i1396 = [0: 512]{
 			tmp2449 = ((0 + (i1395 * 512)) + (i1396 * 1));
			tmp2445[i1395][i1396] = tmp2448[tmp2449];
		};
	};
	ClearMemSecret1(131072, tmp2448);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/linear1/mul'} *)
	(* J72 .* J1102 *)
	int64_al[256][512] tmp2451;

	int64_al[131072] tmp2452;

	int64_al[131072] tmp2453;

	int64_al[131072] tmp2454;

	int32_pl tmp2455;

	for i1397 = [0: 256]{
 		for i1398 = [0: 512]{
 			tmp2455 = ((0 + (i1397 * 512)) + (i1398 * 1));
			tmp2452[tmp2455] = tmp72;
			tmp2453[tmp2455] = tmp2437[i1397][i1398];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp2453, tmp2452, tmp2454);

	ClearMemSecret1(131072, tmp2452);

	ClearMemSecret1(131072, tmp2453);

	for i1397 = [0: 256]{
 		for i1398 = [0: 512]{
 			tmp2455 = ((0 + (i1397 * 512)) + (i1398 * 1));
			tmp2451[i1397][i1398] = tmp2454[tmp2455];
		};
	};
	ClearMemSecret1(131072, tmp2454);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/linear1/mul_2'} *)
	(* J1103 .* J1105 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2440, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2451, 12);

	int64_al[256][512] tmp2457;

	int64_al[131072] tmp2458;

	int64_al[131072] tmp2459;

	int64_al[131072] tmp2460;

	int32_pl tmp2461;

	for i1399 = [0: 256]{
 		for i1400 = [0: 512]{
 			tmp2461 = ((0 + (i1399 * 512)) + (i1400 * 1));
			tmp2458[tmp2461] = tmp2440[i1399][i1400];
			tmp2459[tmp2461] = tmp2451[i1399][i1400];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp2458, tmp2459, tmp2460);

	ClearMemSecret1(131072, tmp2458);

	ClearMemSecret1(131072, tmp2459);

	for i1399 = [0: 256]{
 		for i1400 = [0: 512]{
 			tmp2461 = ((0 + (i1399 * 512)) + (i1400 * 1));
			tmp2457[i1399][i1400] = tmp2460[tmp2461];
		};
	};
	ClearMemSecret1(131072, tmp2460);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2440);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2451);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 512, tmp2437, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_6/linear1/add'} *)
	(* J1102 + J1106 *)
	int64_al[256][512] tmp2464;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp2464[i0][i1] = (tmp2437[i0][i1] + tmp2457[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2437);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2457);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/linear1/mul_3'} *)
	(* J106 .* J1107 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2464, 12);

	int64_al[256][512] tmp2467;

	int64_al[131072] tmp2468;

	int64_al[131072] tmp2469;

	int64_al[131072] tmp2470;

	int32_pl tmp2471;

	for i1401 = [0: 256]{
 		for i1402 = [0: 512]{
 			tmp2471 = ((0 + (i1401 * 512)) + (i1402 * 1));
			tmp2468[tmp2471] = tmp106;
			tmp2469[tmp2471] = tmp2464[i1401][i1402];
		};
	};
	ElemWiseActModelVectorMult(131072, tmp2469, tmp2468, tmp2470);

	ClearMemSecret1(131072, tmp2468);

	ClearMemSecret1(131072, tmp2469);

	for i1401 = [0: 256]{
 		for i1402 = [0: 512]{
 			tmp2471 = ((0 + (i1401 * 512)) + (i1402 * 1));
			tmp2467[i1401][i1402] = tmp2470[tmp2471];
		};
	};
	ClearMemSecret1(131072, tmp2470);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2464);

	int64_al[256][512] tmp2474;

	(* {'TFOpName': 'Tanh', 'TFNodeName': 'bert/encoder/layer_6/linear1/Tanh'} *)
	Tanh2(256, 512, tmp2467, tmp2474, 24, 24, 32, 64, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2467);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_6/linear1/add_1'} *)
	(* J80 + J1109 *)
	int64_al[256][512] tmp2476;

	for i0 = [0: 256]{
 		for i1 = [0: 512]{
 			tmp2476[i0][i1] = (tmp80 + tmp2474[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2474);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/encoder/layer_6/linear1/mul_5'} *)
	(* J1110 .* J1104 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2476, 12);

	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 512, tmp2445, 12);

	int64_al[256][512] tmp2479;

	int64_al[131072] tmp2480;

	int64_al[131072] tmp2481;

	int64_al[131072] tmp2482;

	int32_pl tmp2483;

	for i1403 = [0: 256]{
 		for i1404 = [0: 512]{
 			tmp2483 = ((0 + (i1403 * 512)) + (i1404 * 1));
			tmp2480[tmp2483] = tmp2476[i1403][i1404];
			tmp2481[tmp2483] = tmp2445[i1403][i1404];
		};
	};
	ElemWiseSecretSharedVectorMult(131072, tmp2480, tmp2481, tmp2482);

	ClearMemSecret1(131072, tmp2480);

	ClearMemSecret1(131072, tmp2481);

	for i1403 = [0: 256]{
 		for i1404 = [0: 512]{
 			tmp2483 = ((0 + (i1403 * 512)) + (i1404 * 1));
			tmp2479[i1403][i1404] = tmp2482[tmp2483];
		};
	};
	ClearMemSecret1(131072, tmp2482);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2445);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2476);

	int64_al[256][256] tmp2486;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 512, tmp2479, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/encoder/layer_6/output/linear2/MatMul'} *)
	(* J1111 * J20 *)
	MatMul2D(256, 512, 256, tmp2479, tmp20, tmp2486, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(512, 256, tmp20);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 512, tmp2479);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp57, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/encoder/layer_6/output/linear2/BiasAdd'} *)
	(* J1112 + J57 *)
	int64_al[256][256] tmp2489;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2489[i0][i1] = (tmp2486[i0][i1] + tmp57[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2486);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp57);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp2(256, 256, tmp2432, 12);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/encoder/layer_6/output/add'} *)
	(* J1100 + J1113 *)
	int64_al[256][256] tmp2492;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2492[i0][i1] = (tmp2432[i0][i1] + tmp2489[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2489);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2432);

	int64_al[1][256][256] tmp2495;

	int64_pl i1409;

	int64_pl i1408;

	int64_pl i1407;

	int64_pl i1406;

	int64_pl i1405;

	(* {'TFOpName': 'Reshape', 'TFNodeName': 'bert/encoder/Reshape_1'} *)
	(* reshape(J1114, 1, 256, 256) *)
	i1405 = 0L;
	i1406 = 0L;
	for i1407 = [0: 1]{
 		for i1408 = [0: 256]{
 			for i1409 = [0: 256]{
 				tmp2495[i1407][i1408][i1409] = tmp2492[i1405][i1406];
				i1406 = (i1406 + 1L);
				if ((i1406 == 256L)) {
					i1406 = 0L;
					i1405 = (i1405 + 1L);
				}
			};
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2492);

	int64_al[256][256] tmp2498;

	(* Truncation before UninterpFuncCall node. *)
	ScaleDown3(1, 256, 256, tmp2495, 12);

	int32_pl tmp2497 = 0;

	(* Int node, isSecret = False. *)
	(* {'TFOpName': 'Squeeze', 'TFNodeName': 'bert/Squeeze'} *)
	Squeeze23(256, 256, tmp2497, 1, 256, 256, tmp2495, tmp2498);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret3(1, 256, 256, tmp2495);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/pooler/norm/moments/mean'} *)
	int64_al tmp2500;

	int64_al[256] tmp2501;

	int64_al[256] tmp2502;

	int64_al[256][1] tmp2503;

	for i1410 = [0: 256]{
 		tmp2500 = 0L;
		for i1411 = [0: 256]{
 			tmp2500 = (tmp2500 + tmp2498[i1410][i1411]);
		};
		tmp2501[(0 + (i1410 * 1))] = tmp2500;
	};
	ElemWiseVectorPublicDiv(256, tmp2501, 256, tmp2502);

	ClearMemSecret1(256, tmp2501);

	for i1410 = [0: 256]{
 		tmp2503[i1410][0] = tmp2502[(0 + (i1410 * 1))];
	};
	ClearMemSecret1(256, tmp2502);

	int64_al[256][1] tmp2504;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/pooler/norm/moments/SquaredDifference__sub'} *)
	for i1412 = [0: 256]{
 		for i1413 = [0: 1]{
 			tmp2504[i1412][i1413] = (0L - tmp2503[i1412][i1413]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/pooler/norm/moments/SquaredDifference__sub'} *)
	(* J1116 + tmp2504 *)
	int64_al[256][256] tmp2505;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2505[i0][i1] = (tmp2498[i0][i1] + tmp2504[i0][0]);
		};
	};
	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/pooler/norm/moments/SquaredDifference__mul'} *)
	(* J1118 .* J1118 *)
	int64_al[256][256] tmp2506;

	int64_al[65536] tmp2507;

	int64_al[65536] tmp2508;

	int64_al[65536] tmp2509;

	int32_pl tmp2510;

	for i1414 = [0: 256]{
 		for i1415 = [0: 256]{
 			tmp2510 = ((0 + (i1414 * 256)) + (i1415 * 1));
			tmp2507[tmp2510] = tmp2505[i1414][i1415];
			tmp2508[tmp2510] = tmp2505[i1414][i1415];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2507, tmp2508, tmp2509);

	ClearMemSecret1(65536, tmp2507);

	ClearMemSecret1(65536, tmp2508);

	for i1414 = [0: 256]{
 		for i1415 = [0: 256]{
 			tmp2510 = ((0 + (i1414 * 256)) + (i1415 * 1));
			tmp2506[i1414][i1415] = tmp2509[tmp2510];
		};
	};
	ClearMemSecret1(65536, tmp2509);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2505);

	(* {'TFOpName': 'Mean', 'TFNodeName': 'bert/pooler/norm/moments/variance'} *)
	int64_al tmp2512;

	int64_al[256] tmp2513;

	int64_al[256] tmp2514;

	int64_al[256][1] tmp2515;

	for i1416 = [0: 256]{
 		tmp2512 = 0L;
		for i1417 = [0: 256]{
 			tmp2512 = (tmp2512 + tmp2506[i1416][i1417]);
		};
		tmp2513[(0 + (i1416 * 1))] = tmp2512;
	};
	ElemWiseVectorPublicDiv(256, tmp2513, 256, tmp2514);

	ClearMemSecret1(256, tmp2513);

	for i1416 = [0: 256]{
 		tmp2515[i1416][0] = tmp2514[(0 + (i1416 * 1))];
	};
	ClearMemSecret1(256, tmp2514);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2506);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/pooler/norm/batchnorm/add'} *)
	(* J15 + J1120 *)
	int64_al[256][1] tmp2517;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp2517[i0][i1] = (tmp15 + tmp2515[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2515);

	int64_al[256][1] tmp2520;

	(* {'TFOpName': 'Rsqrt', 'TFNodeName': 'bert/pooler/norm/batchnorm/Rsqrt'} *)
	Sqrt2(256, 1, tmp2517, tmp2520, 24, 24, 32, 64, true, 8);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2517);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/pooler/norm/batchnorm/mul'} *)
	(* J1122 .* J49 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 1, tmp2520, 12);

	int64_al[256][256] tmp2522;

	int64_al[65536] tmp2523;

	int64_al[65536] tmp2524;

	int64_al[65536] tmp2525;

	int32_pl tmp2526;

	for i1418 = [0: 256]{
 		for i1419 = [0: 256]{
 			tmp2526 = ((0 + (i1418 * 256)) + (i1419 * 1));
			tmp2523[tmp2526] = tmp2520[i1418][0];
			tmp2524[tmp2526] = tmp49[i1419];
		};
	};
	ElemWiseActModelVectorMult(65536, tmp2523, tmp2524, tmp2525);

	ClearMemSecret1(65536, tmp2523);

	ClearMemSecret1(65536, tmp2524);

	for i1418 = [0: 256]{
 		for i1419 = [0: 256]{
 			tmp2526 = ((0 + (i1418 * 256)) + (i1419 * 1));
			tmp2522[i1418][i1419] = tmp2525[tmp2526];
		};
	};
	ClearMemSecret1(65536, tmp2525);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2520);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp49);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/pooler/norm/batchnorm/mul_1'} *)
	(* J1116 .* J1123 *)
	(* Truncation before ElemWiseMul node. *)
	ScaleDown2(256, 256, tmp2522, 12);

	int64_al[256][256] tmp2529;

	int64_al[65536] tmp2530;

	int64_al[65536] tmp2531;

	int64_al[65536] tmp2532;

	int32_pl tmp2533;

	for i1420 = [0: 256]{
 		for i1421 = [0: 256]{
 			tmp2533 = ((0 + (i1420 * 256)) + (i1421 * 1));
			tmp2530[tmp2533] = tmp2498[i1420][i1421];
			tmp2531[tmp2533] = tmp2522[i1420][i1421];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2530, tmp2531, tmp2532);

	ClearMemSecret1(65536, tmp2530);

	ClearMemSecret1(65536, tmp2531);

	for i1420 = [0: 256]{
 		for i1421 = [0: 256]{
 			tmp2533 = ((0 + (i1420 * 256)) + (i1421 * 1));
			tmp2529[i1420][i1421] = tmp2532[tmp2533];
		};
	};
	ClearMemSecret1(65536, tmp2532);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2498);

	(* {'TFOpName': 'Mul', 'TFNodeName': 'bert/pooler/norm/batchnorm/mul_2'} *)
	(* J1123 .* J1117 *)
	int64_al[256][256] tmp2535;

	int64_al[65536] tmp2536;

	int64_al[65536] tmp2537;

	int64_al[65536] tmp2538;

	int32_pl tmp2539;

	for i1422 = [0: 256]{
 		for i1423 = [0: 256]{
 			tmp2539 = ((0 + (i1422 * 256)) + (i1423 * 1));
			tmp2536[tmp2539] = tmp2522[i1422][i1423];
			tmp2537[tmp2539] = tmp2503[i1422][0];
		};
	};
	ElemWiseSecretSharedVectorMult(65536, tmp2536, tmp2537, tmp2538);

	ClearMemSecret1(65536, tmp2536);

	ClearMemSecret1(65536, tmp2537);

	for i1422 = [0: 256]{
 		for i1423 = [0: 256]{
 			tmp2539 = ((0 + (i1422 * 256)) + (i1423 * 1));
			tmp2535[i1422][i1423] = tmp2538[tmp2539];
		};
	};
	ClearMemSecret1(65536, tmp2538);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2522);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2503);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(256, tmp44, 12);

	int64_al[256][256] tmp2542;

	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/pooler/norm/batchnorm/sub'} *)
	for i1424 = [0: 256]{
 		for i1425 = [0: 256]{
 			tmp2542[i1424][i1425] = (0L - tmp2535[i1424][i1425]);
		};
	};
	(* {'TFOpName': 'Sub', 'TFNodeName': 'bert/pooler/norm/batchnorm/sub'} *)
	(* J44 + tmp2542 *)
	int64_al[256][256] tmp2543;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2543[i0][i1] = (tmp44[i1] + tmp2542[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2535);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(256, tmp44);

	(* {'TFOpName': 'AddV2', 'TFNodeName': 'bert/pooler/norm/batchnorm/add_1'} *)
	(* J1124 + J1126 *)
	int64_al[256][256] tmp2546;

	for i0 = [0: 256]{
 		for i1 = [0: 256]{
 			tmp2546[i0][i1] = (tmp2529[i0][i1] + tmp2543[i0][i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2529);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2543);

	int64_al[256][1] tmp2549;

	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 256, tmp2546, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/pooler/attention_pool/MatMul'} *)
	(* J1127 * J48 *)
	MatMul2D(256, 256, 1, tmp2546, tmp48, tmp2549, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp48);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(1, tmp92, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'bert/pooler/attention_pool/BiasAdd'} *)
	(* J1128 + J92 *)
	int64_al[256][1] tmp2551;

	for i0 = [0: 256]{
 		for i1 = [0: 1]{
 			tmp2551[i0][i1] = (tmp2549[i0][i1] + tmp92[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(1, tmp92);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2549);

	int64_al[1][256] tmp2554;

	int64_pl i1427;

	int64_pl i1426;

	(* {'TFOpName': 'Transpose', 'TFNodeName': 'bert/pooler/transpose'} *)
	(* transpose(J1129, [256, 1] --> [1, 256]) *)
	for i1426 = [0: 256]{
 		for i1427 = [0: 1]{
 			tmp2554[i1427][i1426] = tmp2551[i1426][i1427];
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2551);

	int64_al[1][256] tmp2556;

	(* {'TFOpName': 'Softmax', 'TFNodeName': 'bert/pooler/Softmax'} *)
	Softmax2(1, 256, tmp2554, tmp2556);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(1, 256, tmp2554);

	int64_al[256][1] tmp2560;

	int64_al[256][256] tmp2558;

	int64_pl i1429;

	int64_pl i1428;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/pooler/MatMul'} *)
	(* transpose(J1127, [256, 256] --> [256, 256]) *)
	for i1428 = [0: 256]{
 		for i1429 = [0: 256]{
 			tmp2558[i1429][i1428] = tmp2546[i1428][i1429];
		};
	};
	int64_al[256][1] tmp2559;

	int64_pl i1431;

	int64_pl i1430;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/pooler/MatMul'} *)
	(* transpose(J1131, [1, 256] --> [256, 1]) *)
	for i1430 = [0: 1]{
 		for i1431 = [0: 256]{
 			tmp2559[i1431][i1430] = tmp2556[i1430][i1431];
		};
	};
	(* Truncation before MatMul2D node. *)
	ScaleDown2(256, 1, tmp2559, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'bert/pooler/MatMul'} *)
	(* tmp2558 * tmp2559 *)
	MatMul2D(256, 256, 1, tmp2558, tmp2559, tmp2560, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 256, tmp2546);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(1, 256, tmp2556);

	int64_al[1][100] tmp2564;

	int64_al[1][256] tmp2563;

	int64_pl i1433;

	int64_pl i1432;

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'cls/fc/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* transpose(J1132, [256, 1] --> [1, 256]) *)
	for i1432 = [0: 256]{
 		for i1433 = [0: 1]{
 			tmp2563[i1433][i1432] = tmp2560[i1432][i1433];
		};
	};
	(* Truncation before MatMul2D node. *)
	ScaleDown2(1, 256, tmp2563, 12);

	(* {'TFOpName': 'MatMul', 'TFNodeName': 'cls/fc/ArithmeticOptimizer/FoldTransposeIntoMatMul_MatMul'} *)
	(* tmp2563 * J1 *)
	MatMul2D(1, 256, 100, tmp2563, tmp1, tmp2564, false);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 100, tmp1);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(256, 1, tmp2560);

	(* Scale up of args needed was found while doing OptimizeTruncations. *)
	ScaleUp1(100, tmp102, 12);

	(* {'TFOpName': 'BiasAdd', 'TFNodeName': 'cls/fc/BiasAdd'} *)
	(* J1133 + J102 *)
	int64_al[1][100] tmp2567;

	for i0 = [0: 1]{
 		for i1 = [0: 100]{
 			tmp2567[i0][i1] = (tmp2564[i0][i1] + tmp102[i1]);
		};
	};
	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret2(1, 100, tmp2564);

	(* {'TFOpName': 'No-op: ClearMem', 'TFNodeName': ''} *)
	ClearMemSecret1(100, tmp102);

	ScaleDown2(1, 100, tmp2567, 12);

	EndComputation();

	output(CLIENT, tmp2567);

}
